import PopperJS from 'popper.js';
import React from 'react';
import { useDeepCompareEffect } from 'use-deep-compare';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function useCallbackRef() {
  const _React$useState = React.useState(null),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        node = _React$useState2[0],
        setNode = _React$useState2[1];

  const ref = React.useCallback(node => {
    if (node !== null) {
      setNode(node);
    }
  }, []);
  return [node, ref];
}

const popperStyles = {
  position: 'absolute',
  top: '0',
  left: '0',
  opacity: '0',
  pointerEvents: 'none'
};

function usePopperState(placement) {
  const _React$useState = React.useState(popperStyles),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        currentPopperStyles = _React$useState2[0],
        setPopperStyles = _React$useState2[1];

  const _React$useState3 = React.useState({}),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        currentArrowStyles = _React$useState4[0],
        setArrowStyles = _React$useState4[1];

  const _React$useState5 = React.useState(placement),
        _React$useState6 = _slicedToArray(_React$useState5, 2),
        currentPlacement = _React$useState6[0],
        setPlacement = _React$useState6[1];

  const setState = React.useCallback(data => {
    const styles = data.styles,
          arrowStyles = data.arrowStyles,
          p = data.placement;
    setPopperStyles(styles);
    setArrowStyles(arrowStyles);
    setPlacement(p);
    return data;
  }, []);
  const state = {
    placement: currentPlacement,
    popperStyles: currentPopperStyles,
    arrowStyles: currentArrowStyles
  };
  return [state, setState];
}

function usePopper(_ref) {
  let _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      _ref$positionFixed = _ref.positionFixed,
      positionFixed = _ref$positionFixed === void 0 ? false : _ref$positionFixed,
      _ref$eventsEnabled = _ref.eventsEnabled,
      eventsEnabled = _ref$eventsEnabled === void 0 ? true : _ref$eventsEnabled,
      _ref$modifiers = _ref.modifiers,
      modifiers = _ref$modifiers === void 0 ? {} : _ref$modifiers;
  const popperInstance = React.useRef(null);

  const _usePopperState = usePopperState(placement),
        _usePopperState2 = _slicedToArray(_usePopperState, 2),
        popperStyles = _usePopperState2[0],
        updatePopperState = _usePopperState2[1];

  const _useCallbackRef = useCallbackRef(),
        _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
        referenceNode = _useCallbackRef2[0],
        referenceRef = _useCallbackRef2[1];

  const _useCallbackRef3 = useCallbackRef(),
        _useCallbackRef4 = _slicedToArray(_useCallbackRef3, 2),
        popperNode = _useCallbackRef4[0],
        popperRef = _useCallbackRef4[1];

  const _useCallbackRef5 = useCallbackRef(),
        _useCallbackRef6 = _slicedToArray(_useCallbackRef5, 2),
        arrowNode = _useCallbackRef6[0],
        arrowRef = _useCallbackRef6[1];

  useDeepCompareEffect(() => {
    if (popperInstance.current !== null) {
      popperInstance.current.destroy();
    }

    if (referenceNode === null || popperNode === null) return; // @ts-ignore

    popperInstance.current = new PopperJS(referenceNode, popperNode, {
      placement,
      positionFixed,
      modifiers: _objectSpread({}, modifiers, {
        arrow: _objectSpread({}, modifiers && modifiers.arrow, {
          enabled: Boolean(arrowNode),
          element: arrowNode
        }),
        applyStyle: {
          enabled: false
        },
        updateStateModifier: {
          enabled: true,
          order: 900,
          fn: updatePopperState
        }
      })
    });
    return () => {
      if (popperInstance.current !== null) {
        popperInstance.current.destroy();
      }
    };
  }, [popperInstance, arrowNode, referenceNode, popperNode, placement, positionFixed, modifiers]);
  React.useEffect(() => {
    if (popperInstance.current === null) return;

    if (eventsEnabled) {
      popperInstance.current.enableEventListeners();
    } else {
      popperInstance.current.disableEventListeners();
    }
  }, [popperInstance, eventsEnabled]);
  React.useEffect(() => {
    if (popperInstance.current !== null) {
      popperInstance.current.scheduleUpdate();
    }
  }, [popperInstance]);
  return {
    popperInstance: popperInstance.current,
    reference: {
      ref: referenceRef
    },

    /**
     * @deprecated Due to typo. Use `reference` instead.
     */
    referrence: {
      ref: referenceRef
    },
    popper: {
      ref: popperRef,
      styles: popperStyles.popperStyles,
      placement: popperStyles.placement
    },
    arrow: {
      ref: arrowRef,
      styles: popperStyles.arrowStyles
    }
  };
}

export default usePopper;
