import PopperJS from 'popper.js';
import React from 'react';
import { useDeepCompareEffect } from 'use-deep-compare';
import useCallbackRef from "./useCallbackRef.js";
import usePopperState from "./usePopperState.js";

function usePopper({
  placement = 'bottom',
  positionFixed = false,
  eventsEnabled = true,
  modifiers = {}
}) {
  const popperInstance = React.useRef(null);
  const [popperStyles, updatePopperState] = usePopperState(placement);
  const [referenceNode, referenceRef] = useCallbackRef();
  const [popperNode, popperRef] = useCallbackRef();
  const [arrowNode, arrowRef] = useCallbackRef();
  useDeepCompareEffect(() => {
    if (popperInstance.current !== null) {
      popperInstance.current.destroy();
    }

    if (referenceNode === null || popperNode === null) return; // @ts-ignore

    popperInstance.current = new PopperJS(referenceNode, popperNode, {
      placement,
      positionFixed,
      modifiers: { ...modifiers,
        arrow: { ...(modifiers && modifiers.arrow),
          enabled: Boolean(arrowNode),
          element: arrowNode
        },
        applyStyle: {
          enabled: false
        },
        updateStateModifier: {
          enabled: true,
          order: 900,
          fn: updatePopperState
        }
      }
    });
    return () => {
      if (popperInstance.current !== null) {
        popperInstance.current.destroy();
      }
    };
  }, [popperInstance, arrowNode, referenceNode, popperNode, placement, positionFixed, modifiers]);
  React.useEffect(() => {
    if (popperInstance.current === null) return;

    if (eventsEnabled) {
      popperInstance.current.enableEventListeners();
    } else {
      popperInstance.current.disableEventListeners();
    }
  }, [popperInstance, eventsEnabled]);
  React.useEffect(() => {
    if (popperInstance.current !== null) {
      popperInstance.current.scheduleUpdate();
    }
  }, [popperInstance]);
  return {
    popperInstance: popperInstance.current,
    reference: {
      ref: referenceRef
    },

    /**
     * @deprecated Due to typo. Use `reference` instead.
     */
    referrence: {
      ref: referenceRef
    },
    popper: {
      ref: popperRef,
      styles: popperStyles.popperStyles,
      placement: popperStyles.placement
    },
    arrow: {
      ref: arrowRef,
      styles: popperStyles.arrowStyles
    }
  };
}

export default usePopper;