import type { TReferenceObject, TExpandedReference, TBuilder, TPaginatedQueryResult, TPaginatedQueryResultOptions, TGraphqlPaginatedQueryResult, TGraphqlPaginatedQueryResultOptions, TBuildFieldMeta, TTransformType, TTransformBuildName } from './types';
declare const isFunction: <Fn>(value: unknown) => value is Fn;
declare const isString: (value: unknown) => value is string;
declare const isObject: (value: unknown) => value is object;
declare const isBuilderFunction: (value: unknown) => value is TTransformBuildName;
declare const upperFirst: (value: string) => string;
declare const lowerFirst: (value: string) => string;
declare const omitMany: <T, K extends keyof T = keyof T>(entity: T, ...props: K[]) => Omit<T, K>;
declare const pickMany: <T, K extends keyof T = keyof T>(entity: T, ...props: K[]) => Pick<T, K>;
declare const convertBuiltNameToTransformName: (buildName: TTransformBuildName) => TTransformType;
declare const convertTransformNameToBuildName: (transformName: TTransformType) => TTransformBuildName;
declare const toExpandedReference: (typeId?: string) => (data?: TReferenceObject) => TExpandedReference | null;
declare const toRestPaginatedQueryResult: <Model>(list: Model[], { total, offset }?: TPaginatedQueryResultOptions) => TPaginatedQueryResult<Model>;
declare const toGraphqlPaginatedQueryResult: <Model>(list: Model[], { name, __typename, ...remainingOptions }: TGraphqlPaginatedQueryResultOptions) => TGraphqlPaginatedQueryResult<Model>;
declare const buildField: <Model>(builder: Model | TBuilder<Model>, transformName?: TTransformType, meta?: TBuildFieldMeta<Model> | undefined) => Model;
declare const buildFields: <Model>(builders: (Model | TBuilder<Model>)[], transformName?: TTransformType, meta?: TBuildFieldMeta<Model> | undefined) => Model[];
declare const buildGraphqlList: <Model>(builders: TBuilder<Model>[], { name, total, offset, __typename }: TGraphqlPaginatedQueryResultOptions) => TGraphqlPaginatedQueryResult<Model>;
declare const buildRestList: <Model>(builders: TBuilder<Model>[], { total, offset }: TPaginatedQueryResultOptions) => TPaginatedQueryResult<Model>;
export { isFunction, isString, isObject, isBuilderFunction, upperFirst, lowerFirst, omitMany, pickMany, convertBuiltNameToTransformName, convertTransformNameToBuildName, toExpandedReference, toRestPaginatedQueryResult, toGraphqlPaginatedQueryResult, buildField, buildFields, buildGraphqlList, buildRestList, };
