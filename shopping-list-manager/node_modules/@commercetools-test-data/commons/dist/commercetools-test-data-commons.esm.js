import { Generator, fake, oneOf, Transformer, Builder, buildField } from '@commercetools-test-data/core';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import omit from 'lodash/omit';
import { faker } from '@faker-js/faker';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _Object$entries from '@babel/runtime-corejs3/core-js-stable/object/entries';

var generator$4 = Generator({
  fields: {
    id: fake(function (f) {
      return f.random.alphaNumeric(8);
    }),
    key: fake(function (f) {
      return f.lorem.slug(2);
    }),
    title: fake(function (f) {
      return f.name.jobTitle();
    }),
    salutation: oneOf('Dear', 'To Whom it May Concern', 'Members of the Committee'),
    firstName: fake(function (f) {
      return f.name.firstName();
    }),
    lastName: fake(function (f) {
      return f.name.lastName();
    }),
    streetName: fake(function (f) {
      return f.address.street();
    }),
    streetNumber: fake(function (f) {
      return String(f.datatype.number());
    }),
    additionalStreetInfo: fake(function (f) {
      return f.address.street();
    }),
    postalCode: fake(function (f) {
      return f.address.zipCode();
    }),
    city: fake(function (f) {
      return f.address.city();
    }),
    region: null,
    state: fake(function (f) {
      return f.address.state();
    }),
    country: 'DE',
    company: fake(function (f) {
      return f.company.name();
    }),
    department: fake(function (f) {
      return f.commerce.department();
    }),
    building: null,
    apartment: null,
    pOBox: 'PO Box 1033',
    phone: fake(function (f) {
      return f.phone.number();
    }),
    mobile: fake(function (f) {
      return f.phone.number();
    }),
    fax: fake(function (f) {
      return f.phone.number();
    }),
    email: fake(function (f) {
      return f.internet.email();
    }),
    additionalAddressInfo: null,
    externalId: null,
    custom: null
  }
});

var transformers$4 = {
  default: Transformer('default', {}),
  rest: Transformer('rest', {}),
  graphql: Transformer('graphql', {
    addFields: function addFields() {
      return {
        __typename: 'Address'
      };
    }
  })
};

var Model$3 = function Model() {
  return Builder({
    generator: generator$4,
    transformers: transformers$4
  });
};

var presets$3 = {};

var index$5 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$3,
  presets: presets$3
});

// https://docs.commercetools.com/api/types#addressdraft
var generator$3 = Generator({
  fields: {
    id: null,
    key: fake(function (f) {
      return f.lorem.slug(2);
    }),
    title: fake(function (f) {
      return f.name.jobTitle();
    }),
    salutation: oneOf('Dear', 'To Whom it May Concern', 'Members of the Committee'),
    firstName: fake(function (f) {
      return f.name.firstName();
    }),
    lastName: fake(function (f) {
      return f.name.lastName();
    }),
    streetName: fake(function (f) {
      return f.address.street();
    }),
    streetNumber: fake(function (f) {
      return String(f.datatype.number());
    }),
    additionalStreetInfo: fake(function (f) {
      return f.address.street();
    }),
    postalCode: fake(function (f) {
      return f.address.zipCode();
    }),
    city: fake(function (f) {
      return f.address.city();
    }),
    region: null,
    state: fake(function (f) {
      return f.address.state();
    }),
    country: 'DE',
    company: fake(function (f) {
      return f.company.name();
    }),
    department: fake(function (f) {
      return f.commerce.department();
    }),
    building: null,
    apartment: null,
    pOBox: 'PO Box 1033',
    phone: fake(function (f) {
      return f.phone.number();
    }),
    mobile: fake(function (f) {
      return f.phone.number();
    }),
    fax: fake(function (f) {
      return f.phone.number();
    }),
    email: fake(function (f) {
      return f.internet.email();
    }),
    additionalAddressInfo: null,
    externalId: null,
    custom: null
  }
});

var transformers$3 = {
  default: Transformer('default', {}),
  rest: Transformer('rest', {}),
  graphql: Transformer('graphql', {
    addFields: function addFields() {
      return {
        __typename: 'AddressDraft'
      };
    }
  })
};

var AddressDraft = function AddressDraft() {
  return Builder({
    generator: generator$3,
    transformers: transformers$3
  });
};

var empty$1 = function empty() {
  return AddressDraft().id(undefined).key(undefined).title(undefined).salutation(undefined).firstName(undefined).lastName(undefined).streetName(undefined).streetNumber(undefined).additionalStreetInfo(undefined).postalCode(undefined).city(undefined).state(undefined).region(undefined).company(undefined).department(undefined).building(undefined).apartment(undefined).pOBox(undefined).phone(undefined).mobile(undefined).fax(undefined).email(undefined).additionalAddressInfo(undefined).externalId(undefined).custom(undefined);
};

var presets$2 = {
  empty: empty$1
};

var index$4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: AddressDraft,
  presets: presets$2
});

// https://docs.commercetools.com/api/types#referencetype
var generator$2 = Generator({
  fields: {
    id: fake(function (f) {
      return f.datatype.uuid();
    }),
    typeId: null,
    key: null
  }
});

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
var transformers$2 = {
  default: Transformer('default', {}),
  rest: Transformer('rest', {
    replaceFields: function replaceFields(_ref) {
      var fields = _ref.fields;
      return _objectSpread(_objectSpread({}, fields), {}, {
        obj: omit(fields, ['typeId'])
      });
    }
  }),
  // we do not add the expanded object ourselves
  // since some fields are pure `*Ref`, e.g `channelsRef`
  // with no option to expand.
  graphql: Transformer('graphql', {
    addFields: function addFields() {
      return {
        __typename: 'Reference'
      };
    }
  })
};

var Model$2 = function Model() {
  return Builder({
    generator: generator$2,
    transformers: transformers$2
  });
};

var category = function category() {
  return Model$2().typeId('category');
};

var presets$1 = {
  category: category
};

var index$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$2,
  presets: presets$1
});

// https://docs.commercetools.com/api/types#client-logging
var generator$1 = Generator({
  fields: {
    externalUserId: fake(function (f) {
      return f.datatype.uuid();
    }),
    anonymousId: fake(function (f) {
      return f.datatype.uuid();
    }),
    clientId: fake(function (f) {
      return f.datatype.uuid();
    }),
    customer: fake(function () {
      return Model$2().typeId('customer');
    })
  }
});

var transformers$1 = {
  default: Transformer('default', {
    buildFields: ['customer']
  }),
  rest: Transformer('rest', {
    buildFields: ['customer']
  }),
  graphql: Transformer('graphql', {
    replaceFields: function replaceFields(_ref) {
      var fields = _ref.fields;
      var customerRef = buildField(fields.customer, 'graphql');
      var userRef = Model$2().typeId('user').buildGraphql();
      return {
        __typename: 'Initiator',
        isPlatformClient: faker.datatype.boolean(),
        externalUserId: fields.externalUserId,
        anonymousId: fields.anonymousId,
        clientId: fields.clientId,
        customerRef: customerRef,
        userRef: userRef
      };
    }
  })
};

var Model$1 = function Model() {
  return Builder({
    generator: generator$1,
    transformers: transformers$1
  });
};

var index$2 = {};

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$1,
  presets: index$2
});

// https://docs.commercetools.com/api/types#localizedstring
var generator = Generator({
  fields: {
    de: fake(function (f) {
      return f.lorem.words(5);
    }),
    en: fake(function (f) {
      return f.lorem.words(3);
    }),
    fr: fake(function (f) {
      return f.lorem.words(4);
    })
  }
});

var isNil = function isNil(value) {
  return value === undefined || value === null;
};
var transformers = {
  default: Transformer('default', {}),
  rest: Transformer('rest', {}),
  graphql: Transformer('graphql', {
    replaceFields: function replaceFields(_ref) {
      var _context, _context2;
      var fields = _ref.fields;
      return _mapInstanceProperty(_context = _filterInstanceProperty(_context2 = _Object$entries(fields)).call(_context2, function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
          value = _ref3[1];
        return !isNil(value);
      })).call(_context, function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 2),
          locale = _ref5[0],
          value = _ref5[1];
        return {
          locale: locale,
          value: value,
          __typename: 'LocalizedString'
        };
      });
    }
  })
};

var Model = function Model() {
  return Builder({
    generator: generator,
    transformers: transformers
  });
};

var empty = function empty() {
  return Model().en(undefined).de(undefined).fr(undefined);
};

var ofSlugs = function ofSlugs() {
  return Model().en(faker.lorem.slug()).de(faker.lorem.slug()).fr(faker.lorem.slug());
};

var presets = {
  empty: empty,
  ofSlugs: ofSlugs
};

var toLocalizedField = function toLocalizedField(value) {
  if (!value) {
    return null;
  }
  var localizedField = buildField(value, 'graphql');
  return localizedField;
};

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model,
  presets: presets,
  toLocalizedField: toLocalizedField
});

export { index$5 as Address, index$4 as AddressDraft, index$1 as ClientLogging, index as LocalizedString, index$3 as Reference };
