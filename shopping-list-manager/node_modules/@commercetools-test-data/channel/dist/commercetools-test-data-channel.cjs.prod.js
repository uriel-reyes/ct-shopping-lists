'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@commercetools-test-data/core');
var commons = require('@commercetools-test-data/commons');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var utils = require('@commercetools-test-data/utils');

var roles = {
  InventorySupply: 'InventorySupply',
  ProductDistribution: 'ProductDistribution',
  OrderExport: 'OrderExport',
  OrderImport: 'OrderImport',
  Primary: 'Primary'
};

var constants = /*#__PURE__*/Object.freeze({
  __proto__: null,
  roles: roles
});

// https://docs.commercetools.com/api/projects/channels#channeldraft
var generator$1 = core.Generator({
  fields: {
    key: core.fake(function (f) {
      return f.lorem.slug(2);
    }),
    roles: [roles.Primary],
    name: core.fake(function () {
      return commons.LocalizedString.random();
    }),
    description: core.fake(function () {
      return commons.LocalizedString.random();
    }),
    address: core.fake(function () {
      return commons.Address.random();
    }),
    custom: null,
    geoLocation: null
  }
});

var transformers$1 = {
  default: core.Transformer('default', {
    buildFields: ['name', 'description', 'address']
  }),
  rest: core.Transformer('rest', {
    buildFields: ['name', 'description', 'address']
  }),
  graphql: core.Transformer('graphql', {
    buildFields: ['name', 'description', 'address'],
    addFields: function addFields() {
      return {
        __typename: 'ChannelDraft'
      };
    }
  })
};

var ChannelDraft = function ChannelDraft() {
  return core.Builder({
    generator: generator$1,
    transformers: transformers$1
  });
};

var hub = function hub() {
  return ChannelDraft().key('hub').description(commons.LocalizedString.presets.empty()['en-US']('Hub')).name(commons.LocalizedString.presets.empty()['en-US']('Hub')).roles([roles.ProductDistribution, roles.InventorySupply]);
};

var storeOther = function storeOther() {
  return ChannelDraft().key('store_other').description(commons.LocalizedString.presets.empty()['en-US']('Store Other')).name(commons.LocalizedString.presets.empty()['en-US']('Store Other')).roles([roles.ProductDistribution]);
};

var storeUsa = function storeUsa() {
  return ChannelDraft().key('store_usa').description(commons.LocalizedString.presets.empty()['en-US']('USA Store')).name(commons.LocalizedString.presets.empty()['en-US']('USA Store')).roles([roles.ProductDistribution]);
};

var presets$2 = {
  storeUsa: storeUsa,
  storeOther: storeOther,
  hub: hub
};

var withInventorySupplyAndProductDistributionRoles = function withInventorySupplyAndProductDistributionRoles() {
  return ChannelDraft().roles([roles.InventorySupply, roles.ProductDistribution]);
};

var withInventorySupplyAndProductDistributionRolesNoAddress = function withInventorySupplyAndProductDistributionRolesNoAddress() {
  return ChannelDraft().address(undefined).roles([roles.InventorySupply, roles.ProductDistribution]);
};

var withInventorySupplyRole = function withInventorySupplyRole() {
  return ChannelDraft().roles([roles.InventorySupply]);
};

var withInventorySupplyRoleNoAddress = function withInventorySupplyRoleNoAddress() {
  return ChannelDraft().address(undefined).roles([roles.InventorySupply]);
};

var withProductDistributionRole = function withProductDistributionRole() {
  return ChannelDraft().roles([roles.ProductDistribution]);
};

var presets$1 = {
  sampleDataFashion: presets$2,
  withProductDistributionRole: withProductDistributionRole,
  withInventorySupplyRole: withInventorySupplyRole,
  withInventorySupplyRoleNoAddress: withInventorySupplyRoleNoAddress,
  withInventorySupplyAndProductDistributionRoles: withInventorySupplyAndProductDistributionRoles,
  withInventorySupplyAndProductDistributionRolesNoAddress: withInventorySupplyAndProductDistributionRolesNoAddress
};

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  constants: constants,
  random: ChannelDraft,
  presets: presets$1
});

var _createRelatedDates = utils.createRelatedDates(),
  _createRelatedDates2 = _slicedToArray(_createRelatedDates, 2),
  getOlderDate = _createRelatedDates2[0],
  getNewerDate = _createRelatedDates2[1];

// https://docs.commercetools.com/api/projects/channels#channel
var generator = core.Generator({
  fields: {
    id: core.fake(function (f) {
      return f.datatype.uuid();
    }),
    key: core.fake(function (f) {
      return f.lorem.slug(2);
    }),
    version: core.sequence(),
    createdAt: core.fake(getOlderDate),
    lastModifiedAt: core.fake(getNewerDate),
    createdBy: core.fake(function () {
      return commons.ClientLogging.random();
    }),
    lastModifiedBy: core.fake(function () {
      return commons.ClientLogging.random();
    }),
    roles: [roles.Primary],
    name: null,
    description: null,
    address: core.fake(function () {
      return commons.Address.random();
    }),
    reviewRatingStatistics: null,
    custom: null,
    geoLocation: null
  }
});

var transformers = {
  default: core.Transformer('default', {
    buildFields: ['createdBy', 'lastModifiedBy', 'name', 'description', 'address']
  }),
  rest: core.Transformer('rest', {
    buildFields: ['createdBy', 'lastModifiedBy', 'name', 'description', 'address']
  }),
  graphql: core.Transformer('graphql', {
    buildFields: ['address', 'createdBy', 'lastModifiedBy'],
    addFields: function addFields(_ref) {
      var fields = _ref.fields;
      var nameAllLocales = commons.LocalizedString.toLocalizedField(fields.name);
      var descriptionAllLocales = commons.LocalizedString.toLocalizedField(fields.description);
      return {
        __typename: 'Channel',
        nameAllLocales: nameAllLocales,
        descriptionAllLocales: descriptionAllLocales
      };
    }
  })
};

var Model = function Model() {
  return core.Builder({
    generator: generator,
    transformers: transformers
  });
};

var clothesStore = function clothesStore() {
  return Model().name(commons.LocalizedString.presets.empty().en('Clothes Store')).key('clothes-store-key');
};

var foodStore = function foodStore() {
  return Model().name(commons.LocalizedString.presets.empty().en('Food Store').de('Lebensmittelgesch√§ft')).key('food-store-key');
};

var presets = {
  foodStore: foodStore,
  clothesStore: clothesStore
};

exports.ChannelDraft = index;
exports.constants = constants;
exports.draftPresets = presets$1;
exports.presets = presets;
exports.random = Model;
