import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _styled from '@emotion/styled/base';
import _pt from 'prop-types';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import { useRef, useCallback, useEffect, Children, isValidElement, cloneElement, forwardRef } from 'react';
import { css } from '@emotion/react';
import AccessibleButton from '@commercetools-uikit/accessible-button';
import { designTokens } from '@commercetools-uikit/design-system';
import Text from '@commercetools-uikit/text';
import { warning } from '@commercetools-uikit/utils';
import { CaretUpIcon, CaretDownIcon } from '@commercetools-uikit/icons';
import { useToggleState } from '@commercetools-uikit/hooks';
import { jsxs, jsx } from '@emotion/react/jsx-runtime';

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const getButtonStyles = isDisabled => {
  const baseButtonStyles = /*#__PURE__*/css("display:flex;align-items:center;height:", designTokens.bigButtonHeight, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:baseButtonStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  if (isDisabled) {
    return [baseButtonStyles, /*#__PURE__*/css("box-shadow:none;background-color:", designTokens.backgroundColorForPrimaryActionDropdownWhenDisabled, ";border:", "1px solid ".concat(designTokens.colorNeutral), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getButtonStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")];
  }
  return [baseButtonStyles, /*#__PURE__*/css("background-color:", designTokens.colorSurface, ";box-shadow:", designTokens.shadowForPrimaryActionDropdown, ";border:", "1px solid ".concat(designTokens.colorNeutral), ";&:hover{box-shadow:", designTokens.shadowForPrimaryActionDropdownWhenHovered, ";background-color:", designTokens.colorNeutral95, ";}&:active{box-shadow:", designTokens.shadowForPrimaryActionDropdownWhenActive, ";background-color:", designTokens.backgroundColorForPrimaryActionDropdownWhenActive, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:getButtonStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")];
};
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "s5xdrg",
  styles: "display:flex;align-items:center"
} : {
  name: "2jmmma-DropdownHead",
  styles: "display:flex;align-items:center;label:DropdownHead;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const DropdownHead = props => jsxs("div", {
  css: _ref2,
  children: [jsxs(AccessibleButton, {
    label: props.children,
    onClick: props.onClick,
    isDisabled: props.isDisabled,
    css: [...getButtonStyles(props.isDisabled), /*#__PURE__*/css("padding:", designTokens.paddingForPrimaryActionDropdown, ";border-radius:", designTokens.borderRadiusForPrimaryActionDropdown, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:DropdownHead;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"],
    children: [jsx("span", {
      css: /*#__PURE__*/css("margin-right:", designTokens.marginRightForPrimaryActionDropdown, ";display:flex;align-items:center;justify-content:center;" + (process.env.NODE_ENV === "production" ? "" : ";label:DropdownHead;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
      children: /*#__PURE__*/cloneElement(props.iconLeft, {
        size: 'big',
        color: props.isDisabled ? 'neutral60' : 'solid'
      })
    }), jsx("span", {
      css: /*#__PURE__*/css("margin:0 ", designTokens.spacing10, " 0 0;display:flex;align-items:center;justify-content:center;" + (process.env.NODE_ENV === "production" ? "" : ";label:DropdownHead;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
      children: jsx(Text.Detail, {
        tone: props.isDisabled ? 'secondary' : undefined,
        children: props.children
      })
    })]
  }), props.chevron]
});
DropdownHead.propTypes = process.env.NODE_ENV !== "production" ? {
  iconLeft: _pt.element.isRequired,
  onClick: _pt.func,
  children: _pt.string.isRequired,
  isDisabled: _pt.bool.isRequired,
  chevron: _pt.element.isRequired
} : {};
DropdownHead.displayName = 'DropdownHead';
var _ref = process.env.NODE_ENV === "production" ? {
  name: "1jklb6q",
  styles: "pointer-events:none;margin-top:3px"
} : {
  name: "1kcvcmv-DropdownChevron",
  styles: "pointer-events:none;margin-top:3px;label:DropdownChevron;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const DropdownChevron = /*#__PURE__*/forwardRef((props, ref) => jsx(AccessibleButton, {
  ref: ref,
  label: "Open Dropdown",
  onClick: props.onClick,
  isDisabled: props.isDisabled,
  css: [...getButtonStyles(props.isDisabled), /*#__PURE__*/css("padding:", designTokens.paddingForPrimaryActionDropdownIcon, ";border-radius:", designTokens.borderRadiusForPrimaryActionDropdownIcon, ";border-color:", designTokens.colorNeutral, ";border-width:", designTokens.borderForPrimaryActionDropdownIcon, ";border-style:solid;" + (process.env.NODE_ENV === "production" ? "" : ";label:DropdownChevron;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"],
  children: jsx("div", {
    // The margin-top is to center the icon as the caret visually looks too high otherwise
    css: _ref,
    children: /*#__PURE__*/cloneElement(props.isOpen && !props.isDisabled ? jsx(CaretUpIcon, {}) : jsx(CaretDownIcon, {}), {
      color: 'neutral60',
      size: 'small'
    })
  })
}));
DropdownChevron.displayName = 'DropdownChevron';
const Options = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "eb24b7r0"
} : {
  target: "eb24b7r0",
  label: "Options"
})("position:absolute;z-index:5;width:100%;top:calc(", designTokens.spacing20, " + ", designTokens.bigButtonHeight, ");border:1px solid ", designTokens.borderColorForPrimaryActionDropdownMenu, ";border-radius:", designTokens.borderRadiusForPrimaryActionDropdownMenu, ";box-shadow:", designTokens.shadowForPrimaryActionDropdownMenu, ";margin-top:", designTokens.marginTopForPrimaryActionDropdown, ";>button{padding-left:", designTokens.spacing30, ";white-space:normal;&:active{background-color:", designTokens.colorInfo95, ";}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByaW1hcnktYWN0aW9uLWRyb3Bkb3duLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2SzBCIiwiZmlsZSI6InByaW1hcnktYWN0aW9uLWRyb3Bkb3duLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNsb25lRWxlbWVudCxcbiAgZm9yd2FyZFJlZixcbiAgdXNlUmVmLFxuICB1c2VDYWxsYmFjayxcbiAgdXNlRWZmZWN0LFxuICBDaGlsZHJlbixcbiAgUmVhY3RFbGVtZW50LFxuICBpc1ZhbGlkRWxlbWVudCxcbiAgTW91c2VFdmVudCxcbiAgS2V5Ym9hcmRFdmVudCxcbiAgRm9yd2FyZGVkUmVmLFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9hY2Nlc3NpYmxlLWJ1dHRvbic7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IHsgd2FybmluZyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3V0aWxzJztcbmltcG9ydCB7IENhcmV0VXBJY29uLCBDYXJldERvd25JY29uIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvaWNvbnMnO1xuaW1wb3J0IHsgdXNlVG9nZ2xlU3RhdGUgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9ob29rcyc7XG5cbmNvbnN0IGdldEJ1dHRvblN0eWxlcyA9IChpc0Rpc2FibGVkOiBib29sZWFuKSA9PiB7XG4gIGNvbnN0IGJhc2VCdXR0b25TdHlsZXMgPSBjc3NgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGhlaWdodDogJHtkZXNpZ25Ub2tlbnMuYmlnQnV0dG9uSGVpZ2h0fTtcbiAgYDtcbiAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICByZXR1cm4gW1xuICAgICAgYmFzZUJ1dHRvblN0eWxlcyxcbiAgICAgIGNzc2BcbiAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3duV2hlbkRpc2FibGVkfTtcbiAgICAgICAgYm9yZGVyOiAke2AxcHggc29saWQgJHtkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsfWB9O1xuICAgICAgYCxcbiAgICBdO1xuICB9XG4gIHJldHVybiBbXG4gICAgYmFzZUJ1dHRvblN0eWxlcyxcbiAgICBjc3NgXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgICAgYm94LXNoYWRvdzogJHtkZXNpZ25Ub2tlbnMuc2hhZG93Rm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3dufTtcbiAgICAgIGJvcmRlcjogJHtgMXB4IHNvbGlkICR7ZGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbH1gfTtcbiAgICAgICY6aG92ZXIge1xuICAgICAgICBib3gtc2hhZG93OiAke2Rlc2lnblRva2Vucy5zaGFkb3dGb3JQcmltYXJ5QWN0aW9uRHJvcGRvd25XaGVuSG92ZXJlZH07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7ZGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbDk1fTtcbiAgICAgIH1cbiAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgYm94LXNoYWRvdzogJHtkZXNpZ25Ub2tlbnMuc2hhZG93Rm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3duV2hlbkFjdGl2ZX07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7ZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvclByaW1hcnlBY3Rpb25Ecm9wZG93bldoZW5BY3RpdmV9O1xuICAgICAgfVxuICAgIGAsXG4gIF07XG59O1xuXG50eXBlIFREcm9wZG93bkhlYWQgPSB7XG4gIGljb25MZWZ0OiBSZWFjdEVsZW1lbnQ7XG4gIG9uQ2xpY2s/OiAoXG4gICAgZXZlbnQ6IE1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+IHwgS2V5Ym9hcmRFdmVudDxIVE1MQnV0dG9uRWxlbWVudD5cbiAgKSA9PiB2b2lkO1xuICBjaGlsZHJlbjogc3RyaW5nO1xuICBpc0Rpc2FibGVkOiBib29sZWFuO1xuICBjaGV2cm9uOiBSZWFjdEVsZW1lbnQ7XG59O1xuXG5jb25zdCBEcm9wZG93bkhlYWQgPSAocHJvcHM6IFREcm9wZG93bkhlYWQpID0+IChcbiAgPGRpdlxuICAgIGNzcz17Y3NzYFxuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYH1cbiAgPlxuICAgIDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICBsYWJlbD17cHJvcHMuY2hpbGRyZW59XG4gICAgICBvbkNsaWNrPXtwcm9wcy5vbkNsaWNrfVxuICAgICAgaXNEaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgIGNzcz17W1xuICAgICAgICAuLi5nZXRCdXR0b25TdHlsZXMocHJvcHMuaXNEaXNhYmxlZCksXG4gICAgICAgIGNzc2BcbiAgICAgICAgICBwYWRkaW5nOiAke2Rlc2lnblRva2Vucy5wYWRkaW5nRm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3dufTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JQcmltYXJ5QWN0aW9uRHJvcGRvd259O1xuICAgICAgICBgLFxuICAgICAgXX1cbiAgICA+XG4gICAgICA8c3BhblxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6ICR7ZGVzaWduVG9rZW5zLm1hcmdpblJpZ2h0Rm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3dufTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGB9XG4gICAgICA+XG4gICAgICAgIHtjbG9uZUVsZW1lbnQocHJvcHMuaWNvbkxlZnQsIHtcbiAgICAgICAgICBzaXplOiAnYmlnJyxcbiAgICAgICAgICBjb2xvcjogcHJvcHMuaXNEaXNhYmxlZCA/ICduZXV0cmFsNjAnIDogJ3NvbGlkJyxcbiAgICAgICAgfSl9XG4gICAgICA8L3NwYW4+XG4gICAgICA8c3BhblxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICBtYXJnaW46IDAgJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAwIDA7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8VGV4dC5EZXRhaWwgdG9uZT17cHJvcHMuaXNEaXNhYmxlZCA/ICdzZWNvbmRhcnknIDogdW5kZWZpbmVkfT5cbiAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvVGV4dC5EZXRhaWw+XG4gICAgICA8L3NwYW4+XG4gICAgPC9BY2Nlc3NpYmxlQnV0dG9uPlxuICAgIHtwcm9wcy5jaGV2cm9ufVxuICA8L2Rpdj5cbik7XG5cbkRyb3Bkb3duSGVhZC5kaXNwbGF5TmFtZSA9ICdEcm9wZG93bkhlYWQnO1xuXG50eXBlIFREcm9wZG93bkNoZXZyb24gPSB7XG4gIG9uQ2xpY2s6ICgpID0+IHZvaWQ7XG4gIGlzRGlzYWJsZWQ6IGJvb2xlYW47XG4gIGlzT3BlbjogYm9vbGVhbjtcbn07XG5cbmNvbnN0IERyb3Bkb3duQ2hldnJvbiA9IGZvcndhcmRSZWY8SFRNTEJ1dHRvbkVsZW1lbnQsIFREcm9wZG93bkNoZXZyb24+KFxuICAocHJvcHMsIHJlZikgPT4gKFxuICAgIDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICByZWY9e3JlZn1cbiAgICAgIGxhYmVsPVwiT3BlbiBEcm9wZG93blwiXG4gICAgICBvbkNsaWNrPXtwcm9wcy5vbkNsaWNrfVxuICAgICAgaXNEaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgIGNzcz17W1xuICAgICAgICAuLi5nZXRCdXR0b25TdHlsZXMocHJvcHMuaXNEaXNhYmxlZCksXG4gICAgICAgIGNzc2BcbiAgICAgICAgICBwYWRkaW5nOiAke2Rlc2lnblRva2Vucy5wYWRkaW5nRm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3duSWNvbn07XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzRm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3duSWNvbn07XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAke2Rlc2lnblRva2Vucy5jb2xvck5ldXRyYWx9O1xuICAgICAgICAgIGJvcmRlci13aWR0aDogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyRm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3duSWNvbn07XG4gICAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgYCxcbiAgICAgIF19XG4gICAgPlxuICAgICAgey8qXG4gICAgV2UgbmVlZCB0byBhcHBseSBwb2ludGVyLWV2ZW50czogbm9uZSBvbiB0aGUgaWNvbnMsIHNvIHRoYXRcbiAgICBldmVudC50YXJnZXQgaXMgYWx3YXlzIHNldCB0byB0aGUgYnV0dG9uIGFuZCBuZXZlciB0byB0aGUgaWNvbnMuXG5cbiAgICBUaGF0IHdheSB3ZSBjYW4gdXNlIHRoZSByZWYgdG8gY29tcGFyZSBldmVudC50YXJnZXQgdG8gdGhlXG4gICAgQWNjZXNzaWJsZUJ1dHRvbidzIGJ1dHRvbiBpbiB0aGUgZ2xvYmFsIGNsaWNrIGhhbmRsZXIuXG4gICovfVxuICAgICAgPGRpdlxuICAgICAgICAvLyBUaGUgbWFyZ2luLXRvcCBpcyB0byBjZW50ZXIgdGhlIGljb24gYXMgdGhlIGNhcmV0IHZpc3VhbGx5IGxvb2tzIHRvbyBoaWdoIG90aGVyd2lzZVxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAzcHg7XG4gICAgICAgIGB9XG4gICAgICA+XG4gICAgICAgIHtjbG9uZUVsZW1lbnQoXG4gICAgICAgICAgcHJvcHMuaXNPcGVuICYmICFwcm9wcy5pc0Rpc2FibGVkID8gKFxuICAgICAgICAgICAgPENhcmV0VXBJY29uIC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxDYXJldERvd25JY29uIC8+XG4gICAgICAgICAgKSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb2xvcjogJ25ldXRyYWw2MCcsXG4gICAgICAgICAgICBzaXplOiAnc21hbGwnLFxuICAgICAgICAgIH1cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj5cbiAgKVxuKTtcblxuRHJvcGRvd25DaGV2cm9uLmRpc3BsYXlOYW1lID0gJ0Ryb3Bkb3duQ2hldnJvbic7XG5cbmNvbnN0IE9wdGlvbnMgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IDU7XG4gIHdpZHRoOiAxMDAlO1xuICB0b3A6IGNhbGMoJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzIwfSArICR7ZGVzaWduVG9rZW5zLmJpZ0J1dHRvbkhlaWdodH0pO1xuICBib3JkZXI6IDFweCBzb2xpZCAke2Rlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclByaW1hcnlBY3Rpb25Ecm9wZG93bk1lbnV9O1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JQcmltYXJ5QWN0aW9uRHJvcGRvd25NZW51fTtcbiAgYm94LXNoYWRvdzogJHtkZXNpZ25Ub2tlbnMuc2hhZG93Rm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3duTWVudX07XG4gIG1hcmdpbi10b3A6ICR7ZGVzaWduVG9rZW5zLm1hcmdpblRvcEZvclByaW1hcnlBY3Rpb25Ecm9wZG93bn07XG5cbiAgPiBidXR0b24ge1xuICAgIHBhZGRpbmctbGVmdDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICAgICY6YWN0aXZlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7ZGVzaWduVG9rZW5zLmNvbG9ySW5mbzk1fTtcbiAgICB9XG4gIH1cbmA7XG5cbi8qXG4gIFRoaXMgY29tcG9uZW50IHJlZ2lzdGVycyBhIGdsb2JhbCBjbGljayBldmVudCBsaXN0ZW5lciB0byBjbG9zZSB0aGUgZHJvcGRvd24uXG4gIEl0IHVzZXMgdGhpcyBnbG9iYWwgbGlzdGVuZXIgdG8gY2xvc2Ugd2hlbjpcbiAgICAtIGFuIGVsZW1lbnQgb3V0c2lkZSBvZiB0aGUgZHJvcGRvd24gaXMgY2xpY2tlZFxuICAgIC0gYW4gZWxlbWVudCBpbiB0aGUgZHJvcGRvd24gb3B0aW9ucyBpcyBjbGlja2VkXG5cbiAgSW4gb3JkZXIgdG8gYmUgc3RpbGwgYWJsZSB0byBvcGVuIHRoZSBkcm9wZG93biB3ZSBoYXZlIHRvIGF2b2lkIGF1dG8tY2xvc2luZ1xuICB3aGVuIHRoZSBkcm9wZG93biB0cmlnZ2VyIGl0c2VsZiBpcyBjbGlja2VkLiBPdGhlcndpc2UgaXQgd291bGQgb3BlbiBhbmQgY2xvc2VcbiAgaW1tZWRpYXRlbHkuXG4gKi9cbmV4cG9ydCB0eXBlIFRQcmltYXJ5QWN0aW9uRHJvcGRvd24gPSB7XG4gIC8qKlxuICAgKiBBbnkgUmVhY3QgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBSZWFjdEVsZW1lbnRbXTtcbn07XG5cbmNvbnN0IFByaW1hcnlBY3Rpb25Ecm9wZG93biA9IChwcm9wczogVFByaW1hcnlBY3Rpb25Ecm9wZG93bikgPT4ge1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+KCk7XG4gIGNvbnN0IFtpc09wZW4sIHRvZ2dsZV0gPSB1c2VUb2dnbGVTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgaGFuZGxlR2xvYmFsQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGRyb3Bkb3duQnV0dG9uID0gcmVmLmN1cnJlbnQ7XG4gICAgICBpZiAoXG4gICAgICAgIGRyb3Bkb3duQnV0dG9uICYmXG4gICAgICAgIGV2ZW50LnRhcmdldCAhPT0gZHJvcGRvd25CdXR0b24gJiZcbiAgICAgICAgIWRyb3Bkb3duQnV0dG9uLmNvbnRhaW5zKGV2ZW50LnRhcmdldClcbiAgICAgICkge1xuICAgICAgICB0b2dnbGUoZmFsc2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3JlZiwgdG9nZ2xlXVxuICApO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUdsb2JhbENsaWNrKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlR2xvYmFsQ2xpY2spO1xuICAgIH07XG4gIH0sIFtoYW5kbGVHbG9iYWxDbGlja10pO1xuXG4gIGNvbnN0IGNoaWxkcmVuQXNBcnJheSA9IENoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pO1xuICBjb25zdCBwcmltYXJ5T3B0aW9uID0gKGNoaWxkcmVuQXNBcnJheS5maW5kKFxuICAgIChvcHRpb24pID0+IGlzVmFsaWRFbGVtZW50KG9wdGlvbikgJiYgIW9wdGlvbi5wcm9wcy5pc0Rpc2FibGVkXG4gICkgfHwgY2hpbGRyZW5Bc0FycmF5WzBdKSBhcyBSZWFjdEVsZW1lbnQ7XG5cbiAgY29uc3QgeyBvbkNsaWNrIH0gPSBwcmltYXJ5T3B0aW9uLnByb3BzO1xuXG4gIGNvbnN0IGhhbmRsZUNsaWNrT25IZWFkID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgIHRvZ2dsZSh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2lzT3Blbiwgb25DbGljaywgdG9nZ2xlXVxuICApO1xuICBjb25zdCBoYW5kbGVDbGlja09uQ2hldnJvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB0b2dnbGUoKTtcbiAgfSwgW3RvZ2dsZV0pO1xuXG4gIHdhcm5pbmcoXG4gICAgY2hpbGRyZW5Bc0FycmF5Lmxlbmd0aCA+IDEsXG4gICAgJ0Bjb21tZXJjZXRvb2xzLWZyb250ZW5kL3VpLWtpdC9kcm9wZG93bnMvcHJpbWFyeS1hY3Rpb24tZHJvcGRvd246IG11c3QgY29udGFpbiBhdCBsZWFzdCB0d28gb3B0aW9ucydcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY29sdW1uO1xuXG4gICAgICAgID4gOmZpcnN0LW9mLXR5cGUgPiBidXR0b24ge1xuICAgICAgICAgIGhlaWdodDogJHtkZXNpZ25Ub2tlbnMuaGVpZ2h0Rm9yUHJpbWFyeUFjdGlvbkRyb3Bkb3dufTtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICA+XG4gICAgICA8RHJvcGRvd25IZWFkXG4gICAgICAgIGljb25MZWZ0PXtwcmltYXJ5T3B0aW9uLnByb3BzLmljb25MZWZ0fVxuICAgICAgICBpc0Rpc2FibGVkPXtwcmltYXJ5T3B0aW9uLnByb3BzLmlzRGlzYWJsZWR9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrT25IZWFkfVxuICAgICAgICBjaGV2cm9uPXtcbiAgICAgICAgICA8RHJvcGRvd25DaGV2cm9uXG4gICAgICAgICAgICByZWY9e3JlZiBhcyBGb3J3YXJkZWRSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+fVxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2tPbkNoZXZyb259XG4gICAgICAgICAgICBpc0Rpc2FibGVkPXtwcmltYXJ5T3B0aW9uLnByb3BzLmlzRGlzYWJsZWR9XG4gICAgICAgICAgICBpc09wZW49e2lzT3Blbn1cbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICA+XG4gICAgICAgIHtwcmltYXJ5T3B0aW9uLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9Ecm9wZG93bkhlYWQ+XG4gICAgICB7aXNPcGVuICYmICFwcmltYXJ5T3B0aW9uLnByb3BzLmlzRGlzYWJsZWQgJiYgKFxuICAgICAgICA8T3B0aW9ucz57Y2hpbGRyZW5Bc0FycmF5fTwvT3B0aW9ucz5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5QcmltYXJ5QWN0aW9uRHJvcGRvd24uZGlzcGxheU5hbWUgPSAnUHJpbWFyeUFjdGlvbkRyb3Bkb3duJztcblxuZXhwb3J0IGRlZmF1bHQgUHJpbWFyeUFjdGlvbkRyb3Bkb3duO1xuIl19 */"));

/*
  This component registers a global click event listener to close the dropdown.
  It uses this global listener to close when:
    - an element outside of the dropdown is clicked
    - an element in the dropdown options is clicked

  In order to be still able to open the dropdown we have to avoid auto-closing
  when the dropdown trigger itself is clicked. Otherwise it would open and close
  immediately.
 */

const PrimaryActionDropdown = props => {
  const ref = useRef();
  const _useToggleState = useToggleState(false),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    isOpen = _useToggleState2[0],
    toggle = _useToggleState2[1];
  const handleGlobalClick = useCallback(event => {
    const dropdownButton = ref.current;
    if (dropdownButton && event.target !== dropdownButton && !dropdownButton.contains(event.target)) {
      toggle(false);
    }
  }, [ref, toggle]);
  useEffect(() => {
    window.addEventListener('click', handleGlobalClick);
    return () => {
      window.removeEventListener('click', handleGlobalClick);
    };
  }, [handleGlobalClick]);
  const childrenAsArray = Children.toArray(props.children);
  const primaryOption = _findInstanceProperty(childrenAsArray).call(childrenAsArray, option => /*#__PURE__*/isValidElement(option) && !option.props.isDisabled) || childrenAsArray[0];
  const onClick = primaryOption.props.onClick;
  const handleClickOnHead = useCallback(event => {
    if (isOpen) {
      toggle(true);
    } else {
      onClick(event);
    }
  }, [isOpen, onClick, toggle]);
  const handleClickOnChevron = useCallback(() => {
    toggle();
  }, [toggle]);
  process.env.NODE_ENV !== "production" ? warning(childrenAsArray.length > 1, '@commercetools-frontend/ui-kit/dropdowns/primary-action-dropdown: must contain at least two options') : void 0;
  return jsxs("div", {
    css: /*#__PURE__*/css("position:relative;display:inline-flex;align-items:column;>:first-of-type>button{height:", designTokens.heightForPrimaryActionDropdown, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:PrimaryActionDropdown;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
    children: [jsx(DropdownHead, {
      iconLeft: primaryOption.props.iconLeft,
      isDisabled: primaryOption.props.isDisabled,
      onClick: handleClickOnHead,
      chevron: jsx(DropdownChevron, {
        ref: ref,
        onClick: handleClickOnChevron,
        isDisabled: primaryOption.props.isDisabled,
        isOpen: isOpen
      }),
      children: primaryOption.props.children
    }), isOpen && !primaryOption.props.isDisabled && jsx(Options, {
      children: childrenAsArray
    })]
  });
};
PrimaryActionDropdown.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _pt.arrayOf(_pt.element).isRequired
} : {};
PrimaryActionDropdown.displayName = 'PrimaryActionDropdown';
var PrimaryActionDropdown$1 = PrimaryActionDropdown;

const Option = props => jsx(AccessibleButton, {
  label: props.children,
  onClick: props.onClick,
  isDisabled: props.isDisabled,
  css: [/*#__PURE__*/css("display:block;text-align:left;width:100%;padding:", designTokens.spacing20, ";background-color:", designTokens.colorSurface, ";&:first-of-type{border-radius:", designTokens.borderRadius6, " ", designTokens.borderRadius6, " 0 0;}&:last-of-type{border-radius:0 0 ", designTokens.borderRadius6, " ", designTokens.borderRadius6, ";}&:hover{background-color:", designTokens.colorNeutral95, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:Option;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9wdGlvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEJTIiwiZmlsZSI6Im9wdGlvbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9hY2Nlc3NpYmxlLWJ1dHRvbic7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcblxudHlwZSBUT3B0aW9uID0ge1xuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciB0cmlnZ2VycyB3aGVuZXZlciB0aGUgb3B0aW9uIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIG9wdGlvbiB3aXRoaW4gdGhlIGRyb3Bkb3duLiBJZiBhbGwgb3B0aW9ucyBhcmUgZGlzYWJsZWQgdGhlIGRyb3Bkb3duIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFueSBzdHJpbmcgd2hpY2ggc2VydmVzIGFzIHRoZSBsYWJlbC5cbiAgICovXG4gIGNoaWxkcmVuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBbnkgUmVhY3Qgbm9kZS5cbiAgICovXG4gIGljb25MZWZ0OiBSZWFjdE5vZGU7XG59O1xuXG5jb25zdCBPcHRpb24gPSAocHJvcHM6IFRPcHRpb24pID0+IChcbiAgPEFjY2Vzc2libGVCdXR0b25cbiAgICBsYWJlbD17cHJvcHMuY2hpbGRyZW59XG4gICAgb25DbGljaz17cHJvcHMub25DbGlja31cbiAgICBpc0Rpc2FibGVkPXtwcm9wcy5pc0Rpc2FibGVkfVxuICAgIGNzcz17W1xuICAgICAgY3NzYFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmcyMH07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7ZGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZX07XG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNn1cbiAgICAgICAgICAgICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czZ9IDAgMDtcbiAgICAgICAgfVxuICAgICAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMCAwICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czZ9XG4gICAgICAgICAgICAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM2fTtcbiAgICAgICAgfVxuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NX07XG4gICAgICAgIH1cbiAgICAgIGAsXG4gICAgICBwcm9wcy5pc0Rpc2FibGVkICYmXG4gICAgICAgIGNzc2BcbiAgICAgICAgICBjb2xvcjogJHtkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsfTtcbiAgICAgICAgYCxcbiAgICBdfVxuICA+XG4gICAge3Byb3BzLmNoaWxkcmVufVxuICA8L0FjY2Vzc2libGVCdXR0b24+XG4pO1xuT3B0aW9uLmRpc3BsYXlOYW1lID0gJ09wdGlvbic7XG5PcHRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpc0Rpc2FibGVkOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE9wdGlvbjtcbiJdfQ== */"), props.isDisabled && /*#__PURE__*/css("color:", designTokens.colorNeutral, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Option;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9wdGlvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaURXIiwiZmlsZSI6Im9wdGlvbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9hY2Nlc3NpYmxlLWJ1dHRvbic7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcblxudHlwZSBUT3B0aW9uID0ge1xuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciB0cmlnZ2VycyB3aGVuZXZlciB0aGUgb3B0aW9uIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIG9wdGlvbiB3aXRoaW4gdGhlIGRyb3Bkb3duLiBJZiBhbGwgb3B0aW9ucyBhcmUgZGlzYWJsZWQgdGhlIGRyb3Bkb3duIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFueSBzdHJpbmcgd2hpY2ggc2VydmVzIGFzIHRoZSBsYWJlbC5cbiAgICovXG4gIGNoaWxkcmVuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBbnkgUmVhY3Qgbm9kZS5cbiAgICovXG4gIGljb25MZWZ0OiBSZWFjdE5vZGU7XG59O1xuXG5jb25zdCBPcHRpb24gPSAocHJvcHM6IFRPcHRpb24pID0+IChcbiAgPEFjY2Vzc2libGVCdXR0b25cbiAgICBsYWJlbD17cHJvcHMuY2hpbGRyZW59XG4gICAgb25DbGljaz17cHJvcHMub25DbGlja31cbiAgICBpc0Rpc2FibGVkPXtwcm9wcy5pc0Rpc2FibGVkfVxuICAgIGNzcz17W1xuICAgICAgY3NzYFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmcyMH07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7ZGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZX07XG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNn1cbiAgICAgICAgICAgICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czZ9IDAgMDtcbiAgICAgICAgfVxuICAgICAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMCAwICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czZ9XG4gICAgICAgICAgICAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM2fTtcbiAgICAgICAgfVxuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NX07XG4gICAgICAgIH1cbiAgICAgIGAsXG4gICAgICBwcm9wcy5pc0Rpc2FibGVkICYmXG4gICAgICAgIGNzc2BcbiAgICAgICAgICBjb2xvcjogJHtkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsfTtcbiAgICAgICAgYCxcbiAgICBdfVxuICA+XG4gICAge3Byb3BzLmNoaWxkcmVufVxuICA8L0FjY2Vzc2libGVCdXR0b24+XG4pO1xuT3B0aW9uLmRpc3BsYXlOYW1lID0gJ09wdGlvbic7XG5PcHRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpc0Rpc2FibGVkOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE9wdGlvbjtcbiJdfQ== */"), process.env.NODE_ENV === "production" ? "" : ";label:Option;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9wdGlvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkJJIiwiZmlsZSI6Im9wdGlvbi50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9hY2Nlc3NpYmxlLWJ1dHRvbic7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcblxudHlwZSBUT3B0aW9uID0ge1xuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciB0cmlnZ2VycyB3aGVuZXZlciB0aGUgb3B0aW9uIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIG9wdGlvbiB3aXRoaW4gdGhlIGRyb3Bkb3duLiBJZiBhbGwgb3B0aW9ucyBhcmUgZGlzYWJsZWQgdGhlIGRyb3Bkb3duIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFueSBzdHJpbmcgd2hpY2ggc2VydmVzIGFzIHRoZSBsYWJlbC5cbiAgICovXG4gIGNoaWxkcmVuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBbnkgUmVhY3Qgbm9kZS5cbiAgICovXG4gIGljb25MZWZ0OiBSZWFjdE5vZGU7XG59O1xuXG5jb25zdCBPcHRpb24gPSAocHJvcHM6IFRPcHRpb24pID0+IChcbiAgPEFjY2Vzc2libGVCdXR0b25cbiAgICBsYWJlbD17cHJvcHMuY2hpbGRyZW59XG4gICAgb25DbGljaz17cHJvcHMub25DbGlja31cbiAgICBpc0Rpc2FibGVkPXtwcm9wcy5pc0Rpc2FibGVkfVxuICAgIGNzcz17W1xuICAgICAgY3NzYFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmcyMH07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7ZGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZX07XG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNn1cbiAgICAgICAgICAgICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czZ9IDAgMDtcbiAgICAgICAgfVxuICAgICAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMCAwICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czZ9XG4gICAgICAgICAgICAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM2fTtcbiAgICAgICAgfVxuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NX07XG4gICAgICAgIH1cbiAgICAgIGAsXG4gICAgICBwcm9wcy5pc0Rpc2FibGVkICYmXG4gICAgICAgIGNzc2BcbiAgICAgICAgICBjb2xvcjogJHtkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsfTtcbiAgICAgICAgYCxcbiAgICBdfVxuICA+XG4gICAge3Byb3BzLmNoaWxkcmVufVxuICA8L0FjY2Vzc2libGVCdXR0b24+XG4pO1xuT3B0aW9uLmRpc3BsYXlOYW1lID0gJ09wdGlvbic7XG5PcHRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpc0Rpc2FibGVkOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE9wdGlvbjtcbiJdfQ== */"],
  children: props.children
});
Option.propTypes = process.env.NODE_ENV !== "production" ? {
  onClick: _pt.func.isRequired,
  isDisabled: _pt.bool,
  children: _pt.string.isRequired,
  iconLeft: _pt.node.isRequired
} : {};
Option.displayName = 'Option';
Option.defaultProps = {
  isDisabled: false
};
var Option$1 = Option;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { Option$1 as Option, PrimaryActionDropdown$1 as default, version };
