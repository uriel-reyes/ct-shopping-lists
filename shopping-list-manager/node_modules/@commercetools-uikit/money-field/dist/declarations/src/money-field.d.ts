import { Component, type ReactElement, type ReactNode } from 'react';
import { type Props as ReactSelectProps } from 'react-select';
import { type TCurrencyCode } from '@commercetools-uikit/money-input';
type TErrorRenderer = (key: string, error?: boolean) => ReactNode;
type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
type TTouched = {
    amount?: boolean;
    currencyCode?: boolean;
};
type TValue = {
    amount: string;
    currencyCode: TCurrencyCode;
};
type TCustomEvent = {
    target: {
        id?: string;
        name?: string;
        value?: string | string[] | null;
    };
    persist?: () => void;
};
export type TMoneyFieldProps = {
    id?: string;
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    errors?: TFieldErrors;
    renderError?: TErrorRenderer;
    isRequired?: boolean;
    touched?: TTouched;
    isTouched?: unknown;
    autoComplete?: string;
    name?: string;
    value: TValue;
    currencies?: string[];
    placeholder?: string;
    onBlur?: (event: TCustomEvent) => void;
    onFocus?: (event: TCustomEvent) => void;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    isAutofocussed?: boolean;
    onChange?: (event: TCustomEvent) => void;
    menuPortalTarget?: ReactSelectProps['menuPortalTarget'];
    menuPortalZIndex?: number;
    menuShouldBlockScroll?: ReactSelectProps['menuShouldBlockScroll'];
    title: string | ReactNode;
    hint?: string | ReactNode;
    description?: string | ReactNode;
    onInfoButtonClick?: () => void;
    hintIcon?: ReactElement;
    hasHighPrecisionBadge?: boolean;
};
type TMoneyFieldState = Pick<TMoneyFieldProps, 'id'>;
declare class MoneyField extends Component<TMoneyFieldProps, TMoneyFieldState> {
    static displayName: string;
    static defaultProps: {
        horizontalConstraint: string;
    };
    state: {
        id: string | undefined;
    };
    static getDerivedStateFromProps: (props: TMoneyFieldProps, state: TMoneyFieldState) => {
        id: string;
    };
    static toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export default MoneyField;
