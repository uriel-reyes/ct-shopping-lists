'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('prop-types');
var react$1 = require('react');
var DOMPurify = require('dompurify');
var convert = require('react-from-dom');
var react = require('@emotion/react');
var utils = require('@commercetools-uikit/utils');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var designSystem = require('@commercetools-uikit/design-system');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var DOMPurify__default = /*#__PURE__*/_interopDefault(DOMPurify);
var convert__default = /*#__PURE__*/_interopDefault(convert);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);

const iconSizes = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes[size], "px"),
        height: "".concat(iconSizes[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes.big, "px"),
        height: "".concat(iconSizes.big, "px")
      };
  }
};
const getSizeStyle = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};

// @ts-ignore
const getIconStyles = props => /*#__PURE__*/react.css("*:not([fill='none']){fill:", getColor(props.color), ";}&,image{", getSizeStyle(props.size), ";}flex-shrink:0;" + ("" ), "" );

const InlineSvg = props => {
  const sanitized = react$1.useMemo(() => {
    if (!utils.canUseDOM) {
      return props.data;
    }
    return DOMPurify__default["default"].sanitize(props.data, {
      USE_PROFILES: {
        svg: true
      },
      RETURN_DOM: true,
      FORBID_ATTR: [
      // To avoid injection by using `style="filter:url(\"data:image/svg+xml,<svg`
      'style']
    }).innerHTML;
  }, [props.data]);
  const svgElement = useStringToReactElement(sanitized);
  if (svgElement) {
    return jsxRuntime.jsx(react.ClassNames, {
      children: _ref => {
        let css = _ref.css;
        return /*#__PURE__*/react$1.cloneElement(svgElement, {
          className: css(getIconStyles(props))
        });
      }
    });
  }
  return null;
};
InlineSvg.propTypes = {};
var InlineSvg$1 = InlineSvg;

// Inspired by https://github.com/gilbarbara/react-inlinesvg
function useStringToReactElement(data) {
  return react$1.useMemo(() => {
    if (!utils.canUseDOM) {
      return null;
    }
    try {
      const node = convert__default["default"](data, {
        nodeOnly: true
      });
      if (!node || !(node instanceof SVGSVGElement)) {
        throw new Error('Could not convert the string to a DOM node');
      }
      const element = convert__default["default"](node);
      if (!element || ! /*#__PURE__*/react$1.isValidElement(element)) {
        throw new Error('Could not convert the DOM node to a React element');
      }
      return element;
    } catch (error) {
      console.error(error);
      return null;
    }
  }, [data]);
}

exports["default"] = InlineSvg$1;
