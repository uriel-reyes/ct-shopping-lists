import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _styled from '@emotion/styled/base';
import _pt from 'prop-types';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import { ClassNames, css } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
import { warning, filterDataAttributes, filterAriaAttributes, createSequentialId } from '@commercetools-uikit/utils';
import { useRef, useEffect } from 'react';
import { accessibleHiddenInputStyles } from '@commercetools-uikit/input-utils';
import { jsx, jsxs } from '@emotion/react/jsx-runtime';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';

function ownKeys$3(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context3 = ownKeys$3(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context4 = ownKeys$3(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const iconSizes$1 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$1 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$1[size], "px"),
        height: "".concat(iconSizes$1[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$1.big, "px"),
        height: "".concat(iconSizes$1.big, "px")
      };
  }
};
const getSizeStyle$1 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$1(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty(_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty(_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$1 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
  }
  if (!iconColor) {
    process.env.NODE_ENV !== "production" ? warning(color, "ui-kit/Icon: the specified color '".concat(color, "' is not supported.")) : void 0;
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$1 = props => /*#__PURE__*/css("*:not([fill='none']){fill:", getColor$1(props.color), ";}&,image{", getSizeStyle$1(props.size), ";}flex-shrink:0;" + (process.env.NODE_ENV === "production" ? "" : ";label:getIconStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrZWRSZWFjdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUdrRCIsImZpbGUiOiJDaGVja2VkUmVhY3QudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLy8gVEhJUyBJUyBBTiBBVVRPR0VORVJBVEVEIEZJTEUuIERPIE5PVCBFRElUIFRISVMgRklMRSBESVJFQ1RMWS5cbi8vIFRoaXMgZmlsZSBpcyBjcmVhdGVkIHdpdGggJ3lhcm4gZ2VuZXJhdGUtaWNvbnMnLlxuLy8gT3JpZ2luYWwgU1ZHIGZpbGU6IHNyYy9pY29ucy9zdmcvY2hlY2tlZC5yZWFjdC5zdmdcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHsgd2FybmluZyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3V0aWxzJztcbmltcG9ydCB7IGNzcywgQ2xhc3NOYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuZXhwb3J0IHR5cGUgUHJvcHMgPSB7XG4gIGNvbG9yPzpcbiAgICB8ICdzb2xpZCdcbiAgICB8ICduZXV0cmFsNjAnXG4gICAgfCAnc3VyZmFjZSdcbiAgICB8ICdpbmZvJ1xuICAgIHwgJ3ByaW1hcnknXG4gICAgfCAncHJpbWFyeTQwJ1xuICAgIHwgJ3dhcm5pbmcnXG4gICAgfCAnZXJyb3InO1xuICBzaXplPzogJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2JpZycgfCAnc2NhbGUnO1xufTtcbmV4cG9ydCB0eXBlIFNWR1Byb3BzID0gUHJvcHMgJiB7XG4gIGNsYXNzTmFtZTogc3RyaW5nO1xufTtcbmNvbnN0IGljb25TaXplcyA9IHtcbiAgc21hbGw6IDEyLFxuICBtZWRpdW06IDE2LFxuICBiaWc6IDI0LFxufSBhcyBjb25zdDtcbmNvbnN0IGdldFNpemVEaW1lbnNpb25zID0gKHNpemU6IFByb3BzWydzaXplJ10pID0+IHtcbiAgc3dpdGNoIChzaXplKSB7XG4gICAgY2FzZSAnc2NhbGUnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICB9O1xuICAgIGNhc2UgJ3NtYWxsJzpcbiAgICBjYXNlICdtZWRpdW0nOlxuICAgIGNhc2UgJ2JpZyc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogYCR7aWNvblNpemVzW3NpemVdfXB4YCxcbiAgICAgICAgaGVpZ2h0OiBgJHtpY29uU2l6ZXNbc2l6ZV19cHhgLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IGAke2ljb25TaXplcy5iaWd9cHhgLFxuICAgICAgICBoZWlnaHQ6IGAke2ljb25TaXplcy5iaWd9cHhgLFxuICAgICAgfTtcbiAgfVxufTtcbmNvbnN0IGdldFNpemVTdHlsZSA9IChzaXplOiBQcm9wc1snc2l6ZSddKSA9PiB7XG4gIGNvbnN0IGRpbWVuc2lvbnMgPSBnZXRTaXplRGltZW5zaW9ucyhzaXplKTtcbiAgc3dpdGNoIChzaXplKSB7XG4gICAgY2FzZSAnc2NhbGUnOlxuICAgICAgcmV0dXJuIGBcbiAgICAgICAgJjpub3QoOnJvb3QpIHtcbiAgICAgICAgICB3aWR0aDogJHtkaW1lbnNpb25zLndpZHRofTtcbiAgICAgICAgICBoZWlnaHQ6ICR7ZGltZW5zaW9ucy5oZWlnaHR9O1xuICAgICAgICB9XG4gICAgICBgO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYFxuICAgICAgICB3aWR0aDogJHtkaW1lbnNpb25zLndpZHRofTtcbiAgICAgICAgaGVpZ2h0OiAke2RpbWVuc2lvbnMuaGVpZ2h0fTtcbiAgICAgIGA7XG4gIH1cbn07XG5jb25zdCBnZXRDb2xvciA9IChjb2xvcjogUHJvcHNbJ2NvbG9yJ10pID0+IHtcbiAgaWYgKCFjb2xvcikgcmV0dXJuICdpbmhlcml0JztcbiAgbGV0IGljb25Db2xvcjtcbiAgc3dpdGNoIChjb2xvcikge1xuICAgIGNhc2UgJ3NvbGlkJzpcbiAgICAgIGljb25Db2xvciA9IGRlc2lnblRva2Vucy5jb2xvclNvbGlkO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbmV1dHJhbDYwJzpcbiAgICAgIGljb25Db2xvciA9IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw2MDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3N1cmZhY2UnOlxuICAgICAgaWNvbkNvbG9yID0gZGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2luZm8nOlxuICAgICAgaWNvbkNvbG9yID0gZGVzaWduVG9rZW5zLmNvbG9ySW5mbztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3ByaW1hcnknOlxuICAgICAgaWNvbkNvbG9yID0gZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3ByaW1hcnk0MCc6XG4gICAgICBpY29uQ29sb3IgPSBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5NDA7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgIGljb25Db2xvciA9IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICBpY29uQ29sb3IgPSBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuICBpZiAoIWljb25Db2xvcikge1xuICAgIHdhcm5pbmcoXG4gICAgICBjb2xvcixcbiAgICAgIGB1aS1raXQvSWNvbjogdGhlIHNwZWNpZmllZCBjb2xvciAnJHtjb2xvcn0nIGlzIG5vdCBzdXBwb3J0ZWQuYFxuICAgICk7XG4gICAgcmV0dXJuICdpbmhlcml0JztcbiAgfVxuICByZXR1cm4gaWNvbkNvbG9yO1xufTtcbmV4cG9ydCBjb25zdCBnZXRJY29uU3R5bGVzID0gKHByb3BzOiBQcm9wcykgPT4gY3NzYFxuICAqOm5vdChbZmlsbD0nbm9uZSddKSB7XG4gICAgZmlsbDogJHtnZXRDb2xvcihwcm9wcy5jb2xvcil9O1xuICB9XG4gICYsXG4gIGltYWdlIHtcbiAgICAke2dldFNpemVTdHlsZShwcm9wcy5zaXplKX07XG4gIH1cbiAgZmxleC1zaHJpbms6IDA7XG5gO1xuY29uc3QgU3ZnQ2hlY2tlZCA9IChwcm9wczogU1ZHUHJvcHMpID0+IChcbiAgPHN2Z1xuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgIHdpZHRoPXsxMn1cbiAgICBoZWlnaHQ9ezl9XG4gICAgZmlsbD1cIm5vbmVcIlxuICAgIHZpZXdCb3g9XCIwIDAgMTIgOVwiXG4gICAgcm9sZT1cImltZ1wiXG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9XCIjMDAwXCJcbiAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICBkPVwiTS4yOTMgNC4yOTNhMSAxIDAgMCAxIDEuNDE0IDBsMyAzYTEgMSAwIDAgMS0xLjQxNCAxLjQxNGwtMy0zYTEgMSAwIDAgMSAwLTEuNDE0WlwiXG4gICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgIC8+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9XCIjMDAwXCJcbiAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICBkPVwiTTExLjcwNy4yOTNhMSAxIDAgMCAxIDAgMS40MTRsLTcgN2ExIDEgMCAwIDEtMS40MTQtMS40MTRsNy03YTEgMSAwIDAgMSAxLjQxNCAwWlwiXG4gICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcblN2Z0NoZWNrZWQuZGlzcGxheU5hbWUgPSAnU3ZnQ2hlY2tlZCc7XG5jb25zdCBDaGVja2VkSWNvbiA9IChwcm9wczogUHJvcHMpID0+IChcbiAgPENsYXNzTmFtZXM+XG4gICAgeyh7IGNzczogY3JlYXRlQ2xhc3MgfSkgPT4gKFxuICAgICAgPFN2Z0NoZWNrZWQgey4uLnByb3BzfSBjbGFzc05hbWU9e2NyZWF0ZUNsYXNzKGdldEljb25TdHlsZXMocHJvcHMpKX0gLz5cbiAgICApfVxuICA8L0NsYXNzTmFtZXM+XG4pO1xuQ2hlY2tlZEljb24uZGlzcGxheU5hbWUgPSAnQ2hlY2tlZEljb24nO1xuZXhwb3J0IGRlZmF1bHQgQ2hlY2tlZEljb247XG4iXX0= */");
const SvgChecked = props => jsxs("svg", _objectSpread$3(_objectSpread$3({
  xmlns: "http://www.w3.org/2000/svg",
  width: 12,
  height: 9,
  fill: "none",
  viewBox: "0 0 12 9",
  role: "img"
}, props), {}, {
  children: [jsx("path", {
    fill: "#000",
    fillRule: "evenodd",
    d: "M.293 4.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.414l-3-3a1 1 0 0 1 0-1.414Z",
    clipRule: "evenodd"
  }), jsx("path", {
    fill: "#000",
    fillRule: "evenodd",
    d: "M11.707.293a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414l7-7a1 1 0 0 1 1.414 0Z",
    clipRule: "evenodd"
  })]
}));
SvgChecked.displayName = 'SvgChecked';
const CheckedIcon = props => jsx(ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsx(SvgChecked, _objectSpread$3(_objectSpread$3({}, props), {}, {
      className: createClass(getIconStyles$1(props))
    }));
  }
});
CheckedIcon.displayName = 'CheckedIcon';
var CheckedIcon$1 = CheckedIcon;

function ownKeys$2(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context3 = ownKeys$2(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context4 = ownKeys$2(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes[size], "px"),
        height: "".concat(iconSizes[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes.big, "px"),
        height: "".concat(iconSizes.big, "px")
      };
  }
};
const getSizeStyle = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty(_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty(_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
  }
  if (!iconColor) {
    process.env.NODE_ENV !== "production" ? warning(color, "ui-kit/Icon: the specified color '".concat(color, "' is not supported.")) : void 0;
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles = props => /*#__PURE__*/css("*:not([fill='none']){fill:", getColor(props.color), ";}&,image{", getSizeStyle(props.size), ";}flex-shrink:0;" + (process.env.NODE_ENV === "production" ? "" : ";label:getIconStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkluZGV0ZXJtaW5hdGVSZWFjdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUdrRCIsImZpbGUiOiJJbmRldGVybWluYXRlUmVhY3QudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLy8gVEhJUyBJUyBBTiBBVVRPR0VORVJBVEVEIEZJTEUuIERPIE5PVCBFRElUIFRISVMgRklMRSBESVJFQ1RMWS5cbi8vIFRoaXMgZmlsZSBpcyBjcmVhdGVkIHdpdGggJ3lhcm4gZ2VuZXJhdGUtaWNvbnMnLlxuLy8gT3JpZ2luYWwgU1ZHIGZpbGU6IHNyYy9pY29ucy9zdmcvaW5kZXRlcm1pbmF0ZS5yZWFjdC5zdmdcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHsgd2FybmluZyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3V0aWxzJztcbmltcG9ydCB7IGNzcywgQ2xhc3NOYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuZXhwb3J0IHR5cGUgUHJvcHMgPSB7XG4gIGNvbG9yPzpcbiAgICB8ICdzb2xpZCdcbiAgICB8ICduZXV0cmFsNjAnXG4gICAgfCAnc3VyZmFjZSdcbiAgICB8ICdpbmZvJ1xuICAgIHwgJ3ByaW1hcnknXG4gICAgfCAncHJpbWFyeTQwJ1xuICAgIHwgJ3dhcm5pbmcnXG4gICAgfCAnZXJyb3InO1xuICBzaXplPzogJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2JpZycgfCAnc2NhbGUnO1xufTtcbmV4cG9ydCB0eXBlIFNWR1Byb3BzID0gUHJvcHMgJiB7XG4gIGNsYXNzTmFtZTogc3RyaW5nO1xufTtcbmNvbnN0IGljb25TaXplcyA9IHtcbiAgc21hbGw6IDEyLFxuICBtZWRpdW06IDE2LFxuICBiaWc6IDI0LFxufSBhcyBjb25zdDtcbmNvbnN0IGdldFNpemVEaW1lbnNpb25zID0gKHNpemU6IFByb3BzWydzaXplJ10pID0+IHtcbiAgc3dpdGNoIChzaXplKSB7XG4gICAgY2FzZSAnc2NhbGUnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICB9O1xuICAgIGNhc2UgJ3NtYWxsJzpcbiAgICBjYXNlICdtZWRpdW0nOlxuICAgIGNhc2UgJ2JpZyc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogYCR7aWNvblNpemVzW3NpemVdfXB4YCxcbiAgICAgICAgaGVpZ2h0OiBgJHtpY29uU2l6ZXNbc2l6ZV19cHhgLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IGAke2ljb25TaXplcy5iaWd9cHhgLFxuICAgICAgICBoZWlnaHQ6IGAke2ljb25TaXplcy5iaWd9cHhgLFxuICAgICAgfTtcbiAgfVxufTtcbmNvbnN0IGdldFNpemVTdHlsZSA9IChzaXplOiBQcm9wc1snc2l6ZSddKSA9PiB7XG4gIGNvbnN0IGRpbWVuc2lvbnMgPSBnZXRTaXplRGltZW5zaW9ucyhzaXplKTtcbiAgc3dpdGNoIChzaXplKSB7XG4gICAgY2FzZSAnc2NhbGUnOlxuICAgICAgcmV0dXJuIGBcbiAgICAgICAgJjpub3QoOnJvb3QpIHtcbiAgICAgICAgICB3aWR0aDogJHtkaW1lbnNpb25zLndpZHRofTtcbiAgICAgICAgICBoZWlnaHQ6ICR7ZGltZW5zaW9ucy5oZWlnaHR9O1xuICAgICAgICB9XG4gICAgICBgO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYFxuICAgICAgICB3aWR0aDogJHtkaW1lbnNpb25zLndpZHRofTtcbiAgICAgICAgaGVpZ2h0OiAke2RpbWVuc2lvbnMuaGVpZ2h0fTtcbiAgICAgIGA7XG4gIH1cbn07XG5jb25zdCBnZXRDb2xvciA9IChjb2xvcjogUHJvcHNbJ2NvbG9yJ10pID0+IHtcbiAgaWYgKCFjb2xvcikgcmV0dXJuICdpbmhlcml0JztcbiAgbGV0IGljb25Db2xvcjtcbiAgc3dpdGNoIChjb2xvcikge1xuICAgIGNhc2UgJ3NvbGlkJzpcbiAgICAgIGljb25Db2xvciA9IGRlc2lnblRva2Vucy5jb2xvclNvbGlkO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbmV1dHJhbDYwJzpcbiAgICAgIGljb25Db2xvciA9IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw2MDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3N1cmZhY2UnOlxuICAgICAgaWNvbkNvbG9yID0gZGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2luZm8nOlxuICAgICAgaWNvbkNvbG9yID0gZGVzaWduVG9rZW5zLmNvbG9ySW5mbztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3ByaW1hcnknOlxuICAgICAgaWNvbkNvbG9yID0gZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3ByaW1hcnk0MCc6XG4gICAgICBpY29uQ29sb3IgPSBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5NDA7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgIGljb25Db2xvciA9IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICBpY29uQ29sb3IgPSBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuICBpZiAoIWljb25Db2xvcikge1xuICAgIHdhcm5pbmcoXG4gICAgICBjb2xvcixcbiAgICAgIGB1aS1raXQvSWNvbjogdGhlIHNwZWNpZmllZCBjb2xvciAnJHtjb2xvcn0nIGlzIG5vdCBzdXBwb3J0ZWQuYFxuICAgICk7XG4gICAgcmV0dXJuICdpbmhlcml0JztcbiAgfVxuICByZXR1cm4gaWNvbkNvbG9yO1xufTtcbmV4cG9ydCBjb25zdCBnZXRJY29uU3R5bGVzID0gKHByb3BzOiBQcm9wcykgPT4gY3NzYFxuICAqOm5vdChbZmlsbD0nbm9uZSddKSB7XG4gICAgZmlsbDogJHtnZXRDb2xvcihwcm9wcy5jb2xvcil9O1xuICB9XG4gICYsXG4gIGltYWdlIHtcbiAgICAke2dldFNpemVTdHlsZShwcm9wcy5zaXplKX07XG4gIH1cbiAgZmxleC1zaHJpbms6IDA7XG5gO1xuY29uc3QgU3ZnSW5kZXRlcm1pbmF0ZSA9IChwcm9wczogU1ZHUHJvcHMpID0+IChcbiAgPHN2Z1xuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgIHdpZHRoPXsxMn1cbiAgICBoZWlnaHQ9ezJ9XG4gICAgZmlsbD1cIm5vbmVcIlxuICAgIHZpZXdCb3g9XCIwIDAgMTIgMlwiXG4gICAgcm9sZT1cImltZ1wiXG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZVdpZHRoPXsyfSBkPVwiTTExIDFIMVwiIC8+XG4gIDwvc3ZnPlxuKTtcblN2Z0luZGV0ZXJtaW5hdGUuZGlzcGxheU5hbWUgPSAnU3ZnSW5kZXRlcm1pbmF0ZSc7XG5jb25zdCBJbmRldGVybWluYXRlSWNvbiA9IChwcm9wczogUHJvcHMpID0+IChcbiAgPENsYXNzTmFtZXM+XG4gICAgeyh7IGNzczogY3JlYXRlQ2xhc3MgfSkgPT4gKFxuICAgICAgPFN2Z0luZGV0ZXJtaW5hdGVcbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICBjbGFzc05hbWU9e2NyZWF0ZUNsYXNzKGdldEljb25TdHlsZXMocHJvcHMpKX1cbiAgICAgIC8+XG4gICAgKX1cbiAgPC9DbGFzc05hbWVzPlxuKTtcbkluZGV0ZXJtaW5hdGVJY29uLmRpc3BsYXlOYW1lID0gJ0luZGV0ZXJtaW5hdGVJY29uJztcbmV4cG9ydCBkZWZhdWx0IEluZGV0ZXJtaW5hdGVJY29uO1xuIl19 */");
const SvgIndeterminate = props => jsx("svg", _objectSpread$2(_objectSpread$2({
  xmlns: "http://www.w3.org/2000/svg",
  width: 12,
  height: 2,
  fill: "none",
  viewBox: "0 0 12 2",
  role: "img"
}, props), {}, {
  children: jsx("path", {
    stroke: "#000",
    strokeLinecap: "round",
    strokeWidth: 2,
    d: "M11 1H1"
  })
}));
SvgIndeterminate.displayName = 'SvgIndeterminate';
const IndeterminateIcon = props => jsx(ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsx(SvgIndeterminate, _objectSpread$2(_objectSpread$2({}, props), {}, {
      className: createClass(getIconStyles(props))
    }));
  }
});
IndeterminateIcon.displayName = 'IndeterminateIcon';
var IndeterminateIcon$1 = IndeterminateIcon;

function ownKeys$1(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys$1(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys$1(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const Checkbox = props => {
  const ref = useRef({
    indeterminate: false
  });
  useEffect(() => {
    if (props.isIndeterminate) {
      ref.current.indeterminate = true;
    }
  }, [props.isIndeterminate]);
  return jsx("input", _objectSpread$1(_objectSpread$1(_objectSpread$1({
    type: "checkbox"
    // @ts-ignore
    ,
    ref: ref
  }, filterDataAttributes(props)), filterAriaAttributes(props)), {}, {
    /* ARIA */
    "aria-readonly": props.isReadOnly,
    "aria-checked": props.isChecked,
    css: accessibleHiddenInputStyles,
    id: props.id,
    name: props.name,
    value: props.value,
    disabled: props.isDisabled || props.isReadOnly,
    readOnly: props.isReadOnly,
    checked: props.isChecked && !props.isIndeterminate,
    onChange: !props.isReadOnly ? props.onChange : undefined
  }));
};
Checkbox.displayName = 'Checkbox';
var Checkbox$1 = Checkbox;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const sequentialId = createSequentialId('checkbox-input-');
const defaultProps = {
  isChecked: false,
  isDisabled: false,
  hasError: false
};
const getBorderColor = props => {
  if (props.hasError) {
    return designTokens.borderColorForCheckboxInputIconWhenError;
  }
  if (props.isDisabled) {
    return designTokens.borderColorForCheckboxInputIconWhenDisabled;
  }
  if (props.isReadOnly) {
    return designTokens.borderColorForCheckboxInputIconWhenReadonly;
  }
  return designTokens.borderColorForCheckboxInputIcon;
};
const getBackgroundColor = props => {
  if (props.isChecked || props.isIndeterminate) {
    if (props.hasError) {
      return designTokens.backgroundColorForCheckboxInputIconWhenError;
    }
    if (props.isDisabled) {
      return designTokens.backgroundColorForCheckboxInputIconWhenDisabled;
    }
    if (props.isReadOnly) {
      return designTokens.backgroundColorForCheckboxInputIconWhenReadonly;
    }
    return designTokens.backgroundColorForCheckboxInputIcon;
  }
  return designTokens.colorSurface;
};
const getTextColor = props => {
  if (props.hasError) {
    return designTokens.fontColorForCheckboxInputLabelWhenError;
  }
  if (props.isDisabled) {
    return designTokens.fontColorForCheckboxInputLabelWhenDisabled;
  }
  if (props.isReadOnly) {
    return designTokens.fontColorForCheckboxInputLabelWhenReadonly;
  }
  return designTokens.fontColorForCheckboxInputLabel;
};
const LabelTextWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e6nn4mw2"
} : {
  target: "e6nn4mw2",
  label: "LabelTextWrapper"
})("margin-left:calc(\n    ", designTokens.spacing20, " - ", designTokens.borderWidthForCheckboxInputIcon, "\n  );outline:none;border-radius:", designTokens.borderRadiusForTag, ";font-size:", designTokens.fontSizeForTextAsBody, ";line-height:", designTokens.lineHeightForTextAsBody, ";font-weight:", designTokens.fontWeightForTextAsBody, ";color:", props => getTextColor(props), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CheckboxIconWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e6nn4mw1"
} : {
  target: "e6nn4mw1",
  label: "CheckboxIconWrapper"
})("width:", props => props.width, ";height:", props => props.height, ";display:flex;flex-shrink:0;align-items:center;justify-content:center;border-radius:", designTokens.borderRadius6, ";", props => props.isHovered ? /*#__PURE__*/css("background-color:", designTokens.backgroundColorForCheckboxInputIconWhenHovered, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:CheckboxIconWrapper;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */") : '', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrYm94LWlucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0SWlFIiwiZmlsZSI6ImNoZWNrYm94LWlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2hhbmdlRXZlbnRIYW5kbGVyLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IGNyZWF0ZVNlcXVlbnRpYWxJZCB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3V0aWxzJztcbmltcG9ydCB7IEluZGV0ZXJtaW5hdGVJY29uLCBDaGVja2VkSWNvbiB9IGZyb20gJy4vaWNvbnMnO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJy4vY2hlY2tib3gnO1xuXG5jb25zdCBzZXF1ZW50aWFsSWQgPSBjcmVhdGVTZXF1ZW50aWFsSWQoJ2NoZWNrYm94LWlucHV0LScpO1xuXG5leHBvcnQgdHlwZSBUQ2hlY2tib3hQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFVzZWQgYXMgSFRNTCBpZCBhdHRyaWJ1dGUuIEFuIGlkIGlzIGF1dG8tZ2VuZXJhdGVkIHdoZW4gaXQgaXMgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuICAvKipcbiAgICogVXNlZCBhcyBIVE1MIG5hbWUgYXR0cmlidXRlIG9mIHRoZSBpbnB1dCBjb21wb25lbnRcbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBWYWx1ZSBvZiB0aGUgaW5wdXQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2hlY2tlZCBwcm9wZXJ0eSBzZXRzIHRoZSBjaGVja2VkIHN0YXRlIG9mIHRoZSBjaGVja2JveC5cbiAgICovXG4gIGlzQ2hlY2tlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoaXMgc3RhdGUgaXMgc2hvd24gYXMgYSBkYXNoIGluIHRoZSBjaGVja2JveCwgYW5kIGluZGljYXRlcyB0aGF0IGl0cyBzdGF0ZSBpcyBuZWl0aGVyIGNoZWNrZWQgbm9yIHVuY2hlY2tlZC5cbiAgICogVGhpcyBpcyBtb3N0IG9mdGVuIHVzZWQgd2hlbiB0aGUgY2hlY2tib3ggaXMgdGllZCB0byBhIGNvbGxlY3Rpb24gb2YgaXRlbXMgaW4gbWl4ZWQgc3RhdGVzIChFLmcgbmVzdGVkIGNoZWNrYm94ZXMpLlxuICAgKiBUaGlzIHRha2VzIHByZWNlZGVuY2UgdmlzdWFsbHkgaW4gY2FzZSBgaXNDaGVja2VkYCBpcyBtYXJrZWQgYXMgYHRydWVgXG4gICAqL1xuICBpc0luZGV0ZXJtaW5hdGU/OiBib29sZWFuO1xuICAvKipcbiAgICogIFdpbGwgYmUgdHJpZ2dlcmVkIHdoZW5ldmVyIGFuIGBDaGVja2JveElucHV0YCBpcyBjbGlja2VkLiBDYWxsZWQgd2l0aCBgZXZlbnRgXG4gICAqL1xuICBvbkNoYW5nZTogQ2hhbmdlRXZlbnRIYW5kbGVyPEhUTUxJbnB1dEVsZW1lbnQ+O1xuICAvKipcbiAgICogRm9yY2VzIENoZWNrYm94SW5wdXQgdG8gYmUgcmVuZGVyZWQgaW4gYSBob3ZlcmVkIHN0YXRlLlxuICAgKiBOZWVkZWQgZm9yIGNhc2VzIHdoZW4gaG92ZXJlZCBhcHBlYXJhbmNlIHNob3VsZCBiZSB0cmlnZ2VyZWQgYnkgdGhlIHBhcmVudCBjb21wb25lbnQgYW5kIG5vdCB0aGUgQ2hlY2tib3hJbnB1dCBpdHNlbGYuXG4gICAqIENoZWNrYm94SW5wdXQgaXMgY2FwYWJsZSBvZiBoYW5kbGluZyBpdCdzIG93biBob3ZlcmluZyB3aXRob3V0IHRoZSBuZWVkIHRvIHBhc3MgdGhpcyBwcm9wLlxuICAgKi9cbiAgaXNIb3ZlcmVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBDaGVja2JveElucHV0XG4gICAqL1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIE1ha2VzIHRoZSBDaGVja2JveElucHV0IHJlYWRvbmx5XG4gICAqL1xuICBpc1JlYWRPbmx5PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IHRoZSBjaGVja2JveCBoYXMgYW4gZXJyb3JcbiAgICovXG4gIGhhc0Vycm9yPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRoZSBkZXNjcmlwdGl2ZSB0ZXh0IG9mIHRoZSBDaGVja2JveElucHV0LCB1c2VkIGFzIGl0cyBsYWJlbC5cbiAgICovXG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xufTtcblxudHlwZSBUTGFiZWxQcm9wcyA9IFBpY2s8XG4gIFRDaGVja2JveFByb3BzLFxuICB8ICdoYXNFcnJvcidcbiAgfCAnaXNEaXNhYmxlZCdcbiAgfCAnaXNSZWFkT25seSdcbiAgfCAnaXNDaGVja2VkJ1xuICB8ICdpc0luZGV0ZXJtaW5hdGUnXG4gIHwgJ2lzSG92ZXJlZCdcbj47XG5cbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxcbiAgVENoZWNrYm94UHJvcHMsXG4gICdpc0NoZWNrZWQnIHwgJ2lzRGlzYWJsZWQnIHwgJ2hhc0Vycm9yJ1xuPiA9IHtcbiAgaXNDaGVja2VkOiBmYWxzZSxcbiAgaXNEaXNhYmxlZDogZmFsc2UsXG4gIGhhc0Vycm9yOiBmYWxzZSxcbn07XG5cbmNvbnN0IGdldEJvcmRlckNvbG9yID0gKHByb3BzOiBUTGFiZWxQcm9wcykgPT4ge1xuICBpZiAocHJvcHMuaGFzRXJyb3IpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yQ2hlY2tib3hJbnB1dEljb25XaGVuRXJyb3I7XG4gIH1cbiAgaWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yQ2hlY2tib3hJbnB1dEljb25XaGVuRGlzYWJsZWQ7XG4gIH1cbiAgaWYgKHByb3BzLmlzUmVhZE9ubHkpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yQ2hlY2tib3hJbnB1dEljb25XaGVuUmVhZG9ubHk7XG4gIH1cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvckNoZWNrYm94SW5wdXRJY29uO1xufTtcblxuY29uc3QgZ2V0QmFja2dyb3VuZENvbG9yID0gKHByb3BzOiBUTGFiZWxQcm9wcykgPT4ge1xuICBpZiAocHJvcHMuaXNDaGVja2VkIHx8IHByb3BzLmlzSW5kZXRlcm1pbmF0ZSkge1xuICAgIGlmIChwcm9wcy5oYXNFcnJvcikge1xuICAgICAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JDaGVja2JveElucHV0SWNvbldoZW5FcnJvcjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yQ2hlY2tib3hJbnB1dEljb25XaGVuRGlzYWJsZWQ7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pc1JlYWRPbmx5KSB7XG4gICAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckNoZWNrYm94SW5wdXRJY29uV2hlblJlYWRvbmx5O1xuICAgIH1cbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckNoZWNrYm94SW5wdXRJY29uO1xuICB9XG4gIHJldHVybiBkZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlO1xufTtcblxuY29uc3QgZ2V0VGV4dENvbG9yID0gKHByb3BzOiBUTGFiZWxQcm9wcykgPT4ge1xuICBpZiAocHJvcHMuaGFzRXJyb3IpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckNoZWNrYm94SW5wdXRMYWJlbFdoZW5FcnJvcjtcbiAgfVxuICBpZiAocHJvcHMuaXNEaXNhYmxlZCkge1xuICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuZm9udENvbG9yRm9yQ2hlY2tib3hJbnB1dExhYmVsV2hlbkRpc2FibGVkO1xuICB9XG4gIGlmIChwcm9wcy5pc1JlYWRPbmx5KSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5mb250Q29sb3JGb3JDaGVja2JveElucHV0TGFiZWxXaGVuUmVhZG9ubHk7XG4gIH1cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5mb250Q29sb3JGb3JDaGVja2JveElucHV0TGFiZWw7XG59O1xuXG5jb25zdCBMYWJlbFRleHRXcmFwcGVyID0gc3R5bGVkLmRpdjxUTGFiZWxQcm9wcz5gXG4gIG1hcmdpbi1sZWZ0OiBjYWxjKFxuICAgICR7ZGVzaWduVG9rZW5zLnNwYWNpbmcyMH0gLSAke2Rlc2lnblRva2Vucy5ib3JkZXJXaWR0aEZvckNoZWNrYm94SW5wdXRJY29ufVxuICApO1xuICBvdXRsaW5lOiBub25lO1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JUYWd9O1xuXG4gIGZvbnQtc2l6ZTogJHtkZXNpZ25Ub2tlbnMuZm9udFNpemVGb3JUZXh0QXNCb2R5fTtcbiAgbGluZS1oZWlnaHQ6ICR7ZGVzaWduVG9rZW5zLmxpbmVIZWlnaHRGb3JUZXh0QXNCb2R5fTtcbiAgZm9udC13ZWlnaHQ6ICR7ZGVzaWduVG9rZW5zLmZvbnRXZWlnaHRGb3JUZXh0QXNCb2R5fTtcbiAgY29sb3I6ICR7KHByb3BzKSA9PiBnZXRUZXh0Q29sb3IocHJvcHMpfTtcbmA7XG5cbnR5cGUgVENoZWNrYm94SWNvbldyYXBwZXJQcm9wcyA9IHtcbiAgd2lkdGg6IHN0cmluZztcbiAgaGVpZ2h0OiBzdHJpbmc7XG4gIGlzSG92ZXJlZDogYm9vbGVhbjtcbn07XG5jb25zdCBDaGVja2JveEljb25XcmFwcGVyID0gc3R5bGVkLmRpdjxUQ2hlY2tib3hJY29uV3JhcHBlclByb3BzPmBcbiAgd2lkdGg6ICR7KHByb3BzKSA9PiBwcm9wcy53aWR0aH07XG4gIGhlaWdodDogJHsocHJvcHMpID0+IHByb3BzLmhlaWdodH07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtc2hyaW5rOiAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNn07XG5cbiAgJHsocHJvcHMpID0+XG4gICAgcHJvcHMuaXNIb3ZlcmVkXG4gICAgICA/IGNzc2BcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JDaGVja2JveElucHV0SWNvbldoZW5Ib3ZlcmVkfTtcbiAgICAgICAgYFxuICAgICAgOiAnJ31cbmA7XG5cbmNvbnN0IENoZWNrYm94SWNvbiA9IChwcm9wczogVExhYmVsUHJvcHMpID0+IHtcbiAgY29uc3QgaXNEaXNhYmxlZE9yUmVhZE9ubHlTdGF0ZSA9IHByb3BzLmlzRGlzYWJsZWQgfHwgcHJvcHMuaXNSZWFkT25seTtcbiAgY29uc3QgY2FuRm9yY2VkSG92ZXJFZmZlY3QgPSBCb29sZWFuKFxuICAgIHByb3BzLmlzSG92ZXJlZCAmJiAhaXNEaXNhYmxlZE9yUmVhZE9ubHlTdGF0ZVxuICApO1xuICByZXR1cm4gKFxuICAgIDxDaGVja2JveEljb25XcmFwcGVyXG4gICAgICB3aWR0aD1cIjI2cHhcIlxuICAgICAgaGVpZ2h0PVwiMjZweFwiXG4gICAgICBpc0hvdmVyZWQ9e2NhbkZvcmNlZEhvdmVyRWZmZWN0fVxuICAgID5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXtbXG4gICAgICAgICAgY3NzYFxuICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAke2Rlc2lnblRva2Vucy5ib3JkZXJXaWR0aEZvckNoZWNrYm94SW5wdXRJY29ufTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czJ9O1xuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAke2dldEJvcmRlckNvbG9yKHByb3BzKX07XG4gICAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtnZXRCYWNrZ3JvdW5kQ29sb3IocHJvcHMpfTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDFweDtcbiAgICAgICAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAxOHB4O1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuICAgICAgICAgICAgc3ZnID4gcGF0aFtzdHJva2VdIHtcbiAgICAgICAgICAgICAgc3Ryb2tlOiAke2Rlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGAsXG4gICAgICAgIF0uZmlsdGVyKEJvb2xlYW4pfVxuICAgICAgPlxuICAgICAgICB7KCgpID0+IHtcbiAgICAgICAgICBpZiAocHJvcHMuaXNJbmRldGVybWluYXRlKVxuICAgICAgICAgICAgcmV0dXJuIDxJbmRldGVybWluYXRlSWNvbiBjb2xvcj1cInN1cmZhY2VcIiBzaXplPVwic2NhbGVcIiAvPjtcbiAgICAgICAgICBpZiAocHJvcHMuaXNDaGVja2VkKVxuICAgICAgICAgICAgcmV0dXJuIDxDaGVja2VkSWNvbiBjb2xvcj1cInN1cmZhY2VcIiBzaXplPVwic2NhbGVcIiAvPjtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSkoKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvQ2hlY2tib3hJY29uV3JhcHBlcj5cbiAgKTtcbn07XG5cbmNvbnN0IExhYmVsID0gc3R5bGVkLmxhYmVsPFRMYWJlbFByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgY3Vyc29yOiAkeyhwcm9wcykgPT4ge1xuICAgIGlmIChwcm9wcy5pc0Rpc2FibGVkKSByZXR1cm4gJ25vdC1hbGxvd2VkJztcbiAgICBpZiAocHJvcHMuaXNSZWFkT25seSkgcmV0dXJuICdkZWZhdWx0JztcbiAgICByZXR1cm4gJ3BvaW50ZXInO1xuICB9fTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICY6Zm9jdXMtd2l0aGluICR7TGFiZWxUZXh0V3JhcHBlcn0ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCAke2Rlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvcklucHV0V2hlbkZvY3VzZWR9O1xuICB9XG5cbiAgJjpob3ZlciAke0NoZWNrYm94SWNvbldyYXBwZXJ9IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyhwcm9wcykgPT5cbiAgICAgIHByb3BzLmlzRGlzYWJsZWQgfHwgcHJvcHMuaXNSZWFkT25seVxuICAgICAgICA/ICd1bnNldCdcbiAgICAgICAgOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yQ2hlY2tib3hJbnB1dEljb25XaGVuSG92ZXJlZH07XG4gIH1cbmA7XG5cbmNvbnN0IENoZWNrYm94SW5wdXQgPSAocHJvcHM6IFRDaGVja2JveFByb3BzKSA9PiB7XG4gIC8vIFdlIGdlbmVyYXRlIGFuIGlkIGluIGNhc2Ugbm8gaWQgaXMgcHJvdmlkZWQgYnkgdGhlIHBhcmVudCB0byBhdHRhY2ggdGhlXG4gIC8vIGxhYmVsIHRvIHRoZSBpbnB1dCBjb21wb25lbnQuXG4gIGNvbnN0IGlkID0gcHJvcHMuaWQgfHwgc2VxdWVudGlhbElkKCk7XG4gIHJldHVybiAoXG4gICAgPExhYmVsXG4gICAgICBodG1sRm9yPXtpZH1cbiAgICAgIGhhc0Vycm9yPXtwcm9wcy5oYXNFcnJvcn1cbiAgICAgIGlzRGlzYWJsZWQ9e3Byb3BzLmlzRGlzYWJsZWR9XG4gICAgICBpc1JlYWRPbmx5PXtwcm9wcy5pc1JlYWRPbmx5fVxuICAgICAgaXNDaGVja2VkPXtwcm9wcy5pc0NoZWNrZWR9XG4gICAgICBpc0hvdmVyZWQ9e3Byb3BzLmlzSG92ZXJlZH1cbiAgICAgIGlzSW5kZXRlcm1pbmF0ZT17cHJvcHMuaXNJbmRldGVybWluYXRlfVxuICAgID5cbiAgICAgIDxDaGVja2JveCB7Li4ucHJvcHN9IGlkPXtpZH0gLz5cbiAgICAgIDxDaGVja2JveEljb25cbiAgICAgICAgaGFzRXJyb3I9e3Byb3BzLmhhc0Vycm9yfVxuICAgICAgICBpc0Rpc2FibGVkPXtwcm9wcy5pc0Rpc2FibGVkfVxuICAgICAgICBpc1JlYWRPbmx5PXtwcm9wcy5pc1JlYWRPbmx5fVxuICAgICAgICBpc0NoZWNrZWQ9e3Byb3BzLmlzQ2hlY2tlZH1cbiAgICAgICAgaXNIb3ZlcmVkPXtwcm9wcy5pc0hvdmVyZWR9XG4gICAgICAgIGlzSW5kZXRlcm1pbmF0ZT17cHJvcHMuaXNJbmRldGVybWluYXRlfVxuICAgICAgLz5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbiAmJiAoXG4gICAgICAgIDxMYWJlbFRleHRXcmFwcGVyXG4gICAgICAgICAgaGFzRXJyb3I9e3Byb3BzLmhhc0Vycm9yfVxuICAgICAgICAgIGlzRGlzYWJsZWQ9e3Byb3BzLmlzRGlzYWJsZWR9XG4gICAgICAgICAgaXNSZWFkT25seT17cHJvcHMuaXNSZWFkT25seX1cbiAgICAgICAgICBpc0NoZWNrZWQ9e3Byb3BzLmlzQ2hlY2tlZH1cbiAgICAgICAgICBpc0hvdmVyZWQ9e3Byb3BzLmlzSG92ZXJlZH1cbiAgICAgICAgICBpc0luZGV0ZXJtaW5hdGU9e3Byb3BzLmlzSW5kZXRlcm1pbmF0ZX1cbiAgICAgICAgICAvLyBUbyBhbGxvdyBmb2N1c2luZyB0aGUgTGFiZWwgaW4gcmVhZE9ubHkgbW9kZSwgYmVjYXVzZSB0aGUgY2hlY2tib3ggZ2V0cyBkaXNhYmxlZCBhbmQgdGhlcmVmb3JlIHVuZm9jdXNhYmxlXG4gICAgICAgICAgdGFiSW5kZXg9e3Byb3BzLmlzUmVhZE9ubHkgPyAwIDogLTF9XG4gICAgICAgID5cbiAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvTGFiZWxUZXh0V3JhcHBlcj5cbiAgICAgICl9XG4gICAgPC9MYWJlbD5cbiAgKTtcbn07XG5cbkNoZWNrYm94SW5wdXQuZGlzcGxheU5hbWUgPSAnQ2hlY2tib3hJbnB1dCc7XG5DaGVja2JveElucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgQ2hlY2tib3hJbnB1dDtcbiJdfQ== */"));
const CheckboxIcon = props => {
  var _context;
  const isDisabledOrReadOnlyState = props.isDisabled || props.isReadOnly;
  const canForcedHoverEffect = Boolean(props.isHovered && !isDisabledOrReadOnlyState);
  return jsx(CheckboxIconWrapper, {
    width: "26px",
    height: "26px",
    isHovered: canForcedHoverEffect,
    children: jsx("div", {
      css: _filterInstanceProperty(_context = [/*#__PURE__*/css("border-width:", designTokens.borderWidthForCheckboxInputIcon, ";border-radius:", designTokens.borderRadius2, ";border-color:", getBorderColor(props), ";border-style:solid;background-color:", getBackgroundColor(props), ";padding:1px;width:18px;height:18px;display:flex;align-items:center;justify-content:center;svg>path[stroke]{stroke:", designTokens.colorSurface, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:CheckboxIcon;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")]).call(_context, Boolean),
      children: (() => {
        if (props.isIndeterminate) return jsx(IndeterminateIcon$1, {
          color: "surface",
          size: "scale"
        });
        if (props.isChecked) return jsx(CheckedIcon$1, {
          color: "surface",
          size: "scale"
        });
        return null;
      })()
    })
  });
};
const Label = /*#__PURE__*/_styled("label", process.env.NODE_ENV === "production" ? {
  target: "e6nn4mw0"
} : {
  target: "e6nn4mw0",
  label: "Label"
})("display:flex;align-items:center;cursor:", props => {
  if (props.isDisabled) return 'not-allowed';
  if (props.isReadOnly) return 'default';
  return 'pointer';
}, ";position:relative;&:focus-within ", LabelTextWrapper, "{box-shadow:0 0 0 2px ", designTokens.borderColorForInputWhenFocused, ";}&:hover ", CheckboxIconWrapper, "{background-color:", props => props.isDisabled || props.isReadOnly ? 'unset' : designTokens.backgroundColorForCheckboxInputIconWhenHovered, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CheckboxInput = props => {
  // We generate an id in case no id is provided by the parent to attach the
  // label to the input component.
  const id = props.id || sequentialId();
  return jsxs(Label, {
    htmlFor: id,
    hasError: props.hasError,
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    isChecked: props.isChecked,
    isHovered: props.isHovered,
    isIndeterminate: props.isIndeterminate,
    children: [jsx(Checkbox$1, _objectSpread(_objectSpread({}, props), {}, {
      id: id
    })), jsx(CheckboxIcon, {
      hasError: props.hasError,
      isDisabled: props.isDisabled,
      isReadOnly: props.isReadOnly,
      isChecked: props.isChecked,
      isHovered: props.isHovered,
      isIndeterminate: props.isIndeterminate
    }), props.children && jsx(LabelTextWrapper, {
      hasError: props.hasError,
      isDisabled: props.isDisabled,
      isReadOnly: props.isReadOnly,
      isChecked: props.isChecked,
      isHovered: props.isHovered,
      isIndeterminate: props.isIndeterminate
      // To allow focusing the Label in readOnly mode, because the checkbox gets disabled and therefore unfocusable
      ,
      tabIndex: props.isReadOnly ? 0 : -1,
      children: props.children
    })]
  });
};
CheckboxInput.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt.string,
  name: _pt.string,
  value: _pt.string,
  isChecked: _pt.bool,
  isIndeterminate: _pt.bool,
  onChange: _pt.func.isRequired,
  isHovered: _pt.bool,
  isDisabled: _pt.bool,
  isReadOnly: _pt.bool,
  hasError: _pt.bool,
  children: _pt.node
} : {};
CheckboxInput.displayName = 'CheckboxInput';
CheckboxInput.defaultProps = defaultProps;
var CheckboxInput$1 = CheckboxInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { CheckboxInput$1 as default, version };
