'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _styled = require('@emotion/styled/base');
require('prop-types');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var react = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var utils = require('@commercetools-uikit/utils');
var react$1 = require('react');
var inputUtils = require('@commercetools-uikit/input-utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);

function ownKeys$3(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$3(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$3(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$1 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$1 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$1[size], "px"),
        height: "".concat(iconSizes$1[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$1.big, "px"),
        height: "".concat(iconSizes$1.big, "px")
      };
  }
};
const getSizeStyle$1 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$1(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$1 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$1 = props => /*#__PURE__*/react.css("*:not([fill='none']){fill:", getColor$1(props.color), ";}&,image{", getSizeStyle$1(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgChecked = props => jsxRuntime.jsxs("svg", _objectSpread$3(_objectSpread$3({
  xmlns: "http://www.w3.org/2000/svg",
  width: 12,
  height: 9,
  fill: "none",
  viewBox: "0 0 12 9",
  role: "img"
}, props), {}, {
  children: [jsxRuntime.jsx("path", {
    fill: "#000",
    fillRule: "evenodd",
    d: "M.293 4.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.414l-3-3a1 1 0 0 1 0-1.414Z",
    clipRule: "evenodd"
  }), jsxRuntime.jsx("path", {
    fill: "#000",
    fillRule: "evenodd",
    d: "M11.707.293a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414l7-7a1 1 0 0 1 1.414 0Z",
    clipRule: "evenodd"
  })]
}));
SvgChecked.displayName = 'SvgChecked';
const CheckedIcon = props => jsxRuntime.jsx(react.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgChecked, _objectSpread$3(_objectSpread$3({}, props), {}, {
      className: createClass(getIconStyles$1(props))
    }));
  }
});
CheckedIcon.displayName = 'CheckedIcon';
var CheckedIcon$1 = CheckedIcon;

function ownKeys$2(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$2(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$2(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes[size], "px"),
        height: "".concat(iconSizes[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes.big, "px"),
        height: "".concat(iconSizes.big, "px")
      };
  }
};
const getSizeStyle = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles = props => /*#__PURE__*/react.css("*:not([fill='none']){fill:", getColor(props.color), ";}&,image{", getSizeStyle(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgIndeterminate = props => jsxRuntime.jsx("svg", _objectSpread$2(_objectSpread$2({
  xmlns: "http://www.w3.org/2000/svg",
  width: 12,
  height: 2,
  fill: "none",
  viewBox: "0 0 12 2",
  role: "img"
}, props), {}, {
  children: jsxRuntime.jsx("path", {
    stroke: "#000",
    strokeLinecap: "round",
    strokeWidth: 2,
    d: "M11 1H1"
  })
}));
SvgIndeterminate.displayName = 'SvgIndeterminate';
const IndeterminateIcon = props => jsxRuntime.jsx(react.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgIndeterminate, _objectSpread$2(_objectSpread$2({}, props), {}, {
      className: createClass(getIconStyles(props))
    }));
  }
});
IndeterminateIcon.displayName = 'IndeterminateIcon';
var IndeterminateIcon$1 = IndeterminateIcon;

function ownKeys$1(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$1(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$1(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const Checkbox = props => {
  const ref = react$1.useRef({
    indeterminate: false
  });
  react$1.useEffect(() => {
    if (props.isIndeterminate) {
      ref.current.indeterminate = true;
    }
  }, [props.isIndeterminate]);
  return jsxRuntime.jsx("input", _objectSpread$1(_objectSpread$1(_objectSpread$1({
    type: "checkbox"
    // @ts-ignore
    ,
    ref: ref
  }, utils.filterDataAttributes(props)), utils.filterAriaAttributes(props)), {}, {
    /* ARIA */
    "aria-readonly": props.isReadOnly,
    "aria-checked": props.isChecked,
    css: inputUtils.accessibleHiddenInputStyles,
    id: props.id,
    name: props.name,
    value: props.value,
    disabled: props.isDisabled || props.isReadOnly,
    readOnly: props.isReadOnly,
    checked: props.isChecked && !props.isIndeterminate,
    onChange: !props.isReadOnly ? props.onChange : undefined
  }));
};
Checkbox.displayName = 'Checkbox';
var Checkbox$1 = Checkbox;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const sequentialId = utils.createSequentialId('checkbox-input-');
const defaultProps = {
  isChecked: false,
  isDisabled: false,
  hasError: false
};
const getBorderColor = props => {
  if (props.hasError) {
    return designSystem.designTokens.borderColorForCheckboxInputIconWhenError;
  }
  if (props.isDisabled) {
    return designSystem.designTokens.borderColorForCheckboxInputIconWhenDisabled;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.borderColorForCheckboxInputIconWhenReadonly;
  }
  return designSystem.designTokens.borderColorForCheckboxInputIcon;
};
const getBackgroundColor = props => {
  if (props.isChecked || props.isIndeterminate) {
    if (props.hasError) {
      return designSystem.designTokens.backgroundColorForCheckboxInputIconWhenError;
    }
    if (props.isDisabled) {
      return designSystem.designTokens.backgroundColorForCheckboxInputIconWhenDisabled;
    }
    if (props.isReadOnly) {
      return designSystem.designTokens.backgroundColorForCheckboxInputIconWhenReadonly;
    }
    return designSystem.designTokens.backgroundColorForCheckboxInputIcon;
  }
  return designSystem.designTokens.colorSurface;
};
const getTextColor = props => {
  if (props.hasError) {
    return designSystem.designTokens.fontColorForCheckboxInputLabelWhenError;
  }
  if (props.isDisabled) {
    return designSystem.designTokens.fontColorForCheckboxInputLabelWhenDisabled;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.fontColorForCheckboxInputLabelWhenReadonly;
  }
  return designSystem.designTokens.fontColorForCheckboxInputLabel;
};
const LabelTextWrapper = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e6nn4mw2"
} )("margin-left:calc(\n    ", designSystem.designTokens.spacing20, " - ", designSystem.designTokens.borderWidthForCheckboxInputIcon, "\n  );outline:none;border-radius:", designSystem.designTokens.borderRadiusForTag, ";font-size:", designSystem.designTokens.fontSizeForTextAsBody, ";line-height:", designSystem.designTokens.lineHeightForTextAsBody, ";font-weight:", designSystem.designTokens.fontWeightForTextAsBody, ";color:", props => getTextColor(props), ";" + ("" ));
const CheckboxIconWrapper = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e6nn4mw1"
} )("width:", props => props.width, ";height:", props => props.height, ";display:flex;flex-shrink:0;align-items:center;justify-content:center;border-radius:", designSystem.designTokens.borderRadius6, ";", props => props.isHovered ? /*#__PURE__*/react.css("background-color:", designSystem.designTokens.backgroundColorForCheckboxInputIconWhenHovered, ";" + ("" ), "" ) : '', ";" + ("" ));
const CheckboxIcon = props => {
  var _context;
  const isDisabledOrReadOnlyState = props.isDisabled || props.isReadOnly;
  const canForcedHoverEffect = Boolean(props.isHovered && !isDisabledOrReadOnlyState);
  return jsxRuntime.jsx(CheckboxIconWrapper, {
    width: "26px",
    height: "26px",
    isHovered: canForcedHoverEffect,
    children: jsxRuntime.jsx("div", {
      css: _filterInstanceProperty__default["default"](_context = [/*#__PURE__*/react.css("border-width:", designSystem.designTokens.borderWidthForCheckboxInputIcon, ";border-radius:", designSystem.designTokens.borderRadius2, ";border-color:", getBorderColor(props), ";border-style:solid;background-color:", getBackgroundColor(props), ";padding:1px;width:18px;height:18px;display:flex;align-items:center;justify-content:center;svg>path[stroke]{stroke:", designSystem.designTokens.colorSurface, ";}" + ("" ), "" )]).call(_context, Boolean),
      children: (() => {
        if (props.isIndeterminate) return jsxRuntime.jsx(IndeterminateIcon$1, {
          color: "surface",
          size: "scale"
        });
        if (props.isChecked) return jsxRuntime.jsx(CheckedIcon$1, {
          color: "surface",
          size: "scale"
        });
        return null;
      })()
    })
  });
};
const Label = /*#__PURE__*/_styled__default["default"]("label", {
  target: "e6nn4mw0"
} )("display:flex;align-items:center;cursor:", props => {
  if (props.isDisabled) return 'not-allowed';
  if (props.isReadOnly) return 'default';
  return 'pointer';
}, ";position:relative;&:focus-within ", LabelTextWrapper, "{box-shadow:0 0 0 2px ", designSystem.designTokens.borderColorForInputWhenFocused, ";}&:hover ", CheckboxIconWrapper, "{background-color:", props => props.isDisabled || props.isReadOnly ? 'unset' : designSystem.designTokens.backgroundColorForCheckboxInputIconWhenHovered, ";}" + ("" ));
const CheckboxInput = props => {
  // We generate an id in case no id is provided by the parent to attach the
  // label to the input component.
  const id = props.id || sequentialId();
  return jsxRuntime.jsxs(Label, {
    htmlFor: id,
    hasError: props.hasError,
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    isChecked: props.isChecked,
    isHovered: props.isHovered,
    isIndeterminate: props.isIndeterminate,
    children: [jsxRuntime.jsx(Checkbox$1, _objectSpread(_objectSpread({}, props), {}, {
      id: id
    })), jsxRuntime.jsx(CheckboxIcon, {
      hasError: props.hasError,
      isDisabled: props.isDisabled,
      isReadOnly: props.isReadOnly,
      isChecked: props.isChecked,
      isHovered: props.isHovered,
      isIndeterminate: props.isIndeterminate
    }), props.children && jsxRuntime.jsx(LabelTextWrapper, {
      hasError: props.hasError,
      isDisabled: props.isDisabled,
      isReadOnly: props.isReadOnly,
      isChecked: props.isChecked,
      isHovered: props.isHovered,
      isIndeterminate: props.isIndeterminate
      // To allow focusing the Label in readOnly mode, because the checkbox gets disabled and therefore unfocusable
      ,
      tabIndex: props.isReadOnly ? 0 : -1,
      children: props.children
    })]
  });
};
CheckboxInput.propTypes = {};
CheckboxInput.displayName = 'CheckboxInput';
CheckboxInput.defaultProps = defaultProps;
var CheckboxInput$1 = CheckboxInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = CheckboxInput$1;
exports.version = version;
