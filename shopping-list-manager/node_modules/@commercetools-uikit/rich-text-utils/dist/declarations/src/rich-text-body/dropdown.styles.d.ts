/// <reference types="react" />
type TDropdownStylesProps = {
    isSelected?: boolean;
    isIndeterminate?: boolean;
    isStyleButton?: boolean;
    isOpen?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
};
declare const DropdownItem: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & TDropdownStylesProps, import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, {}>;
declare const getButtonStyles: (props: TDropdownStylesProps) => (false | import("@emotion/utils").SerializedStyles | undefined)[];
declare const DropdownContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
declare const DropdownItemLabelWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export { DropdownContainer, DropdownItem, DropdownItemLabelWrapper, getButtonStyles, };
