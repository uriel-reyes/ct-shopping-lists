import type { ElementType, FunctionComponent, ReactNode } from 'react';
export type TDropdownLabel = {
    children: ReactNode;
};
export type TDropdownProps = {
    label: string;
    isMulti: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    onChange?: ({ value }: TItem) => void;
    components: {
        Item: FunctionComponent<unknown>;
        Label: FunctionComponent<TDropdownLabel>;
    };
    options: Array<TItem>;
    getIsItemSelected: ({ value }: TItem) => boolean;
};
type TItem = {
    value: string;
    label: string;
};
declare const Dropdown: {
    (props: TDropdownProps): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    defaultProps: {
        components: {
            Item: import("@emotion/styled").StyledComponent<{
                theme?: import("@emotion/react").Theme | undefined;
                as?: ElementType<any> | undefined;
            } & {
                isSelected?: boolean | undefined;
                isIndeterminate?: boolean | undefined;
                isStyleButton?: boolean | undefined;
                isOpen?: boolean | undefined;
                isDisabled?: boolean | undefined;
                isReadOnly?: boolean | undefined;
            }, import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, {}>;
            Label: import("@emotion/styled").CreateStyledComponent<{
                theme?: import("@emotion/react").Theme | undefined;
                as?: ElementType<any> | undefined;
            }, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
        };
        isMulti: boolean;
    };
};
export default Dropdown;
