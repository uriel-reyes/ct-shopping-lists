'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _everyInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/every');
var _Object$values = require('@babel/runtime-corejs3/core-js-stable/object/values');
var _reduceInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/reduce');
var _Object$entries = require('@babel/runtime-corejs3/core-js-stable/object/entries');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
require('@commercetools-uikit/utils');
var uniq = require('lodash/uniq');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _Array$isArray = require('@babel/runtime-corejs3/core-js-stable/array/is-array');
var _flatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/flat');
var _Array$from = require('@babel/runtime-corejs3/core-js-stable/array/from');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var escapeHtml = require('escape-html');
var slate = require('slate');
var slateHyperscript = require('slate-hyperscript');
var parse = require('style-to-object');
var isEmpty$2 = require('lodash/isEmpty');
var _someInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/some');
var _includesInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/includes');
var slateReact = require('slate-react');
var jsxRuntime = require('@emotion/react/jsx-runtime');
require('prop-types');
var react = require('react');
var inputUtils = require('@commercetools-uikit/input-utils');
var _styled = require('@emotion/styled/base');
var _findInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/find');
var designSystem = require('@commercetools-uikit/design-system');
var reactIntl = require('react-intl');
var react$1 = require('@emotion/react');
var Tooltip = require('@commercetools-uikit/tooltip');
var icons = require('@commercetools-uikit/icons');
var Inline = require('@commercetools-uikit/spacings-inline');
var omit = require('lodash/omit');
var DownshiftUntyped = require('downshift');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _everyInstanceProperty__default = /*#__PURE__*/_interopDefault(_everyInstanceProperty);
var _Object$values__default = /*#__PURE__*/_interopDefault(_Object$values);
var _reduceInstanceProperty__default = /*#__PURE__*/_interopDefault(_reduceInstanceProperty);
var _Object$entries__default = /*#__PURE__*/_interopDefault(_Object$entries);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var uniq__default = /*#__PURE__*/_interopDefault(uniq);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _Array$isArray__default = /*#__PURE__*/_interopDefault(_Array$isArray);
var _flatInstanceProperty__default = /*#__PURE__*/_interopDefault(_flatInstanceProperty);
var _Array$from__default = /*#__PURE__*/_interopDefault(_Array$from);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var escapeHtml__default = /*#__PURE__*/_interopDefault(escapeHtml);
var parse__default = /*#__PURE__*/_interopDefault(parse);
var isEmpty__default = /*#__PURE__*/_interopDefault(isEmpty$2);
var _someInstanceProperty__default = /*#__PURE__*/_interopDefault(_someInstanceProperty);
var _includesInstanceProperty__default = /*#__PURE__*/_interopDefault(_includesInstanceProperty);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _findInstanceProperty__default = /*#__PURE__*/_interopDefault(_findInstanceProperty);
var Tooltip__default = /*#__PURE__*/_interopDefault(Tooltip);
var Inline__default = /*#__PURE__*/_interopDefault(Inline);
var omit__default = /*#__PURE__*/_interopDefault(omit);
var DownshiftUntyped__default = /*#__PURE__*/_interopDefault(DownshiftUntyped);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);

function ownKeys$g(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var _context5, _context6; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context5 = ownKeys$g(Object(source), !0)).call(_context5, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context6 = ownKeys$g(Object(source))).call(_context6, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }

// Slate's way of providing custom type annotations comes down to extending `CustomTypes` interface
// more: https://docs.slatejs.org/concepts/12-typescript
// example: https://github.com/ianstormtaylor/slate/blob/main/packages/slate-react/src/custom-types.ts
const serializeNode = node => {
  var _context;
  if (slate.Text.isText(node)) {
    let string = escapeHtml__default["default"](node.text);
    if (node.bold) {
      string = "<strong>".concat(string, "</strong>");
    }
    if (node.code) {
      string = "<code>".concat(string, "</code>");
    }
    if (node.italic) {
      string = "<em>".concat(string, "</em>");
    }
    if (node.underline) {
      string = "<u>".concat(string, "</u>");
    }
    if (node.superscript) {
      string = "<sup>".concat(string, "</sup>");
    }
    if (node.subscript) {
      string = "<sub>".concat(string, "</sub>");
    }
    if (node.strikethrough) {
      string = "<del>".concat(string, "</del>");
    }
    return string;
  }
  const children = _mapInstanceProperty__default["default"](_context = node.children).call(_context, serializeNode).join('');
  switch (node.type) {
    case 'block-quote':
      return "<blockquote>".concat(children, "</blockquote>");
    case 'paragraph':
      return "<p>".concat(children, "</p>");
    case 'code':
      return "<pre>\n            <code>".concat(children, "</code>\n          </pre>");
    case 'span':
      return "<span>".concat(children, "</span>");
    case 'bulleted-list':
      return "<ul>".concat(children, "</ul>");
    case 'numbered-list':
      return "<ol>".concat(children, "</ol>");
    case 'list-item':
      return "<li>".concat(children, "</li>");
    case 'heading-one':
      return "<h1>".concat(children, "</h1>");
    case 'heading-two':
      return "<h2>".concat(children, "</h2>");
    case 'heading-three':
      return "<h3>".concat(children, "</h3>");
    case 'heading-four':
      return "<h4}>".concat(children, "</h4>");
    case 'heading-five':
      return "<h5>".concat(children, "</h5>");
    default:
      return children;
  }
};
const isEmptyParagraph = value => slate.Element.isElement(value) && value.type === 'paragraph' && value.children.length === 1 && value.children[0].text === '';
const serializeSingle = value => {
  if (value === null || isEmptyParagraph(value)) return '';
  return serializeNode(value);
};
const serialize = value => {
  let outputHtml = '';
  if (value === null || !_Array$isArray__default["default"](value)) {
    outputHtml = serializeSingle(value);
  } else {
    outputHtml = _mapInstanceProperty__default["default"](value).call(value, node => serializeSingle(node)).join('');
  }
  return outputHtml;
};
const ELEMENT_TAGS = {
  BLOCKQUOTE: () => ({
    type: 'quote'
  }),
  H1: () => ({
    type: 'heading-one'
  }),
  H2: () => ({
    type: 'heading-two'
  }),
  H3: () => ({
    type: 'heading-three'
  }),
  H4: () => ({
    type: 'heading-four'
  }),
  H5: () => ({
    type: 'heading-five'
  }),
  H6: () => ({
    type: 'heading-six'
  }),
  LI: () => ({
    type: 'list-item'
  }),
  OL: () => ({
    type: 'numbered-list'
  }),
  P: () => ({
    type: 'paragraph'
  }),
  PRE: () => ({
    type: 'code'
  }),
  UL: () => ({
    type: 'bulleted-list'
  })
};
const TEXT_TAGS = {
  CODE: () => ({
    code: true
  }),
  DEL: () => ({
    strikethrough: true
  }),
  EM: () => ({
    italic: true
  }),
  I: () => ({
    italic: true
  }),
  S: () => ({
    strikethrough: true
  }),
  SUP: () => ({
    superscript: true
  }),
  SUB: () => ({
    subscript: true
  }),
  STRONG: () => ({
    bold: true
  }),
  U: () => ({
    underline: true
  })
};
const mapper = {
  'font-weight': {
    bold: {
      bold: true
    }
  },
  'text-decoration-line': {
    underline: {
      underline: true
    },
    'line-through': {
      strikethrough: true
    }
  },
  'text-decoration': {
    underline: {
      underline: true
    }
  },
  'font-style': {
    italic: {
      italic: true
    }
  },
  'vertical-align': {
    sup: {
      superscript: true
    },
    sub: {
      subscript: true
    }
  }
};
const wrapWithParagraph = textContent => slateHyperscript.jsx('element', {
  type: 'paragraph'
}, textContent);
const wrapWithParagraphIfRootElement = (el, textContent) => {
  var _el$parentNode;
  return ((_el$parentNode = el.parentNode) === null || _el$parentNode === void 0 ? void 0 : _el$parentNode.nodeName) === 'BODY' // root element, because body is eventually turned to React fragment
  ? wrapWithParagraph(textContent) : textContent;
};
const deserializeElement = el => {
  var _context2, _context3;
  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#value
  if (el.nodeType === 3) {
    return wrapWithParagraphIfRootElement(el, {
      text: el.textContent || ''
    }); // for root TEXT_NODE -> wrap with <p>
  } else if (el.nodeType !== 1) {
    return null; // for non-ELEMENT_NODE
  }

  const nodeName = el.nodeName;
  let parent = el;
  if (nodeName === 'PRE' && el.childNodes[0] && el.childNodes[0].nodeName === 'CODE') {
    parent = el.childNodes[0];
  }
  let children = _flatInstanceProperty__default["default"](_context2 = _mapInstanceProperty__default["default"](_context3 = _Array$from__default["default"](parent.childNodes)).call(_context3, deserializeElement)).call(_context2);
  if (children.length === 0) {
    children = [{
      text: ''
    }];
  }
  if (el.nodeName === 'BODY') {
    return slateHyperscript.jsx('fragment', {}, children);
  }
  if (el.nodeName === 'SPAN') {
    let attrs = {};
    const styleStr = el.getAttribute('style');
    const styleObj = parse__default["default"](styleStr || '');
    if (isEmpty__default["default"](styleObj)) {
      // if no style attrs -> just use `span`
      return wrapWithParagraphIfRootElement(el, slateHyperscript.jsx('element', {
        type: 'span'
      }, children));
    } else {
      var _context4;
      attrs = _reduceInstanceProperty__default["default"](_context4 = _Object$entries__default["default"](styleObj || {})).call(_context4, (mappedAttrObj, _ref) => {
        let _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];
        const values = value.split(' '); // to cover the case of space-separated values e.g. `text-decoration-line: "underline line-through"`

        _forEachInstanceProperty__default["default"](values).call(values, splittedValue => {
          var _mapper$key;
          if ((_mapper$key = mapper[key]) !== null && _mapper$key !== void 0 && _mapper$key[splittedValue]) {
            // checking if the parsed style attr value has representation in the mapper obj
            mappedAttrObj = _objectSpread$g(_objectSpread$g({}, mappedAttrObj), mapper[key][splittedValue]);
          }
        });
        return mappedAttrObj;
      }, {});
      if (isEmpty__default["default"](attrs)) {
        // if all style attr values are irrelevant -> just use `span`
        return wrapWithParagraphIfRootElement(el, slateHyperscript.jsx('element', {
          type: 'span'
        }, children));
      }
      return wrapWithParagraphIfRootElement(el,
      // children mapping to cover nested elements within text e.g. <span>Some <span>text</span></span>
      _mapInstanceProperty__default["default"](children).call(children, child => slate.Text.isText(child) ? slateHyperscript.jsx('text', attrs, child) : slateHyperscript.jsx('element', attrs, child)));
    }
  }
  if (ELEMENT_TAGS[nodeName]) {
    const attrs = ELEMENT_TAGS[nodeName]();
    return slateHyperscript.jsx('element', attrs, children);
  }
  if (TEXT_TAGS[nodeName]) {
    const attrs = TEXT_TAGS[nodeName]();
    return _mapInstanceProperty__default["default"](children).call(children, child => slateHyperscript.jsx('text', attrs, slate.Text.isText(child) ? child : 'Invalid markup'));
  }
  return children;
};
const deserialize = html => {
  const document = new DOMParser().parseFromString(html || '<p></p>', 'text/html');
  return deserializeElement(document.body);
};
const defaultSlateState = [{
  type: 'paragraph',
  children: [{
    text: ''
  }]
}];
const html = {
  serialize,
  deserialize
};
var html$1 = html;

const isTextNodeNonEmpty = node => slate.Text.isText(node) && node.text !== '';
const isElementNodeNonEmpty = node => {
  var _context;
  return _someInstanceProperty__default["default"](_context = node.children).call(_context, isTextNodeNonEmpty);
};

/*
  Slate editor must contain at least one element.
  more: https://github.com/ianstormtaylor/slate/issues/3613

  Therefore, editor is considered non-empty if has at least one child element with non-empty text.
*/
const isEmpty$1 = rawValue => {
  const deserialized = html$1.deserialize(rawValue);
  if (slate.Element.isElement(deserialized)) {
    var _context2;
    return !_someInstanceProperty__default["default"](_context2 = deserialized.children).call(_context2, isTextNodeNonEmpty);
  }
  if (slate.Element.isElementList(deserialized)) {
    return _someInstanceProperty__default["default"](deserialized).call(deserialized, node => {
      var _context3;
      return !(slate.Element.isElement(node) && _someInstanceProperty__default["default"](_context3 = node.children).call(_context3, childNode => slate.Text.isText(childNode) && isTextNodeNonEmpty(childNode) || slate.Element.isElement(childNode) && isElementNodeNonEmpty(childNode))) || slate.Text.isText(node) && node.text === '';
    });
  }
  return true;
};
var isRichTextEmpty = isEmpty$1;

const initializeValue = value => html$1.serialize(html$1.deserialize(value));
const isLocalizedHtmlValueEmpty = value => !value || isRichTextEmpty(value);
const isEmpty = localizedHtmlValue => {
  var _context;
  if (!localizedHtmlValue) return true;
  return _everyInstanceProperty__default["default"](_context = _Object$values__default["default"](localizedHtmlValue)).call(_context, isLocalizedHtmlValueEmpty);
};
const omitEmptyTranslations = localizedString => {
  var _context2;
  return _reduceInstanceProperty__default["default"](_context2 = _Object$entries__default["default"](localizedString)).call(_context2, (localizedStringWithoutEmptyTranslations, _ref) => {
    let _ref2 = _slicedToArray(_ref, 2),
      language = _ref2[0],
      value = _ref2[1];
    if (!isLocalizedHtmlValueEmpty(value)) {
      localizedStringWithoutEmptyTranslations[language] = value;
    }
    return localizedStringWithoutEmptyTranslations;
  }, {});
};
const createLocalizedString = function (languages) {
  let existingTranslations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const mergedLanguages = existingTranslations ? uniq__default["default"]([...languages, ..._Object$keys__default["default"](existingTranslations)]) : languages;
  return _reduceInstanceProperty__default["default"](mergedLanguages).call(mergedLanguages, (localizedString, language) => {
    localizedString[language] = existingTranslations[language] ? initializeValue(existingTranslations[language]) : initializeValue('');
    return localizedString;
  }, {});
};

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createLocalizedString: createLocalizedString,
  isEmpty: isEmpty,
  omitEmptyTranslations: omitEmptyTranslations
});

const HiddenInput = props => {
  const handleFocus = props.handleFocus;
  const onFocus = react.useCallback(event => {
    event.preventDefault();
    if (!props.isFocused) {
      handleFocus();
    }
  }, [props.isFocused, handleFocus]);
  const onBlur = react.useCallback(event => {
    event.preventDefault();
  }, []);
  return jsxRuntime.jsx("input", {
    css: inputUtils.accessibleHiddenInputStyles,
    id: props.id,
    onFocus: onFocus,
    onBlur: onBlur,
    disabled: props.disabled,
    tabIndex: props.readOnly ? 0 : -1
  });
};
HiddenInput.propTypes = {};
HiddenInput.displayName = 'HiddenInput';
var HiddenInput$1 = HiddenInput;

function ownKeys$f(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$f(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$f(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$b = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$b = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$b[size], "px"),
        height: "".concat(iconSizes$b[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$b.big, "px"),
        height: "".concat(iconSizes$b.big, "px")
      };
  }
};
const getSizeStyle$b = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$b(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$b = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$b = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$b(props.color), ";}&,image{", getSizeStyle$b(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgBold = props => jsxRuntime.jsx("svg", _objectSpread$f(_objectSpread$f({
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: jsxRuntime.jsx("path", {
    fill: "#1A1A1A",
    fillRule: "evenodd",
    d: "M6 3h5.599c2.55 0 4.403.363 5.555 1.089 1.153.726 1.729 1.88 1.729 3.464 0 1.074-.252 1.956-.757 2.645a3.023 3.023 0 0 1-2.012 1.243v.123c1.14.254 1.963.73 2.468 1.427.504.698.756 1.625.756 2.781 0 1.64-.592 2.92-1.778 3.84-1.185.918-2.795 1.377-4.83 1.377H6V3Zm3.814 7.124h2.215c1.034 0 1.782-.16 2.246-.48.463-.32.695-.848.695-1.587 0-.689-.252-1.183-.757-1.482-.504-.3-1.302-.45-2.393-.45H9.814v4Zm0 3.027v4.688H12.3c1.05 0 1.825-.2 2.326-.602.5-.402.75-1.018.75-1.846 0-1.493-1.066-2.24-3.199-2.24H9.814Z"
  })
}));
SvgBold.displayName = 'SvgBold';
const BoldIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgBold, _objectSpread$f(_objectSpread$f({}, props), {}, {
      className: createClass(getIconStyles$b(props))
    }));
  }
});
BoldIcon.displayName = 'BoldIcon';
var BoldIcon$1 = BoldIcon;

function ownKeys$e(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$e(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$e(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$a = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$a = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$a[size], "px"),
        height: "".concat(iconSizes$a[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$a.big, "px"),
        height: "".concat(iconSizes$a.big, "px")
      };
  }
};
const getSizeStyle$a = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$a(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$a = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$a = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$a(props.color), ";}&,image{", getSizeStyle$a(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgExpand = props => jsxRuntime.jsx("svg", _objectSpread$e(_objectSpread$e({
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: jsxRuntime.jsx("path", {
    d: "M4 21a.965.965 0 0 1-.712-.288A.965.965 0 0 1 3 20v-6c0-.283.096-.521.288-.713A.967.967 0 0 1 4 13a.97.97 0 0 1 .713.287A.97.97 0 0 1 5 14v3.6L17.6 5H14a.965.965 0 0 1-.712-.288A.965.965 0 0 1 13 4c0-.283.096-.521.288-.713A.967.967 0 0 1 14 3h6c.283 0 .52.096.712.287.192.192.288.43.288.713v6c0 .283-.096.52-.288.712A.965.965 0 0 1 20 11a.965.965 0 0 1-.712-.288A.965.965 0 0 1 19 10V6.4L6.4 19H10c.283 0 .521.096.713.288A.967.967 0 0 1 11 20c0 .283-.096.52-.287.712A.968.968 0 0 1 10 21H4Z"
  })
}));
SvgExpand.displayName = 'SvgExpand';
const ExpandIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgExpand, _objectSpread$e(_objectSpread$e({}, props), {}, {
      className: createClass(getIconStyles$a(props))
    }));
  }
});
ExpandIcon.displayName = 'ExpandIcon';
var ExpandIcon$1 = ExpandIcon;

function ownKeys$d(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$d(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$d(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$9 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$9 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$9[size], "px"),
        height: "".concat(iconSizes$9[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$9.big, "px"),
        height: "".concat(iconSizes$9.big, "px")
      };
  }
};
const getSizeStyle$9 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$9(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$9 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$9 = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$9(props.color), ";}&,image{", getSizeStyle$9(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgItalic = props => jsxRuntime.jsx("svg", _objectSpread$d(_objectSpread$d({
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: jsxRuntime.jsx("path", {
    fill: "#1A1A1A",
    fillRule: "evenodd",
    d: "M9 20.99 12.827 3h2.067l-3.827 17.99z"
  })
}));
SvgItalic.displayName = 'SvgItalic';
const ItalicIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgItalic, _objectSpread$d(_objectSpread$d({}, props), {}, {
      className: createClass(getIconStyles$9(props))
    }));
  }
});
ItalicIcon.displayName = 'ItalicIcon';
var ItalicIcon$1 = ItalicIcon;

function ownKeys$c(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$c(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$c(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$8 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$8 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$8[size], "px"),
        height: "".concat(iconSizes$8[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$8.big, "px"),
        height: "".concat(iconSizes$8.big, "px")
      };
  }
};
const getSizeStyle$8 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$8(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$8 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$8 = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$8(props.color), ";}&,image{", getSizeStyle$8(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgMoreStyles = props => jsxRuntime.jsxs("svg", _objectSpread$c(_objectSpread$c({
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: [jsxRuntime.jsx("defs", {
    children: jsxRuntime.jsx("path", {
      id: "more-styles_react_svg__a",
      d: "M9.261 8.057a8.97 8.97 0 0 1 3.548.738l-.605 1.384c-1.128-.465-2.15-.697-3.066-.697-.806 0-1.415.126-1.825.38-.41.252-.615.6-.615 1.045 0 .301.077.557.23.77.155.211.402.413.744.604.342.192.998.469 1.969.83.355.13.68.26.974.39L13.5 13.5v1.25h-1.007c.368.462.552 1.023.552 1.684 0 1.046-.39 1.853-1.169 2.42-.78.567-1.873.851-3.281.851-1.49 0-2.652-.236-3.486-.707v-1.58c.54.274 1.119.49 1.738.646a7.258 7.258 0 0 0 1.789.236c.889 0 1.572-.142 2.05-.425.48-.284.719-.716.719-1.297 0-.438-.19-.812-.57-1.123-.255-.21-.673-.444-1.255-.704L4.5 14.75V13.5h2.164a4.444 4.444 0 0 1-.279-.168c-.44-.29-.769-.62-.984-.99-.215-.368-.323-.81-.323-1.322 0-.916.372-1.639 1.118-2.169.745-.53 1.767-.794 3.065-.794Zm11.27 2.443c.127 0 .237.05.33.148.092.099.139.215.139.35a.492.492 0 0 1-.078.273l-.061.078-3.281 3.489a.438.438 0 0 1-.587.064l-.073-.064-3.28-3.49a.494.494 0 0 1-.14-.35c0-.135.046-.251.14-.35a.448.448 0 0 1 .237-.139l.092-.009h6.562Zm-7.076-7.094.795 1.303.802-1.303h1.267l-1.333 2.003L16.381 7.5h-1.27l-.861-1.403-.864 1.403h-1.267l1.388-2.091-1.319-2.003h1.267Z"
    })
  }), jsxRuntime.jsx("use", {
    xlinkHref: "#more-styles_react_svg__a",
    fill: "#1A1A1A",
    fillRule: "evenodd"
  })]
}));
SvgMoreStyles.displayName = 'SvgMoreStyles';
const MoreStylesIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgMoreStyles, _objectSpread$c(_objectSpread$c({}, props), {}, {
      className: createClass(getIconStyles$8(props))
    }));
  }
});
MoreStylesIcon.displayName = 'MoreStylesIcon';
var MoreStylesIcon$1 = MoreStylesIcon;

function ownKeys$b(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$b(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$b(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$7 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$7 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$7[size], "px"),
        height: "".concat(iconSizes$7[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$7.big, "px"),
        height: "".concat(iconSizes$7.big, "px")
      };
  }
};
const getSizeStyle$7 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$7(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$7 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$7 = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$7(props.color), ";}&,image{", getSizeStyle$7(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgOrderedList = props => jsxRuntime.jsx("svg", _objectSpread$b(_objectSpread$b({
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: jsxRuntime.jsx("path", {
    fill: "#1A1A1A",
    fillRule: "evenodd",
    d: "M4.42 16c.449 0 .803.102 1.063.306.26.204.39.488.39.852 0 .304-.082.562-.247.775a1.25 1.25 0 0 1-.69.439v.02c.35.049.614.168.794.358.18.19.27.445.27.766 0 .468-.151.833-.454 1.093-.302.26-.734.391-1.295.391-.47 0-.887-.088-1.251-.263v-.875c.168.096.353.173.554.233.202.06.402.09.6.09.302 0 .525-.058.67-.173.143-.115.216-.3.216-.556 0-.228-.083-.39-.25-.485-.165-.096-.43-.143-.794-.143h-.329v-.789h.335c.336 0 .581-.05.737-.148.155-.098.232-.268.232-.507 0-.368-.205-.552-.616-.552-.143 0-.287.026-.435.08a2.04 2.04 0 0 0-.49.276l-.424-.709C3.4 16.159 3.873 16 4.42 16Zm16.33 1.962a.39.39 0 0 1 .176.037.145.145 0 0 1 .066.055l.008.033v.75c0 .033-.025.063-.074.088a.35.35 0 0 1-.111.032l-.065.005h-10.5a.389.389 0 0 1-.176-.037.144.144 0 0 1-.066-.056L10 18.837v-.75c0-.034.025-.064.074-.088a.352.352 0 0 1 .111-.033l.065-.004h10.5ZM4.526 9c.267 0 .503.056.708.169.205.112.363.27.477.472a1.4 1.4 0 0 1 .17.694c0 .227-.035.44-.105.639-.069.199-.176.403-.321.612-.146.209-.401.507-.768.893l-.55.597v.047H6V14H3.012v-.725l1.073-1.25c.318-.376.525-.636.623-.781.097-.145.167-.28.21-.403.043-.124.064-.252.064-.384 0-.198-.047-.346-.141-.442a.506.506 0 0 0-.379-.145.972.972 0 0 0-.482.131 2.493 2.493 0 0 0-.489.375L3 9.705c.21-.207.385-.353.523-.439.139-.085.29-.15.454-.197.163-.046.347-.069.55-.069Zm16.224 2.5a.39.39 0 0 1 .176.037.145.145 0 0 1 .066.056l.008.032v.75c0 .034-.025.063-.074.088a.352.352 0 0 1-.111.033l-.065.004h-10.5a.39.39 0 0 1-.176-.037.145.145 0 0 1-.066-.056L10 12.375v-.75c0-.034.025-.063.074-.088a.35.35 0 0 1 .111-.033l.065-.004h10.5ZM5 3v4h-.852V4.685l.008-.38.014-.416a4.47 4.47 0 0 1-.296.277l-.463.369L3 4.026 4.3 3H5Zm15.75 2.038a.39.39 0 0 1 .176.038.145.145 0 0 1 .066.055l.008.032v.75c0 .034-.025.064-.074.088a.35.35 0 0 1-.111.033l-.065.004h-10.5a.388.388 0 0 1-.176-.037.145.145 0 0 1-.066-.055L10 5.913v-.75c0-.033.025-.063.074-.087a.35.35 0 0 1 .111-.033l.065-.005h10.5Z"
  })
}));
SvgOrderedList.displayName = 'SvgOrderedList';
const OrderedListIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgOrderedList, _objectSpread$b(_objectSpread$b({}, props), {}, {
      className: createClass(getIconStyles$7(props))
    }));
  }
});
OrderedListIcon.displayName = 'OrderedListIcon';
var OrderedListIcon$1 = OrderedListIcon;

function ownKeys$a(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$a(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$a(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$6 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$6 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$6[size], "px"),
        height: "".concat(iconSizes$6[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$6.big, "px"),
        height: "".concat(iconSizes$6.big, "px")
      };
  }
};
const getSizeStyle$6 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$6(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$6 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$6 = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$6(props.color), ";}&,image{", getSizeStyle$6(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgRedo = props => jsxRuntime.jsxs("svg", _objectSpread$a(_objectSpread$a({
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: [jsxRuntime.jsx("defs", {
    children: jsxRuntime.jsx("path", {
      id: "redo_react_svg__a",
      d: "M12.458 7.41a8.524 8.524 0 0 0-6.7 3.246L3.796 8.693c-.437-.438-.795-.29-.795.33v7.335c0 .618.024.593.643.593h7.286c.619 0 .767-.358.33-.795l-2.243-2.243a6.283 6.283 0 0 1 5.697-3.64 6.283 6.283 0 0 1 6.277 6.085 8.542 8.542 0 0 0-8.531-8.948Z"
    })
  }), jsxRuntime.jsx("use", {
    xlinkHref: "#redo_react_svg__a",
    fill: "#1A1A1A",
    fillRule: "evenodd",
    transform: "matrix(-1 0 0 1 24 0)"
  })]
}));
SvgRedo.displayName = 'SvgRedo';
const RedoIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgRedo, _objectSpread$a(_objectSpread$a({}, props), {}, {
      className: createClass(getIconStyles$6(props))
    }));
  }
});
RedoIcon.displayName = 'RedoIcon';
var RedoIcon$1 = RedoIcon;

function ownKeys$9(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$9(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$9(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$5 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$5 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$5[size], "px"),
        height: "".concat(iconSizes$5[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$5.big, "px"),
        height: "".concat(iconSizes$5.big, "px")
      };
  }
};
const getSizeStyle$5 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$5(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$5 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$5 = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$5(props.color), ";}&,image{", getSizeStyle$5(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgStrikethrough = props => jsxRuntime.jsx("svg", _objectSpread$9(_objectSpread$9({
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: jsxRuntime.jsx("path", {
    fill: "#1A1A1A",
    fillRule: "evenodd",
    d: "M11.648 3c1.704 0 3.27.312 4.7.938l-.621 1.734c-1.415-.594-2.79-.89-4.125-.89-1.055 0-1.88.226-2.473.679-.594.453-.89 1.082-.89 1.887 0 .593.109 1.08.327 1.459.22.379.588.726 1.108 1.043.52.316 1.314.666 2.385 1.048.99.353 1.81.72 2.459 1.102H19.5v1.25l-3.493-.002c.516.69.774 1.548.774 2.572 0 1.508-.547 2.684-1.64 3.528-1.094.843-2.578 1.265-4.454 1.265-2.03 0-3.593-.261-4.687-.785v-1.922c.703.297 1.469.531 2.297.703.828.172 1.648.258 2.46.258 1.329 0 2.329-.252 3-.756.673-.504 1.009-1.205 1.009-2.103 0-.594-.12-1.08-.358-1.46-.238-.378-.637-.728-1.195-1.048-.14-.08-.3-.164-.478-.25H4.5V12h5.137c-1.066-.476-1.863-1.016-2.389-1.617-.684-.781-1.025-1.801-1.025-3.059 0-1.32.496-2.37 1.488-3.152C8.703 3.39 10.016 3 11.648 3Z"
  })
}));
SvgStrikethrough.displayName = 'SvgStrikethrough';
const StrikethroughIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgStrikethrough, _objectSpread$9(_objectSpread$9({}, props), {}, {
      className: createClass(getIconStyles$5(props))
    }));
  }
});
StrikethroughIcon.displayName = 'StrikethroughIcon';
var StrikethroughIcon$1 = StrikethroughIcon;

function ownKeys$8(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$8(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$8(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$4 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$4 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$4[size], "px"),
        height: "".concat(iconSizes$4[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$4.big, "px"),
        height: "".concat(iconSizes$4.big, "px")
      };
  }
};
const getSizeStyle$4 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$4(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$4 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$4 = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$4(props.color), ";}&,image{", getSizeStyle$4(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgSubscript = props => jsxRuntime.jsx("svg", _objectSpread$8(_objectSpread$8({
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: jsxRuntime.jsx("g", {
    fill: "#333",
    fillRule: "nonzero",
    children: jsxRuntime.jsx("path", {
      d: "M6.609 9.937 3.18 15.145h3.294l2.067-3.39 2.085 3.39h3.294l-3.466-5.208L14.083 4.5h-3.304L8.542 8.147 6.294 4.5H3zM21.044 19.5h-5.988v-1.26l2.15-2.174c.637-.652 1.053-1.104 1.248-1.356.195-.252.336-.485.422-.7.086-.215.129-.438.129-.668 0-.344-.095-.6-.284-.768-.19-.168-.443-.252-.76-.252-.331 0-.653.076-.966.229a4.99 4.99 0 0 0-.978.65l-.985-1.166c.422-.36.772-.613 1.05-.762a3.85 3.85 0 0 1 .907-.342c.328-.08.696-.12 1.102-.12.535 0 1.008.097 1.418.293.41.195.728.468.955.82.226.351.34.754.34 1.207 0 .394-.07.765-.208 1.11-.139.346-.354.7-.645 1.064-.29.363-.804.88-1.538 1.552l-1.101 1.038v.082h3.732V19.5Z"
    })
  })
}));
SvgSubscript.displayName = 'SvgSubscript';
const SubscriptIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgSubscript, _objectSpread$8(_objectSpread$8({}, props), {}, {
      className: createClass(getIconStyles$4(props))
    }));
  }
});
SubscriptIcon.displayName = 'SubscriptIcon';
var SubscriptIcon$1 = SubscriptIcon;

function ownKeys$7(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$7(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$7(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$3 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$3 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$3[size], "px"),
        height: "".concat(iconSizes$3[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$3.big, "px"),
        height: "".concat(iconSizes$3.big, "px")
      };
  }
};
const getSizeStyle$3 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$3(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$3 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$3 = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$3(props.color), ";}&,image{", getSizeStyle$3(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgSuperscript = props => jsxRuntime.jsx("svg", _objectSpread$7(_objectSpread$7({
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: jsxRuntime.jsx("g", {
    fillRule: "evenodd",
    children: jsxRuntime.jsx("path", {
      fill: "#333",
      fillRule: "nonzero",
      d: "M7.067 14.063 3.64 8.855h3.295L9 12.245l2.085-3.39h3.295l-3.466 5.208 3.628 5.437h-3.304L9 15.853 6.753 19.5H3.458zM21.044 13.5h-5.988v-1.26l2.15-2.174c.637-.652 1.053-1.104 1.248-1.356.195-.252.336-.485.422-.7.086-.215.129-.438.129-.668 0-.344-.095-.6-.284-.768-.19-.168-.443-.252-.76-.252-.331 0-.653.076-.966.229a4.99 4.99 0 0 0-.978.65l-.985-1.166c.422-.36.772-.613 1.05-.762a3.85 3.85 0 0 1 .907-.342c.328-.08.696-.12 1.102-.12.535 0 1.008.097 1.418.293.41.195.728.468.955.82.226.351.34.754.34 1.207 0 .394-.07.765-.208 1.11-.139.346-.354.7-.645 1.064-.29.363-.804.88-1.538 1.552l-1.101 1.038v.082h3.732V13.5Z"
    })
  })
}));
SvgSuperscript.displayName = 'SvgSuperscript';
const SuperscriptIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgSuperscript, _objectSpread$7(_objectSpread$7({}, props), {}, {
      className: createClass(getIconStyles$3(props))
    }));
  }
});
SuperscriptIcon.displayName = 'SuperscriptIcon';
var SuperscriptIcon$1 = SuperscriptIcon;

function ownKeys$6(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$6(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$6(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$2 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$2 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$2[size], "px"),
        height: "".concat(iconSizes$2[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$2.big, "px"),
        height: "".concat(iconSizes$2.big, "px")
      };
  }
};
const getSizeStyle$2 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$2(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$2 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$2 = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$2(props.color), ";}&,image{", getSizeStyle$2(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgUnderline = props => jsxRuntime.jsx("svg", _objectSpread$6(_objectSpread$6({
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: jsxRuntime.jsx("path", {
    fill: "#1A1A1A",
    fillRule: "evenodd",
    d: "M19.5 19.625v1.25h-15v-1.25h15ZM8.69 3.223v9.642c0 1.234.313 2.18.938 2.84.626.661 1.546.991 2.76.991 1.156 0 2.048-.332 2.673-.995.626-.664.939-1.616.939-2.856V3.223h1.595v9.562c0 1.684-.472 3.008-1.417 3.972-.945.963-2.243 1.445-3.894 1.445-1.652 0-2.93-.485-3.833-1.455-.904-.97-1.356-2.305-1.356-4.003V3.223H8.69Z"
  })
}));
SvgUnderline.displayName = 'SvgUnderline';
const UnderlineIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgUnderline, _objectSpread$6(_objectSpread$6({}, props), {}, {
      className: createClass(getIconStyles$2(props))
    }));
  }
});
UnderlineIcon.displayName = 'UnderlineIcon';
var UnderlineIcon$1 = UnderlineIcon;

function ownKeys$5(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$5(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$5(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes$1 = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions$1 = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes$1[size], "px"),
        height: "".concat(iconSizes$1[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes$1.big, "px"),
        height: "".concat(iconSizes$1.big, "px")
      };
  }
};
const getSizeStyle$1 = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions$1(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor$1 = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles$1 = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor$1(props.color), ";}&,image{", getSizeStyle$1(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgUndo = props => jsxRuntime.jsxs("svg", _objectSpread$5(_objectSpread$5({
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: [jsxRuntime.jsx("defs", {
    children: jsxRuntime.jsx("path", {
      id: "undo_react_svg__a",
      d: "M12.458 7.41a8.524 8.524 0 0 0-6.7 3.246L3.796 8.693c-.437-.438-.795-.29-.795.33v7.335c0 .618.024.593.643.593h7.286c.619 0 .767-.358.33-.795l-2.243-2.243a6.283 6.283 0 0 1 5.697-3.64 6.283 6.283 0 0 1 6.277 6.085 8.542 8.542 0 0 0-8.531-8.948Z"
    })
  }), jsxRuntime.jsx("use", {
    xlinkHref: "#undo_react_svg__a",
    fill: "#1A1A1A",
    fillRule: "evenodd"
  })]
}));
SvgUndo.displayName = 'SvgUndo';
const UndoIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgUndo, _objectSpread$5(_objectSpread$5({}, props), {}, {
      className: createClass(getIconStyles$1(props))
    }));
  }
});
UndoIcon.displayName = 'UndoIcon';
var UndoIcon$1 = UndoIcon;

function ownKeys$4(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$4(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$4(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24
};
const getSizeDimensions = size => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto'
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: "".concat(iconSizes[size], "px"),
        height: "".concat(iconSizes[size], "px")
      };
    default:
      return {
        width: "".concat(iconSizes.big, "px"),
        height: "".concat(iconSizes.big, "px")
      };
  }
};
const getSizeStyle = size => {
  var _context, _context2;
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return _concatInstanceProperty__default["default"](_context = "\n        &:not(:root) {\n          width: ".concat(dimensions.width, ";\n          height: ")).call(_context, dimensions.height, ";\n        }\n      ");
    default:
      return _concatInstanceProperty__default["default"](_context2 = "\n        width: ".concat(dimensions.width, ";\n        height: ")).call(_context2, dimensions.height, ";\n      ");
  }
};
const getColor = color => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designSystem.designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designSystem.designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designSystem.designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designSystem.designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designSystem.designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designSystem.designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designSystem.designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designSystem.designTokens.colorError;
      break;
  }
  if (!iconColor) {
    return 'inherit';
  }
  return iconColor;
};
const getIconStyles = props => /*#__PURE__*/react$1.css("*:not([fill='none']){fill:", getColor(props.color), ";}&,image{", getSizeStyle(props.size), ";}flex-shrink:0;" + ("" ), "" );
const SvgUnorderedList = props => jsxRuntime.jsxs("svg", _objectSpread$4(_objectSpread$4({
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  role: "img"
}, props), {}, {
  children: [jsxRuntime.jsx("defs", {
    children: jsxRuntime.jsx("path", {
      id: "unordered-list_react_svg__a",
      d: "M5.625 17a.36.36 0 0 1 .264.111c.055.056.09.12.104.19l.007.074v2.25a.36.36 0 0 1-.111.264.363.363 0 0 1-.19.104L5.625 20h-2.25a.36.36 0 0 1-.264-.111.364.364 0 0 1-.104-.19L3 19.625v-2.25a.36.36 0 0 1 .111-.264.366.366 0 0 1 .19-.104L3.375 17h2.25Zm15.125 1a.39.39 0 0 1 .176.037.145.145 0 0 1 .066.056l.008.032v.75c0 .034-.025.063-.074.088a.35.35 0 0 1-.111.033L20.75 19h-10.5a.389.389 0 0 1-.176-.037.144.144 0 0 1-.066-.056L10 18.875v-.75c0-.034.025-.063.074-.088a.352.352 0 0 1 .111-.033L10.25 18h10.5ZM5.625 10a.36.36 0 0 1 .264.111c.055.056.09.12.104.19l.007.074v2.25a.36.36 0 0 1-.111.264.365.365 0 0 1-.19.104L5.625 13h-2.25a.361.361 0 0 1-.264-.111.364.364 0 0 1-.104-.19L3 12.625v-2.25a.36.36 0 0 1 .111-.264.364.364 0 0 1 .19-.104L3.375 10h2.25Zm15.125 1a.39.39 0 0 1 .176.037c.05.025.074.054.074.088v.75c0 .034-.025.063-.074.088a.39.39 0 0 1-.176.037h-10.5a.39.39 0 0 1-.176-.037c-.05-.025-.074-.054-.074-.088v-.75c0-.034.025-.063.074-.088A.389.389 0 0 1 10.25 11ZM5.625 4c.102 0 .19.037.264.111.055.056.09.12.104.19L6 4.375v2.25a.36.36 0 0 1-.111.264.363.363 0 0 1-.19.104L5.625 7h-2.25a.36.36 0 0 1-.264-.111.364.364 0 0 1-.104-.19L3 6.625v-2.25a.36.36 0 0 1 .111-.264.364.364 0 0 1 .19-.104L3.375 4h2.25Zm4.625 1h10.5a.39.39 0 0 1 .176.037.145.145 0 0 1 .066.056l.008.032v.75c0 .034-.025.063-.074.088a.35.35 0 0 1-.111.033L20.75 6h-10.5a.388.388 0 0 1-.176-.037.145.145 0 0 1-.066-.056L10 5.875v-.75c0-.034.025-.063.074-.088a.35.35 0 0 1 .111-.033L10.25 5h10.5Z"
    })
  }), jsxRuntime.jsx("use", {
    xlinkHref: "#unordered-list_react_svg__a",
    fill: "#1A1A1A",
    fillRule: "evenodd"
  })]
}));
SvgUnorderedList.displayName = 'SvgUnorderedList';
const UnorderedListIcon = props => jsxRuntime.jsx(react$1.ClassNames, {
  children: _ref => {
    let createClass = _ref.css;
    return jsxRuntime.jsx(SvgUnorderedList, _objectSpread$4(_objectSpread$4({}, props), {}, {
      className: createClass(getIconStyles(props))
    }));
  }
});
UnorderedListIcon.displayName = 'UnorderedListIcon';
var UnorderedListIcon$1 = UnorderedListIcon;

const getBorderColor = function (props) {
  let defaultBorderColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : designSystem.designTokens.borderColorForInput;
  if (props.isDisabled) {
    return designSystem.designTokens.borderColorForInputWhenDisabled;
  }
  if (props.hasError) {
    return designSystem.designTokens.borderColorForInputWhenError;
  }
  if (props.hasWarning) {
    return designSystem.designTokens.borderColorForInputWhenWarning;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.borderColorForInputWhenReadonly;
  }
  return defaultBorderColor;
};
const getInputBoxShadow = function (props) {
  let defaultBoxShadow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : designSystem.designTokens.shadowForInput;
  if (props.hasError) {
    return /*#__PURE__*/react$1.css("box-shadow:", designSystem.designTokens.shadowForInputWhenError, ";" + ("" ), "" );
  }
  if (props.hasWarning) {
    return /*#__PURE__*/react$1.css("box-shadow:", designSystem.designTokens.shadowForInputWhenWarning, ";" + ("" ), "" );
  }
  return /*#__PURE__*/react$1.css("box-shadow:", defaultBoxShadow, ";" + ("" ), "" );
};
const getTextColor = props => {
  if (props.hasError) {
    return /*#__PURE__*/react$1.css("color:", designSystem.designTokens.fontColorForInputWhenError, ";" + ("" ), "" );
  }
  if (props.hasWarning) {
    return /*#__PURE__*/react$1.css("color:", designSystem.designTokens.fontColorForInputWhenWarning, ";" + ("" ), "" );
  }
  if (props.isDisabled || props.isReadOnly) {
    return /*#__PURE__*/react$1.css("color:", designSystem.designTokens.fontColorForInputWhenDisabled, ";" + ("" ), "" );
  }
  return /*#__PURE__*/react$1.css("color:", designSystem.designTokens.fontColorForInput, ";" + ("" ), "" );
};
const getContainerBackgroundColor = props => {
  if (props.isDisabled) {
    return designSystem.designTokens.backgroundColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.backgroundColorForInputWhenReadonly;
  }
  return designSystem.designTokens.backgroundColorForInput;
};
const ToolbarMainControls = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1sckae44"
} )({
  name: "tg5p88",
  styles: "display:flex;flex-wrap:wrap;flex:1;align-items:flex-start;>*{margin-left:1px;}"
} );
const ToolbarRightControls = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1sckae43"
} )("" );
const Toolbar = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1sckae42"
} )("display:flex;flex-wrap:wrap;font-family:", designSystem.designTokens.fontFamilyDefault, ";border-radius:", designSystem.designTokens.borderRadiusForInput, ";border-bottom:0;padding:", designSystem.designTokens.paddingForRichTextToolbar, ";padding-left:", designSystem.designTokens.paddingLeftForRichTextToolbar, ";align-items:flex-start;align-content:stretch;position:relative;&::after{position:absolute;content:'';width:calc(100% - ", designSystem.designTokens.spacing20, ");height:1px;background:", designSystem.designTokens.colorNeutral, ";left:50%;transform:translateX(-50%);bottom:-1px;}&:focus{outline:none;}" + ("" ));
var _ref$2 = {
  name: "7g2mws",
  styles: "h1,h2,h3,h4,h5,h6{margin:0;}p{margin:0;line-height:22px;}"
} ;
const reset = props => [_ref$2, props.isReadOnly && /*#__PURE__*/react$1.css("color:", designSystem.designTokens.fontColorForInputWhenReadonly, ";" + ("" ), "" ), props.isDisabled && /*#__PURE__*/react$1.css("color:", designSystem.designTokens.fontColorForInputWhenDisabled, ";" + ("" ), "" )];
const EditorContainer = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1sckae41"
} )("padding:", designSystem.designTokens.paddingForRichTextEditorContainer, ";border-radius:", designSystem.designTokens.borderRadiusForInput, ";font-family:", designSystem.designTokens.fontFamilyDefault, ";border-color:", props => getBorderColor(props), ";overflow-y:scroll;", reset, " ", getTextColor, ";" + ("" ));
const Container = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1sckae40"
} )("border-radius:", designSystem.designTokens.borderRadiusForInput, ";border:1px solid ", designSystem.designTokens.borderColorForInput, ";transition:", designSystem.designTokens.transitionStandard, ";padding:", designSystem.designTokens.paddingForRichTextInput, ";background-color:", props => getContainerBackgroundColor(props), ";", props => getInputBoxShadow(props), " border-color:", props => getBorderColor(props), ";pointer-events:", props => props.isDisabled || props.isReadOnly ? 'none' : 'inherit', ";position:relative;&:hover{", props => getBorderColor(props, designSystem.designTokens.borderColorForInputWhenHovered), ";background-color:", designSystem.designTokens.backgroundColorForInputWhenHovered, ";}&:focus{outline:none;box-shadow:inset 0 0 0 2px ", designSystem.designTokens.borderColorForInputWhenFocused, ";}", Toolbar, "{border-radius:", designSystem.designTokens.borderRadiusForInput, ";border-bottom-left-radius:0;border-bottom-right-radius:0;border-color:", designSystem.designTokens.borderColorForInput, ";}&:focus-within{border-color:", designSystem.designTokens.borderColorForInputWhenFocused, ";box-shadow:", designSystem.designTokens.shadowForInputWhenFocused, ";", Toolbar, "{border-color:", designSystem.designTokens.borderColorForInputWhenFocused, ";}", EditorContainer, "{border-color:", designSystem.designTokens.borderColorForInputWhenFocused, ";}}" + ("" ));

function ownKeys$3(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$3(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$3(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const propsToOmit = ['isActive', 'label', 'isDisabled', 'isReadOnly'];
function getFillColor(props) {
  if (props.isActive) return designSystem.designTokens.colorSurface;
  return designSystem.designTokens.colorSolid;
}
const RichTextBodyButton = props => {
  const restOfProps = omit__default["default"](props, propsToOmit);
  return jsxRuntime.jsx("button", _objectSpread$3(_objectSpread$3({}, restOfProps), {}, {
    type: "button",
    tabIndex: -1,
    "aria-disabled": props.isDisabled,
    disabled: props.isDisabled,
    "aria-label": props.label,
    css: [/*#__PURE__*/react$1.css("border:0;cursor:pointer;background:", props.isActive ? designSystem.designTokens.backgroundColorForLocalizedRichTextBodyButtonWhenActive : 'transparent', ";display:flex;justify-content:center;align-items:center;border-radius:", designSystem.designTokens.spacing10, ";padding:", designSystem.designTokens.paddingForLocalizedRichTextBodyButton, ";margin:", designSystem.designTokens.marginForLocalizedRichTextBodyButton, ";&:focus{outline:none;}&:hover,&:focus{background:", props.isActive ? designSystem.designTokens.backgroundColorForLocalizedRichTextBodyButtonWhenActive : designSystem.designTokens.backgroundColorForLocalizedRichTextBodyButton, ";}svg{fill:", getFillColor(props), ";}&:disabled{pointer-events:none;svg{fill:", designSystem.designTokens.colorNeutral60, ";}}" + ("" ), "" ), props.isReadOnly && /*#__PURE__*/react$1.css("svg{fill:", designSystem.designTokens.colorNeutral60, ";}" + ("" ), "" ), "" , "" ],
    children: props.children
  }));
};
RichTextBodyButton.propTypes = {};
RichTextBodyButton.displayName = 'RichTextInputButton';
var Button = RichTextBodyButton;

const Divider = /*#__PURE__*/_styled__default["default"]("span", {
  target: "ehglnxa0"
} )("width:1px;height:", designSystem.designTokens.spacing40, ";background:", designSystem.designTokens.colorNeutral, ";margin:0 ", designSystem.designTokens.spacing10, ";" + ("" ));
var Divider$1 = Divider;

const DropdownItem = /*#__PURE__*/_styled__default["default"]("button", {
  target: "e1f4n71b2"
} )("width:100%;border:0;font-size:1rem;cursor:pointer;padding:", designSystem.designTokens.paddingForLocalizedRichTextDropdownItem, ";font-family:", designSystem.designTokens.fontFamilyDefault, ";display:block;background-color:", props => props.isSelected ? designSystem.designTokens.backgroundColorForInputWhenActive : designSystem.designTokens.colorSurface, ";&:focus,&:hover{outline:none;background-color:", designSystem.designTokens.backgroundColorForSelectInputOptionWhenHovered, ";}" + ("" ));
const getButtonStyles = props => [/*#__PURE__*/react$1.css("border:0;font-family:", designSystem.designTokens.fontFamilyDefault, ";border-radius:", designSystem.designTokens.borderRadius4, ";cursor:pointer;font-size:", designSystem.designTokens.fontSizeForInput, ";color:", designSystem.designTokens.colorSolid, ";display:flex;justify-content:center;align-items:center;padding:", props.isStyleButton ? "".concat(designSystem.designTokens.paddingForLocalizedRichTextDropdownButton) : designSystem.designTokens.paddingForLocalizedRichTextBodyButton, ";&:hover{background-color:", designSystem.designTokens.backgroundColorForRichTextDropdownWhenHovered, ";}" + ("" ), "" ), props.isIndeterminate && /*#__PURE__*/react$1.css("background-color:", designSystem.designTokens.colorAccent95, ";" + ("" ), "" ), props.isOpen && /*#__PURE__*/react$1.css("&:not(:hover){background-color:", designSystem.designTokens.backgroundColorForRichTextButton, ";color:", designSystem.designTokens.colorSurface, ";svg{fill:", designSystem.designTokens.colorSurface, ";}}" + ("" ), "" ), props.isReadOnly && /*#__PURE__*/react$1.css("color:", designSystem.designTokens.colorNeutral60, ";svg{fill:", designSystem.designTokens.colorNeutral60, ";}" + ("" ), "" ), props.isDisabled && /*#__PURE__*/react$1.css("color:", designSystem.designTokens.colorNeutral60, ";svg{fill:", designSystem.designTokens.colorNeutral60, ";}" + ("" ), "" )];
const DropdownContainer = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1f4n71b1"
} )("position:absolute;cursor:pointer;font-size:", designSystem.designTokens.fontSizeForInput, ";top:", designSystem.designTokens.spacing10, ";margin-top:", designSystem.designTokens.spacing10, ";left:0;white-space:nowrap;background:", designSystem.designTokens.colorSurface, ";overflow:hidden;z-index:9999;border:1px solid ", designSystem.designTokens.borderColorForSelectInputMenu, ";box-shadow:", designSystem.designTokens.shadowForSelectInputMenu, ";border-radius:", designSystem.designTokens.borderRadius6, ";" + ("" ));
const DropdownItemLabelWrapper = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1f4n71b0"
} )("margin:", designSystem.designTokens.marginForRichTextDropdownItemLabel, ";" + ("" ));

function ownKeys$2(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$2(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$2(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const Label = _styled__default["default"]("div", {
  target: "e176a1kh0"
} );
var _ref$1 = {
  name: "bjn8wh",
  styles: "position:relative"
} ;
const Dropdown = props => {
  var _context;
  const DropdownItem = props.components.Item;
  const DropdownLabel = props.components.Label;
  const isIndeterminate = props.isMulti && _someInstanceProperty__default["default"](_context = props.options).call(_context, item => props.getIsItemSelected(item) === true);
  const Downshift = DownshiftUntyped__default["default"];
  return jsxRuntime.jsx(Downshift, {
    onChange: props.onChange,
    itemToString: headings => (headings === null || headings === void 0 ? void 0 : headings.label) || '',
    children: _ref2 => {
      var _context2;
      let isOpen = _ref2.isOpen,
        getToggleButtonProps = _ref2.getToggleButtonProps,
        getItemProps = _ref2.getItemProps;
      const toggleButtonProps = getToggleButtonProps();
      return jsxRuntime.jsxs("div", {
        children: [jsxRuntime.jsx(Tooltip__default["default"], {
          title: props.label,
          placement: "bottom",
          off: isOpen,
          styles: {
            body: {
              zIndex: 9999
            }
          },
          children: jsxRuntime.jsx(Button, _objectSpread$2(_objectSpread$2({}, toggleButtonProps), {}, {
            label: props.label,
            css: getButtonStyles({
              isOpen,
              isIndeterminate,
              isStyleButton: !props.isMulti,
              isDisabled: props.isDisabled,
              isReadOnly: props.isReadOnly
            }),
            children: jsxRuntime.jsx(DropdownLabel, {
              children: props.label
            })
          }))
        }), isOpen ? jsxRuntime.jsx("div", {
          css: _ref$1,
          children: jsxRuntime.jsx(DropdownContainer, {
            children: _mapInstanceProperty__default["default"](_context2 = props.options).call(_context2, (item, index) => {
              const itemProps = getItemProps({
                index,
                item
              });
              const dropdownItemProps = itemProps;
              return react$1.createElement(DropdownItem, _objectSpread$2(_objectSpread$2({}, dropdownItemProps), {}, {
                key: index,
                value: item.value,
                isSelected: props.getIsItemSelected(item)
              }), jsxRuntime.jsx(DropdownItemLabelWrapper, {
                children: item.label
              }));
            })
          })
        }) : null]
      });
    }
  });
};
Dropdown.propTypes = {};
Dropdown.displayName = 'Dropdown';
Dropdown.defaultProps = {
  components: {
    Item: DropdownItem,
    Label
  },
  isMulti: false
};
var Dropdown$1 = Dropdown;

const BLOCK_TAGS = {
  blockquote: 'block-quote',
  p: 'paragraph',
  h1: 'heading-one',
  h2: 'heading-two',
  h3: 'heading-three',
  h4: 'heading-four',
  h5: 'heading-five',
  pre: 'code',
  li: 'list-item',
  ol: 'numbered-list',
  ul: 'bulleted-list'
};

// Add a dictionary of mark tags.
const MARK_TAGS = {
  em: 'italic',
  strong: 'bold',
  u: 'underline',
  sup: 'superscript',
  sub: 'subscript',
  del: 'strikethrough',
  span: 'span'
};

var messages = reactIntl.defineMessages({
  boldButtonLabel: {
    id: 'UIKit.RichTextBody.boldButtonLabel',
    description: 'Label for the bold button',
    defaultMessage: 'Bold'
  },
  expandButtonLabel: {
    id: 'UIKit.RichTextBody.expandButtonLabel',
    description: 'Label for the expand button',
    defaultMessage: 'Expand'
  },
  italicButtonLabel: {
    id: 'UIKit.RichTextBody.italicButtonLabel',
    description: 'Label for the italic button',
    defaultMessage: 'Italic'
  },
  moreStylesDropdownLabel: {
    id: 'UIKit.RichTextBody.moreStylesDropdownLabel',
    description: 'Label for the more styles dropdown',
    defaultMessage: 'More styles'
  },
  moreStylesDropdownOptionStrikethrough: {
    id: 'UIKit.RichTextBody.moreStylesDropdownOptionStrikethrough',
    description: 'label for the more styles `strikethrough` option',
    defaultMessage: 'Strikethrough'
  },
  moreStylesDropdownOptionSuperscript: {
    id: 'UIKit.RichTextBody.moreStylesDropdownOptionSuperscript',
    description: 'label for the more styles `superscript` option',
    defaultMessage: 'Superscript'
  },
  moreStylesDropdownOptionSubscript: {
    id: 'UIKit.RichTextBody.moreStylesDropdownOptionSubscript',
    description: 'label for the more styles `subscript` option',
    defaultMessage: 'Subscript'
  },
  orderedListButtonLabel: {
    id: 'UIKit.RichTextBody.orderedListButtonLabel',
    description: 'Label for the numbered list button',
    defaultMessage: 'Numbered list'
  },
  redoButtonLabel: {
    id: 'UIKit.RichTextBody.redoButtonLabel',
    description: 'Label for the redo button',
    defaultMessage: 'Redo'
  },
  styleDropdownLabel: {
    id: 'UIKit.RichTextBody.styleDropdownLabel',
    description: 'Label for the style dropdown',
    defaultMessage: 'Text styles'
  },
  styleDropdownOptionParagraph: {
    id: 'UIKit.RichTextBody.styleDropdownOptionParagraph',
    description: 'Label for the `paragraph` option',
    defaultMessage: 'Paragraph'
  },
  styleDropdownOptionH1: {
    id: 'UIKit.RichTextBody.styleDropdownOptionH1',
    description: 'Label for the `headline-one` option',
    defaultMessage: 'Headline H1'
  },
  styleDropdownOptionH2: {
    id: 'UIKit.RichTextBody.styleDropdownOptionH2',
    description: 'Label for the `headline-two` option',
    defaultMessage: 'Headline H2'
  },
  styleDropdownOptionH3: {
    id: 'UIKit.RichTextBody.styleDropdownOptionH3',
    description: 'Label for the `headline-three` option',
    defaultMessage: 'Headline H3'
  },
  styleDropdownOptionH4: {
    id: 'UIKit.RichTextBody.styleDropdownOptionH4',
    description: 'Label for the `headline-four` option',
    defaultMessage: 'Headline H4'
  },
  styleDropdownOptionH5: {
    id: 'UIKit.RichTextBody.styleDropdownOptionH5',
    description: 'Label for the `headline-five` option',
    defaultMessage: 'Headline H5'
  },
  styleDropdownOptionQuote: {
    id: 'UIKit.RichTextBody.styleDropdownOptionQuote',
    description: 'Label for the `quote` option',
    defaultMessage: 'Quote'
  },
  styleDropdownOptionPreformatted: {
    id: 'UIKit.RichTextBody.styleDropdownOptionPreformatted',
    description: 'Label for the `code` option',
    defaultMessage: 'Preformatted'
  },
  underlinedButtonLabel: {
    id: 'UIKit.RichTextBody.underlinedButtonLabel',
    description: 'Label for the underline button',
    defaultMessage: 'Underline'
  },
  undoButtonLabel: {
    id: 'UIKit.RichTextBody.undoButtonLabel',
    description: 'Label for the undo button',
    defaultMessage: 'Undo'
  },
  unorderedListButtonLabel: {
    id: 'UIKit.RichTextBody.unorderedListButtonLabel',
    description: 'Label for the bullet list button',
    defaultMessage: 'Bullet list'
  }
});

function ownKeys$1(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys$1(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys$1(Object(source))).call(_context3, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const LIST_TYPES = [BLOCK_TAGS.ol, BLOCK_TAGS.ul];

/* 
  From Slate's own implementation of rich text editor
  https://github.com/ianstormtaylor/slate/blob/main/site/examples/richtext.tsx#L133:L179
 */
const Element = _ref => {
  let attributes = _ref.attributes,
    children = _ref.children,
    element = _ref.element;
  const style = {
    textAlign: element.align
  };
  switch (element.type) {
    case BLOCK_TAGS.blockquote:
      return jsxRuntime.jsx("blockquote", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
    case BLOCK_TAGS.ul:
      return jsxRuntime.jsx("ul", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
    case BLOCK_TAGS.h1:
      return jsxRuntime.jsx("h1", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
    case BLOCK_TAGS.h2:
      return jsxRuntime.jsx("h2", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
    case BLOCK_TAGS.h3:
      return jsxRuntime.jsx("h3", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
    case BLOCK_TAGS.h4:
      return jsxRuntime.jsx("h4", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
    case BLOCK_TAGS.h5:
      return jsxRuntime.jsx("h5", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
    case BLOCK_TAGS.li:
      return jsxRuntime.jsx("li", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
    case BLOCK_TAGS.ol:
      return jsxRuntime.jsx("ol", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
    default:
      return jsxRuntime.jsx("p", _objectSpread$1(_objectSpread$1({
        style: style
      }, attributes), {}, {
        children: children
      }));
  }
};

/* 
  From Slate's own implementation of rich text editor
  https://github.com/ianstormtaylor/slate/blob/main/site/examples/richtext.tsx#L181:L199
 */
const Leaf = _ref2 => {
  let attributes = _ref2.attributes,
    children = _ref2.children,
    leaf = _ref2.leaf;
  if (leaf.bold) {
    children = jsxRuntime.jsx("strong", {
      children: children
    });
  }
  if (leaf.code) {
    children = jsxRuntime.jsx("code", {
      children: children
    });
  }
  if (leaf.italic) {
    children = jsxRuntime.jsx("em", {
      children: children
    });
  }
  if (leaf.underline) {
    children = jsxRuntime.jsx("u", {
      children: children
    });
  }
  if (leaf.superscript) {
    children = jsxRuntime.jsx("sup", {
      children: children
    });
  }
  if (leaf.subscript) {
    children = jsxRuntime.jsx("sub", {
      children: children
    });
  }
  if (leaf.strikethrough) {
    children = jsxRuntime.jsx("del", {
      children: children
    });
  }
  return jsxRuntime.jsx("span", _objectSpread$1(_objectSpread$1({}, attributes), {}, {
    children: children
  }));
};

/* 
  From Slate's own implementation of rich text editor
  https://github.com/ianstormtaylor/slate/blob/main/site/examples/richtext.tsx#L128:L131
 */
const isMarkActive = (editor, format) => {
  const marks = slate.Editor.marks(editor);
  return marks ? marks[format] === true : false;
};

/* 
  From Slate's own implementation of rich text editor
  https://github.com/ianstormtaylor/slate/blob/main/site/examples/richtext.tsx#L101:L09
 */
const toggleMark = (editor, format) => {
  const isActive = isMarkActive(editor, format);
  if (isActive) {
    slate.Editor.removeMark(editor, format);
  } else {
    slate.Editor.addMark(editor, format, true);
  }
};

/* 
  From Slate's own implementation of rich text editor
  https://github.com/ianstormtaylor/slate/blob/main/site/examples/richtext.tsx#L111:L126
 */
const isBlockActive = (editor, format) => {
  const selection = editor.selection;
  if (!selection) return false;
  const _Array$from = _Array$from__default["default"](slate.Editor.nodes(editor, {
      at: slate.Editor.unhangRange(editor, selection),
      match: n => !slate.Editor.isEditor(n) && slate.Element.isElement(n) && n.type === format
    })),
    _Array$from2 = _slicedToArray(_Array$from, 1),
    match = _Array$from2[0];
  return Boolean(match);
};

/* 
  From slate's own implementation of rich text editor
  https://github.com/ianstormtaylor/slate/blob/main/site/examples/richtext.tsx#L67:L99
 */
const toggleBlock = (editor, format) => {
  const isActive = isBlockActive(editor, format);
  const isList = _includesInstanceProperty__default["default"](LIST_TYPES).call(LIST_TYPES, format);
  slate.Transforms.unwrapNodes(editor, {
    match: n => !slate.Editor.isEditor(n) && slate.Element.isElement(n) && _includesInstanceProperty__default["default"](LIST_TYPES).call(LIST_TYPES, n.type),
    split: true
  });
  const newProperties = {
    type: isActive ? BLOCK_TAGS.p : isList ? BLOCK_TAGS.li : format
  };
  slate.Transforms.setNodes(editor, newProperties);
  if (!isActive && isList) {
    const block = {
      type: format,
      children: []
    };
    slate.Transforms.wrapNodes(editor, block);
  }
};
function nonNullable(value) {
  return value !== null && value !== undefined;
}
const validSlateStateAdapter = value => {
  const valueAsArray = _Array$isArray__default["default"](value) ? value : [value];
  if (slate.Element.isElementList(value) || slate.Text.isTextList(value) ||
  // in case of an array of mixed text and element nodes
  _Array$isArray__default["default"](value) && _everyInstanceProperty__default["default"](value).call(value, node => slate.Element.isElement(node) || slate.Text.isText(node))) {
    var _context;
    return _filterInstanceProperty__default["default"](_context = _mapInstanceProperty__default["default"](valueAsArray).call(valueAsArray, node => slate.Text.isText(node) ? {
      type: 'text',
      children: [node]
    } : node)).call(_context, nonNullable);
  }
  return defaultSlateState;
};
const resetEditor = (editor, resetValue) => {
  slate.Transforms.delete(editor, {
    at: {
      anchor: slate.Editor.start(editor, []),
      focus: slate.Editor.end(editor, [])
    }
  });

  // remove empty node
  slate.Transforms.removeNodes(editor, {
    at: [0]
  });
  const newState = resetValue ? validSlateStateAdapter(html$1.deserialize(resetValue)) : defaultSlateState;

  // insert all new nodes
  slate.Transforms.insertNodes(editor, newState);
};
const focusEditor = editor => {
  slateReact.ReactEditor.focus(editor);
  slate.Transforms.select(editor, slate.Editor.end(editor, []));
};

const MarkButton = props => {
  const editor = slateReact.useSlate();
  return jsxRuntime.jsx(Button, {
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    isActive: isMarkActive(editor, props.format),
    onClick: event => {
      event.preventDefault();
      toggleMark(editor, props.format);
    },
    label: props.label,
    children: props.children
  });
};
MarkButton.propTypes = {};
const BlockButton = props => {
  const editor = slateReact.useSlate();
  return jsxRuntime.jsx(Button, {
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    isActive: isBlockActive(editor, props.format),
    onClick: event => {
      event.preventDefault();
      toggleBlock(editor, props.format);
    },
    label: props.label,
    children: props.children
  });
};
BlockButton.propTypes = {};

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const MoreStylesDropdownLabel = () => jsxRuntime.jsx(MoreStylesIcon$1, {
  size: "medium"
});
MoreStylesDropdownLabel.displayName = 'MoreStylesDropdownLabel';
const MoreStylesDropdownItem = props => {
  let Icon;
  switch (props.value) {
    case MARK_TAGS.sub:
      Icon = SubscriptIcon$1;
      break;
    case MARK_TAGS.del:
      Icon = StrikethroughIcon$1;
      break;
    default:
      Icon = SuperscriptIcon$1;
  }
  return jsxRuntime.jsx(DropdownItem, _objectSpread(_objectSpread({}, props), {}, {
    children: jsxRuntime.jsxs(Inline__default["default"], {
      scale: "xs",
      alignItems: "center",
      justifyContent: "flex-start",
      children: [jsxRuntime.jsx(Icon, {
        size: "medium"
      }), jsxRuntime.jsx("div", {
        children: props.children
      })]
    })
  }));
};
MoreStylesDropdownItem.propTypes = {};
MoreStylesDropdownItem.displayName = 'MoreStylesDropdownItem';
const DropdownLabel = props => {
  return jsxRuntime.jsxs(Inline__default["default"], {
    scale: "xs",
    alignItems: "center",
    justifyContent: "center",
    children: [jsxRuntime.jsx("span", {
      children: props.children
    }), jsxRuntime.jsx(icons.CaretDownIcon, {
      size: "small"
    })]
  });
};
DropdownLabel.displayName = 'DropdownLabel';
const Item = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1yf02eo0"
} )({
  name: "1rmndyi",
  styles: "margin:0;text-align:left"
} );
const StylesDropdownItem = props => {
  var _context;
  const asProp = _findInstanceProperty__default["default"](_context = _Object$keys__default["default"](BLOCK_TAGS)).call(_context, key => BLOCK_TAGS[key] === props.value) || 'div';
  return jsxRuntime.jsx(DropdownItem, _objectSpread(_objectSpread({}, props), {}, {
    children: jsxRuntime.jsx(Item, {
      as: asProp,
      children: props.children
    })
  }));
};
StylesDropdownItem.propTypes = {};
StylesDropdownItem.displayName = 'StylesDropdownItem';
const tooltipStyles = {
  body: {
    zIndex: 9999
  }
};
const createStyleDropdownOptions = intl => {
  return [{
    label: intl.formatMessage(messages.styleDropdownOptionParagraph),
    value: BLOCK_TAGS.p
  }, {
    label: intl.formatMessage(messages.styleDropdownOptionH1),
    value: BLOCK_TAGS.h1
  }, {
    label: intl.formatMessage(messages.styleDropdownOptionH2),
    value: BLOCK_TAGS.h2
  }, {
    label: intl.formatMessage(messages.styleDropdownOptionH3),
    value: BLOCK_TAGS.h3
  }, {
    label: intl.formatMessage(messages.styleDropdownOptionH4),
    value: BLOCK_TAGS.h4
  }, {
    label: intl.formatMessage(messages.styleDropdownOptionH5),
    value: BLOCK_TAGS.h5
  }, {
    label: intl.formatMessage(messages.styleDropdownOptionQuote),
    value: BLOCK_TAGS.blockquote
  }, {
    label: intl.formatMessage(messages.styleDropdownOptionPreformatted),
    value: BLOCK_TAGS.pre
  }];
};
const createMoreStylesDropdownOptions = intl => {
  return [{
    label: intl.formatMessage(messages.moreStylesDropdownOptionStrikethrough),
    value: MARK_TAGS.del
  }, {
    label: intl.formatMessage(messages.moreStylesDropdownOptionSuperscript),
    value: MARK_TAGS.sup
  }, {
    label: intl.formatMessage(messages.moreStylesDropdownOptionSubscript),
    value: MARK_TAGS.sub
  }];
};
var _ref = {
  name: "1h10g35",
  styles: "display:flex;flex-wrap:wrap;>*{margin-left:1px;}"
} ;
const RichTextEditorBody = /*#__PURE__*/react.forwardRef((props, ref) => {
  var _props$styles;
  // NOTE: the forwarded ref is an object of refs, thus making it a bit trickier to type.
  const _ref2 = ref,
    registerContentNode = _ref2.registerContentNode,
    containerRef = _ref2.containerRef;
  const intl = reactIntl.useIntl();
  const editor = slateReact.useSlate();
  const dropdownOptions = createMoreStylesDropdownOptions(intl);
  const styleDropdownOptions = createStyleDropdownOptions(intl);
  const hasUndos = editor.history.undos.length > 0;
  const hasRedos = editor.history.redos.length > 0;
  const onClickBlock = react.useCallback(_ref3 => {
    let format = _ref3.value;
    toggleBlock(editor, format);
  }, [editor]);
  const onClickMoreStyleMark = react.useCallback(_ref4 => {
    let format = _ref4.value;
    toggleMark(editor, format);
  }, [editor]);
  const getIsMoreStyleMarkItemSelected = react.useCallback(_ref5 => {
    let format = _ref5.value;
    return isMarkActive(editor, format);
  }, [editor]);
  const getIsBlockItemSelected = react.useCallback(_ref6 => {
    let format = _ref6.value;
    return isBlockActive(editor, format);
  }, [editor]);

  // https://codepen.io/mudassir0909/pen/eIHqB
  // we prevent all our defined onClicks inside of the CalendarHeader
  // from blurring our input.

  const onToolbarMouseDown = react.useCallback(event => {
    event.preventDefault();
  }, []);
  if (props.showExpandIcon) ;
  return jsxRuntime.jsxs(Container, {
    css: (_props$styles = props.styles) === null || _props$styles === void 0 ? void 0 : _props$styles.container,
    hasError: props.hasError,
    hasWarning: props.hasWarning,
    isReadOnly: props.isReadOnly,
    isDisabled: props.isDisabled,
    children: [jsxRuntime.jsxs(Toolbar, {
      onMouseDown: onToolbarMouseDown,
      children: [jsxRuntime.jsxs(ToolbarMainControls, {
        children: [jsxRuntime.jsx(Dropdown$1, {
          label: intl.formatMessage(messages.styleDropdownLabel),
          onChange: onClickBlock,
          options: styleDropdownOptions,
          components: {
            Item: StylesDropdownItem,
            Label: DropdownLabel
          },
          isDisabled: props.isDisabled,
          isReadOnly: props.isReadOnly,
          getIsItemSelected: getIsBlockItemSelected
        }), jsxRuntime.jsx(Tooltip__default["default"], {
          title: intl.formatMessage(messages.boldButtonLabel),
          placement: "bottom",
          styles: tooltipStyles,
          children: jsxRuntime.jsx(MarkButton, {
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            label: intl.formatMessage(messages.boldButtonLabel),
            format: MARK_TAGS.strong,
            children: jsxRuntime.jsx(BoldIcon$1, {
              size: "medium"
            })
          })
        }), jsxRuntime.jsx(Tooltip__default["default"], {
          title: intl.formatMessage(messages.italicButtonLabel),
          placement: "bottom",
          styles: tooltipStyles,
          children: jsxRuntime.jsx(MarkButton, {
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            label: intl.formatMessage(messages.italicButtonLabel),
            format: MARK_TAGS.em,
            children: jsxRuntime.jsx(ItalicIcon$1, {
              size: "medium"
            })
          })
        }), jsxRuntime.jsx(Tooltip__default["default"], {
          title: intl.formatMessage(messages.underlinedButtonLabel),
          placement: "bottom",
          styles: tooltipStyles,
          children: jsxRuntime.jsx(MarkButton, {
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            label: intl.formatMessage(messages.underlinedButtonLabel),
            format: MARK_TAGS.u,
            children: jsxRuntime.jsx(UnderlineIcon$1, {
              size: "medium"
            })
          })
        }), jsxRuntime.jsx(Dropdown$1, {
          isMulti: true,
          label: intl.formatMessage(messages.moreStylesDropdownLabel),
          options: dropdownOptions,
          onChange: onClickMoreStyleMark,
          isDisabled: props.isDisabled,
          isReadOnly: props.isReadOnly,
          components: {
            Item: MoreStylesDropdownItem,
            Label: MoreStylesDropdownLabel
          },
          getIsItemSelected: getIsMoreStyleMarkItemSelected
        }), jsxRuntime.jsx(Divider$1, {
          css: /*#__PURE__*/react$1.css("margin:", designSystem.designTokens.marginForRichTextDivider, ";" + ("" ), "" )
        }), jsxRuntime.jsx(Tooltip__default["default"], {
          title: intl.formatMessage(messages.orderedListButtonLabel),
          placement: "bottom",
          styles: tooltipStyles,
          children: jsxRuntime.jsx(BlockButton, {
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            label: intl.formatMessage(messages.orderedListButtonLabel),
            format: BLOCK_TAGS.ol,
            children: jsxRuntime.jsx(OrderedListIcon$1, {
              size: "medium"
            })
          })
        }), jsxRuntime.jsx(Tooltip__default["default"], {
          title: intl.formatMessage(messages.unorderedListButtonLabel),
          placement: "bottom",
          styles: tooltipStyles,
          children: jsxRuntime.jsx(BlockButton, {
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            label: intl.formatMessage(messages.unorderedListButtonLabel),
            format: BLOCK_TAGS.ul,
            children: jsxRuntime.jsx(UnorderedListIcon$1, {
              size: "medium"
            })
          })
        })]
      }), jsxRuntime.jsxs(ToolbarRightControls, {
        css: _ref,
        children: [jsxRuntime.jsx(Tooltip__default["default"], {
          title: intl.formatMessage(messages.undoButtonLabel),
          placement: "bottom",
          off: !hasUndos,
          children: jsxRuntime.jsx(Button, {
            isActive: false,
            label: intl.formatMessage(messages.undoButtonLabel),
            isDisabled: !hasUndos || props.isDisabled,
            isReadOnly: props.isReadOnly,
            onClick: editor.undo,
            children: jsxRuntime.jsx(UndoIcon$1, {
              size: "medium"
            })
          })
        }), jsxRuntime.jsx(Tooltip__default["default"], {
          title: intl.formatMessage(messages.redoButtonLabel),
          placement: "bottom",
          off: !hasRedos,
          children: jsxRuntime.jsx(Button, {
            isActive: false,
            label: intl.formatMessage(messages.redoButtonLabel),
            isDisabled: !hasRedos || props.isDisabled,
            isReadOnly: props.isReadOnly,
            onClick: editor.redo,
            children: jsxRuntime.jsx(RedoIcon$1, {
              size: "medium"
            })
          })
        }), props.showExpandIcon && jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [jsxRuntime.jsx(Divider$1, {
            css: /*#__PURE__*/react$1.css("margin:", designSystem.designTokens.marginForRichTextDivider, ";" + ("" ), "" )
          }), jsxRuntime.jsx(Tooltip__default["default"], {
            title: intl.formatMessage(messages.expandButtonLabel),
            placement: "bottom-end",
            children: jsxRuntime.jsx(Button, {
              isActive: false,
              isDisabled: props.isDisabled,
              isReadOnly: props.isReadOnly,
              label: intl.formatMessage(messages.expandButtonLabel),
              onClick: props.onClickExpand,
              children: jsxRuntime.jsx(ExpandIcon$1, {
                size: "medium"
              })
            })
          })]
        })]
      })]
    }), jsxRuntime.jsx("div", {
      style: props.containerStyles,
      children: jsxRuntime.jsx("div", {
        ref: registerContentNode,
        children: jsxRuntime.jsx(EditorContainer, {
          hasError: props.hasError,
          hasWarning: props.hasWarning,
          isReadOnly: props.isReadOnly,
          isDisabled: props.isDisabled,
          ref: containerRef,
          children: props.children
        })
      })
    })]
  });
});
const defaultProps = {
  styles: {}
};
RichTextEditorBody.displayName = 'RichTextEditorBody';
RichTextEditorBody.defaultProps = defaultProps;
var RichTextEditorBody$1 = RichTextEditorBody;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports.Element = Element;
exports.HiddenInput = HiddenInput$1;
exports.Leaf = Leaf;
exports.RichTextBody = RichTextEditorBody$1;
exports.focusEditor = focusEditor;
exports.html = html$1;
exports.isBlockActive = isBlockActive;
exports.isEmpty = isRichTextEmpty;
exports.isMarkActive = isMarkActive;
exports.localized = index;
exports.resetEditor = resetEditor;
exports.toggleBlock = toggleBlock;
exports.toggleMark = toggleMark;
exports.validSlateStateAdapter = validSlateStateAdapter;
exports.version = version;
