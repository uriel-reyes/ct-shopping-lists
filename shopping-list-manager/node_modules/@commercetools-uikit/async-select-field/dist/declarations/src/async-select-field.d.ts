import { Component, type FocusEventHandler, type ReactElement, type ReactNode } from 'react';
import type { AsyncProps } from 'react-select/async';
import type { GroupBase, OptionsOrGroups, ActionMeta } from 'react-select';
type ReactSelectAsyncProps = AsyncProps<unknown, boolean, GroupBase<unknown>>;
type TErrorRenderer = (key: string, error?: boolean) => ReactNode;
type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
type TCustomEvent = {
    target: {
        id?: ReactSelectAsyncProps['inputId'];
        name?: ReactSelectAsyncProps['name'];
        value?: unknown;
    };
    persist: () => void;
};
export type TAsyncSelectFieldProps = {
    id?: ReactSelectAsyncProps['inputId'];
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    errors?: TFieldErrors;
    renderError?: TErrorRenderer;
    isRequired?: boolean;
    touched?: boolean[] | boolean;
    'aria-label'?: ReactSelectAsyncProps['aria-label'];
    'aria-labelledby'?: ReactSelectAsyncProps['aria-labelledby'];
    isAutofocussed?: boolean;
    backspaceRemovesValue?: ReactSelectAsyncProps['backspaceRemovesValue'];
    components?: ReactSelectAsyncProps['components'];
    controlShouldRenderValue?: ReactSelectAsyncProps['controlShouldRenderValue'];
    filterOption?: ReactSelectAsyncProps['filterOption'];
    containerId?: ReactSelectAsyncProps['id'];
    isClearable?: ReactSelectAsyncProps['isClearable'];
    isDisabled?: ReactSelectAsyncProps['isDisabled'];
    isReadOnly?: boolean;
    isOptionDisabled?: ReactSelectAsyncProps['isOptionDisabled'];
    isMulti?: ReactSelectAsyncProps['isMulti'];
    isSearchable?: ReactSelectAsyncProps['isSearchable'];
    hasWarning?: boolean;
    maxMenuHeight?: ReactSelectAsyncProps['maxMenuHeight'];
    menuPortalTarget?: ReactSelectAsyncProps['menuPortalTarget'];
    menuPortalZIndex?: number;
    menuShouldBlockScroll?: ReactSelectAsyncProps['menuShouldBlockScroll'];
    name?: ReactSelectAsyncProps['name'];
    noOptionsMessage?: ReactSelectAsyncProps['noOptionsMessage'];
    onBlur?: (event: TCustomEvent) => void;
    onChange?: (event: TCustomEvent, info: ActionMeta<unknown>) => void;
    onFocus?: FocusEventHandler;
    onInputChange?: ReactSelectAsyncProps['onInputChange'];
    placeholder?: ReactSelectAsyncProps['placeholder'];
    loadingMessage?: string | (() => string);
    tabIndex?: ReactSelectAsyncProps['tabIndex'];
    tabSelectsValue?: ReactSelectAsyncProps['tabSelectsValue'];
    value?: ReactSelectAsyncProps['value'];
    showOptionGroupDivider?: boolean;
    defaultOptions?: OptionsOrGroups<unknown, GroupBase<unknown>> | boolean;
    loadOptions: ReactSelectAsyncProps['loadOptions'];
    cacheOptions?: ReactSelectAsyncProps['cacheOptions'];
    title: string | ReactNode;
    hint?: string | ReactNode;
    description?: string | ReactNode;
    onInfoButtonClick?: () => void;
    hintIcon?: ReactElement;
    badge?: ReactNode;
    iconLeft?: ReactNode;
};
type TAsyncSelectFieldState = Pick<TAsyncSelectFieldProps, 'id'>;
export default class AsyncSelectField extends Component<TAsyncSelectFieldProps, TAsyncSelectFieldState> {
    static displayName: string;
    static defaultProps: Pick<TAsyncSelectFieldProps, 'horizontalConstraint' | 'controlShouldRenderValue'>;
    state: {
        id: string | undefined;
    };
    static getDerivedStateFromProps: (props: TAsyncSelectFieldProps, state: TAsyncSelectFieldState) => {
        id: string;
    };
    static toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export {};
