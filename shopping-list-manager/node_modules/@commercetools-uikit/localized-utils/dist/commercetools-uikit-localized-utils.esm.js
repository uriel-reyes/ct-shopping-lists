import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _sortInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/sort';
import _Object$entries from '@babel/runtime-corejs3/core-js-stable/object/entries';
import _reduceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _someInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/some';
import _everyInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/every';
import _Object$values from '@babel/runtime-corejs3/core-js-stable/object/values';
import _trimInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/trim';
import uniq from 'lodash/uniq';
import { filterDataAttributes, warning } from '@commercetools-uikit/utils';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context9, _context10; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context9 = ownKeys(Object(source), !0)).call(_context9, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context10 = ownKeys(Object(source))).call(_context10, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const getId = (idPrefix, language) => {
  var _context;
  return idPrefix && language ? _concatInstanceProperty(_context = "".concat(idPrefix, ".")).call(_context, language) : undefined;
};
const getName = (namePrefix, language) => {
  var _context2;
  return namePrefix && language ? _concatInstanceProperty(_context2 = "".concat(namePrefix, ".")).call(_context2, language) : undefined;
};
const getPrimaryLanguage = language => language.split('-')[0];

// splits the languages into two groups:
//  - the first group starts with the same tag as the selected language
//  - the second group starts with a different tag
const splitLanguages = (selectedLanguage, languages) => {
  const primaryLanguage = getPrimaryLanguage(selectedLanguage);
  const related = _filterInstanceProperty(languages).call(languages, language => getPrimaryLanguage(language) === primaryLanguage);
  const unrelated = _filterInstanceProperty(languages).call(languages, language => getPrimaryLanguage(language) !== primaryLanguage);
  return {
    unrelated,
    related
  };
};

// sorts the languages with the following priority:
// - The selected language is placed first (e.g pt-BR)
// - All languages using the same primary language as the selected language
//   follow (e.g. pt, pt-PT). They are sorted alphabetically.
// - All other languages follow, sorted alphabetically as well
const sortLanguages = (selectedLanguage, allLanguages) => {
  const _splitLanguages = splitLanguages(selectedLanguage, _filterInstanceProperty(allLanguages).call(allLanguages, language => language !== selectedLanguage)),
    related = _splitLanguages.related,
    unrelated = _splitLanguages.unrelated;
  return [selectedLanguage, ..._sortInstanceProperty(related).call(related), ..._sortInstanceProperty(unrelated).call(unrelated)];
};
const createLocalizedDataAttributes = (props, language) => {
  const entries = _Object$entries(filterDataAttributes(props));
  return _reduceInstanceProperty(entries).call(entries, (localizedDataAttributes, _ref) => {
    var _context3;
    let _ref2 = _slicedToArray(_ref, 2),
      key = _ref2[0],
      value = _ref2[1];
    switch (key) {
      case 'data-track-component':
      case 'data-testid':
      case 'data-test':
        localizedDataAttributes[key] = _concatInstanceProperty(_context3 = "".concat(value, "-")).call(_context3, language);
        break;
      default:
        localizedDataAttributes[key] = value;
    }
    return localizedDataAttributes;
  }, {});
};
const getHasErrorOnRemainingLanguages = (errors, selectedLanguage) => {
  if (errors && _Object$keys(errors).length > 0 && selectedLanguage) {
    var _context4;
    return _someInstanceProperty(_context4 = _Object$keys(errors)).call(_context4, language => language !== selectedLanguage);
  }
  return false;
};
const getHasWarningOnRemainingLanguages = (warnings, selectedLanguage) => {
  if (warnings && _Object$keys(warnings).length > 0 && selectedLanguage) {
    var _context5;
    return _someInstanceProperty(_context5 = _Object$keys(warnings)).call(_context5, language => language !== selectedLanguage);
  }
  return false;
};
const createLocalizedString = function (languages) {
  let existingTranslations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const mergedLanguages = existingTranslations ? uniq([...languages, ..._Object$keys(existingTranslations)]) : languages;
  return _reduceInstanceProperty(mergedLanguages).call(mergedLanguages, (localizedString, locale) => _objectSpread(_objectSpread({}, localizedString), {}, {
    [locale]: existingTranslations && existingTranslations[locale] || ''
  }), {});
};
const isEmpty = localizedString => {
  var _context6;
  if (!localizedString) return true;
  return _everyInstanceProperty(_context6 = _Object$values(localizedString)).call(_context6, value => !value || _trimInstanceProperty(value).call(value).length === 0);
};
const omitEmptyTranslations = localizedString => {
  var _context7;
  process.env.NODE_ENV !== "production" ? warning(typeof localizedString === 'object', 'omitEmptyTranslations must be called with an object') : void 0;
  return _reduceInstanceProperty(_context7 = _Object$entries(localizedString)).call(_context7, (localizedStringWithoutEmptyTranslations, _ref3) => {
    let _ref4 = _slicedToArray(_ref3, 2),
      locale = _ref4[0],
      value = _ref4[1];
    if (value && _trimInstanceProperty(value).call(value).length > 0) {
      return _objectSpread(_objectSpread({}, localizedStringWithoutEmptyTranslations), {}, {
        [locale]: value
      });
    }
    return localizedStringWithoutEmptyTranslations;
  }, {});
};
const isTouched = touched => {
  if (touched) {
    var _context8;
    return _someInstanceProperty(_context8 = _Object$values(touched)).call(_context8, Boolean);
  }
  return false;
};

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { createLocalizedDataAttributes, createLocalizedString, getHasErrorOnRemainingLanguages, getHasWarningOnRemainingLanguages, getId, getName, getPrimaryLanguage, isEmpty, isTouched, omitEmptyTranslations, sortLanguages, splitLanguages, version };
