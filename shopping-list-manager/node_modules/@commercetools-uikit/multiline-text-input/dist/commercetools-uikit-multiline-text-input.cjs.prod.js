'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
require('prop-types');
var _trimInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/trim');
var react = require('react');
var reactIntl = require('react-intl');
require('@emotion/react');
var icons = require('@commercetools-uikit/icons');
var FlatButton = require('@commercetools-uikit/flat-button');
var hooks = require('@commercetools-uikit/hooks');
var utils = require('@commercetools-uikit/utils');
var Stack = require('@commercetools-uikit/spacings-stack');
var Constraints = require('@commercetools-uikit/constraints');
var inputUtils = require('@commercetools-uikit/input-utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _trimInstanceProperty__default = /*#__PURE__*/_interopDefault(_trimInstanceProperty);
var FlatButton__default = /*#__PURE__*/_interopDefault(FlatButton);
var Stack__default = /*#__PURE__*/_interopDefault(Stack);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const defaultProps = {
  defaultExpandMultilineText: false
};
var _ref = {
  name: "skgbeu",
  styles: "display:flex;justify-content:flex-end"
} ;
const MultilineTextInput = props => {
  const intl = reactIntl.useIntl();
  const _useState = react.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    shouldRenderToggleButton = _useState2[0],
    setShouldRenderToggleButton = _useState2[1];
  const _useToggleState = hooks.useToggleState(props.defaultExpandMultilineText),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    isOpen = _useToggleState2[0],
    toggle = _useToggleState2[1];
  const onFocus = props.onFocus;
  const handleFocus = react.useCallback(event => {
    if (!isOpen) toggle(true);
    if (onFocus) onFocus(event);
  }, [isOpen, onFocus, toggle]);
  const handleHeightChange = react.useCallback((_, rowCount) => {
    // This checks if the content in the textarea is greater than one row. If it is, then the toggle button will be shown.
    // This is to prevent the toggle button from showing when there is not enough content to expand/collapse.
    setShouldRenderToggleButton(rowCount > 1);
  }, [setShouldRenderToggleButton]);
  return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: jsxRuntime.jsxs(Stack__default["default"], {
      scale: "xs",
      children: [jsxRuntime.jsx(inputUtils.MultilineInput, _objectSpread(_objectSpread({
        name: props.name,
        autoComplete: props.autoComplete,
        value: props.value,
        onChange: props.onChange,
        onHeightChange: handleHeightChange,
        id: props.id,
        onBlur: props.onBlur,
        onFocus: handleFocus,
        isDisabled: props.isDisabled,
        hasError: props.hasError,
        hasWarning: props.hasWarning,
        placeholder: props.placeholder,
        isReadOnly: props.isReadOnly,
        isAutofocussed: props.isAutofocussed,
        isOpen: isOpen
      }, utils.filterDataAttributes(props)), {}, {
        /* ARIA */
        "aria-invalid": props['aria-invalid'],
        "aria-errormessage": props['aria-errormessage']
      })), shouldRenderToggleButton && jsxRuntime.jsx("div", {
        css: _ref,
        children: jsxRuntime.jsx(FlatButton__default["default"], {
          onClick: () => toggle(),
          isDisabled: props.isDisabled,
          label: intl.formatMessage(isOpen ? inputUtils.messagesMultilineInput.collapse : inputUtils.messagesMultilineInput.expand),
          icon: isOpen ? jsxRuntime.jsx(icons.AngleUpIcon, {
            size: "small"
          }) : jsxRuntime.jsx(icons.AngleDownIcon, {
            size: "small"
          })
        })
      })]
    })
  });
};
MultilineTextInput.propTypes = {};
MultilineTextInput.displayName = 'MultilineTextInput';
MultilineTextInput.isEmpty = value => !value || _trimInstanceProperty__default["default"](value).call(value).length === 0;
MultilineTextInput.defaultProps = defaultProps;
var MultilineTextInput$1 = MultilineTextInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = MultilineTextInput$1;
exports.version = version;
