import { type ReactNode } from 'react';
import { type TCurrencyCode, type TMoneyValue, type TValue } from '@commercetools-uikit/money-input';
type TCustomEvent = {
    target: {
        id?: string;
        name?: string;
        value?: string | string[] | null;
    };
    persist?: () => void;
};
export type TLocalizedMoneyInputProps = {
    id?: string;
    name?: string;
    value: Record<string, TValue>;
    onChange?: (event: TCustomEvent) => void;
    selectedCurrency: string;
    onBlur?: (event: TCustomEvent) => void;
    onFocus?: (event: TCustomEvent) => void;
    hideCurrencyExpansionControls?: boolean;
    defaultExpandCurrencies?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    placeholder?: Record<string, string>;
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    hasError?: boolean;
    hasWarning?: boolean;
    errors?: Record<string, ReactNode>;
    warnings?: Record<string, ReactNode>;
    hasHighPrecisionBadge?: boolean;
};
export declare const sortCurrencies: (selectedCurrency: string, allCurrencies: string[]) => string[];
declare const LocalizedMoneyInput: {
    (props: TLocalizedMoneyInputProps): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    getId: (idPrefix?: string | undefined, language?: string | undefined) => string | undefined;
    getName: (namePrefix?: string | undefined, language?: string | undefined) => string | undefined;
    defaultProps: {
        horizontalConstraint: string;
    };
    convertToMoneyValues(values: TValue[], locale: string): Array<TMoneyValue | null>;
    parseMoneyValues(moneyValues: TMoneyValue[] | undefined, locale: string): Record<TCurrencyCode, TValue>;
    getHighPrecisionCurrencies(values: Record<TCurrencyCode, TValue>, locale: string): TCurrencyCode[];
    getEmptyCurrencies(values: Record<TCurrencyCode, TValue>): TCurrencyCode[];
};
export default LocalizedMoneyInput;
