import { type LegacyRef, type FocusEventHandler, type KeyboardEvent } from 'react';
import type { Theme } from '@emotion/react';
export type TClearSection = {
    isDisabled?: boolean;
    hasError?: boolean;
    hasWarning?: boolean;
    onClear?: () => void;
    theme?: Theme;
    isFocused?: boolean;
    isOpen?: boolean;
};
export declare const ClearSection: {
    (props: TClearSection): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
};
export type TInputProps = {
    'aria-invalid'?: boolean;
    'aria-errormessage'?: string;
    onBlur?: FocusEventHandler;
    onFocus?: FocusEventHandler;
    onKeyDown?: (event: KeyboardEvent<HTMLInputElement | HTMLButtonElement>) => void;
};
export type TCalendarBody = {
    inputRef: LegacyRef<HTMLInputElement>;
    icon?: string;
    id?: string;
    inputProps?: TInputProps;
    isClearable?: boolean;
    toggleButtonProps?: Pick<TInputProps, 'onBlur' | 'onFocus'>;
    value?: string;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    isOpen?: boolean;
    hasSelection?: boolean;
    hasWarning?: boolean;
    hasError?: boolean;
    onClear?: () => void;
    placeholder?: string;
    theme?: Theme;
};
export declare const CalendarBody: {
    (props: TCalendarBody): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    defaultProps: Pick<TCalendarBody, "isClearable">;
};
export default CalendarBody;
