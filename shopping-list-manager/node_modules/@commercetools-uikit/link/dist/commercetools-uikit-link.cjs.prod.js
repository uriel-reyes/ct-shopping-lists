'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _styled = require('@emotion/styled/base');
require('prop-types');
var react$1 = require('react');
var reactRouterDom = require('react-router-dom');
var react = require('@emotion/react');
var reactIntl = require('react-intl');
var designSystem = require('@commercetools-uikit/design-system');
var utils = require('@commercetools-uikit/utils');
var icons = require('@commercetools-uikit/icons');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const warnIfMissingContent = props => {
  Boolean(props.intlMessage) || Boolean(react$1.Children.count(props.children));
};
const defaultProps = {
  tone: 'primary',
  isExternal: false
};
const getTextColorValue = function () {
  let tone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'primary';
  if (tone === 'primary') {
    return designSystem.designTokens.fontColorForLinkAsPrimary;
  } else if (tone === 'secondary') {
    return designSystem.designTokens.fontColorForLinkAsSecondary;
  }
  return designSystem.designTokens.fontColorForLinkAsInverted;
};
const getActiveColorValue = function () {
  let tone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'primary';
  if (tone === 'primary') {
    return designSystem.designTokens.fontColorForLinkAsPrimaryWhenActive;
  }
  if (tone === 'secondary') {
    return designSystem.designTokens.fontColorForLinkAsSecondaryWhenActive;
  }
  return designSystem.designTokens.fontColorForLinkAsInverted;
};
const getLinkStyles = props => {
  const iconColor = getTextColorValue(props.tone);
  const iconHoverColor = getActiveColorValue(props.tone);
  return [/*#__PURE__*/react.css("font-family:inherit;color:", iconColor, ";&:hover,&:focus,&:active{color:", iconHoverColor, ";}text-decoration:underline;" + ("" ), "" )];
};
const Wrapper = /*#__PURE__*/_styled__default["default"]("span", {
  target: "evr8cgc0"
} )(">svg{margin:0 0 0 ", designSystem.designTokens.spacing10, "!important;vertical-align:middle;}" + ("" ));
const Link = props => {
  const remainingProps = utils.filterInvalidAttributes(props);
  const color = getTextColorValue(props.tone);
  const hoverColor = getActiveColorValue(props.tone);

  // `filterInvalidAttributes` strips off `intlMessage` and `children`
  // so we pass in the "raw" props instead.
  warnIfMissingContent(props);
  if (props.isExternal) {
    if (typeof props.to !== 'string') {
      throw new Error('`to` must be a `string` when `isExternal` is provided.');
    }
    return jsxRuntime.jsxs(Wrapper, {
      css: /*#__PURE__*/react.css("fill:", color, ";&:hover{fill:", hoverColor, ";}" + ("" ), "" ),
      children: [jsxRuntime.jsx("a", _objectSpread(_objectSpread({
        css: getLinkStyles(props),
        href: props.to,
        target: "_blank",
        rel: "noopener noreferrer"
      }, remainingProps), {}, {
        children: props.intlMessage ? jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, props.intlMessage)) : props.children
      })), props.isExternal && jsxRuntime.jsx(icons.ExternalLinkIcon, {
        size: "medium"
      })]
    });
  }
  return jsxRuntime.jsx(reactRouterDom.Link, _objectSpread(_objectSpread({
    css: getLinkStyles(props),
    to: props.to
  }, remainingProps), {}, {
    children: props.intlMessage ? jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, props.intlMessage)) : props.children
  }));
};
Link.propTypes = {};
Link.displayName = 'Link';
Link.defaultProps = defaultProps;
var Link$1 = Link;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = Link$1;
exports.version = version;
