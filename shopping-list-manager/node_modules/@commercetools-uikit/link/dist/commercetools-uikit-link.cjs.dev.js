'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _styled = require('@emotion/styled/base');
var _pt = require('prop-types');
var react$1 = require('react');
var reactRouterDom = require('react-router-dom');
var react = require('@emotion/react');
var reactIntl = require('react-intl');
var designSystem = require('@commercetools-uikit/design-system');
var utils = require('@commercetools-uikit/utils');
var icons = require('@commercetools-uikit/icons');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _pt__default = /*#__PURE__*/_interopDefault(_pt);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const warnIfMissingContent = props => {
  const hasContent = Boolean(props.intlMessage) || Boolean(react$1.Children.count(props.children));
  process.env.NODE_ENV !== "production" ? utils.warning(hasContent, ['Warning: Failed prop type:', "The prop `intlMessage` is marked as required in `Link`", 'but its value is `undefined`'].join(' ')) : void 0;
  process.env.NODE_ENV !== "production" ? utils.warning(hasContent, ['Warning: Failed prop type:', "The prop `children` is marked as required in `Link`", 'but its value is `undefined`'].join(' ')) : void 0;
};
const defaultProps = {
  tone: 'primary',
  isExternal: false
};
const getTextColorValue = function () {
  let tone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'primary';
  if (tone === 'primary') {
    return designSystem.designTokens.fontColorForLinkAsPrimary;
  } else if (tone === 'secondary') {
    return designSystem.designTokens.fontColorForLinkAsSecondary;
  }
  return designSystem.designTokens.fontColorForLinkAsInverted;
};
const getActiveColorValue = function () {
  let tone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'primary';
  if (tone === 'primary') {
    return designSystem.designTokens.fontColorForLinkAsPrimaryWhenActive;
  }
  if (tone === 'secondary') {
    return designSystem.designTokens.fontColorForLinkAsSecondaryWhenActive;
  }
  return designSystem.designTokens.fontColorForLinkAsInverted;
};
const getLinkStyles = props => {
  const iconColor = getTextColorValue(props.tone);
  const iconHoverColor = getActiveColorValue(props.tone);
  return [/*#__PURE__*/react.css("font-family:inherit;color:", iconColor, ";&:hover,&:focus,&:active{color:", iconHoverColor, ";}text-decoration:underline;" + (process.env.NODE_ENV === "production" ? "" : ";label:getLinkStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpbmsudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJHTyIsImZpbGUiOiJsaW5rLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTG9jYXRpb25EZXNjcmlwdG9yIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgdHlwZSB7IE1lc3NhZ2VEZXNjcmlwdG9yIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQge1xuICBDaGlsZHJlbixcbiAgdHlwZSBSZWFjdE5vZGUsXG4gIHR5cGUgTW91c2VFdmVudCxcbiAgdHlwZSBLZXlib2FyZEV2ZW50LFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBMaW5rIGFzIFJlYWN0Um91dGVyTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgRm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBmaWx0ZXJJbnZhbGlkQXR0cmlidXRlcywgd2FybmluZyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3V0aWxzJztcbmltcG9ydCB7IEV4dGVybmFsTGlua0ljb24gfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9pY29ucyc7XG5cbmV4cG9ydCB0eXBlIFRMaW5rUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBWYWx1ZSBvZiB0aGUgbGluay5cbiAgICogPGJyIC8+XG4gICAqIFJlcXVpcmVkIGlmIGBpbnRsTWVzc2FnZWAgaXMgbm90IHByb3ZpZGVkLlxuICAgKi9cbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBBbiBgaW50bGAgbWVzc2FnZSBvYmplY3QgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIHdpdGggYEZvcm1hdHRlZE1lc3NhZ2VgLlxuICAgKiA8YnIgLz5cbiAgICogUmVxdWlyZWQgaWYgYGNoaWxkcmVuYCBpcyBub3QgcHJvdmlkZWQuXG4gICAqL1xuICBpbnRsTWVzc2FnZT86IE1lc3NhZ2VEZXNjcmlwdG9yICYge1xuICAgIHZhbHVlcz86IFJlY29yZDxzdHJpbmcsIFJlYWN0Tm9kZT47XG4gIH07XG4gIC8qKlxuICAgKiBBIGZsYWcgdG8gaW5kaWNhdGUgaWYgdGhlIExpbmsgcG9pbnRzIHRvIGFuIGV4dGVybmFsIHNvdXJjZS5cbiAgICogPGJ0IC8+XG4gICAqIElmIGB0cnVlYCwgYSByZWd1bGFyIGA8YT5gIGlzIHJlbmRlcmVkIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgYHJlYWN0LXJvdXRlcmBzIGA8TGluayAvPmBcbiAgICovXG4gIGlzRXh0ZXJuYWw6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgVVJMIHRoYXQgdGhlIExpbmsgc2hvdWxkIHBvaW50IHRvLlxuICAgKi9cbiAgdG86IHN0cmluZyB8IExvY2F0aW9uRGVzY3JpcHRvcjtcbiAgLyoqXG4gICAqIENvbG9yIG9mIHRoZSBsaW5rXG4gICAqL1xuICB0b25lPzogJ3ByaW1hcnknIHwgJ2ludmVydGVkJyB8ICdzZWNvbmRhcnknO1xuXG4gIC8qKlxuICAgKiBIYW5kbGVyIHdoZW4gdGhlIGxpbmsgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQ2xpY2s/OiAoXG4gICAgZXZlbnQ6IE1vdXNlRXZlbnQ8SFRNTExpbmtFbGVtZW50PiB8IEtleWJvYXJkRXZlbnQ8SFRNTExpbmtFbGVtZW50PlxuICApID0+IHZvaWQ7XG59O1xuXG5jb25zdCB3YXJuSWZNaXNzaW5nQ29udGVudCA9IChwcm9wczogVExpbmtQcm9wcykgPT4ge1xuICBjb25zdCBoYXNDb250ZW50ID1cbiAgICBCb29sZWFuKHByb3BzLmludGxNZXNzYWdlKSB8fCBCb29sZWFuKENoaWxkcmVuLmNvdW50KHByb3BzLmNoaWxkcmVuKSk7XG5cbiAgd2FybmluZyhcbiAgICBoYXNDb250ZW50LFxuICAgIFtcbiAgICAgICdXYXJuaW5nOiBGYWlsZWQgcHJvcCB0eXBlOicsXG4gICAgICBgVGhlIHByb3AgXFxgaW50bE1lc3NhZ2VcXGAgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluIFxcYExpbmtcXGBgLFxuICAgICAgJ2J1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAnLFxuICAgIF0uam9pbignICcpXG4gICk7XG4gIHdhcm5pbmcoXG4gICAgaGFzQ29udGVudCxcbiAgICBbXG4gICAgICAnV2FybmluZzogRmFpbGVkIHByb3AgdHlwZTonLFxuICAgICAgYFRoZSBwcm9wIFxcYGNoaWxkcmVuXFxgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiBcXGBMaW5rXFxgYCxcbiAgICAgICdidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgJyxcbiAgICBdLmpvaW4oJyAnKVxuICApO1xufTtcblxuY29uc3QgZGVmYXVsdFByb3BzOiBQaWNrPFRMaW5rUHJvcHMsICd0b25lJyB8ICdpc0V4dGVybmFsJz4gPSB7XG4gIHRvbmU6ICdwcmltYXJ5JyxcbiAgaXNFeHRlcm5hbDogZmFsc2UsXG59O1xuXG5jb25zdCBnZXRUZXh0Q29sb3JWYWx1ZSA9ICh0b25lOiBUTGlua1Byb3BzWyd0b25lJ10gPSAncHJpbWFyeScpID0+IHtcbiAgaWYgKHRvbmUgPT09ICdwcmltYXJ5Jykge1xuICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuZm9udENvbG9yRm9yTGlua0FzUHJpbWFyeTtcbiAgfSBlbHNlIGlmICh0b25lID09PSAnc2Vjb25kYXJ5Jykge1xuICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuZm9udENvbG9yRm9yTGlua0FzU2Vjb25kYXJ5O1xuICB9XG5cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5mb250Q29sb3JGb3JMaW5rQXNJbnZlcnRlZDtcbn07XG5cbmNvbnN0IGdldEFjdGl2ZUNvbG9yVmFsdWUgPSAodG9uZTogc3RyaW5nID0gJ3ByaW1hcnknKSA9PiB7XG4gIGlmICh0b25lID09PSAncHJpbWFyeScpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxpbmtBc1ByaW1hcnlXaGVuQWN0aXZlO1xuICB9XG4gIGlmICh0b25lID09PSAnc2Vjb25kYXJ5Jykge1xuICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuZm9udENvbG9yRm9yTGlua0FzU2Vjb25kYXJ5V2hlbkFjdGl2ZTtcbiAgfVxuXG4gIHJldHVybiBkZXNpZ25Ub2tlbnMuZm9udENvbG9yRm9yTGlua0FzSW52ZXJ0ZWQ7XG59O1xuXG5jb25zdCBnZXRMaW5rU3R5bGVzID0gKHByb3BzOiBUTGlua1Byb3BzKSA9PiB7XG4gIGNvbnN0IGljb25Db2xvciA9IGdldFRleHRDb2xvclZhbHVlKHByb3BzLnRvbmUpO1xuICBjb25zdCBpY29uSG92ZXJDb2xvciA9IGdldEFjdGl2ZUNvbG9yVmFsdWUocHJvcHMudG9uZSk7XG5cbiAgcmV0dXJuIFtcbiAgICBjc3NgXG4gICAgICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgICAgIGNvbG9yOiAke2ljb25Db2xvcn07XG5cbiAgICAgICY6aG92ZXIsXG4gICAgICAmOmZvY3VzLFxuICAgICAgJjphY3RpdmUge1xuICAgICAgICBjb2xvcjogJHtpY29uSG92ZXJDb2xvcn07XG4gICAgICB9XG4gICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICBgLFxuICBdO1xufTtcblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuICA+IHN2ZyB7XG4gICAgbWFyZ2luOiAwIDAgMCAke2Rlc2lnblRva2Vucy5zcGFjaW5nMTB9ICFpbXBvcnRhbnQ7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgfVxuYDtcblxuY29uc3QgTGluayA9IChwcm9wczogVExpbmtQcm9wcykgPT4ge1xuICBjb25zdCByZW1haW5pbmdQcm9wcyA9IGZpbHRlckludmFsaWRBdHRyaWJ1dGVzKHByb3BzKTtcblxuICBjb25zdCBjb2xvciA9IGdldFRleHRDb2xvclZhbHVlKHByb3BzLnRvbmUpO1xuICBjb25zdCBob3ZlckNvbG9yID0gZ2V0QWN0aXZlQ29sb3JWYWx1ZShwcm9wcy50b25lKTtcblxuICAvLyBgZmlsdGVySW52YWxpZEF0dHJpYnV0ZXNgIHN0cmlwcyBvZmYgYGludGxNZXNzYWdlYCBhbmQgYGNoaWxkcmVuYFxuICAvLyBzbyB3ZSBwYXNzIGluIHRoZSBcInJhd1wiIHByb3BzIGluc3RlYWQuXG4gIHdhcm5JZk1pc3NpbmdDb250ZW50KHByb3BzKTtcblxuICBpZiAocHJvcHMuaXNFeHRlcm5hbCkge1xuICAgIGlmICh0eXBlb2YgcHJvcHMudG8gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B0b2AgbXVzdCBiZSBhIGBzdHJpbmdgIHdoZW4gYGlzRXh0ZXJuYWxgIGlzIHByb3ZpZGVkLicpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8V3JhcHBlclxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICBmaWxsOiAke2NvbG9yfTtcbiAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgIGZpbGw6ICR7aG92ZXJDb2xvcn07XG4gICAgICAgICAgfVxuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8YVxuICAgICAgICAgIGNzcz17Z2V0TGlua1N0eWxlcyhwcm9wcyl9XG4gICAgICAgICAgaHJlZj17cHJvcHMudG99XG4gICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICB7Li4ucmVtYWluaW5nUHJvcHN9XG4gICAgICAgID5cbiAgICAgICAgICB7cHJvcHMuaW50bE1lc3NhZ2UgPyAoXG4gICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSB7Li4ucHJvcHMuaW50bE1lc3NhZ2V9IC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIHByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgKX1cbiAgICAgICAgPC9hPlxuICAgICAgICB7cHJvcHMuaXNFeHRlcm5hbCAmJiA8RXh0ZXJuYWxMaW5rSWNvbiBzaXplPVwibWVkaXVtXCIgLz59XG4gICAgICA8L1dyYXBwZXI+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0Um91dGVyTGlua1xuICAgICAgY3NzPXtnZXRMaW5rU3R5bGVzKHByb3BzKX1cbiAgICAgIHRvPXtwcm9wcy50b31cbiAgICAgIHsuLi5yZW1haW5pbmdQcm9wc31cbiAgICA+XG4gICAgICB7cHJvcHMuaW50bE1lc3NhZ2UgPyAoXG4gICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIHsuLi5wcm9wcy5pbnRsTWVzc2FnZX0gLz5cbiAgICAgICkgOiAoXG4gICAgICAgIHByb3BzLmNoaWxkcmVuXG4gICAgICApfVxuICAgIDwvUmVhY3RSb3V0ZXJMaW5rPlxuICApO1xufTtcblxuTGluay5kaXNwbGF5TmFtZSA9ICdMaW5rJztcbkxpbmsuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBMaW5rO1xuIl19 */")];
};
const Wrapper = /*#__PURE__*/_styled__default["default"]("span", process.env.NODE_ENV === "production" ? {
  target: "evr8cgc0"
} : {
  target: "evr8cgc0",
  label: "Wrapper"
})(">svg{margin:0 0 0 ", designSystem.designTokens.spacing10, "!important;vertical-align:middle;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpbmsudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlIMkIiLCJmaWxlIjoibGluay50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IExvY2F0aW9uRGVzY3JpcHRvciB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHR5cGUgeyBNZXNzYWdlRGVzY3JpcHRvciB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHtcbiAgQ2hpbGRyZW4sXG4gIHR5cGUgUmVhY3ROb2RlLFxuICB0eXBlIE1vdXNlRXZlbnQsXG4gIHR5cGUgS2V5Ym9hcmRFdmVudCxcbn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgTGluayBhcyBSZWFjdFJvdXRlckxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgZmlsdGVySW52YWxpZEF0dHJpYnV0ZXMsIHdhcm5pbmcgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5pbXBvcnQgeyBFeHRlcm5hbExpbmtJY29uIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvaWNvbnMnO1xuXG5leHBvcnQgdHlwZSBUTGlua1Byb3BzID0ge1xuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIGxpbmsuXG4gICAqIDxiciAvPlxuICAgKiBSZXF1aXJlZCBpZiBgaW50bE1lc3NhZ2VgIGlzIG5vdCBwcm92aWRlZC5cbiAgICovXG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xuICAvKipcbiAgICogQW4gYGludGxgIG1lc3NhZ2Ugb2JqZWN0IHRoYXQgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGBGb3JtYXR0ZWRNZXNzYWdlYC5cbiAgICogPGJyIC8+XG4gICAqIFJlcXVpcmVkIGlmIGBjaGlsZHJlbmAgaXMgbm90IHByb3ZpZGVkLlxuICAgKi9cbiAgaW50bE1lc3NhZ2U/OiBNZXNzYWdlRGVzY3JpcHRvciAmIHtcbiAgICB2YWx1ZXM/OiBSZWNvcmQ8c3RyaW5nLCBSZWFjdE5vZGU+O1xuICB9O1xuICAvKipcbiAgICogQSBmbGFnIHRvIGluZGljYXRlIGlmIHRoZSBMaW5rIHBvaW50cyB0byBhbiBleHRlcm5hbCBzb3VyY2UuXG4gICAqIDxidCAvPlxuICAgKiBJZiBgdHJ1ZWAsIGEgcmVndWxhciBgPGE+YCBpcyByZW5kZXJlZCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGByZWFjdC1yb3V0ZXJgcyBgPExpbmsgLz5gXG4gICAqL1xuICBpc0V4dGVybmFsOiBib29sZWFuO1xuICAvKipcbiAgICogVGhlIFVSTCB0aGF0IHRoZSBMaW5rIHNob3VsZCBwb2ludCB0by5cbiAgICovXG4gIHRvOiBzdHJpbmcgfCBMb2NhdGlvbkRlc2NyaXB0b3I7XG4gIC8qKlxuICAgKiBDb2xvciBvZiB0aGUgbGlua1xuICAgKi9cbiAgdG9uZT86ICdwcmltYXJ5JyB8ICdpbnZlcnRlZCcgfCAnc2Vjb25kYXJ5JztcblxuICAvKipcbiAgICogSGFuZGxlciB3aGVuIHRoZSBsaW5rIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkNsaWNrPzogKFxuICAgIGV2ZW50OiBNb3VzZUV2ZW50PEhUTUxMaW5rRWxlbWVudD4gfCBLZXlib2FyZEV2ZW50PEhUTUxMaW5rRWxlbWVudD5cbiAgKSA9PiB2b2lkO1xufTtcblxuY29uc3Qgd2FybklmTWlzc2luZ0NvbnRlbnQgPSAocHJvcHM6IFRMaW5rUHJvcHMpID0+IHtcbiAgY29uc3QgaGFzQ29udGVudCA9XG4gICAgQm9vbGVhbihwcm9wcy5pbnRsTWVzc2FnZSkgfHwgQm9vbGVhbihDaGlsZHJlbi5jb3VudChwcm9wcy5jaGlsZHJlbikpO1xuXG4gIHdhcm5pbmcoXG4gICAgaGFzQ29udGVudCxcbiAgICBbXG4gICAgICAnV2FybmluZzogRmFpbGVkIHByb3AgdHlwZTonLFxuICAgICAgYFRoZSBwcm9wIFxcYGludGxNZXNzYWdlXFxgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiBcXGBMaW5rXFxgYCxcbiAgICAgICdidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgJyxcbiAgICBdLmpvaW4oJyAnKVxuICApO1xuICB3YXJuaW5nKFxuICAgIGhhc0NvbnRlbnQsXG4gICAgW1xuICAgICAgJ1dhcm5pbmc6IEZhaWxlZCBwcm9wIHR5cGU6JyxcbiAgICAgIGBUaGUgcHJvcCBcXGBjaGlsZHJlblxcYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gXFxgTGlua1xcYGAsXG4gICAgICAnYnV0IGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYCcsXG4gICAgXS5qb2luKCcgJylcbiAgKTtcbn07XG5cbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxUTGlua1Byb3BzLCAndG9uZScgfCAnaXNFeHRlcm5hbCc+ID0ge1xuICB0b25lOiAncHJpbWFyeScsXG4gIGlzRXh0ZXJuYWw6IGZhbHNlLFxufTtcblxuY29uc3QgZ2V0VGV4dENvbG9yVmFsdWUgPSAodG9uZTogVExpbmtQcm9wc1sndG9uZSddID0gJ3ByaW1hcnknKSA9PiB7XG4gIGlmICh0b25lID09PSAncHJpbWFyeScpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxpbmtBc1ByaW1hcnk7XG4gIH0gZWxzZSBpZiAodG9uZSA9PT0gJ3NlY29uZGFyeScpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxpbmtBc1NlY29uZGFyeTtcbiAgfVxuXG4gIHJldHVybiBkZXNpZ25Ub2tlbnMuZm9udENvbG9yRm9yTGlua0FzSW52ZXJ0ZWQ7XG59O1xuXG5jb25zdCBnZXRBY3RpdmVDb2xvclZhbHVlID0gKHRvbmU6IHN0cmluZyA9ICdwcmltYXJ5JykgPT4ge1xuICBpZiAodG9uZSA9PT0gJ3ByaW1hcnknKSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5mb250Q29sb3JGb3JMaW5rQXNQcmltYXJ5V2hlbkFjdGl2ZTtcbiAgfVxuICBpZiAodG9uZSA9PT0gJ3NlY29uZGFyeScpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxpbmtBc1NlY29uZGFyeVdoZW5BY3RpdmU7XG4gIH1cblxuICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxpbmtBc0ludmVydGVkO1xufTtcblxuY29uc3QgZ2V0TGlua1N0eWxlcyA9IChwcm9wczogVExpbmtQcm9wcykgPT4ge1xuICBjb25zdCBpY29uQ29sb3IgPSBnZXRUZXh0Q29sb3JWYWx1ZShwcm9wcy50b25lKTtcbiAgY29uc3QgaWNvbkhvdmVyQ29sb3IgPSBnZXRBY3RpdmVDb2xvclZhbHVlKHByb3BzLnRvbmUpO1xuXG4gIHJldHVybiBbXG4gICAgY3NzYFxuICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgICBjb2xvcjogJHtpY29uQ29sb3J9O1xuXG4gICAgICAmOmhvdmVyLFxuICAgICAgJjpmb2N1cyxcbiAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgY29sb3I6ICR7aWNvbkhvdmVyQ29sb3J9O1xuICAgICAgfVxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgYCxcbiAgXTtcbn07XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcbiAgPiBzdmcge1xuICAgIG1hcmdpbjogMCAwIDAgJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAhaW1wb3J0YW50O1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbmA7XG5cbmNvbnN0IExpbmsgPSAocHJvcHM6IFRMaW5rUHJvcHMpID0+IHtcbiAgY29uc3QgcmVtYWluaW5nUHJvcHMgPSBmaWx0ZXJJbnZhbGlkQXR0cmlidXRlcyhwcm9wcyk7XG5cbiAgY29uc3QgY29sb3IgPSBnZXRUZXh0Q29sb3JWYWx1ZShwcm9wcy50b25lKTtcbiAgY29uc3QgaG92ZXJDb2xvciA9IGdldEFjdGl2ZUNvbG9yVmFsdWUocHJvcHMudG9uZSk7XG5cbiAgLy8gYGZpbHRlckludmFsaWRBdHRyaWJ1dGVzYCBzdHJpcHMgb2ZmIGBpbnRsTWVzc2FnZWAgYW5kIGBjaGlsZHJlbmBcbiAgLy8gc28gd2UgcGFzcyBpbiB0aGUgXCJyYXdcIiBwcm9wcyBpbnN0ZWFkLlxuICB3YXJuSWZNaXNzaW5nQ29udGVudChwcm9wcyk7XG5cbiAgaWYgKHByb3BzLmlzRXh0ZXJuYWwpIHtcbiAgICBpZiAodHlwZW9mIHByb3BzLnRvICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgdG9gIG11c3QgYmUgYSBgc3RyaW5nYCB3aGVuIGBpc0V4dGVybmFsYCBpcyBwcm92aWRlZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFdyYXBwZXJcbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZmlsbDogJHtjb2xvcn07XG4gICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICBmaWxsOiAke2hvdmVyQ29sb3J9O1xuICAgICAgICAgIH1cbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPGFcbiAgICAgICAgICBjc3M9e2dldExpbmtTdHlsZXMocHJvcHMpfVxuICAgICAgICAgIGhyZWY9e3Byb3BzLnRvfVxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgey4uLnJlbWFpbmluZ1Byb3BzfVxuICAgICAgICA+XG4gICAgICAgICAge3Byb3BzLmludGxNZXNzYWdlID8gKFxuICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2Ugey4uLnByb3BzLmludGxNZXNzYWdlfSAvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICBwcm9wcy5jaGlsZHJlblxuICAgICAgICAgICl9XG4gICAgICAgIDwvYT5cbiAgICAgICAge3Byb3BzLmlzRXh0ZXJuYWwgJiYgPEV4dGVybmFsTGlua0ljb24gc2l6ZT1cIm1lZGl1bVwiIC8+fVxuICAgICAgPC9XcmFwcGVyPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxSZWFjdFJvdXRlckxpbmtcbiAgICAgIGNzcz17Z2V0TGlua1N0eWxlcyhwcm9wcyl9XG4gICAgICB0bz17cHJvcHMudG99XG4gICAgICB7Li4ucmVtYWluaW5nUHJvcHN9XG4gICAgPlxuICAgICAge3Byb3BzLmludGxNZXNzYWdlID8gKFxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSB7Li4ucHJvcHMuaW50bE1lc3NhZ2V9IC8+XG4gICAgICApIDogKFxuICAgICAgICBwcm9wcy5jaGlsZHJlblxuICAgICAgKX1cbiAgICA8L1JlYWN0Um91dGVyTGluaz5cbiAgKTtcbn07XG5cbkxpbmsuZGlzcGxheU5hbWUgPSAnTGluayc7XG5MaW5rLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgTGluaztcbiJdfQ== */"));
const Link = props => {
  const remainingProps = utils.filterInvalidAttributes(props);
  const color = getTextColorValue(props.tone);
  const hoverColor = getActiveColorValue(props.tone);

  // `filterInvalidAttributes` strips off `intlMessage` and `children`
  // so we pass in the "raw" props instead.
  warnIfMissingContent(props);
  if (props.isExternal) {
    if (typeof props.to !== 'string') {
      throw new Error('`to` must be a `string` when `isExternal` is provided.');
    }
    return jsxRuntime.jsxs(Wrapper, {
      css: /*#__PURE__*/react.css("fill:", color, ";&:hover{fill:", hoverColor, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:Link;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpbmsudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlKZ0IiLCJmaWxlIjoibGluay50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IExvY2F0aW9uRGVzY3JpcHRvciB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHR5cGUgeyBNZXNzYWdlRGVzY3JpcHRvciB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHtcbiAgQ2hpbGRyZW4sXG4gIHR5cGUgUmVhY3ROb2RlLFxuICB0eXBlIE1vdXNlRXZlbnQsXG4gIHR5cGUgS2V5Ym9hcmRFdmVudCxcbn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgTGluayBhcyBSZWFjdFJvdXRlckxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgZmlsdGVySW52YWxpZEF0dHJpYnV0ZXMsIHdhcm5pbmcgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5pbXBvcnQgeyBFeHRlcm5hbExpbmtJY29uIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvaWNvbnMnO1xuXG5leHBvcnQgdHlwZSBUTGlua1Byb3BzID0ge1xuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIGxpbmsuXG4gICAqIDxiciAvPlxuICAgKiBSZXF1aXJlZCBpZiBgaW50bE1lc3NhZ2VgIGlzIG5vdCBwcm92aWRlZC5cbiAgICovXG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xuICAvKipcbiAgICogQW4gYGludGxgIG1lc3NhZ2Ugb2JqZWN0IHRoYXQgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGBGb3JtYXR0ZWRNZXNzYWdlYC5cbiAgICogPGJyIC8+XG4gICAqIFJlcXVpcmVkIGlmIGBjaGlsZHJlbmAgaXMgbm90IHByb3ZpZGVkLlxuICAgKi9cbiAgaW50bE1lc3NhZ2U/OiBNZXNzYWdlRGVzY3JpcHRvciAmIHtcbiAgICB2YWx1ZXM/OiBSZWNvcmQ8c3RyaW5nLCBSZWFjdE5vZGU+O1xuICB9O1xuICAvKipcbiAgICogQSBmbGFnIHRvIGluZGljYXRlIGlmIHRoZSBMaW5rIHBvaW50cyB0byBhbiBleHRlcm5hbCBzb3VyY2UuXG4gICAqIDxidCAvPlxuICAgKiBJZiBgdHJ1ZWAsIGEgcmVndWxhciBgPGE+YCBpcyByZW5kZXJlZCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGByZWFjdC1yb3V0ZXJgcyBgPExpbmsgLz5gXG4gICAqL1xuICBpc0V4dGVybmFsOiBib29sZWFuO1xuICAvKipcbiAgICogVGhlIFVSTCB0aGF0IHRoZSBMaW5rIHNob3VsZCBwb2ludCB0by5cbiAgICovXG4gIHRvOiBzdHJpbmcgfCBMb2NhdGlvbkRlc2NyaXB0b3I7XG4gIC8qKlxuICAgKiBDb2xvciBvZiB0aGUgbGlua1xuICAgKi9cbiAgdG9uZT86ICdwcmltYXJ5JyB8ICdpbnZlcnRlZCcgfCAnc2Vjb25kYXJ5JztcblxuICAvKipcbiAgICogSGFuZGxlciB3aGVuIHRoZSBsaW5rIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkNsaWNrPzogKFxuICAgIGV2ZW50OiBNb3VzZUV2ZW50PEhUTUxMaW5rRWxlbWVudD4gfCBLZXlib2FyZEV2ZW50PEhUTUxMaW5rRWxlbWVudD5cbiAgKSA9PiB2b2lkO1xufTtcblxuY29uc3Qgd2FybklmTWlzc2luZ0NvbnRlbnQgPSAocHJvcHM6IFRMaW5rUHJvcHMpID0+IHtcbiAgY29uc3QgaGFzQ29udGVudCA9XG4gICAgQm9vbGVhbihwcm9wcy5pbnRsTWVzc2FnZSkgfHwgQm9vbGVhbihDaGlsZHJlbi5jb3VudChwcm9wcy5jaGlsZHJlbikpO1xuXG4gIHdhcm5pbmcoXG4gICAgaGFzQ29udGVudCxcbiAgICBbXG4gICAgICAnV2FybmluZzogRmFpbGVkIHByb3AgdHlwZTonLFxuICAgICAgYFRoZSBwcm9wIFxcYGludGxNZXNzYWdlXFxgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiBcXGBMaW5rXFxgYCxcbiAgICAgICdidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgJyxcbiAgICBdLmpvaW4oJyAnKVxuICApO1xuICB3YXJuaW5nKFxuICAgIGhhc0NvbnRlbnQsXG4gICAgW1xuICAgICAgJ1dhcm5pbmc6IEZhaWxlZCBwcm9wIHR5cGU6JyxcbiAgICAgIGBUaGUgcHJvcCBcXGBjaGlsZHJlblxcYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gXFxgTGlua1xcYGAsXG4gICAgICAnYnV0IGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYCcsXG4gICAgXS5qb2luKCcgJylcbiAgKTtcbn07XG5cbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxUTGlua1Byb3BzLCAndG9uZScgfCAnaXNFeHRlcm5hbCc+ID0ge1xuICB0b25lOiAncHJpbWFyeScsXG4gIGlzRXh0ZXJuYWw6IGZhbHNlLFxufTtcblxuY29uc3QgZ2V0VGV4dENvbG9yVmFsdWUgPSAodG9uZTogVExpbmtQcm9wc1sndG9uZSddID0gJ3ByaW1hcnknKSA9PiB7XG4gIGlmICh0b25lID09PSAncHJpbWFyeScpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxpbmtBc1ByaW1hcnk7XG4gIH0gZWxzZSBpZiAodG9uZSA9PT0gJ3NlY29uZGFyeScpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxpbmtBc1NlY29uZGFyeTtcbiAgfVxuXG4gIHJldHVybiBkZXNpZ25Ub2tlbnMuZm9udENvbG9yRm9yTGlua0FzSW52ZXJ0ZWQ7XG59O1xuXG5jb25zdCBnZXRBY3RpdmVDb2xvclZhbHVlID0gKHRvbmU6IHN0cmluZyA9ICdwcmltYXJ5JykgPT4ge1xuICBpZiAodG9uZSA9PT0gJ3ByaW1hcnknKSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5mb250Q29sb3JGb3JMaW5rQXNQcmltYXJ5V2hlbkFjdGl2ZTtcbiAgfVxuICBpZiAodG9uZSA9PT0gJ3NlY29uZGFyeScpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxpbmtBc1NlY29uZGFyeVdoZW5BY3RpdmU7XG4gIH1cblxuICByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxpbmtBc0ludmVydGVkO1xufTtcblxuY29uc3QgZ2V0TGlua1N0eWxlcyA9IChwcm9wczogVExpbmtQcm9wcykgPT4ge1xuICBjb25zdCBpY29uQ29sb3IgPSBnZXRUZXh0Q29sb3JWYWx1ZShwcm9wcy50b25lKTtcbiAgY29uc3QgaWNvbkhvdmVyQ29sb3IgPSBnZXRBY3RpdmVDb2xvclZhbHVlKHByb3BzLnRvbmUpO1xuXG4gIHJldHVybiBbXG4gICAgY3NzYFxuICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgICBjb2xvcjogJHtpY29uQ29sb3J9O1xuXG4gICAgICAmOmhvdmVyLFxuICAgICAgJjpmb2N1cyxcbiAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgY29sb3I6ICR7aWNvbkhvdmVyQ29sb3J9O1xuICAgICAgfVxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgYCxcbiAgXTtcbn07XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcbiAgPiBzdmcge1xuICAgIG1hcmdpbjogMCAwIDAgJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAhaW1wb3J0YW50O1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbmA7XG5cbmNvbnN0IExpbmsgPSAocHJvcHM6IFRMaW5rUHJvcHMpID0+IHtcbiAgY29uc3QgcmVtYWluaW5nUHJvcHMgPSBmaWx0ZXJJbnZhbGlkQXR0cmlidXRlcyhwcm9wcyk7XG5cbiAgY29uc3QgY29sb3IgPSBnZXRUZXh0Q29sb3JWYWx1ZShwcm9wcy50b25lKTtcbiAgY29uc3QgaG92ZXJDb2xvciA9IGdldEFjdGl2ZUNvbG9yVmFsdWUocHJvcHMudG9uZSk7XG5cbiAgLy8gYGZpbHRlckludmFsaWRBdHRyaWJ1dGVzYCBzdHJpcHMgb2ZmIGBpbnRsTWVzc2FnZWAgYW5kIGBjaGlsZHJlbmBcbiAgLy8gc28gd2UgcGFzcyBpbiB0aGUgXCJyYXdcIiBwcm9wcyBpbnN0ZWFkLlxuICB3YXJuSWZNaXNzaW5nQ29udGVudChwcm9wcyk7XG5cbiAgaWYgKHByb3BzLmlzRXh0ZXJuYWwpIHtcbiAgICBpZiAodHlwZW9mIHByb3BzLnRvICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgdG9gIG11c3QgYmUgYSBgc3RyaW5nYCB3aGVuIGBpc0V4dGVybmFsYCBpcyBwcm92aWRlZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFdyYXBwZXJcbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZmlsbDogJHtjb2xvcn07XG4gICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICBmaWxsOiAke2hvdmVyQ29sb3J9O1xuICAgICAgICAgIH1cbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPGFcbiAgICAgICAgICBjc3M9e2dldExpbmtTdHlsZXMocHJvcHMpfVxuICAgICAgICAgIGhyZWY9e3Byb3BzLnRvfVxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgey4uLnJlbWFpbmluZ1Byb3BzfVxuICAgICAgICA+XG4gICAgICAgICAge3Byb3BzLmludGxNZXNzYWdlID8gKFxuICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2Ugey4uLnByb3BzLmludGxNZXNzYWdlfSAvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICBwcm9wcy5jaGlsZHJlblxuICAgICAgICAgICl9XG4gICAgICAgIDwvYT5cbiAgICAgICAge3Byb3BzLmlzRXh0ZXJuYWwgJiYgPEV4dGVybmFsTGlua0ljb24gc2l6ZT1cIm1lZGl1bVwiIC8+fVxuICAgICAgPC9XcmFwcGVyPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxSZWFjdFJvdXRlckxpbmtcbiAgICAgIGNzcz17Z2V0TGlua1N0eWxlcyhwcm9wcyl9XG4gICAgICB0bz17cHJvcHMudG99XG4gICAgICB7Li4ucmVtYWluaW5nUHJvcHN9XG4gICAgPlxuICAgICAge3Byb3BzLmludGxNZXNzYWdlID8gKFxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSB7Li4ucHJvcHMuaW50bE1lc3NhZ2V9IC8+XG4gICAgICApIDogKFxuICAgICAgICBwcm9wcy5jaGlsZHJlblxuICAgICAgKX1cbiAgICA8L1JlYWN0Um91dGVyTGluaz5cbiAgKTtcbn07XG5cbkxpbmsuZGlzcGxheU5hbWUgPSAnTGluayc7XG5MaW5rLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgTGluaztcbiJdfQ== */"),
      children: [jsxRuntime.jsx("a", _objectSpread(_objectSpread({
        css: getLinkStyles(props),
        href: props.to,
        target: "_blank",
        rel: "noopener noreferrer"
      }, remainingProps), {}, {
        children: props.intlMessage ? jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, props.intlMessage)) : props.children
      })), props.isExternal && jsxRuntime.jsx(icons.ExternalLinkIcon, {
        size: "medium"
      })]
    });
  }
  return jsxRuntime.jsx(reactRouterDom.Link, _objectSpread(_objectSpread({
    css: getLinkStyles(props),
    to: props.to
  }, remainingProps), {}, {
    children: props.intlMessage ? jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, props.intlMessage)) : props.children
  }));
};
Link.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _pt__default["default"].node,
  intlMessage: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].shape({
    values: _pt__default["default"].objectOf(_pt__default["default"].node)
  })]),
  isExternal: _pt__default["default"].bool.isRequired,
  to: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].any]).isRequired,
  tone: _pt__default["default"].oneOf(['primary', 'inverted', 'secondary']),
  onClick: _pt__default["default"].func
} : {};
Link.displayName = 'Link';
Link.defaultProps = defaultProps;
var Link$1 = Link;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = Link$1;
exports.version = version;
