'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var react$1 = require('react');
var reactRouterDom = require('react-router-dom');
var react = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var Inline = require('@commercetools-uikit/spacings-inline');
var utils = require('@commercetools-uikit/utils');
var AccessibleButton = require('@commercetools-uikit/accessible-button');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var Inline__default = /*#__PURE__*/_interopDefault(Inline);
var AccessibleButton__default = /*#__PURE__*/_interopDefault(AccessibleButton);

const getStateStyles = (isDisabled, isActive, theme) => {
  if (isDisabled) {
    return /*#__PURE__*/react.css("box-shadow:", designSystem.designTokens.shadowForButtonWhenDisabled, ";background-color:", designSystem.designTokens.backgroundColorForButtonWhenDisabled, ";border:none;color:", designSystem.designTokens.colorNeutral60, ";&:focus,&:hover{color:", designSystem.designTokens.colorNeutral60, ";*{fill:", designSystem.designTokens.colorNeutral60, ";}}" + ("" ), "" );
  }
  if (isActive) {
    const baseActiveStyles = [/*#__PURE__*/react.css("border:", designSystem.designTokens.borderForButtonAsSecondaryWhenActive, ";box-shadow:", designSystem.designTokens.shadowForButtonWhenActive, ";background-color:", designSystem.designTokens.colorSurface, ";&:focus,&:hover{background-color:", designSystem.designTokens.backgroundColorForButtonWhenActive, ";}" + ("" ), "" )];
    switch (theme) {
      case 'info':
        return [baseActiveStyles, /*#__PURE__*/react.css("color:", designSystem.designTokens.colorInfo, ";" + ("" ), "" )];
      default:
        return baseActiveStyles;
    }
  }
  return /*#__PURE__*/react.css("&:focus,&:hover{border:", designSystem.designTokens.borderForButtonAsSecondaryWhenHovered, ";box-shadow:", designSystem.designTokens.shadowForButtonWhenFocused, ";}&:hover{background-color:", designSystem.designTokens.backgroundColorForButtonWhenHovered, ";}&:active{border:", designSystem.designTokens.borderForButtonAsSecondaryWhenActive, ";box-shadow:", designSystem.designTokens.shadowForButtonWhenActive, ";background-color:", designSystem.designTokens.backgroundColorForButtonWhenActive, ";}" + ("" ), "" );
};
const getThemeStyles = theme => {
  if (!theme) return /*#__PURE__*/react.css("" , "" );
  if (theme === 'default') return /*#__PURE__*/react.css("" , "" );
  switch (theme) {
    case 'info':
      return /*#__PURE__*/react.css("&:focus,&:hover{color:", designSystem.designTokens.colorInfo, ";*{fill:", designSystem.designTokens.colorInfo, ";}}" + ("" ), "" );
    default:
      {
        return /*#__PURE__*/react.css("&:focus,&:hover{box-shadow:", designSystem.designTokens.shadowForButtonWhenFocused, ";background-color:", designSystem.designTokens.backgroundColorForButtonWhenHovered, ";}&:active{box-shadow:", designSystem.designTokens.shadowForButtonWhenActive, ";background-color:", designSystem.designTokens.backgroundColorForButtonWhenActive, ";}" + ("" ), "" );
      }
  }
};
const getSizeStyles = size => {
  switch (size) {
    case 'medium':
      return /*#__PURE__*/react.css("height:", designSystem.designTokens.heightForButtonAsMedium, ";border-radius:", designSystem.designTokens.borderRadiusForButtonAsMedium, ";padding:", designSystem.designTokens.paddingForButtonAsMedium, ";" + ("" ), "" );
    case 'big':
      return /*#__PURE__*/react.css("height:", designSystem.designTokens.heightForButtonAsBig, ";border-radius:", designSystem.designTokens.borderRadiusForButtonAsBig, ";padding:", designSystem.designTokens.paddingForButtonAsBig, ";" + ("" ), "" );
    default:
      return /*#__PURE__*/react.css("" , "" );
  }
};
const getToneStyles = (tone, isDisabled) => {
  switch (tone) {
    case 'info':
      return [!isDisabled && /*#__PURE__*/react.css("background-color:", designSystem.designTokens.backgroundColorForButtonAsSecondaryWhenInfo, ";border-color:", designSystem.designTokens.borderColorForButtonAsSecondaryWhenInfo, ";&:hover{background-color:", designSystem.designTokens.backgroundColorForButtonAsSecondaryWhenInfoAndHovered, ";border-color:", designSystem.designTokens.borderColorForButtonAsSecondaryWhenInfo, ";}&:focus{border-color:", designSystem.designTokens.borderColorForButtonAsSecondaryWhenInfo, ";}&:active{background-color:", designSystem.designTokens.backgroundColorForButtonAsSecondaryWhenInfoAndActive, ";border-color:", designSystem.designTokens.borderColorForButtonAsSecondaryWhenInfo, ";}" + ("" ), "" )];
    default:
      return /*#__PURE__*/react.css("" , "" );
  }
};

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
// Gets the color which the icon shoâˆšuld have based on context of button's state/cursor behavior
const getIconColor = props => {
  var _props$iconLeft;
  const isActive = props.isToggleButton && props.isToggled;
  // if button has a theme, icon should be the same color as the theme on active state
  if (props.theme !== 'default' && isActive && !props.isDisabled) return 'info'; // returns the passed in theme without overwriting
  // if button is disabled, icon should be grey
  if (props.isDisabled) return 'neutral60';
  // if button is not disabled nor has a theme, return icon's default color
  return (_props$iconLeft = props.iconLeft) === null || _props$iconLeft === void 0 ? void 0 : _props$iconLeft.props.color;
};
const defaultProps = {
  type: 'button',
  theme: 'default',
  tone: 'secondary',
  size: 'big',
  isToggleButton: false
};
const SecondaryButton = props => {
  const isActive = Boolean(props.isToggleButton && props.isToggled);
  const shouldUseLinkTag = !props.isDisabled && Boolean(props.to);
  const buttonAttributes = _objectSpread(_objectSpread({
    'data-track-component': 'SecondaryButton'
  }, utils.filterInvalidAttributes(props)), shouldUseLinkTag ? {
    to: props.to
  } : {});
  const containerStyles = [/*#__PURE__*/react.css("display:flex;align-items:center;padding:0 ", designSystem.designTokens.spacing30, ";height:", designSystem.designTokens.heightForButtonAsBig, ";" + ("" ), "" ), /*#__PURE__*/react.css("display:inline-flex;background-color:", designSystem.designTokens.colorSurface, ";border:", designSystem.designTokens.borderForButtonAsSecondary, ";border-radius:", designSystem.designTokens.borderRadiusForButtonAsBig, ";box-shadow:", designSystem.designTokens.shadowForButton, ";color:", designSystem.designTokens.colorSolid, ";transition:background-color ", designSystem.designTokens.transitionLinear80Ms, ",box-shadow ", designSystem.designTokens.transitionEaseinout150Ms, ";" + ("" ), "" ), getThemeStyles(props.theme), getStateStyles(props.isDisabled, isActive, props.theme), getSizeStyles(props.size), getToneStyles(props.tone, props.isDisabled)];
  return jsxRuntime.jsx(AccessibleButton__default["default"], {
    as: shouldUseLinkTag ? reactRouterDom.Link : props.as,
    type: props.type,
    buttonAttributes: buttonAttributes,
    label: props.label,
    onClick: props.onClick,
    isToggleButton: props.isToggleButton,
    isToggled: props.isToggled,
    isDisabled: props.isDisabled,
    css: containerStyles,
    children: jsxRuntime.jsxs(Inline__default["default"], {
      alignItems: "center",
      scale: "xs",
      children: [Boolean(props.iconLeft) && jsxRuntime.jsx("span", {
        css: /*#__PURE__*/react.css("margin:0 ", designSystem.designTokens.spacing10, " 0 0;display:flex;align-items:center;justify-content:center;" + ("" ), "" ),
        children: props.iconLeft && /*#__PURE__*/react$1.cloneElement(props.iconLeft, {
          color: getIconColor(props),
          size: props.size === 'big' ? 'big' : 'medium'
        })
      }), jsxRuntime.jsx("span", {
        children: props.label
      })]
    })
  });
};
SecondaryButton.propTypes = {};
SecondaryButton.displayName = 'SecondaryButton';
SecondaryButton.defaultProps = defaultProps;
var SecondaryButton$1 = SecondaryButton;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = SecondaryButton$1;
exports.version = version;
