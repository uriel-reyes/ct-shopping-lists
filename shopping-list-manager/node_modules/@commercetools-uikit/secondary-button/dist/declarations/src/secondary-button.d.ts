import { ReactElement, KeyboardEvent, MouseEvent, ElementType, ComponentPropsWithRef } from 'react';
export type TSecondaryButtonProps<TStringOrComponent extends ElementType = 'button'> = {
    as?: TStringOrComponent;
    type?: 'button' | 'reset' | 'submit';
    label: string;
    iconLeft?: ReactElement;
    isToggleButton?: boolean;
    isToggled?: boolean;
    isDisabled?: boolean;
    onClick?: (event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>) => void;
    size?: 'medium' | 'big';
    theme?: 'default' | 'info';
    tone?: 'secondary' | 'info';
} & ComponentPropsWithRef<TStringOrComponent>;
export declare const getIconColor: (props: Pick<TSecondaryButtonProps, 'isToggleButton' | 'isToggled' | 'theme' | 'isDisabled' | 'iconLeft'> & {
    isActive?: boolean;
}) => any;
export declare const SecondaryButton: {
    <TStringOrComponent extends ElementType = "button">(props: TSecondaryButtonProps<TStringOrComponent>): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    defaultProps: Pick<TSecondaryButtonProps<"button">, "type" | "theme" | "size" | "isToggleButton" | "tone">;
};
export default SecondaryButton;
