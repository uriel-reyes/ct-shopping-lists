import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _pt from 'prop-types';
import _trimInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/trim';
import { warning, filterDataAttributes } from '@commercetools-uikit/utils';
import Constraints from '@commercetools-uikit/constraints';
import { getInputStyles } from '@commercetools-uikit/input-utils';
import { jsx } from '@emotion/react/jsx-runtime';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const defaultProps = {
  horizontalConstraint: 'scale',
  isDisabled: false,
  isReadOnly: false,
  isPasswordVisible: false
};
const PasswordInput = props => {
  if (!props.isReadOnly) {
    process.env.NODE_ENV !== "production" ? warning(Boolean(props.onChange), 'PasswordInput: `onChange` is required when is not read only.') : void 0;
  }
  return jsx(Constraints.Horizontal, {
    max: props.horizontalConstraint,
    children: jsx("input", _objectSpread(_objectSpread({
      id: props.id,
      name: props.name,
      type: props.isPasswordVisible ? 'text' : 'password',
      value: props.value,
      onChange: props.onChange,
      onBlur: props.onBlur,
      onFocus: props.onFocus,
      disabled: props.isDisabled,
      placeholder: props.placeholder,
      autoComplete: props.autoComplete,
      css: getInputStyles(props),
      readOnly: props.isReadOnly,
      autoFocus: props.isAutofocussed
    }, filterDataAttributes(props)), {}, {
      /* ARIA */
      "aria-readonly": props.isReadOnly,
      contentEditable: !props.isReadOnly,
      "aria-invalid": props['aria-invalid'],
      "aria-errormessage": props['aria-errormessage']
    }))
  });
};
PasswordInput.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt.string,
  name: _pt.string,
  'aria-invalid': _pt.bool,
  'aria-errormessage': _pt.string,
  value: _pt.string.isRequired,
  placeholder: _pt.string,
  onChange: _pt.func,
  onBlur: _pt.func,
  onFocus: _pt.func,
  isAutofocussed: _pt.bool,
  isDisabled: _pt.bool,
  isReadOnly: _pt.bool,
  hasError: _pt.bool,
  hasWarning: _pt.bool,
  isPasswordVisible: _pt.bool,
  horizontalConstraint: _pt.oneOf([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto']),
  autoComplete: _pt.oneOf(['on', 'off', 'current-password', 'new-password'])
} : {};
PasswordInput.displayName = 'PasswordInput';
PasswordInput.defaultProps = defaultProps;
PasswordInput.isEmpty = value => !value || _trimInstanceProperty(value).call(value).length === 0;
var PasswordInput$1 = PasswordInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { PasswordInput$1 as default, version };
