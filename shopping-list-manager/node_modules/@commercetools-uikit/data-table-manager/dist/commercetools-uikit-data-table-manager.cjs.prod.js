'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var react = require('react');
var Spacings = require('@commercetools-uikit/spacings');
var jsxRuntime = require('@emotion/react/jsx-runtime');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _styled = require('@emotion/styled/base');
var _reduceInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/reduce');
var _Array$isArray = require('@babel/runtime-corejs3/core-js-stable/array/is-array');
require('@commercetools-uikit/utils');
var reactIntl = require('react-intl');
var AccessibleHidden = require('@commercetools-uikit/accessible-hidden');
var SelectInput = require('@commercetools-uikit/select-input');
var icons = require('@commercetools-uikit/icons');
var designSystem = require('@commercetools-uikit/design-system');
var FieldLabel = require('@commercetools-uikit/field-label');
var Grid = require('@commercetools-uikit/grid');
var RadioInput = require('@commercetools-uikit/radio-input');
var AccessibleButton = require('@commercetools-uikit/accessible-button');
var CollapsibleMotion = require('@commercetools-uikit/collapsible-motion');
var Card = require('@commercetools-uikit/card');
var Text = require('@commercetools-uikit/text');
var _Promise = require('@babel/runtime-corejs3/core-js-stable/promise');
var _sliceInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/slice');
var _findInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/find');
var reactBeautifulDnd = require('react-beautiful-dnd');
var debounce = require('debounce-promise');
var differenceWith = require('lodash/differenceWith');
var AsyncSelectInput = require('@commercetools-uikit/async-select-input');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var Tag = require('@commercetools-uikit/tag');
var hooks = require('@commercetools-uikit/hooks');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var Spacings__default = /*#__PURE__*/_interopDefault(Spacings);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _reduceInstanceProperty__default = /*#__PURE__*/_interopDefault(_reduceInstanceProperty);
var _Array$isArray__default = /*#__PURE__*/_interopDefault(_Array$isArray);
var AccessibleHidden__default = /*#__PURE__*/_interopDefault(AccessibleHidden);
var SelectInput__default = /*#__PURE__*/_interopDefault(SelectInput);
var FieldLabel__default = /*#__PURE__*/_interopDefault(FieldLabel);
var Grid__default = /*#__PURE__*/_interopDefault(Grid);
var RadioInput__default = /*#__PURE__*/_interopDefault(RadioInput);
var AccessibleButton__default = /*#__PURE__*/_interopDefault(AccessibleButton);
var CollapsibleMotion__default = /*#__PURE__*/_interopDefault(CollapsibleMotion);
var Card__default = /*#__PURE__*/_interopDefault(Card);
var Text__default = /*#__PURE__*/_interopDefault(Text);
var _Promise__default = /*#__PURE__*/_interopDefault(_Promise);
var _sliceInstanceProperty__default = /*#__PURE__*/_interopDefault(_sliceInstanceProperty);
var _findInstanceProperty__default = /*#__PURE__*/_interopDefault(_findInstanceProperty);
var debounce__default = /*#__PURE__*/_interopDefault(debounce);
var differenceWith__default = /*#__PURE__*/_interopDefault(differenceWith);
var AsyncSelectInput__default = /*#__PURE__*/_interopDefault(AsyncSelectInput);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var Tag__default = /*#__PURE__*/_interopDefault(Tag);

const UPDATE_ACTIONS = {
  COLUMNS_UPDATE: 'columnsUpdate',
  IS_TABLE_CONDENSED_UPDATE: 'isTableCondensedUpdate',
  IS_TABLE_WRAPPING_TEXT_UPDATE: 'isTableWrappingTextUpdate'
};
const COLUMN_MANAGER = 'columnManager';
const DISPLAY_SETTINGS = 'displaySettings';

const HeaderContainer = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e6ezr101"
} )({
  name: "1bhm8h2",
  styles: "display:flex;flex:1;justify-content:space-between"
} );
const CardContentWrapper = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e6ezr100"
} )("padding:", designSystem.designTokens.paddingForTableManagerSettingsPanel, ";" + ("" ));
const SettingsContainer = props => {
  const intl = reactIntl.useIntl();
  return jsxRuntime.jsx(CollapsibleMotion__default["default"], {
    isDefaultClosed: false,
    children: _ref => {
      let registerContentNode = _ref.registerContentNode,
        containerStyles = _ref.containerStyles;
      return jsxRuntime.jsx(Card__default["default"], {
        type: "raised",
        insetScale: "none",
        theme: props.containerTheme,
        children: jsxRuntime.jsx(CardContentWrapper, {
          children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
            scale: "xl",
            children: [jsxRuntime.jsxs(HeaderContainer, {
              children: [jsxRuntime.jsx(Text__default["default"].Headline, {
                as: "h2",
                intlMessage: props.title
              }), jsxRuntime.jsx(AccessibleButton__default["default"], {
                onClick: props.onClose,
                label: intl.formatMessage(props.closeButtonLabel),
                children: jsxRuntime.jsx(icons.CloseIcon, {
                  size: "medium"
                })
              })]
            }), jsxRuntime.jsxs(Spacings__default["default"].Stack, {
              scale: "l",
              children: [jsxRuntime.jsx(Spacings__default["default"].Inset, {
                scale: "s",
                children: jsxRuntime.jsx("div", {
                  style: containerStyles,
                  children: jsxRuntime.jsx("div", {
                    ref: registerContentNode,
                    children: props.children
                  })
                })
              }), (props.secondaryButton || props.primaryButton) && jsxRuntime.jsxs(Spacings__default["default"].Inline, {
                justifyContent: "flex-end",
                children: [props.secondaryButton, props.primaryButton]
              })]
            })]
          })
        })
      });
    }
  });
};
SettingsContainer.propTypes = {};
SettingsContainer.displayName = 'SettingsContainer';
const defaultProps$2 = {
  containerTheme: 'dark'
};
SettingsContainer.defaultProps = defaultProps$2;
var SettingsContainer$1 = SettingsContainer;

var messages$3 = reactIntl.defineMessages({
  title: {
    id: 'UIKit.DataTableManager.DensityManager.title',
    description: 'Title for the density manager component.',
    defaultMessage: 'Display settings'
  },
  textWrappingSubtitle: {
    id: 'UIKit.DataTableManager.DensityManager.textWrappingSubtitle',
    description: 'Subtitle for the text wrapping options.',
    defaultMessage: 'Text wrapping'
  },
  densityDisplaySubtitle: {
    id: 'UIKit.DataTableManager.DensityManager.densityDisplaySubtitle',
    description: 'Subtitle for the density display options.',
    defaultMessage: 'Density display'
  },
  textWrappingAllWrapVisibleOption: {
    id: 'UIKit.DataTableManager.DensityManager.textWrappingAllWrapVisibleOption',
    description: 'All wrapped texts visible option.',
    defaultMessage: 'Make all wrapped texts visible'
  },
  textWrappingShowHideOnDemandOption: {
    id: 'UIKit.DataTableManager.DensityManager.textWrappingShowHideOnDemandOption',
    description: 'Show or hide texts on demand option.',
    defaultMessage: 'Show / hide texts by row on demand'
  },
  densityDisplayComfortableOption: {
    id: 'UIKit.DataTableManager.DensityManager.densityDisplayComfortableOption',
    description: 'Density display default option.',
    defaultMessage: 'Comfortable'
  },
  densityDisplayCompactOption: {
    id: 'UIKit.DataTableManager.DensityManager.densityDisplayCompactOption',
    description: 'Density display compact option.',
    defaultMessage: 'Compact'
  },
  closeButtonLabel: {
    id: 'UIKit.DataTableManager.DensityManager.closeButtonLabel',
    description: 'Label for density manager close button.',
    defaultMessage: 'Close'
  }
});

const WRAPPED_TEXT_VISIBLE = 'wrapped-text-visible';
const SHOW_HIDE_ON_DEMAND = 'show-hide-on-demand';
const DENSITY_COMFORTABLE = 'density-comfortable';
const DENSITY_COMPACT = 'density-compact';

const DensityManager = props => {
  const intl = reactIntl.useIntl();
  const textWrappingOption = props.isWrappingText ? SHOW_HIDE_ON_DEMAND : WRAPPED_TEXT_VISIBLE;
  const densityDisplayOption = props.isCondensed ? DENSITY_COMPACT : DENSITY_COMFORTABLE;
  return jsxRuntime.jsx(SettingsContainer$1, {
    title: messages$3.title,
    closeButtonLabel: messages$3.closeButtonLabel,
    onClose: props.onClose,
    primaryButton: props.primaryButton,
    secondaryButton: props.secondaryButton,
    containerTheme: props.managerTheme,
    children: jsxRuntime.jsxs(Grid__default["default"], {
      gridGap: designSystem.designTokens.spacing30,
      gridTemplateColumns: "repeat(2, 1fr)",
      children: [jsxRuntime.jsx(Grid__default["default"].Item, {
        children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
          scale: 'l',
          children: [jsxRuntime.jsx(FieldLabel__default["default"], {
            title: intl.formatMessage(messages$3.textWrappingSubtitle)
          }), jsxRuntime.jsxs(AccessibleHidden__default["default"], {
            children: [jsxRuntime.jsx("label", {
              htmlFor: "text-wrapping-0",
              children: "Select radio option: display full text"
            }), jsxRuntime.jsx("label", {
              htmlFor: "text-wrapping-1",
              children: "Select radio option: display full previews"
            })]
          }), jsxRuntime.jsxs(RadioInput__default["default"].Group, {
            id: "text-wrapping",
            name: "text-wrapping",
            value: textWrappingOption,
            onChange: props.onTextWrappingChange,
            children: [jsxRuntime.jsx(RadioInput__default["default"].Option, {
              value: WRAPPED_TEXT_VISIBLE,
              children: intl.formatMessage(messages$3.textWrappingAllWrapVisibleOption)
            }), jsxRuntime.jsx(RadioInput__default["default"].Option, {
              value: SHOW_HIDE_ON_DEMAND,
              children: intl.formatMessage(messages$3.textWrappingShowHideOnDemandOption)
            })]
          })]
        })
      }), jsxRuntime.jsx(Grid__default["default"].Item, {
        children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
          scale: 'l',
          children: [jsxRuntime.jsx(FieldLabel__default["default"], {
            title: intl.formatMessage(messages$3.densityDisplaySubtitle)
          }), jsxRuntime.jsxs(AccessibleHidden__default["default"], {
            children: [jsxRuntime.jsx("label", {
              htmlFor: "density-display-0",
              children: "Select radio option: density default"
            }), jsxRuntime.jsx("label", {
              htmlFor: "density-display-1",
              children: "Select radio option: density compact"
            })]
          }), jsxRuntime.jsxs(RadioInput__default["default"].Group, {
            id: "density-display",
            name: "density-display",
            value: densityDisplayOption,
            onChange: props.onDensityDisplayChange,
            children: [jsxRuntime.jsx(RadioInput__default["default"].Option, {
              value: DENSITY_COMFORTABLE,
              children: intl.formatMessage(messages$3.densityDisplayComfortableOption)
            }), jsxRuntime.jsx(RadioInput__default["default"].Option, {
              value: DENSITY_COMPACT,
              children: intl.formatMessage(messages$3.densityDisplayCompactOption)
            })]
          })]
        })
      })]
    })
  });
};
DensityManager.propTypes = {};
DensityManager.displayName = 'DensityManager';
const defaultProps$1 = {
  isCondensed: true,
  isWrappingText: false
};
DensityManager.defaultProps = defaultProps$1;
var DisplaySettingsManager = DensityManager;

const DraggingSmall = /*#__PURE__*/_styled__default["default"]("small", {
  target: "e1mp438g1"
} )({
  name: "1fhyj3b",
  styles: "&:hover{cursor:grab;}"
} );
const DraggingContainer = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1mp438g0"
} )(DraggingSmall, ";" + ("" ));
var DraggingContainer$1 = DraggingContainer;

function ownKeys$3(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$3(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$3(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const DraggableTagWrapper = /*#__PURE__*/_styled__default["default"]("div", {
  target: "emzjy4n0"
} )("padding:", designSystem.designTokens.paddingForTableManagerDraggableTag, ";" + ("" ));
const DraggableTag = props => {
  const handleRemoveColumn = () => {
    var _props$onRemove;
    return (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props, props.index);
  };
  return jsxRuntime.jsx(reactBeautifulDnd.Draggable, {
    draggableId: props.column.key,
    index: props.index,
    isDragDisabled: props.isDisabled,
    children: provided => {
      return jsxRuntime.jsx(DraggableTagWrapper, {
        children: jsxRuntime.jsx(DraggingContainer$1, _objectSpread$3(_objectSpread$3(_objectSpread$3({
          ref: provided.innerRef
        }, provided.draggableProps), provided.dragHandleProps), {}, {
          children: jsxRuntime.jsx(Tag__default["default"], {
            onRemove: props.onRemove ? handleRemoveColumn : undefined,
            isDisabled: props.isDisabled,
            isDraggable: true,
            children: props.column.label
          })
        }))
      });
    }
  });
};
DraggableTag.propTypes = {};
DraggableTag.displayName = 'DraggableTag';
var DraggableTag$1 = DraggableTag;

const TagContainerEditable = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e7rakq0"
} )("background-color:", designSystem.designTokens.backgroundColorForInput, ";border:1px solid ", designSystem.designTokens.borderColorForTableManagerDroppableList, ";border-radius:", designSystem.designTokens.borderRadiusForTableManagerDroppableList, ";padding:", designSystem.designTokens.paddingForTableManagerDroppableList, ";height:", designSystem.designTokens.constraint7, ";overflow:auto;" + ("" ));
var TagContainerEditable$1 = TagContainerEditable;

var messages$2 = reactIntl.defineMessages({
  loadMoreAttributesHint: {
    id: 'UIKit.DataTableManager.ColumnManager.DroppablePanel.loadMoreAttributesHint',
    description: 'Indicate that the user can use the search input to load more attributes',
    defaultMessage: 'Load more attributes by using the search input above'
  }
});

const DroppablePanel = props => {
  return jsxRuntime.jsx(reactBeautifulDnd.Droppable, {
    droppableId: props.droppableId,
    children: provided => {
      var _context;
      return jsxRuntime.jsxs(TagContainerEditable$1, {
        "data-testid": props.droppableId,
        ref: provided.innerRef,
        children: [props.columns.length === 0 ? jsxRuntime.jsx(Spacings__default["default"].Inset, {
          scale: "s",
          children: jsxRuntime.jsx(Text__default["default"].Detail, {
            tone: "secondary",
            children: props.noColumnsText
          })
        }) : jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [_mapInstanceProperty__default["default"](_context = props.columns).call(_context, (column, index) => {
            var _context2;
            return jsxRuntime.jsx(DraggableTag$1, {
              column: column,
              index: index,
              onRemove: props.onRemove ? () => {
                var _context3, _context4;
                return props.onRemove([..._sliceInstanceProperty__default["default"](_context3 = props.columns).call(_context3, 0, index), ..._sliceInstanceProperty__default["default"](_context4 = props.columns).call(_context4, index + 1)]);
              } : undefined,
              isDisabled: props.isDisabled
            }, _concatInstanceProperty__default["default"](_context2 = "".concat(column.key, "-")).call(_context2, index));
          }), props.isSearchable && jsxRuntime.jsx(Spacings__default["default"].Inset, {
            scale: "xs",
            children: jsxRuntime.jsx(Text__default["default"].Detail, {
              tone: "secondary",
              intlMessage: messages$2.loadMoreAttributesHint
            })
          })]
        }), provided.placeholder]
      });
    }
  });
};
DroppablePanel.propTypes = {};
DroppablePanel.displayName = 'DroppablePanel';
var DroppablePanel$1 = DroppablePanel;

var messages$1 = reactIntl.defineMessages({
  title: {
    id: 'UIKit.DataTableManager.ColumnManager.title',
    description: 'Title for the column manager component.',
    defaultMessage: 'Column Manager'
  },
  visibleColumns: {
    id: 'UIKit.DataTableManager.ColumnSelectorGroups.visible',
    description: 'Message for the visible columns section.',
    defaultMessage: 'Visible columns'
  },
  hiddenColumns: {
    id: 'UIKit.DataTableManager.ColumnManager.hiddenColumns',
    description: 'Message for the hidden columns section',
    defaultMessage: 'Hidden columns'
  },
  noSelectedColumnsToShow: {
    id: 'UIKit.DataTableManager.ColumnManager.noSelectedColumnsToShow',
    description: 'Label when there are no selected columns to show',
    defaultMessage: 'There are no selected columns to show.'
  },
  noHiddenColumnsToShow: {
    id: 'UIKit.DataTableManager.ColumnManager.noHiddenColumnsToShow',
    description: 'Label when there are no hidden columns to show',
    defaultMessage: 'There are no hidden columns to show.'
  },
  closeButtonLabel: {
    id: 'UIKit.DataTableManager.ColumnManager.closeButtonLabel',
    description: 'Label for density manager close button.',
    defaultMessage: 'Close'
  }
});

const HIDDEN_COLUMNS_PANEL = 'hidden-columns-panel';
const SELECTED_COLUMNS_PANEL = 'selected-columns-panel';

function ownKeys$2(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$2(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$2(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const noSearch = () => _Promise__default["default"].resolve([]);
// 'onChange' prop in AsyncSelectInput is required but not needed here
const voidChangeHandler = () => undefined;
const DroppableContainer = /*#__PURE__*/_styled__default["default"]("div", {
  target: "en01od20"
} )("width:100%;position:relative;max-width:", designSystem.designTokens.constraint10, ";cursor:", props => props.isDragging ? 'grabbing' : 'auto', ";" + ("" ));
const handleColumnsUpdate = (dragResult, onUpdateColumns, selectedColumns, availableColumns, setIsDragging) => {
  setIsDragging(false);
  // Invalid drop destination, do nothing
  if (!dragResult.destination) return;
  if (dragResult.destination.droppableId === HIDDEN_COLUMNS_PANEL) {
    if (dragResult.source.droppableId === HIDDEN_COLUMNS_PANEL) return;
    onUpdateColumns([..._sliceInstanceProperty__default["default"](selectedColumns).call(selectedColumns, 0, dragResult.source.index), ..._sliceInstanceProperty__default["default"](selectedColumns).call(selectedColumns, dragResult.source.index + 1)]);
  } else {
    // the destination is the selected columns panel

    // it's a swap when the source and the destination are the same
    const isSwap = dragResult.source.droppableId === SELECTED_COLUMNS_PANEL;
    const items = isSwap ?
    // remove the dragged item from its position if it is not coming from
    // the hidden section (it is a swap)
    [..._sliceInstanceProperty__default["default"](selectedColumns).call(selectedColumns, 0, dragResult.source.index), ..._sliceInstanceProperty__default["default"](selectedColumns).call(selectedColumns, dragResult.source.index + 1)] : selectedColumns;
    const columns = isSwap ? selectedColumns : availableColumns;
    const draggedColumn = _findInstanceProperty__default["default"](columns).call(columns, col => col.key === dragResult.draggableId);

    // push the column in the new position if draggedColumn is found
    if (draggedColumn) {
      onUpdateColumns([..._sliceInstanceProperty__default["default"](items).call(items, 0, dragResult.destination.index), draggedColumn, ..._sliceInstanceProperty__default["default"](items).call(items, dragResult.destination.index)]);
    }
  }
};
const DropdownIndicator = () => jsxRuntime.jsx(Spacings__default["default"].Inline, {
  alignItems: "center",
  children: jsxRuntime.jsx(icons.SearchIcon, {
    size: "medium",
    color: "primary"
  })
});
DropdownIndicator.displayName = 'DropdownIndicator';
const Nothing = () => null;
const selectInputComponents = {
  Option: Nothing,
  Menu: Nothing,
  DropdownIndicator
};
const ColumnSettingsManager = props => {
  if (props.areHiddenColumnsSearchable) ;
  const intl = reactIntl.useIntl();
  const _useState = react.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isDragging = _useState2[0],
    setIsDragging = _useState2[1];
  const searchHiddenColumns = props.searchHiddenColumns;
  const handleDragStart = () => {
    setIsDragging(true);
  };
  const hiddenColumns = react.useMemo(() => differenceWith__default["default"](props.availableColumns, props.selectedColumns, (a, b) => a.key === b.key), [props.availableColumns, props.selectedColumns]);
  const handleDragEnd = react.useCallback(dragResult => handleColumnsUpdate(dragResult, props.onUpdateColumns, props.selectedColumns, props.availableColumns, setIsDragging), [props.onUpdateColumns, props.selectedColumns, props.availableColumns]);
  const debouncedSearchHiddenColumns = react.useMemo(() => debounce__default["default"](searchHiddenColumns !== null && searchHiddenColumns !== void 0 ? searchHiddenColumns : noSearch, 300), [searchHiddenColumns]);
  const handleInputChange = react.useCallback(inputValue => debouncedSearchHiddenColumns(inputValue), [debouncedSearchHiddenColumns]);
  return jsxRuntime.jsx(SettingsContainer$1, {
    title: messages$1.title,
    closeButtonLabel: messages$1.closeButtonLabel,
    onClose: props.onClose,
    primaryButton: props.primaryButton,
    secondaryButton: props.secondaryButton,
    containerTheme: props.managerTheme,
    children: jsxRuntime.jsx(reactBeautifulDnd.DragDropContext, {
      onDragEnd: handleDragEnd,
      onDragStart: handleDragStart,
      children: jsxRuntime.jsxs(Spacings__default["default"].Inline, {
        scale: "l",
        children: [jsxRuntime.jsx(DroppableContainer, {
          isDragging: isDragging,
          "aria-labelledby": "hidden-columns",
          children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
            scale: "m",
            children: [jsxRuntime.jsxs(Spacings__default["default"].Inline, {
              scale: "s",
              alignItems: "center",
              children: [jsxRuntime.jsx(icons.EyeCrossedIcon, {
                size: "big"
              }), jsxRuntime.jsx(FieldLabel__default["default"], {
                id: "hidden-columns",
                title: intl.formatMessage(messages$1.hiddenColumns)
              })]
            }), props.areHiddenColumnsSearchable && jsxRuntime.jsx(AsyncSelectInput__default["default"], _objectSpread$2(_objectSpread$2({}, props.searchHiddenColumnsPlaceholder ? {
              placeholder: props.searchHiddenColumnsPlaceholder
            } : undefined), {}, {
              onChange: voidChangeHandler,
              loadOptions: noSearch,
              onInputChange: handleInputChange,
              components: selectInputComponents
            })), jsxRuntime.jsx(DroppablePanel$1, {
              droppableId: HIDDEN_COLUMNS_PANEL,
              "data-testid": HIDDEN_COLUMNS_PANEL,
              noColumnsText: intl.formatMessage(messages$1.noHiddenColumnsToShow),
              columns: hiddenColumns,
              isSearchable: props.areHiddenColumnsSearchable
            })]
          })
        }), jsxRuntime.jsx(DroppableContainer, {
          isDragging: isDragging,
          "aria-labelledby": "visible-columns",
          children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
            scale: "m",
            children: [jsxRuntime.jsxs(Spacings__default["default"].Inline, {
              scale: "xs",
              alignItems: "center",
              children: [jsxRuntime.jsx(icons.EyeIcon, {
                size: "medium"
              }), jsxRuntime.jsx(FieldLabel__default["default"], {
                id: "visible-columns",
                title: intl.formatMessage(messages$1.visibleColumns)
              })]
            }), jsxRuntime.jsx(DroppablePanel$1, {
              droppableId: SELECTED_COLUMNS_PANEL,
              "data-testid": SELECTED_COLUMNS_PANEL,
              noColumnsText: intl.formatMessage(messages$1.noSelectedColumnsToShow),
              columns: props.selectedColumns,
              onRemove: props.onUpdateColumns
            })]
          })
        })]
      })
    })
  });
};
ColumnSettingsManager.propTypes = {};
ColumnSettingsManager.displayName = 'ColumnSettingsManager';
const defaultProps = {
  availableColumns: []
};
ColumnSettingsManager.defaultProps = defaultProps;
var ColumnSettingsManager$1 = ColumnSettingsManager;

var messages = reactIntl.defineMessages({
  placeholder: {
    id: 'UIKit.DataTableManager.TableSettings.placeholder',
    description: 'Placeholder for the table settings select component.',
    defaultMessage: 'Table settings'
  },
  displaySettingsOption: {
    id: 'UIKit.DataTableManager.TableSettings.displaySettingsOption',
    description: 'Display settings dropdown option label.',
    defaultMessage: 'Display settings'
  },
  columnManagerOption: {
    id: 'UIKit.DataTableManager.TableSettings.columnManagerOption',
    description: 'Column manager dropdown option label.',
    defaultMessage: 'Column manager'
  }
});

function ownKeys$1(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$1(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$1(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
/* The horizontal constraint is set on this container instead of the SelectInput
because the input is always empty, and therefore doesn't take any space by itself
but we want to keep enough space for the placeholder to be readable */
const SelectContainer = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e3i1gnv1"
} )("min-width:", designSystem.designTokens.constraint4, ";" + ("" ));
const TopBarContainer = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e3i1gnv0"
} )({
  name: "1ff36h2",
  styles: "flex-grow:1"
} );
const getDropdownOptions = _ref => {
  let areColumnSettingsEnabled = _ref.areColumnSettingsEnabled,
    areDisplaySettingsEnabled = _ref.areDisplaySettingsEnabled,
    formatMessage = _ref.formatMessage;
  return [...(areColumnSettingsEnabled ? [{
    value: COLUMN_MANAGER,
    label: formatMessage(messages.columnManagerOption)
  }] : []), ...(areDisplaySettingsEnabled ? [{
    value: DISPLAY_SETTINGS,
    label: formatMessage(messages.displaySettingsOption)
  }] : [])];
};
const getMappedColumns = function () {
  let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return _reduceInstanceProperty__default["default"](columns).call(columns, (mappedColumns, column) => _objectSpread$1(_objectSpread$1({}, mappedColumns), {}, {
    [column.key]: column
  }), {});
};
const getSelectedColumns = function (mappedColumns) {
  let visibleColumnsKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return _mapInstanceProperty__default["default"](visibleColumnsKeys).call(visibleColumnsKeys, columnKey => mappedColumns[columnKey]);
};
const DataTableSettings = props => {
  var _props$columnManager$, _props$columnManager;
  const areDisplaySettingsEnabled = Boolean(props.displaySettings && !props.displaySettings.disableDisplaySettings);
  const areColumnSettingsEnabled = Boolean(props.columnManager && !props.columnManager.disableColumnManager);
  const intl = reactIntl.useIntl();
  const _useState = react.useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    openedPanelId = _useState2[0],
    setOpenedPanelId = _useState2[1];
  const dropdownOptions = getDropdownOptions({
    areDisplaySettingsEnabled,
    areColumnSettingsEnabled,
    formatMessage: intl.formatMessage
  });
  const handleDropdownChange = event => setOpenedPanelId(_Array$isArray__default["default"](event.target.value) ? event.target.value[0] : event.target.value);
  const mappedColumns = getMappedColumns(areColumnSettingsEnabled ? props.columnManager.hideableColumns : undefined);
  const selectedColumns = getSelectedColumns(mappedColumns, areColumnSettingsEnabled ? props.columnManager.visibleColumnKeys : undefined);
  const handleSettingsPanelChange = () => setOpenedPanelId(null);
  return jsxRuntime.jsxs(Spacings__default["default"].Stack, {
    scale: "xs",
    children: [jsxRuntime.jsxs(Spacings__default["default"].Inline, {
      justifyContent: "space-between",
      alignItems: "center",
      children: [jsxRuntime.jsx(TopBarContainer, {
        children: props.topBar
      }), dropdownOptions.length > 0 && jsxRuntime.jsxs(SelectContainer, {
        children: [jsxRuntime.jsx(AccessibleHidden__default["default"], {
          children: jsxRuntime.jsx("label", {
            htmlFor: "table-settings-dropdown",
            children: "Open table manager dropdown"
          })
        }), jsxRuntime.jsx(SelectInput__default["default"], {
          id: "table-settings-dropdown"
          // the dropdown always shows the placeholder as selecting an option
          // will open the corresponding panel (column manager or display settings)
          ,
          value: "",
          placeholder: intl.formatMessage(messages.placeholder),
          onChange: handleDropdownChange,
          options: dropdownOptions,
          iconLeft: jsxRuntime.jsx(icons.TableIcon, {
            color: "neutral60"
          })
        })]
      })]
    }), openedPanelId === DISPLAY_SETTINGS && jsxRuntime.jsx(DisplaySettingsManager, _objectSpread$1(_objectSpread$1({}, props.displaySettings || {}), {}, {
      onClose: handleSettingsPanelChange,
      onDensityDisplayChange: event => {
        var _props$onSettingsChan;
        (_props$onSettingsChan = props.onSettingsChange) === null || _props$onSettingsChan === void 0 ? void 0 : _props$onSettingsChan.call(props, UPDATE_ACTIONS.IS_TABLE_CONDENSED_UPDATE, event.target.value === DENSITY_COMPACT);
      },
      onTextWrappingChange: event => {
        var _props$onSettingsChan2;
        (_props$onSettingsChan2 = props.onSettingsChange) === null || _props$onSettingsChan2 === void 0 ? void 0 : _props$onSettingsChan2.call(props, UPDATE_ACTIONS.IS_TABLE_WRAPPING_TEXT_UPDATE, event.target.value === SHOW_HIDE_ON_DEMAND);
      },
      managerTheme: props.managerTheme
    })), openedPanelId === COLUMN_MANAGER && jsxRuntime.jsx(ColumnSettingsManager$1, _objectSpread$1(_objectSpread$1({}, props.columnManager || {}), {}, {
      availableColumns: (_props$columnManager$ = (_props$columnManager = props.columnManager) === null || _props$columnManager === void 0 ? void 0 : _props$columnManager.hideableColumns) !== null && _props$columnManager$ !== void 0 ? _props$columnManager$ : [],
      selectedColumns: selectedColumns,
      onClose: handleSettingsPanelChange,
      onUpdateColumns: nextVisibleColumns => {
        var _props$onSettingsChan3;
        const keysOfVisibleColumns = _mapInstanceProperty__default["default"](nextVisibleColumns).call(nextVisibleColumns, visibleColumn => visibleColumn.key);
        (_props$onSettingsChan3 = props.onSettingsChange) === null || _props$onSettingsChan3 === void 0 ? void 0 : _props$onSettingsChan3.call(props, UPDATE_ACTIONS.COLUMNS_UPDATE, keysOfVisibleColumns);
      },
      managerTheme: props.managerTheme
    }))]
  });
};
DataTableSettings.propTypes = {};
DataTableSettings.displayName = 'DataTableSettings';
var DataTableSettings$1 = DataTableSettings;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const DataTableManager = props => {
  const areDisplaySettingsEnabled = Boolean(props.displaySettings && !props.displaySettings.disableDisplaySettings);
  const isWrappingText = areDisplaySettingsEnabled && props.displaySettings.isWrappingText;
  const columns = react.useMemo(() => {
    var _context;
    return _mapInstanceProperty__default["default"](_context = props.columns).call(_context, column => _objectSpread(_objectSpread({}, column), {}, {
      isTruncated: areDisplaySettingsEnabled ? isWrappingText : column.isTruncated
    }));
  }, [areDisplaySettingsEnabled, props.columns, isWrappingText]);
  return jsxRuntime.jsxs(Spacings__default["default"].Stack, {
    children: [jsxRuntime.jsx(DataTableSettings$1, {
      topBar: props.topBar,
      onSettingsChange: props.onSettingsChange,
      columnManager: props.columnManager,
      displaySettings: props.displaySettings,
      managerTheme: "light"
    }), /*#__PURE__*/react.cloneElement(props.children, {
      columns,
      isCondensed: areDisplaySettingsEnabled && props.displaySettings.isCondensed
    })]
  });
};
DataTableManager.propTypes = {};
DataTableManager.displayName = 'DataTableManager';
var DataTableManager$1 = DataTableManager;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

Object.defineProperty(exports, 'useRowSelection', {
  enumerable: true,
  get: function () { return hooks.useRowSelection; }
});
Object.defineProperty(exports, 'useSorting', {
  enumerable: true,
  get: function () { return hooks.useSorting; }
});
exports.UPDATE_ACTIONS = UPDATE_ACTIONS;
exports["default"] = DataTableManager$1;
exports.version = version;
