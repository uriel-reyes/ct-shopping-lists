import { type ReactElement, type ReactNode } from 'react';
import { type MessageDescriptor } from 'react-intl';
export type TSelectChangeEvent = {
    target: {
        name?: string;
        value?: string | string[] | null;
    };
    persist: () => void;
};
type TColumnData = {
    key: string;
    label: ReactNode;
};
type MappedColumns = Record<string, TColumnData>;
export type TDisplaySettingsProps = {
    disableDisplaySettings?: boolean;
    isCondensed?: boolean;
    isWrappingText?: boolean;
    primaryButton?: ReactElement;
    secondaryButton?: ReactElement;
};
export type TColumnManagerProps = {
    areHiddenColumnsSearchable?: boolean;
    disableColumnManager?: boolean;
    visibleColumnKeys: string[];
    hideableColumns?: TColumnData[];
    searchHiddenColumns?: (searchTerm: string) => Promise<void> | void;
    searchHiddenColumnsPlaceholder?: string;
    primaryButton?: ReactElement;
    secondaryButton?: ReactElement;
};
export type TDataTableSettingsProps = {
    topBar?: ReactNode;
    onSettingsChange?: (settingName: string, settingValue: boolean | string[]) => void;
    displaySettings?: TDisplaySettingsProps;
    columnManager?: TColumnManagerProps;
    managerTheme?: 'light' | 'dark';
};
export declare const getDropdownOptions: ({ areColumnSettingsEnabled, areDisplaySettingsEnabled, formatMessage, }: {
    areColumnSettingsEnabled: boolean;
    areDisplaySettingsEnabled: boolean;
    formatMessage: (message: MessageDescriptor) => string;
}) => {
    value: string;
    label: string;
}[];
export declare const getMappedColumns: (columns?: TColumnData[]) => MappedColumns;
export declare const getSelectedColumns: (mappedColumns: MappedColumns, visibleColumnsKeys?: string[]) => TColumnData[];
declare const DataTableSettings: {
    (props: TDataTableSettingsProps): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
};
export default DataTableSettings;
