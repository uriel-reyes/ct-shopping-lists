'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
require('prop-types');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$entries = require('@babel/runtime-corejs3/core-js-stable/object/entries');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
require('react');
var reactIntl = require('react-intl');
var messages$1 = require('@commercetools-uikit/messages');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$entries__default = /*#__PURE__*/_interopDefault(_Object$entries);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);

var messages = reactIntl.defineMessages({
  missingRequiredField: {
    id: 'UIKit.FieldErrors.missingRequiredField',
    description: 'Error message for missing required value',
    defaultMessage: 'This field is required. Provide a value.'
  },
  invalidNegativeNumber: {
    id: 'UIKit.FieldErrors.invalidNegativeNumber',
    description: 'Error message when negative number is used',
    defaultMessage: 'Negative number is not supported.'
  },
  invalidFractionalNumber: {
    id: 'UIKit.FieldErrors.invalidFractionalNumber',
    description: 'Error message when fractional number is used',
    defaultMessage: 'A whole number is required.'
  }
});

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const isObject = obj => typeof obj === 'object';
const FieldErrors = props => {
  var _context, _context2;
  if (!props.isVisible) return null;
  if (!props.errors || !isObject(props.errors)) return null;
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: _mapInstanceProperty__default["default"](_context = _filterInstanceProperty__default["default"](_context2 = _Object$entries__default["default"](props.errors)
    // Only render errors which have truthy values, to avoid
    // rendering an error for, e.g. { missing: false }
    ).call(_context2, _ref => {
      let _ref2 = _slicedToArray(_ref, 2),
        error = _ref2[1];
      return error;
    })).call(_context, _ref3 => {
      let _ref4 = _slicedToArray(_ref3, 2),
        key = _ref4[0],
        error = _ref4[1];
      // We might not use a custom error renderer, so we fall back to null
      // to enable the default errors to kick in
      const errorElement = props.renderError ? props.renderError(key, error) : null;
      // Render a custom error if one was provided.
      // Custom errors take precedence over the default errors
      if (errorElement) return jsxRuntime.jsx(messages$1.ErrorMessage, {
        id: props.id,
        children: errorElement
      }, key);
      const defaultErrorElement = props.renderDefaultError ? props.renderDefaultError(key, error) : null;
      // Render a default error if one was provided.
      // Default errors take precedence over the known errors
      if (defaultErrorElement) return jsxRuntime.jsx(messages$1.ErrorMessage, {
        id: props.id,
        children: defaultErrorElement
      }, key);

      // Try to see if we know this error and render that error instead then
      if (key === FieldErrors.errorTypes.MISSING) return jsxRuntime.jsx(messages$1.ErrorMessage, {
        id: props.id,
        children: jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, messages.missingRequiredField))
      }, key);
      if (key === FieldErrors.errorTypes.NEGATIVE) return jsxRuntime.jsx(messages$1.ErrorMessage, {
        id: props.id,
        children: jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, messages.invalidNegativeNumber))
      }, key);
      if (key === FieldErrors.errorTypes.FRACTIONS) return jsxRuntime.jsx(messages$1.ErrorMessage, {
        id: props.id,
        children: jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, messages.invalidFractionalNumber))
      }, key);
      // Render nothing in case the error is not known and no custom error
      // was returned
      return null;
    })
  });
};
FieldErrors.propTypes = {};
FieldErrors.displayName = 'FieldErrors';
FieldErrors.errorTypes = {
  MISSING: 'missing',
  NEGATIVE: 'negative',
  FRACTIONS: 'fractions'
};
var FieldErrors$1 = FieldErrors;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = FieldErrors$1;
exports.version = version;
