import { type ReactElement, type ReactNode, type MouseEvent, type KeyboardEvent, type ChangeEventHandler, type FocusEventHandler } from 'react';
type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
type TErrorRenderer = (key: string, error?: boolean) => ReactNode;
export type TPasswordField = {
    id?: string;
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    errors?: TFieldErrors;
    renderError?: TErrorRenderer;
    isRequired?: boolean;
    touched?: boolean;
    name?: string;
    value: string;
    onChange?: ChangeEventHandler<HTMLInputElement>;
    onBlur?: FocusEventHandler<HTMLInputElement>;
    onFocus?: FocusEventHandler<HTMLInputElement>;
    isAutofocussed?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    placeholder?: string;
    autoComplete?: 'on' | 'off' | 'current-password' | 'new-password';
    title: string | ReactNode;
    hint?: string | ReactNode;
    description?: string | ReactNode;
    onInfoButtonClick?: (event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>) => void;
    hintIcon?: ReactElement;
    badge?: ReactNode;
};
declare const PasswordField: {
    (props: TPasswordField): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    defaultProps: Pick<TPasswordField, "horizontalConstraint">;
    toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
};
export default PasswordField;
