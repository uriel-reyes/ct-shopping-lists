'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
require('prop-types');
var _someInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/some');
var _Object$values = require('@babel/runtime-corejs3/core-js-stable/object/values');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
require('react');
var reactIntl = require('react-intl');
var utils = require('@commercetools-uikit/utils');
var hooks = require('@commercetools-uikit/hooks');
var Constraints = require('@commercetools-uikit/constraints');
var Inline = require('@commercetools-uikit/spacings-inline');
var Stack = require('@commercetools-uikit/spacings-stack');
var FieldLabel = require('@commercetools-uikit/field-label');
var PasswordInput = require('@commercetools-uikit/password-input');
var FlatButton = require('@commercetools-uikit/flat-button');
var icons = require('@commercetools-uikit/icons');
var FieldErrors = require('@commercetools-uikit/field-errors');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _someInstanceProperty__default = /*#__PURE__*/_interopDefault(_someInstanceProperty);
var _Object$values__default = /*#__PURE__*/_interopDefault(_Object$values);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);
var Inline__default = /*#__PURE__*/_interopDefault(Inline);
var Stack__default = /*#__PURE__*/_interopDefault(Stack);
var FieldLabel__default = /*#__PURE__*/_interopDefault(FieldLabel);
var PasswordInput__default = /*#__PURE__*/_interopDefault(PasswordInput);
var FlatButton__default = /*#__PURE__*/_interopDefault(FlatButton);
var FieldErrors__default = /*#__PURE__*/_interopDefault(FieldErrors);

var messages = reactIntl.defineMessages({
  show: {
    id: 'UIKit.PasswordField.show',
    description: 'Label for the button to show the password',
    defaultMessage: 'show'
  },
  hide: {
    id: 'UIKit.PasswordField.hide',
    description: 'Label for the button to hide the password',
    defaultMessage: 'hide'
  }
});

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const sequentialId = utils.createSequentialId('password-field-');
const sequentialErrorsId = utils.createSequentialId('password-field-error-')();

// Similar shape of `FormikErrors` but values are `TFieldErrors` objects.

const hasErrors = errors => {
  var _context;
  return errors && _someInstanceProperty__default["default"](_context = _Object$values__default["default"](errors)).call(_context, Boolean);
};
const defaultProps = {
  horizontalConstraint: 'scale'
};
const PasswordField = props => {
  const intl = reactIntl.useIntl();
  const _useToggleState = hooks.useToggleState(false),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    isPasswordVisible = _useToggleState2[0],
    togglePasswordVisibility = _useToggleState2[1];
  const id = hooks.useFieldId(props.id, sequentialId);
  const hasError = props.touched && hasErrors(props.errors);
  if (!props.isReadOnly) ;
  if (props.hintIcon) ;
  return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: jsxRuntime.jsxs(Stack__default["default"], {
      scale: "xs",
      children: [jsxRuntime.jsxs(Inline__default["default"], {
        alignItems: "flex-end",
        justifyContent: "space-between",
        children: [jsxRuntime.jsx(FieldLabel__default["default"], {
          hint: props.hint,
          title: props.title,
          badge: props.badge,
          htmlFor: id,
          hintIcon: props.hintIcon,
          description: props.description,
          onInfoButtonClick: props.onInfoButtonClick,
          hasRequiredIndicator: props.isRequired
        }), !props.isDisabled && !props.isReadOnly && jsxRuntime.jsx(FlatButton__default["default"], {
          icon: isPasswordVisible ? jsxRuntime.jsx(icons.EyeCrossedIcon, {}) : jsxRuntime.jsx(icons.EyeIcon, {}),
          label: isPasswordVisible ? intl.formatMessage(messages.hide) : intl.formatMessage(messages.show),
          onClick: togglePasswordVisibility,
          isDisabled: !props.value
        })]
      }), jsxRuntime.jsx(PasswordInput__default["default"], _objectSpread(_objectSpread({
        id: id,
        name: props.name,
        value: props.value,
        onChange: props.onChange,
        onBlur: props.onBlur,
        onFocus: props.onFocus,
        isAutofocussed: props.isAutofocussed,
        isPasswordVisible: isPasswordVisible,
        isDisabled: props.isDisabled,
        isReadOnly: props.isReadOnly,
        hasError: hasError,
        placeholder: props.placeholder,
        autoComplete: props.autoComplete,
        horizontalConstraint: "scale"
      }, utils.filterDataAttributes(props)), {}, {
        /* ARIA */
        "aria-invalid": hasError,
        "aria-errormessage": sequentialErrorsId
      })), jsxRuntime.jsx(FieldErrors__default["default"], {
        id: sequentialErrorsId,
        errors: props.errors,
        isVisible: hasError,
        renderError: props.renderError
      })]
    })
  });
};
PasswordField.propTypes = {};
PasswordField.displayName = 'PasswordField';
PasswordField.defaultProps = defaultProps;
/**
 * Use this function to convert the Formik `errors` object type to
 * our custom field errors type.
 * This is primarly useful when using TypeScript.
 */
PasswordField.toFieldErrors = function toFieldErrors(errors) {
  return errors;
};
var PasswordField$1 = PasswordField;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = PasswordField$1;
exports.version = version;
