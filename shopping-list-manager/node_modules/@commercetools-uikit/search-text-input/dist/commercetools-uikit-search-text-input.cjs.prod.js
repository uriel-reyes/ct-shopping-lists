'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _trimInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/trim');
var react$1 = require('react');
var SecondaryIconButton = require('@commercetools-uikit/secondary-icon-button');
var Constraints = require('@commercetools-uikit/constraints');
var icons = require('@commercetools-uikit/icons');
var utils = require('@commercetools-uikit/utils');
var react = require('@emotion/react');
var inputUtils = require('@commercetools-uikit/input-utils');
var designSystem = require('@commercetools-uikit/design-system');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _trimInstanceProperty__default = /*#__PURE__*/_interopDefault(_trimInstanceProperty);
var SecondaryIconButton__default = /*#__PURE__*/_interopDefault(SecondaryIconButton);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);

const getInputContainerBorderColor = function (props) {
  let defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : designSystem.designTokens.borderColorForInput;
  if (props.isDisabled) {
    return designSystem.designTokens.borderColorForInputWhenDisabled;
  }
  if (props.hasError) {
    return designSystem.designTokens.borderColorForInputWhenError;
  }
  if (props.hasWarning) {
    return designSystem.designTokens.borderColorForInputWhenWarning;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.borderColorForInputWhenReadonly;
  }
  return defaultColor;
};
const getInputBoxShadow = props => {
  if (props.hasError) {
    return designSystem.designTokens.shadowForInputWhenError;
  }
  if (props.hasWarning) {
    return designSystem.designTokens.shadowForInputWhenWarning;
  }
  return designSystem.designTokens.shadowForInput;
};
var _ref = {
  name: "v9rb4r",
  styles: "border:none;box-shadow:none;background:none;&,&:focus,&:focus:not(:read-only){box-shadow:none;}&:focus,&:hover{background-color:transparent!important;}"
} ;
const getSearchTextInputStyles = props => [inputUtils.getInputStyles(props), _ref];
const getButtonStyles = () => /*#__PURE__*/react.css("border:none;background:none;height:100%;border-top-right-radius:", designSystem.designTokens.borderRadiusForInput, ";border-bottom-right-radius:", designSystem.designTokens.borderRadiusForInput, ";border-left:none;align-items:center;transition:border-color ", designSystem.designTokens.transitionStandard, ",background-color ", designSystem.designTokens.transitionStandard, ";transition:border-color ", designSystem.designTokens.transitionStandard, ",box-shadow ", designSystem.designTokens.transitionStandard, ";" + ("" ), "" );
const getIconColor = (props, defaultColor) => {
  if (props.isDisabled) {
    return designSystem.designTokens.fontColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.fontColorForSearchInputIconWhenReadonly;
  }
  return defaultColor;
};
const getClearIconButtonStyles = props => [getButtonStyles(), /*#__PURE__*/react.css("margin-right:", designSystem.designTokens.marginRightForClearInputIcon, ";fill:", getIconColor(props, designSystem.designTokens.fontColorForClearInputIcon), ";&:hover{fill:", getIconColor(props, designSystem.designTokens.fontColorForClearInputIconWhenHovered), ";}" + ("" ), "" )];
const getSearchIconButtonStyles = props => [getButtonStyles(), /*#__PURE__*/react.css("margin-right:", designSystem.designTokens.marginRightForSearchInputIcon, ";fill:", getIconColor(props, designSystem.designTokens.fontColorForSearchInputIcon), ";cursor:", props.isReadOnly ? 'default' : 'pointer', ";&:hover{fill:", getIconColor(props, designSystem.designTokens.fontColorForSearchInputIconWhenHovered), ";}" + ("" ), "" )];
const getTextInputContainerBackgroundColor = props => {
  if (props.isDisabled) {
    return designSystem.designTokens.backgroundColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.backgroundColorForInputWhenReadonly;
  }
  return designSystem.designTokens.backgroundColorForInput;
};
const getSearchTextInputContainerStyles = props => [/*#__PURE__*/react.css("display:flex;align-items:center;background-color:", props.isDisabled ? designSystem.designTokens.backgroundColorForInputWhenDisabled : designSystem.designTokens.backgroundColorForInput, ";background-color:", getTextInputContainerBackgroundColor(props), ";border:1px solid ", getInputContainerBorderColor(props), ";border-radius:", designSystem.designTokens.borderRadiusForInput, ";box-shadow:", getInputBoxShadow(props), ";height:", designSystem.designTokens.heightForInput, ";box-sizing:border-box;&:hover{border-color:", getInputContainerBorderColor(props, designSystem.designTokens.borderColorForInputWhenHovered), ";}&:hover:not(:read-only):not(:disabled){background-color:", designSystem.designTokens.backgroundColorForInputWhenHovered, ";}&:focus{border-color:", designSystem.designTokens.borderColorForInputWhenFocused, ";}" + ("" ), "" ), !props.isDisabled && !props.isReadOnly && /*#__PURE__*/react.css("&:focus-within{border-color:", designSystem.designTokens.borderColorForInputWhenFocused, ";box-shadow:", designSystem.designTokens.boxShadowForDatetimeInputWhenHovered, " ", designSystem.designTokens.borderColorForInputWhenFocused, ";&:hover{background-color:", designSystem.designTokens.colorSurface, ";}}" + ("" ), "" )];

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const defaultProps = {
  horizontalConstraint: 'scale',
  isClearable: true
};
const SearchTextInput = /*#__PURE__*/react$1.forwardRef((props, forwardedRef) => {
  if (!props.isReadOnly) ;
  const _useState = react$1.useState(props.value || ''),
    _useState2 = _slicedToArray(_useState, 2),
    searchValue = _useState2[0],
    setSearchValue = _useState2[1];
  const handleClear = () => {
    setSearchValue('');
    if (props.onReset) {
      props.onReset();
    }
  };
  const handleChange = event => {
    setSearchValue(event.target.value);
    if (props.onChange) {
      props.onChange(event);
    }
  };
  const handleSubmit = event => {
    event.preventDefault();
    if (props.onSubmit) {
      props.onSubmit(searchValue);
    }
  };
  return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: jsxRuntime.jsxs("div", {
      css: getSearchTextInputContainerStyles(props),
      children: [jsxRuntime.jsx("input", _objectSpread(_objectSpread({
        id: props.id,
        name: props.name,
        type: "text",
        value: searchValue,
        onChange: handleChange,
        onBlur: props.onBlur,
        onFocus: props.onFocus,
        disabled: props.isDisabled,
        placeholder: props.placeholder,
        readOnly: props.isReadOnly,
        autoFocus: props.isAutofocussed,
        autoComplete: props.autoComplete,
        "aria-readonly": props.isReadOnly,
        contentEditable: !props.isReadOnly,
        "aria-invalid": props['aria-invalid'],
        "aria-errormessage": props['aria-errormessage'],
        css: getSearchTextInputStyles(props),
        ref: forwardedRef
      }, utils.filterDataAttributes(props)), {}, {
        onKeyDown: event => {
          if (!props.isReadOnly && event.key === 'Enter') {
            handleSubmit(event);
          }
        }
      })), props.isClearable && searchValue && !props.isDisabled && !props.isReadOnly && jsxRuntime.jsx(SecondaryIconButton__default["default"], {
        icon: jsxRuntime.jsx(icons.CloseIcon, {}),
        size: "medium",
        label: 'clear-button',
        onClick: handleClear,
        css: getClearIconButtonStyles(props)
      }), jsxRuntime.jsx(SecondaryIconButton__default["default"], {
        icon: jsxRuntime.jsx(icons.SearchIcon, {}),
        label: 'search-button',
        onClick: handleSubmit,
        css: getSearchIconButtonStyles(props),
        isDisabled: props.isDisabled
      })]
    })
  });
});
SearchTextInput.displayName = 'SearchTextInput';
SearchTextInput.defaultProps = defaultProps;
const isEmpty = value => !value || _trimInstanceProperty__default["default"](value).call(value).length === 0;
SearchTextInput.isEmpty = isEmpty;
var SearchTextInput$1 = SearchTextInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = SearchTextInput$1;
exports.version = version;
