import { type ReactNode } from 'react';
import type { TCollapsiblePanel } from './collapsible-panel';
declare function getThemeStyle(theme?: TCollapsiblePanel['theme']): import("@emotion/utils").SerializedStyles;
declare const getHeaderContainerStyles: (props: Pick<TCollapsiblePanel, 'headerControlsAlignment' | 'condensed' | 'isDisabled' | 'isSticky'>, isOpen: boolean) => (false | import("@emotion/utils").SerializedStyles | undefined)[];
declare const baseContainerStyles: import("@emotion/utils").SerializedStyles;
declare const HeaderControlsWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
declare const SectionContent: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
declare const SectionDescriptionWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & {
    condensed?: boolean | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
type TSectionWrapper = {
    condensed?: boolean;
    isExpandControlHidden?: boolean;
    children: ReactNode;
};
declare const SectionWrapper: import("react").ForwardRefExoticComponent<TSectionWrapper & import("react").RefAttributes<HTMLDivElement>>;
export { baseContainerStyles, getHeaderContainerStyles, getThemeStyle, SectionContent, SectionDescriptionWrapper, SectionWrapper, HeaderControlsWrapper, };
