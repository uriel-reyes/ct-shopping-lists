'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _styled = require('@emotion/styled/base');
var react = require('react');
require('react-is');
var omit = require('lodash/omit');
var utils = require('@commercetools-uikit/utils');
var designSystem = require('@commercetools-uikit/design-system');
var react$1 = require('@emotion/react');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var omit__default = /*#__PURE__*/_interopDefault(omit);

// resets button styles given automatically by browsers
const normalizedButtonStyles = {
  name: "1gsoq86",
  styles: "display:inline-block;box-sizing:border-box;padding:0;margin:0;border:none;cursor:pointer;background:none;color:inherit;white-space:nowrap;font:inherit;font-size:inherit;font-family:inherit;letter-spacing:inherit;word-spacing:inherit;text-decoration:none;text-rendering:inherit;text-align:inherit;text-transform:inherit;text-indent:inherit;text-shadow:inherit"
} ;

// Backwards compatibility
const getNormalizedButtonStyles = () => normalizedButtonStyles;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const propsToOmit = ['onClick'];
const getIsEnterOrSpace = event => event.key === ' ' || event.key === 'Enter';

// This needs to be a styled component to be able to use the `as` prop.
const Button = /*#__PURE__*/_styled__default["default"]("button", {
  target: "e1hhqyqg0"
} )("" );
const defaultProps = {
  type: 'button',
  buttonAttributes: {},
  isToggleButton: false,
  isToggled: false
};
const AccessibleButton = /*#__PURE__*/react.forwardRef((props, ref) => {
  const isButton = !props.as || props.as === 'button';
  const onClick = props.onClick;
  const handleClick = react.useCallback(event => {
    if (props.isDisabled) {
      event.preventDefault();
      return false;
    }
    if (!props.isDisabled && onClick) {
      return onClick(event);
    }
    return;
  }, [onClick, props.isDisabled]);
  const handleKeyPress = react.useCallback(event => {
    if (props.isDisabled) {
      event.preventDefault();
      return false;
    }
    if (!props.isDisabled && onClick && getIsEnterOrSpace(event)) {
      return onClick(event);
    }
    return;
  }, [onClick, props.isDisabled]);
  let buttonProps = {};
  if (isButton) {
    buttonProps = {
      type: props.type
    };
  } else {
    buttonProps = {
      role: 'button',
      tabIndex: '0',
      onKeyPress: handleKeyPress
    };
  }
  return jsxRuntime.jsx(Button, _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
    as: props.as,
    id: props.id,
    ref: ref,
    "aria-label": props.label,
    onClick: handleClick,
    css: /*#__PURE__*/react$1.css(normalizedButtonStyles, " display:inline-flex;font-size:", designSystem.designTokens.fontSizeForButton, ";font-weight:", designSystem.designTokens.fontWeightForButton, ";cursor:", props.isDisabled ? 'not-allowed' : 'pointer', ";&:disabled{cursor:not-allowed;}" + ("" ), "" )
    // Allow to override the styles by passing a `className` prop.
    // Custom styles can also be passed using the `css` prop from emotion.
    // https://emotion.sh/docs/css-prop#style-precedence
    ,
    className: props.className,
    disabled: props.isDisabled,
    "aria-disabled": props.isDisabled
  }, props.isToggleButton ? {
    'aria-pressed': props.isToggled
  } : {}), omit__default["default"](props.buttonAttributes, propsToOmit)), buttonProps), utils.filterAriaAttributes(props)), {}, {
    children: props.children
  }));
});
AccessibleButton.displayName = 'AccessibleButton';
AccessibleButton.defaultProps = defaultProps;
var AccessibleButton$1 = AccessibleButton;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = AccessibleButton$1;
exports.getNormalizedButtonStyles = getNormalizedButtonStyles;
exports.version = version;
