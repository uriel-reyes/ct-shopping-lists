import { type ReactNode } from 'react';
import { type Props as ReactSelectProps } from 'react-select';
export type TCustomEvent = {
    target: {
        id?: string;
        name?: string;
        value?: string | string[] | null;
    };
    persist?: () => void;
};
export type TValue = {
    text: string;
    option: string;
};
export type TOption = {
    value: string;
    label?: ReactNode;
};
export type TOptionObject = {
    options: TOption[];
};
export type TOptions = TOption[] | TOptionObject[];
export type TSelectableSearchInputProps = {
    id?: string;
    autoComplete?: string;
    'aria-invalid'?: boolean;
    'aria-errormessage'?: string;
    name?: string;
    value: TValue;
    onChange?: (event: TCustomEvent) => void;
    onBlur?: (event: TCustomEvent) => void;
    onFocus?: (event: TCustomEvent) => void;
    onSubmit: (value: TValue) => void;
    onReset?: () => void;
    isAutofocussed?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    hasError?: boolean;
    hasWarning?: boolean;
    placeholder?: string;
    isClearable?: boolean;
    horizontalConstraint?: 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    options: TOptions;
    menuPortalZIndex?: number;
    menuPortalTarget?: ReactSelectProps['menuPortalTarget'];
    menuShouldBlockScroll?: ReactSelectProps['menuShouldBlockScroll'];
    onMenuInputChange?: ReactSelectProps['onInputChange'];
    noMenuOptionsMessage?: ReactSelectProps['noOptionsMessage'];
    isMenuSearchable?: ReactSelectProps['isSearchable'];
    maxMenuHeight?: ReactSelectProps['maxMenuHeight'];
    closeMenuOnSelect?: ReactSelectProps['closeMenuOnSelect'];
    menuHorizontalConstraint?: 3 | 4 | 5;
    showSubmitButton?: boolean;
};
declare const SelectableSearchInput: {
    (props: TSelectableSearchInputProps): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    defaultProps: Pick<TSelectableSearchInputProps, "isClearable" | "options" | "horizontalConstraint" | "menuPortalZIndex" | "menuHorizontalConstraint" | "showSubmitButton">;
    isEmpty(formValue: TSelectableSearchInputProps['value']): boolean;
    getTextInputId: (name?: string) => string | undefined;
    getDropdownId: (name?: string) => string | undefined;
};
export default SelectableSearchInput;
