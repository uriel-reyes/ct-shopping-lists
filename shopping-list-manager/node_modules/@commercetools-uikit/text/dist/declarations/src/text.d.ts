import type { MessageDescriptor } from 'react-intl';
import { ReactNode } from 'react';
export type TTone = 'primary' | 'secondary' | 'tertiary' | 'information' | 'positive' | 'negative' | 'critical' | 'inherit';
export type TFontWeight = 'regular' | 'medium' | 'bold';
export type TBasicTextProps = {
    id?: string;
    intlMessage?: MessageDescriptor & {
        values?: Record<string, React.ReactNode>;
    };
    children?: ReactNode;
};
type TBasicHeadlineProps = {
    title?: string;
};
export type THeadlineProps = {
    as?: 'h1' | 'h2' | 'h3';
    truncate?: boolean;
    nowrap?: boolean;
} & TBasicTextProps & TBasicHeadlineProps;
export type TSubheadlineProps = {
    as?: 'h4' | 'h5';
    truncate?: boolean;
    nowrap?: boolean;
    isBold?: boolean;
    tone?: TTone;
} & TBasicTextProps & TBasicHeadlineProps;
export type TWrapProps = TBasicTextProps & TBasicHeadlineProps;
export type TBodyProps = {
    as?: 'span' | 'p';
    isBold?: boolean;
    isItalic?: boolean;
    isStrikethrough?: boolean;
    tone?: TTone | 'inverted';
    fontWeight?: TFontWeight;
    truncate?: boolean;
    nowrap?: boolean;
} & TBasicTextProps & TBasicHeadlineProps;
export type TDetailProps = {
    isBold?: boolean;
    isItalic?: boolean;
    isStrikethrough?: boolean;
    as?: 'span' | 'small';
    tone?: TTone | 'warning' | 'inverted';
    fontWeight?: TFontWeight;
    truncate?: boolean;
    nowrap?: boolean;
    'aria-labelledby'?: string;
} & TBasicTextProps & TBasicHeadlineProps;
export type TCaptionProps = {
    isItalic?: boolean;
    isStrikethrough?: boolean;
    tone?: TTone | 'warning' | 'inverted';
    fontWeight?: TFontWeight;
    truncate?: boolean;
    nowrap?: boolean;
    'aria-labelledby'?: string;
} & TBasicTextProps & TBasicHeadlineProps;
declare const _default: {
    Headline: {
        (props: THeadlineProps): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Wrap: {
        (props: TWrapProps): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Subheadline: {
        (props: TSubheadlineProps): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Detail: {
        (props: TDetailProps): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Body: {
        (props: TBodyProps): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Caption: {
        (props: TCaptionProps): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
};
export default _default;
