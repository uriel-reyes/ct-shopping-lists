import { Component, type ReactElement, type ReactNode } from 'react';
import type { GroupBase, ActionMeta } from 'react-select';
import type { AsyncCreatableProps } from 'react-select/async-creatable';
type ReactSelectAsyncCreatableProps = AsyncCreatableProps<unknown, boolean, GroupBase<unknown>>;
type TErrorRenderer = (key: string, error?: boolean) => ReactNode;
type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
type TCustomEvent = {
    target: {
        id?: string;
        name?: string;
        value?: unknown;
    };
    persist: () => void;
};
export type TAsyncCreatableSelectFieldProps = {
    id?: ReactSelectAsyncCreatableProps['inputId'];
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    errors?: TFieldErrors;
    renderError?: TErrorRenderer;
    isRequired?: boolean;
    touched?: boolean[] | boolean;
    'aria-label'?: ReactSelectAsyncCreatableProps['aria-label'];
    'aria-labelledby'?: ReactSelectAsyncCreatableProps['aria-labelledby'];
    isAutofocussed?: boolean;
    backspaceRemovesValue?: ReactSelectAsyncCreatableProps['backspaceRemovesValue'];
    components?: ReactSelectAsyncCreatableProps['components'];
    filterOption?: ReactSelectAsyncCreatableProps['filterOption'];
    containerId?: ReactSelectAsyncCreatableProps['id'];
    isClearable?: ReactSelectAsyncCreatableProps['isClearable'];
    isDisabled?: ReactSelectAsyncCreatableProps['isDisabled'];
    isReadOnly?: boolean;
    isOptionDisabled?: ReactSelectAsyncCreatableProps['isOptionDisabled'];
    isMulti?: ReactSelectAsyncCreatableProps['isMulti'];
    isSearchable?: ReactSelectAsyncCreatableProps['isSearchable'];
    hasWarning?: boolean;
    maxMenuHeight?: ReactSelectAsyncCreatableProps['maxMenuHeight'];
    menuPortalTarget?: ReactSelectAsyncCreatableProps['menuPortalTarget'];
    menuPortalZIndex?: number;
    menuShouldBlockScroll?: ReactSelectAsyncCreatableProps['menuShouldBlockScroll'];
    name?: ReactSelectAsyncCreatableProps['name'];
    noOptionsMessage?: ReactSelectAsyncCreatableProps['noOptionsMessage'];
    onBlur?: (event: TCustomEvent) => void;
    onChange?: (event: TCustomEvent, info: ActionMeta<unknown>) => void;
    onFocus?: ReactSelectAsyncCreatableProps['onFocus'];
    onInputChange?: ReactSelectAsyncCreatableProps['onInputChange'];
    placeholder?: ReactSelectAsyncCreatableProps['placeholder'];
    tabIndex?: ReactSelectAsyncCreatableProps['tabIndex'];
    tabSelectsValue?: ReactSelectAsyncCreatableProps['tabSelectsValue'];
    value?: ReactSelectAsyncCreatableProps['value'];
    showOptionGroupDivider?: boolean;
    defaultOptions?: ReactSelectAsyncCreatableProps['defaultOptions'];
    loadOptions: ReactSelectAsyncCreatableProps['loadOptions'];
    cacheOptions?: ReactSelectAsyncCreatableProps['cacheOptions'];
    allowCreateWhileLoading?: ReactSelectAsyncCreatableProps['allowCreateWhileLoading'];
    formatCreateLabel?: ReactSelectAsyncCreatableProps['formatCreateLabel'];
    isValidNewOption?: ReactSelectAsyncCreatableProps['isValidNewOption'];
    getNewOptionData?: ReactSelectAsyncCreatableProps['getNewOptionData'];
    onCreateOption?: ReactSelectAsyncCreatableProps['onCreateOption'];
    createOptionPosition?: ReactSelectAsyncCreatableProps['createOptionPosition'];
    title: string | ReactNode;
    hint?: string | ReactNode;
    description?: string | ReactNode;
    onInfoButtonClick?: () => void;
    hintIcon?: ReactElement;
    badge?: ReactNode;
    iconLeft?: ReactNode;
};
type TAsyncCreatableSelectFieldState = Pick<TAsyncCreatableSelectFieldProps, 'id'>;
export default class AsyncCreatableSelectField extends Component<TAsyncCreatableSelectFieldProps, TAsyncCreatableSelectFieldState> {
    static displayName: string;
    static defaultProps: Pick<TAsyncCreatableSelectFieldProps, 'horizontalConstraint'>;
    state: {
        id: string | undefined;
    };
    static getDerivedStateFromProps: (props: TAsyncCreatableSelectFieldProps, state: TAsyncCreatableSelectFieldState) => {
        id: string;
    };
    static toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export {};
