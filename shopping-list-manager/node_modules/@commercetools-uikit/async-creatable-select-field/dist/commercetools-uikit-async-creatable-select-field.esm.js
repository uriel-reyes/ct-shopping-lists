import _Reflect$construct from '@babel/runtime-corejs3/core-js-stable/reflect/construct';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _classCallCheck from '@babel/runtime-corejs3/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime-corejs3/helpers/esm/createClass';
import _inherits from '@babel/runtime-corejs3/helpers/esm/inherits';
import _possibleConstructorReturn from '@babel/runtime-corejs3/helpers/esm/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime-corejs3/helpers/esm/getPrototypeOf';
import _pt from 'prop-types';
import _someInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/some';
import _Object$values from '@babel/runtime-corejs3/core-js-stable/object/values';
import _Array$isArray from '@babel/runtime-corejs3/core-js-stable/array/is-array';
import { isValidElement, Component } from 'react';
import { createSequentialId, warning, filterDataAttributes, getFieldId } from '@commercetools-uikit/utils';
import Constraints from '@commercetools-uikit/constraints';
import Spacings from '@commercetools-uikit/spacings';
import FieldLabel from '@commercetools-uikit/field-label';
import AsyncCreatableSelectInput from '@commercetools-uikit/async-creatable-select-input';
import FieldErrors from '@commercetools-uikit/field-errors';
import { jsx, jsxs } from '@emotion/react/jsx-runtime';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
const sequentialId = createSequentialId('async-creatable-select-field-');
const sequentialErrorsId = createSequentialId('async-creatable-select-field-error-')();
const hasErrors = errors => {
  var _context;
  return errors && _someInstanceProperty(_context = _Object$values(errors)).call(_context, Boolean);
};
let AsyncCreatableSelectField = /*#__PURE__*/function (_Component) {
  _inherits(AsyncCreatableSelectField, _Component);
  var _super = _createSuper(AsyncCreatableSelectField);
  function AsyncCreatableSelectField() {
    var _this;
    _classCallCheck(this, AsyncCreatableSelectField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call(this, ...args);
    _this.state = {
      // We generate an id in case no id is provided by the parent to attach the
      // label to the input component.
      id: _this.props.id
    };
    return _this;
  }
  _createClass(AsyncCreatableSelectField, [{
    key: "render",
    value: function render() {
      const hasError = AsyncCreatableSelectInput.isTouched(this.props.touched) && hasErrors(this.props.errors);
      if (!this.props.isReadOnly) {
        process.env.NODE_ENV !== "production" ? warning(typeof this.props.onChange === 'function', 'AsyncCreatableSelectField: `onChange` is required when field is not read only.') : void 0;
      }
      if (this.props.hintIcon) {
        process.env.NODE_ENV !== "production" ? warning(typeof this.props.hint === 'string' || /*#__PURE__*/isValidElement(this.props.hint), 'AsyncCreatableSelectField: `hint` is required to be string or ReactNode if hintIcon is present') : void 0;
      }
      if (this.props.isMulti) {
        process.env.NODE_ENV !== "production" ? warning(_Array$isArray(this.props.value), 'AsyncCreatableSelectField: `value` is expected to be an array of string when isMulti is true') : void 0;
        process.env.NODE_ENV !== "production" ? warning(typeof this.props.touched === 'undefined' || _Array$isArray(this.props.touched), 'AsyncCreatableSelectField: `touched` is expected to be an array of boolean when isMulti is true') : void 0;
      }
      return jsx(Constraints.Horizontal, {
        max: this.props.horizontalConstraint,
        children: jsxs(Spacings.Stack, {
          scale: "xs",
          children: [jsx(FieldLabel, {
            title: this.props.title,
            hint: this.props.hint,
            description: this.props.description,
            onInfoButtonClick: this.props.onInfoButtonClick,
            hintIcon: this.props.hintIcon,
            badge: this.props.badge,
            hasRequiredIndicator: this.props.isRequired,
            htmlFor: this.state.id
          }), jsx(AsyncCreatableSelectInput, _objectSpread({
            horizontalConstraint: "scale",
            hasError: hasError,
            "aria-label": this.props['aria-label'],
            "aria-labelledby": this.props['aria-labelledby'],
            "aria-invalid": hasError,
            "aria-errormessage": sequentialErrorsId,
            isAutofocussed: this.props.isAutofocussed,
            backspaceRemovesValue: this.props.backspaceRemovesValue,
            components: this.props.components,
            filterOption: this.props.filterOption,
            id: this.state.id,
            containerId: this.props.containerId,
            isClearable: this.props.isClearable,
            isDisabled: this.props.isDisabled,
            isReadOnly: this.props.isReadOnly,
            isOptionDisabled: this.props.isOptionDisabled,
            isMulti: this.props.isMulti,
            isSearchable: this.props.isSearchable,
            hasWarning: this.props.hasWarning,
            maxMenuHeight: this.props.maxMenuHeight,
            menuPortalTarget: this.props.menuPortalTarget,
            menuPortalZIndex: this.props.menuPortalZIndex,
            menuShouldBlockScroll: this.props.menuShouldBlockScroll,
            name: this.props.name,
            noOptionsMessage: this.props.noOptionsMessage,
            onBlur: this.props.onBlur,
            onChange: this.props.onChange,
            onFocus: this.props.onFocus,
            onInputChange: this.props.onInputChange,
            placeholder: this.props.placeholder,
            tabIndex: this.props.tabIndex,
            tabSelectsValue: this.props.tabSelectsValue,
            value: this.props.value
            // Async react-select props
            ,
            defaultOptions: this.props.defaultOptions,
            loadOptions: this.props.loadOptions,
            cacheOptions: this.props.cacheOptions
            // Creatable props
            ,
            allowCreateWhileLoading: this.props.allowCreateWhileLoading,
            formatCreateLabel: this.props.formatCreateLabel,
            isValidNewOption: this.props.isValidNewOption,
            getNewOptionData: this.props.getNewOptionData,
            onCreateOption: this.props.onCreateOption,
            createOptionPosition: this.props.createOptionPosition,
            showOptionGroupDivider: this.props.showOptionGroupDivider,
            iconLeft: this.props.iconLeft
          }, filterDataAttributes(this.props))), jsx(FieldErrors, {
            id: sequentialErrorsId,
            errors: this.props.errors,
            isVisible: hasError,
            renderError: this.props.renderError
          })]
        })
      });
    }
  }], [{
    key: "toFieldErrors",
    value:
    /**
     * Use this function to convert the Formik `errors` object type to
     * our custom field errors type.
     * This is primarly useful when using TypeScript.
     */
    function toFieldErrors(errors) {
      return errors;
    }
  }]);
  return AsyncCreatableSelectField;
}(Component);
AsyncCreatableSelectField.displayName = 'AsyncCreatableSelectField';
AsyncCreatableSelectField.defaultProps = {
  horizontalConstraint: 'scale'
};
AsyncCreatableSelectField.getDerivedStateFromProps = (props, state) => ({
  id: getFieldId(props, state, sequentialId)
});
AsyncCreatableSelectField.propTypes = process.env.NODE_ENV !== "production" ? {
  horizontalConstraint: _pt.oneOf([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto']),
  errors: _pt.objectOf(_pt.bool),
  renderError: _pt.func,
  isRequired: _pt.bool,
  touched: _pt.oneOfType([_pt.arrayOf(_pt.bool), _pt.bool]),
  isAutofocussed: _pt.bool,
  isReadOnly: _pt.bool,
  hasWarning: _pt.bool,
  menuPortalZIndex: _pt.number,
  onBlur: _pt.func,
  onChange: _pt.func,
  showOptionGroupDivider: _pt.bool,
  title: _pt.oneOfType([_pt.string, _pt.node]).isRequired,
  hint: _pt.oneOfType([_pt.string, _pt.node]),
  description: _pt.oneOfType([_pt.string, _pt.node]),
  onInfoButtonClick: _pt.func,
  hintIcon: _pt.element,
  badge: _pt.node,
  iconLeft: _pt.node
} : {};

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { AsyncCreatableSelectField as default, version };
