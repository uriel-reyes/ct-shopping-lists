import { ReactNode, MouseEventHandler } from 'react';
export interface TRow {
    id: string;
}
export type TColumn<Row extends TRow = TRow> = {
    key: string;
    label: ReactNode;
    width?: string;
    align?: 'left' | 'center' | 'right';
    onClick?: (event: MouseEventHandler) => void;
    renderItem?: (row: Row, isRowCollapsed: boolean) => ReactNode;
    headerIcon?: ReactNode;
    isTruncated?: boolean;
    isSortable?: boolean;
    disableResizing?: boolean;
    shouldIgnoreRowClick?: boolean;
};
export type TDataTableProps<Row extends TRow = TRow> = {
    rows: Row[];
    columns: TColumn<Row>[];
    footer?: ReactNode;
    maxWidth?: number | string;
    maxHeight?: number | string;
    onRowClick?: (row: Row, rowIndex: number, columnKey: string) => void;
    isCondensed?: boolean;
    onColumnResized?: (args: TColumn<Row>[]) => void;
    disableSelfContainment?: boolean;
    disableHeaderStickiness?: boolean;
    itemRenderer: (item: Row, column: TColumn<Row>, isRowCollapsed: boolean) => ReactNode;
    wrapHeaderLabels?: boolean;
    verticalCellAlignment?: 'top' | 'center' | 'bottom';
    horizontalCellAlignment?: 'left' | 'center' | 'right';
    sortedBy?: string;
    onSortChange?: (columnKey: string, sortDirection: 'asc' | 'desc') => void;
    sortDirection?: 'desc' | 'asc';
};
declare const DataTable: {
    <Row extends TRow = TRow>(props: TDataTableProps<Row>): import("@emotion/react/jsx-runtime").JSX.Element;
    defaultProps: Pick<TDataTableProps<TRow>, "columns" | "isCondensed" | "wrapHeaderLabels" | "horizontalCellAlignment" | "verticalCellAlignment" | "disableSelfContainment" | "itemRenderer">;
    displayName: string;
};
export default DataTable;
