/// <reference types="react" />
import type { TDataTableProps } from './data-table';
type TGetClickableRowStyleProps = {
    isRowClickable: boolean;
};
type TTableContainer = {
    isBeingResized?: boolean;
    maxWidth?: string | number;
    maxHeight?: string | number;
    disableSelfContainment: boolean;
};
declare const TableContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & TTableContainer, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
type TTableGrid = {
    resizedTotalWidth?: number;
    columns?: TDataTableProps['columns'];
    disableSelfContainment: boolean;
    maxHeight?: string | number;
};
declare const TableGrid: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & TTableGrid, import("react").DetailedHTMLProps<import("react").TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>, {}>;
declare const TableHeader: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, {}>;
declare const TableBody: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, {}>;
declare const TableRow: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & TGetClickableRowStyleProps, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>, {}>;
export { TableContainer, TableGrid, TableHeader, TableBody, TableRow };
