import { Component, type ReactElement, type ReactNode, type MouseEvent, type KeyboardEvent } from 'react';
import type { Props as ReactSelectProps } from 'react-select';
type TErrorRenderer = (key: string, error?: boolean) => ReactNode;
export type TOption = {
    value: string;
    label?: ReactNode;
};
export type TOptionObject = {
    options: TOption[];
};
export type TOptions = TOption[] | TOptionObject[];
export type TCustomEvent = {
    target: {
        id?: ReactSelectProps['inputId'];
        name?: ReactSelectProps['name'];
        value?: string | string[] | null;
    };
    persist: () => void;
};
type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
export type TSelectFieldProps = {
    id?: string;
    horizontalConstraint?: 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    errors?: {
        missing?: boolean;
    };
    renderError?: TErrorRenderer;
    isRequired?: boolean;
    touched?: boolean[] | boolean;
    appearance?: 'default' | 'quiet';
    'aria-label'?: ReactSelectProps['aria-label'];
    'aria-labelledby'?: ReactSelectProps['aria-labelledby'];
    isAutofocussed?: boolean;
    backspaceRemovesValue?: boolean;
    components?: ReactSelectProps['components'];
    controlShouldRenderValue?: ReactSelectProps['controlShouldRenderValue'];
    filterOption?: ReactSelectProps['filterOption'];
    containerId?: string;
    isClearable?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    isOptionDisabled?: ReactSelectProps['isOptionDisabled'];
    isMulti?: boolean;
    isSearchable?: boolean;
    maxMenuHeight?: number;
    menuPortalTarget?: ReactSelectProps['menuPortalTarget'];
    menuPortalZIndex?: number;
    menuShouldBlockScroll?: boolean;
    name?: string;
    noOptionsMessage?: ReactSelectProps['noOptionsMessage'];
    onBlur?: (event: TCustomEvent) => void;
    onChange?: (event: TCustomEvent) => void;
    onFocus?: ReactSelectProps['onFocus'];
    onInputChange?: ReactSelectProps['onInputChange'];
    options?: TOptions;
    showOptionGroupDivider?: boolean;
    placeholder?: string;
    tabIndex?: ReactSelectProps['tabIndex'];
    tabSelectsValue?: boolean;
    value?: ReactSelectProps['value'];
    title: ReactNode;
    hint?: ReactNode;
    description?: ReactNode;
    onInfoButtonClick?: (event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>) => void;
    hintIcon?: ReactElement;
    badge?: ReactNode;
    hasWarning?: boolean;
    iconLeft?: ReactNode;
    inputValue?: ReactSelectProps['inputValue'];
};
type TFieldState = Pick<TSelectFieldProps, 'id'>;
export default class SelectField extends Component<TSelectFieldProps> {
    static displayName: string;
    static defaultProps: {
        horizontalConstraint: string;
    };
    state: {
        id: string | undefined;
    };
    static getDerivedStateFromProps: (props: TSelectFieldProps, state: TFieldState) => {
        id: string;
    };
    static toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export {};
