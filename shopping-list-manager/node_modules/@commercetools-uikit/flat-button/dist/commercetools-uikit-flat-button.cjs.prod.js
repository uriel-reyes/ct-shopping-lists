'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var react$1 = require('react');
var react = require('@emotion/react');
var omit = require('lodash/omit');
var designSystem = require('@commercetools-uikit/design-system');
var utils = require('@commercetools-uikit/utils');
var AccessibleButton = require('@commercetools-uikit/accessible-button');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var omit__default = /*#__PURE__*/_interopDefault(omit);
var AccessibleButton__default = /*#__PURE__*/_interopDefault(AccessibleButton);

const getTextColor = props => {
  if (props.isIcon && props.isDisabled) {
    return designSystem.designTokens.fontColorForFlatButtonIconWhenDisabled;
  }
  if (props.isDisabled) {
    return designSystem.designTokens.fontColorForTextWhenDisabled;
  }
  switch (props.tone) {
    case 'primary':
      return props.isHover ? designSystem.designTokens.fontColorForFlatButtonAsPrimaryWhenHovered : designSystem.designTokens.fontColorForFlatButtonAsPrimary;
    case 'secondary':
      return designSystem.designTokens.fontColorForFlatButtonAsSecondary;
    case 'inverted':
      return designSystem.designTokens.fontColorForFlatButtonAsInverted;
    case 'critical':
      return props.isHover ? designSystem.designTokens.fontColorForFlatButtonAsCriticalWhenHovered : designSystem.designTokens.fontColorForFlatButtonAsCritical;
    default:
      return 'inherit';
  }
};

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const propsToOmit = ['type'];
const defaultProps = {
  tone: 'primary',
  type: 'button',
  iconPosition: 'left',
  isDisabled: false
};
var _ref = {
  name: "1989ovb",
  styles: "vertical-align:middle"
} ;
const ButtonIcon = props => {
  if (!props.icon) return null;
  const Icon = /*#__PURE__*/react$1.cloneElement(props.icon, {
    size: 'medium'
  });
  if (props.as && props.as !== 'button') {
    return jsxRuntime.jsx("span", {
      css: _ref,
      children: Icon
    });
  }
  return Icon;
};
ButtonIcon.propTypes = {};
ButtonIcon.displayName = 'ButtonIcon';
const FlatButton = props => {
  var _context;
  const buttonAttributes = _objectSpread(_objectSpread({
    'data-track-component': 'FlatButton'
  }, utils.filterInvalidAttributes(omit__default["default"](props, propsToOmit))), {}, {
    // if there is a divergence between `isDisabled` and `disabled`,
    // we fall back to `isDisabled`
    disabled: props.isDisabled
  });
  return jsxRuntime.jsxs(AccessibleButton__default["default"], {
    as: props.as,
    type: props.type,
    label: props.label,
    onClick: props.onClick,
    isDisabled: props.isDisabled,
    css: /*#__PURE__*/react.css("min-height:initial;align-items:center;", props.as && props.as !== 'button' ? "white-space: normal;\n               display: inline-block;" : '', ";span{color:", getTextColor({
      tone: props.tone,
      isDisabled: props.isDisabled
    }), ";}fill:", getTextColor({
      tone: props.tone,
      isDisabled: props.isDisabled,
      isIcon: true
    }), ";*+span,*+svg{margin-left:", designSystem.designTokens.spacing10, ";}", !props.isDisabled ? _concatInstanceProperty__default["default"](_context = "\n            &:hover,\n            &:focus {\n              span {\n                color: ".concat(getTextColor({
      tone: props.tone,
      isHover: true,
      isDisabled: props.isDisabled
    }), ";\n              }\n              svg * {\n                fill: ")).call(_context, getTextColor({
      tone: props.tone,
      isHover: true,
      isDisabled: props.isDisabled,
      isIcon: true
    }), ";\n              }\n            }") : '', ";" + ("" ), "" ),
    buttonAttributes: buttonAttributes,
    children: [props.icon && props.iconPosition === 'left' && jsxRuntime.jsx(ButtonIcon, _objectSpread({}, props)), jsxRuntime.jsx("span", {
      children: props.label
    }), props.icon && props.iconPosition === 'right' && jsxRuntime.jsx(ButtonIcon, _objectSpread({}, props))]
  });
};
FlatButton.propTypes = {};
FlatButton.displayName = 'FlatButton';
FlatButton.defaultProps = defaultProps;
var FlatButton$1 = FlatButton;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = FlatButton$1;
exports.version = version;
