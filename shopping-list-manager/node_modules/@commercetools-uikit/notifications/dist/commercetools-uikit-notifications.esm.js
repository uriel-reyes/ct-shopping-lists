import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _pt from 'prop-types';
import { Children } from 'react';
import { FormattedMessage } from 'react-intl';
import { css } from '@emotion/react';
import AccessibleButton from '@commercetools-uikit/accessible-button';
import { designTokens } from '@commercetools-uikit/design-system';
import { CloseBoldIcon, CheckBoldIcon, WarningIcon, InformationIcon, ErrorIcon } from '@commercetools-uikit/icons';
import { filterDataAttributes, warning } from '@commercetools-uikit/utils';
import { jsxs, jsx } from '@emotion/react/jsx-runtime';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const warnIfMissingContent = props => {
  const hasContent = Boolean(props.intlMessage) || Boolean(Children.count(props.children));
  process.env.NODE_ENV !== "production" ? warning(hasContent, ['Warning: Failed prop type:', "The prop `intlMessage` is marked as required in `Link`", 'but its value is `undefined`'].join(' ')) : void 0;
  process.env.NODE_ENV !== "production" ? warning(hasContent, ['Warning: Failed prop type:', "The prop `children` is marked as required in `Link`", 'but its value is `undefined`'].join(' ')) : void 0;
};
const getIconByType = props => {
  switch (props.type) {
    case 'error':
      return ErrorIcon;
    case 'info':
      return InformationIcon;
    case 'warning':
      return WarningIcon;
    default:
      return CheckBoldIcon;
  }
};
const getIconColor = props => {
  switch (props.type) {
    case 'error':
      return designTokens.fontColorForContentNotificationIconWhenError;
    case 'info':
      return designTokens.fontColorForContentNotificationIconWhenInfo;
    case 'warning':
      return designTokens.fontColorForContentNotificationIconWhenWarning;
    case 'success':
      return designTokens.fontColorForContentNotificationIconWhenSuccess;
    default:
      return '';
  }
};
const NotificationTypeIcon = props => {
  const Icon = getIconByType(props);
  return jsx("div", {
    css: /*#__PURE__*/css("display:flex;align-items:center;fill:", getIconColor(props), ";svg{margin:0 -3px;}" + (process.env.NODE_ENV === "production" ? "" : ";label:NotificationTypeIcon;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
    children: jsx(Icon, {})
  });
};
NotificationTypeIcon.propTypes = process.env.NODE_ENV !== "production" ? {
  type: _pt.oneOf(['error', 'info', 'warning', 'success']).isRequired,
  intlMessage: _pt.oneOfType([_pt.any, _pt.shape({
    values: _pt.objectOf(_pt.node)
  })]),
  onRemove: _pt.func,
  children: _pt.node
} : {};
NotificationTypeIcon.displayName = 'NotificationTypeIcon';
const NotificationCloseIcon = props => jsx(AccessibleButton, {
  label: "Remove",
  onClick: props.onRemove,
  css: /*#__PURE__*/css("display:flex;align-items:center;fill:", designTokens.colorSolid, ";&:hover{fill:", designTokens.colorNeutral40, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:NotificationCloseIcon;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
  children: jsx(CloseBoldIcon, {
    size: "medium"
  })
});
NotificationCloseIcon.displayName = 'NotificationCloseIcon';
const getContentBorderColor = props => {
  switch (props.type) {
    case 'error':
      return designTokens.borderColorForContentNotificationWhenError;
    case 'info':
      return designTokens.borderColorForContentNotificationWhenInfo;
    case 'warning':
      return designTokens.borderColorForContentNotificationWhenWarning;
    case 'success':
      return designTokens.borderColorForContentNotificationWhenSuccess;
    default:
      return '';
  }
};
const getContainerBackgroundColor = props => {
  switch (props.type) {
    case 'error':
      return designTokens.backgroundColorForContentNotificationWhenError;
    case 'info':
      return designTokens.backgroundColorForContentNotificationWhenInfo;
    case 'warning':
      return designTokens.backgroundColorForContentNotificationWhenWarning;
    case 'success':
      return designTokens.backgroundColorForContentNotificationWhenSuccess;
    default:
      return '';
  }
};
const ContentNotification = props => {
  warnIfMissingContent(props);
  return jsxs("div", _objectSpread(_objectSpread({}, filterDataAttributes(props)), {}, {
    css: /*#__PURE__*/css("display:flex;align-items:stretch;text-align:left;word-break:break-word;hyphens:auto;font-size:", designTokens.fontSizeForContentNotification, ";color:", designTokens.fontColorForContentNotification, ";font-family:inherit;background-color:", getContainerBackgroundColor(props), ";border-radius:", designTokens.borderRadiusForContentNotification, ";border-width:1px;border-style:solid;border-color:", getContentBorderColor(props), ";padding:", designTokens.paddingForContentNotification, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:ContentNotification;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
    children: [jsx(NotificationTypeIcon, {
      type: props.type
    }), jsx("div", {
      css: /*#__PURE__*/css("flex-grow:1;display:flex;align-items:center;padding:", designTokens.paddingForContentNotificationMessage, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:ContentNotification;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
      children: props.intlMessage ? jsx("div", {
        children: jsx(FormattedMessage, _objectSpread({}, props.intlMessage))
      }) : props.children
    }), props.onRemove && jsx(NotificationCloseIcon, {
      onRemove: props.onRemove
    })]
  }));
};
ContentNotification.propTypes = process.env.NODE_ENV !== "production" ? {
  type: _pt.oneOf(['error', 'info', 'warning', 'success']).isRequired,
  intlMessage: _pt.oneOfType([_pt.any, _pt.shape({
    values: _pt.objectOf(_pt.node)
  })]),
  onRemove: _pt.func,
  children: _pt.node
} : {};
ContentNotification.displayName = 'ContentNotification';
var ContentNotification$1 = ContentNotification;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { ContentNotification$1 as ContentNotification, version };
