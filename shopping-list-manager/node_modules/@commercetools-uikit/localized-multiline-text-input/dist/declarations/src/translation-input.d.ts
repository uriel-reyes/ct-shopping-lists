import { type ChangeEventHandler, type FocusEventHandler, type ReactNode } from 'react';
interface HTMLLocalizedTextAreaElement extends HTMLTextAreaElement {
    language: string;
}
type TranslationInputProps = {
    'aria-invalid'?: boolean;
    'aria-errormessage'?: string;
    onChange?: ChangeEventHandler<HTMLLocalizedTextAreaElement>;
    language: string;
    onFocus?: () => void;
    onToggle?: () => void;
    isCollapsed?: boolean;
    hasLanguagesControl?: boolean;
    warning?: ReactNode;
    error?: ReactNode;
    id?: string;
    name?: string;
    autoComplete?: string;
    value: string;
    onBlur?: FocusEventHandler<HTMLLocalizedTextAreaElement>;
    isDisabled?: boolean;
    placeholder?: string;
    hasWarning?: boolean;
    hasError?: boolean;
    isReadOnly?: boolean;
    isAutofocussed?: boolean;
    intl: {
        formatMessage: (messageObject: TMessagesMultilineInput) => string;
    };
};
type TMessagesMultilineInput = {
    id: string;
    description: string;
    defaultMessage: string;
};
declare const TranslationInput: {
    (props: TranslationInputProps): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
};
export default TranslationInput;
