'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _styled = require('@emotion/styled/base');
require('prop-types');
var react = require('react');
require('@commercetools-uikit/utils');
require('@emotion/react');
var IconButton = require('@commercetools-uikit/icon-button');
var icons = require('@commercetools-uikit/icons');
var Text = require('@commercetools-uikit/text');
var Constraints = require('@commercetools-uikit/constraints');
var Inline = require('@commercetools-uikit/spacings-inline');
var Label = require('@commercetools-uikit/label');
var designSystem = require('@commercetools-uikit/design-system');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var IconButton__default = /*#__PURE__*/_interopDefault(IconButton);
var Text__default = /*#__PURE__*/_interopDefault(Text);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);
var Inline__default = /*#__PURE__*/_interopDefault(Inline);
var Label__default = /*#__PURE__*/_interopDefault(Label);

/*
  This is needed to deal with every FieldLabel row vertical spacing
  when provided `hint` or `description` is a React component which
  might render nothing.
  Previously we were using the `Stack` component but, as we are wrapping
  those props values with some elements, `Stack` was including some vertical
  spacing even when the received values did not render anything.

  The implementation is tightly coupled to how we currently wrap
  those props, so if we change that, we will need to adjust this as well.
*/
const LabelRowWrapper = /*#__PURE__*/_styled__default["default"]("div", {
  target: "erir8oc0"
} )("& [data-key='field-label-hint-wrapper'],& [data-key='field-label-description-wrapper']{margin-top:", designSystem.designTokens.spacing10, "!important;}& [data-key='field-label-hint-wrapper']:empty,& [data-key='field-label-description-wrapper']:empty{margin-top:0!important;}" + ("" ));
var _ref = {
  name: "skgbeu",
  styles: "display:flex;justify-content:flex-end"
} ;
const FieldLabel = props => {
  if (props.hintIcon) ;
  return jsxRuntime.jsxs(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: [jsxRuntime.jsxs(Inline__default["default"], {
      alignItems: 'center',
      scale: "xs",
      children: [jsxRuntime.jsx(Text__default["default"].Wrap, {
        children: jsxRuntime.jsx(Label__default["default"], {
          isRequiredIndicatorVisible: props.hasRequiredIndicator,
          tone: props.tone,
          id: props.id,
          htmlFor: props.htmlFor,
          children: props.title
        })
      }), props.onInfoButtonClick && jsxRuntime.jsx(IconButton__default["default"], {
        label: "More Info",
        icon: jsxRuntime.jsx(icons.InformationIcon, {}),
        size: "small",
        onClick: props.onInfoButtonClick
      })]
    }), props.hint && jsxRuntime.jsx(LabelRowWrapper, {
      children: jsxRuntime.jsxs(Inline__default["default"], {
        alignItems: 'center',
        scale: "xs",
        children: [props.hintIcon && jsxRuntime.jsx(Inline__default["default"], {
          "data-key": "field-label-hint-wrapper",
          children: /*#__PURE__*/react.cloneElement(props.hintIcon, {
            // FIXME: add proper tone when tones are refactored
            size: 'medium',
            color: props.hintIcon.props.color || 'warning'
          })
        }), props.hint && jsxRuntime.jsx(Text__default["default"].Detail, {
          tone: "secondary",
          "data-key": "field-label-hint-wrapper",
          children: props.hint
        })]
      })
    }), props.description && jsxRuntime.jsx(LabelRowWrapper, {
      children: jsxRuntime.jsx(Text__default["default"].Wrap, {
        children: jsxRuntime.jsx(Text__default["default"].Detail, {
          tone: "secondary",
          "data-key": "field-label-description-wrapper",
          children: props.description
        })
      })
    }), props.badge && jsxRuntime.jsx("div", {
      css: _ref,
      children: props.badge
    })]
  });
};
FieldLabel.propTypes = {};
FieldLabel.displayName = 'FieldLabel';
FieldLabel.defaultProps = {
  horizontalConstraint: 'scale'
};
var FieldLabel$1 = FieldLabel;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = FieldLabel$1;
exports.version = version;
