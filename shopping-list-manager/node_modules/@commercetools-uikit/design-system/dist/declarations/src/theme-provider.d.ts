import { type ReactNode, type JSXElementConstructor } from 'react';
import { themes } from './design-tokens';
type ThemeName = keyof typeof themes;
declare const defaultParentSelector: () => HTMLElement | null;
type ThemeProviderProps = {
    parentSelector: typeof defaultParentSelector;
    theme: string;
    themeOverrides?: Record<string, string>;
};
declare const ThemeProvider: {
    (props: ThemeProviderProps): null;
    defaultProps: {
        parentSelector: () => HTMLElement | null;
        theme: string;
    };
};
type TUseThemeResult = {
    theme: ThemeName;
    themedValue: <Old extends string | ReactNode | undefined, New extends string | ReactNode | undefined>(defaultThemeValue: Old, newThemeValue: New) => Old | New;
    isNewTheme: boolean;
};
declare const useTheme: (_parentSelector?: () => HTMLElement | null) => TUseThemeResult;
declare const withThemeContext: (WrappedComponent: JSXElementConstructor<TUseThemeResult>) => (props: Record<string, unknown>) => import("@emotion/react/jsx-runtime").JSX.Element;
export { ThemeProvider, useTheme, withThemeContext };
export type { ThemeName, TUseThemeResult };
