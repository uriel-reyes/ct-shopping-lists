import { type ReactElement } from 'react';
import { type SingleValueProps, type PlaceholderProps } from 'react-select';
export type TWrapperWithIconSelectProps = {
    iconLeft?: ReactElement;
};
export type TSingleValueWrapperWithIconProps = {
    type: 'singleValue';
    selectProps?: TWrapperWithIconSelectProps;
} & SingleValueProps;
export type TPlaceholderWrapperWithIconProps = {
    type: 'placeholder';
    selectProps?: TWrapperWithIconSelectProps;
} & PlaceholderProps;
export type TWrapperWithIconProps<Type extends 'singleValue' | 'placeholder'> = Type extends 'singleValue' ? TSingleValueWrapperWithIconProps : Type extends 'placeholder' ? TPlaceholderWrapperWithIconProps : never;
export type TDefaultComponent<Type extends 'singleValue' | 'placeholder'> = (props: Type extends 'singleValue' ? SingleValueProps : Type extends 'placeholder' ? PlaceholderProps : never) => JSX.Element;
declare const WrapperWithIcon: {
    <Type extends "placeholder" | "singleValue">(props: TWrapperWithIconProps<Type>): import("@emotion/react/jsx-runtime").JSX.Element | null;
    displayName: string;
};
export default WrapperWithIcon;
declare const customComponents: {
    SingleValue: (props: TWrapperWithIconProps<'singleValue'>) => import("@emotion/react/jsx-runtime").JSX.Element;
    Placeholder: (props: TWrapperWithIconProps<'placeholder'>) => import("@emotion/react/jsx-runtime").JSX.Element;
};
export { customComponents };
