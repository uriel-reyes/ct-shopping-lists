'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _pt = require('prop-types');
var _trimInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/trim');
var utils = require('@commercetools-uikit/utils');
var Constraints = require('@commercetools-uikit/constraints');
var inputUtils = require('@commercetools-uikit/input-utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var _trimInstanceProperty__default = /*#__PURE__*/_interopDefault(_trimInstanceProperty);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const defaultProps = {
  horizontalConstraint: 'scale'
};
const NumberInput = props => {
  if (!props.isReadOnly) {
    process.env.NODE_ENV !== "production" ? utils.warning(Boolean(props.onChange), 'NumberInput: `onChange` is required when input is not read only.') : void 0;
  }
  return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: jsxRuntime.jsx("input", _objectSpread(_objectSpread({
      id: props.id,
      name: props.name,
      type: "number",
      autoComplete: props.autoComplete,
      value: props.value,
      min: props.min,
      max: props.max,
      step: props.step,
      onChange: props.onChange,
      onBlur: props.onBlur,
      onFocus: props.onFocus,
      disabled: props.isDisabled,
      placeholder: props.placeholder,
      css: inputUtils.getInputStyles(props),
      readOnly: props.isReadOnly,
      autoFocus: props.isAutofocussed
    }, utils.filterDataAttributes(props)), {}, {
      /* ARIA */
      "aria-readonly": props.isReadOnly,
      contentEditable: !props.isReadOnly,
      "aria-invalid": props['aria-invalid'],
      "aria-errormessage": props['aria-errormessage']
    }))
  });
};
NumberInput.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt__default["default"].string,
  name: _pt__default["default"].string,
  'aria-invalid': _pt__default["default"].bool,
  'aria-errormessage': _pt__default["default"].string,
  autoComplete: _pt__default["default"].string,
  placeholder: _pt__default["default"].string,
  value: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].number]).isRequired,
  min: _pt__default["default"].number,
  max: _pt__default["default"].number,
  step: _pt__default["default"].oneOfType([_pt__default["default"].number, _pt__default["default"].oneOf(['any'])]),
  onChange: _pt__default["default"].func,
  onBlur: _pt__default["default"].func,
  onFocus: _pt__default["default"].func,
  isAutofocussed: _pt__default["default"].bool,
  isDisabled: _pt__default["default"].bool,
  isReadOnly: _pt__default["default"].bool,
  hasError: _pt__default["default"].bool,
  hasWarning: _pt__default["default"].bool,
  horizontalConstraint: _pt__default["default"].oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto'])
} : {};
NumberInput.displayName = 'NumberInput';
NumberInput.defaultProps = defaultProps;
NumberInput.toFormValue = numberOrString => {
  if (typeof numberOrString === 'number' || typeof numberOrString === 'string') {
    return numberOrString;
  }
  return '';
};
NumberInput.isEmpty = value => {
  if (typeof value === 'string') return _trimInstanceProperty__default["default"](value).call(value).length === 0;
  if (typeof value === 'number') return isNaN(value);
  return true;
};
NumberInput.hasFractionDigits = number => {
  const fraction = Number(number) % 1;
  process.env.NODE_ENV !== "production" ? utils.warning(!isNaN(fraction), 'NumberInput.hasFractionDigits may only be called with valid numbers (either as string or number).') : void 0;
  return fraction !== 0;
};
var NumberInput$1 = NumberInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = NumberInput$1;
exports.version = version;
