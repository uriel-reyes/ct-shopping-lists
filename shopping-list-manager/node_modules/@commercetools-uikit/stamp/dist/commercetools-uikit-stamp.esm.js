import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _pt from 'prop-types';
import { cloneElement } from 'react';
import { css } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
import Text from '@commercetools-uikit/text';
import SpacingsInline from '@commercetools-uikit/spacings-inline';
import { useWarnDeprecatedProp } from '@commercetools-uikit/utils';
import { jsx, jsxs } from '@emotion/react/jsx-runtime';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const tonesPropsMap = {
  critical: {
    styles: {
      backgroundColor: designTokens.colorError95,
      borderColor: designTokens.borderColorForStampWhenError,
      color: designTokens.colorError40
    },
    iconColor: 'error'
  },
  warning: {
    styles: {
      backgroundColor: designTokens.colorWarning95,
      borderColor: designTokens.borderColorForStampWhenWarning,
      color: designTokens.colorWarning40
    },
    iconColor: 'warning'
  },
  positive: {
    styles: {
      backgroundColor: designTokens.backgroundColorForStampAsPositive,
      borderColor: designTokens.borderColorForStampAsPositive,
      color: designTokens.colorPrimary25
    },
    iconColor: 'primary'
  },
  information: {
    styles: {
      backgroundColor: designTokens.colorInfo95,
      borderColor: designTokens.borderColorForStampAsInformation,
      color: designTokens.colorInfo40
    },
    iconColor: 'info'
  },
  primary: {
    styles: {
      backgroundColor: designTokens.backgroundColorForStampAsPrimary,
      borderColor: designTokens.borderColorForStampAsPrimary,
      color: designTokens.colorPrimary25
    },
    iconColor: 'primary40'
  },
  secondary: {
    styles: {
      backgroundColor: designTokens.colorNeutral95,
      borderColor: designTokens.borderColorForStampAsSecondary,
      color: designTokens.colorNeutral40
    },
    iconColor: 'neutral60'
  }
};
const getPaddingStyle = props => {
  if (props.isCondensed) return /*#__PURE__*/css("padding:", designTokens.paddingForStampAsCondensed, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getPaddingStyle;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErR2MiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IFNwYWNpbmdzSW5saW5lIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzLWlubGluZSc7XG5pbXBvcnQgeyB1c2VXYXJuRGVwcmVjYXRlZFByb3AgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFRUb25lID1cbiAgfCAnY3JpdGljYWwnXG4gIHwgJ3dhcm5pbmcnXG4gIHwgJ3Bvc2l0aXZlJ1xuICB8ICdpbmZvcm1hdGlvbidcbiAgfCAncHJpbWFyeSdcbiAgfCAnc2Vjb25kYXJ5JztcblxuZXhwb3J0IHR5cGUgVFN0YW1wUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhlIGNvbG9yIHNjaGVtZSBvZiBzdGFtcFxuICAgKi9cbiAgdG9uZT86IFRUb25lO1xuICAvKipcbiAgICogSWYgYHRydWVgLCByZW5kZXJzIGEgY29uZGVuc2VkIHZlcnNpb24gb2YgdGhlIHN0YW1wLlxuICAgKi9cbiAgaXNDb25kZW5zZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDb250ZW50IHRvIHJlbmRlciB3aXRoaW4gdGhlIHN0YW1wLlxuICAgKiBUaGlzIHByb3BlcnR5IGhhcyBiZWVuICoqZGVwcmVjYXRlZCoqIGluIGZhdm9yIG9mIGBsYWJlbGAuXG4gICAqL1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIEljb24gdG8gcmVuZGVyIGJlc2lkZSAobGVmdCkgdGhlIHN0YW1wIHRleHQuXG4gICAqL1xuICBpY29uPzogUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICogVGV4dCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xufTtcblxudHlwZSBUb25lUmVsYXRlZFByb3BzID0ge1xuICBzdHlsZXM6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBib3JkZXJDb2xvcjogc3RyaW5nO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gIH07XG4gIGljb25Db2xvcjogc3RyaW5nO1xufTtcblxudHlwZSBTdHlsZXNGdW5jdGlvblBhcmFtcyA9IFRTdGFtcFByb3BzICYgeyBvdmVycmlkZVRleHRDb2xvcj86IGJvb2xlYW4gfTtcblxuY29uc3QgdG9uZXNQcm9wc01hcDogUmVjb3JkPFRUb25lLCBUb25lUmVsYXRlZFByb3BzPiA9IHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5FcnJvcixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnZXJyb3InLFxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5XYXJuaW5nLFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ3dhcm5pbmcnLFxuICB9LFxuICBwb3NpdGl2ZToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1Bvc2l0aXZlLFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5MjUsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdwcmltYXJ5JyxcbiAgfSxcbiAgaW5mb3JtYXRpb246IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNJbmZvcm1hdGlvbixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdpbmZvJyxcbiAgfSxcbiAgcHJpbWFyeToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcEFzU2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ25ldXRyYWw2MCcsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wQXNDb25kZW5zZWR9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IGdldEljb25Db2xvciA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICBvdmVycmlkZVRleHRDb2xvcjogYm9vbGVhblxuKSA9PiB7XG4gIGlmICghb3ZlcnJpZGVUZXh0Q29sb3IpIHtcbiAgICByZXR1cm4gJ2luaGVyaXQnO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gcHJvcHMudG9uZSAmJiB0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdKSB7XG4gICAgcmV0dXJuIGNzc2BgO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gdG9uZXNQcm9wc01hcFtwcm9wcy50b25lXTtcbiAgcmV0dXJuIGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RvbmVQcm9wcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfTtcblxuICAgICYsXG4gICAgJiAqIHtcbiAgICAgIGNvbG9yOiAke3Byb3BzLm92ZXJyaWRlVGV4dENvbG9yID8gdG9uZVByb3BzLnN0eWxlcy5jb2xvciA6ICdpbmhlcml0J307XG4gICAgfVxuICBgO1xufTtcblxuY29uc3QgZ2V0U3RhbXBTdHlsZXMgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIHJldHVybiBjc3NgXG4gICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyAnaW5oZXJpdCcgOiBkZXNpZ25Ub2tlbnMuY29sb3JTb2xpZH07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGJvcmRlci1yYWRpdXM6ICR7cHJvcHMuaXNDb25kZW5zZWRcbiAgICAgID8gZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wQXNDb25kZW5zZWRcbiAgICAgIDogZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IFN0YW1wID0gKHByb3BzOiBUU3RhbXBQcm9wcykgPT4ge1xuICBjb25zdCBJY29uID1cbiAgICBwcm9wcy5pY29uICYmXG4gICAgY2xvbmVFbGVtZW50KHByb3BzLmljb24sIHtcbiAgICAgIHNpemU6ICdtZWRpdW0nLFxuICAgICAgY29sb3I6IGdldEljb25Db2xvcihwcm9wcywgdHJ1ZSksXG4gICAgfSk7XG5cbiAgdXNlV2FybkRlcHJlY2F0ZWRQcm9wKFxuICAgICFCb29sZWFuKHByb3BzLmNoaWxkcmVuKSxcbiAgICAnY2hpbGRyZW4nLFxuICAgICdTdGFtcCcsXG4gICAgJ1BsZWFzZSB1c2UgYGxhYmVsYCBhbmQgYGljb25gIHByb3BlcnRpZXMgaW5zdGVhZC4nXG4gICk7XG5cbiAgY29uc3QgU3RhbXBMYWJlbCA9ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IHN0cmluZyB9KTogUmVhY3RFbGVtZW50ID0+XG4gICAgcHJvcHMuaXNDb25kZW5zZWQgPyAoXG4gICAgICA8VGV4dC5DYXB0aW9uIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuQ2FwdGlvbj5cbiAgICApIDogKFxuICAgICAgPFRleHQuRGV0YWlsIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuRGV0YWlsPlxuICAgICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e1tcbiAgICAgICAgZ2V0U3RhbXBTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFRvbmVTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZSBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgIHtJY29ufVxuICAgICAgICB7cHJvcHMubGFiZWwgPyA8U3RhbXBMYWJlbD57cHJvcHMubGFiZWx9PC9TdGFtcExhYmVsPiA6IHByb3BzLmNoaWxkcmVufVxuICAgICAgPC9TcGFjaW5nc0lubGluZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5jb25zdCBkZWZhdWx0UHJvcHM6IFBpY2s8VFN0YW1wUHJvcHMsICdpc0NvbmRlbnNlZCcgfCAndG9uZSc+ID0ge1xuICBpc0NvbmRlbnNlZDogZmFsc2UsXG4gIHRvbmU6ICdpbmZvcm1hdGlvbicsXG59O1xuU3RhbXAuZGlzcGxheU5hbWUgPSAnU3RhbXAnO1xuU3RhbXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBTdGFtcDtcbiJdfQ== */");
  return /*#__PURE__*/css("padding:", designTokens.paddingForStamp, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getPaddingStyle;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrSFkiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IFNwYWNpbmdzSW5saW5lIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzLWlubGluZSc7XG5pbXBvcnQgeyB1c2VXYXJuRGVwcmVjYXRlZFByb3AgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFRUb25lID1cbiAgfCAnY3JpdGljYWwnXG4gIHwgJ3dhcm5pbmcnXG4gIHwgJ3Bvc2l0aXZlJ1xuICB8ICdpbmZvcm1hdGlvbidcbiAgfCAncHJpbWFyeSdcbiAgfCAnc2Vjb25kYXJ5JztcblxuZXhwb3J0IHR5cGUgVFN0YW1wUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhlIGNvbG9yIHNjaGVtZSBvZiBzdGFtcFxuICAgKi9cbiAgdG9uZT86IFRUb25lO1xuICAvKipcbiAgICogSWYgYHRydWVgLCByZW5kZXJzIGEgY29uZGVuc2VkIHZlcnNpb24gb2YgdGhlIHN0YW1wLlxuICAgKi9cbiAgaXNDb25kZW5zZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDb250ZW50IHRvIHJlbmRlciB3aXRoaW4gdGhlIHN0YW1wLlxuICAgKiBUaGlzIHByb3BlcnR5IGhhcyBiZWVuICoqZGVwcmVjYXRlZCoqIGluIGZhdm9yIG9mIGBsYWJlbGAuXG4gICAqL1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIEljb24gdG8gcmVuZGVyIGJlc2lkZSAobGVmdCkgdGhlIHN0YW1wIHRleHQuXG4gICAqL1xuICBpY29uPzogUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICogVGV4dCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xufTtcblxudHlwZSBUb25lUmVsYXRlZFByb3BzID0ge1xuICBzdHlsZXM6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBib3JkZXJDb2xvcjogc3RyaW5nO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gIH07XG4gIGljb25Db2xvcjogc3RyaW5nO1xufTtcblxudHlwZSBTdHlsZXNGdW5jdGlvblBhcmFtcyA9IFRTdGFtcFByb3BzICYgeyBvdmVycmlkZVRleHRDb2xvcj86IGJvb2xlYW4gfTtcblxuY29uc3QgdG9uZXNQcm9wc01hcDogUmVjb3JkPFRUb25lLCBUb25lUmVsYXRlZFByb3BzPiA9IHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5FcnJvcixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnZXJyb3InLFxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5XYXJuaW5nLFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ3dhcm5pbmcnLFxuICB9LFxuICBwb3NpdGl2ZToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1Bvc2l0aXZlLFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5MjUsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdwcmltYXJ5JyxcbiAgfSxcbiAgaW5mb3JtYXRpb246IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNJbmZvcm1hdGlvbixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdpbmZvJyxcbiAgfSxcbiAgcHJpbWFyeToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcEFzU2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ25ldXRyYWw2MCcsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wQXNDb25kZW5zZWR9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IGdldEljb25Db2xvciA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICBvdmVycmlkZVRleHRDb2xvcjogYm9vbGVhblxuKSA9PiB7XG4gIGlmICghb3ZlcnJpZGVUZXh0Q29sb3IpIHtcbiAgICByZXR1cm4gJ2luaGVyaXQnO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gcHJvcHMudG9uZSAmJiB0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdKSB7XG4gICAgcmV0dXJuIGNzc2BgO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gdG9uZXNQcm9wc01hcFtwcm9wcy50b25lXTtcbiAgcmV0dXJuIGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RvbmVQcm9wcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfTtcblxuICAgICYsXG4gICAgJiAqIHtcbiAgICAgIGNvbG9yOiAke3Byb3BzLm92ZXJyaWRlVGV4dENvbG9yID8gdG9uZVByb3BzLnN0eWxlcy5jb2xvciA6ICdpbmhlcml0J307XG4gICAgfVxuICBgO1xufTtcblxuY29uc3QgZ2V0U3RhbXBTdHlsZXMgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIHJldHVybiBjc3NgXG4gICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyAnaW5oZXJpdCcgOiBkZXNpZ25Ub2tlbnMuY29sb3JTb2xpZH07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGJvcmRlci1yYWRpdXM6ICR7cHJvcHMuaXNDb25kZW5zZWRcbiAgICAgID8gZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wQXNDb25kZW5zZWRcbiAgICAgIDogZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IFN0YW1wID0gKHByb3BzOiBUU3RhbXBQcm9wcykgPT4ge1xuICBjb25zdCBJY29uID1cbiAgICBwcm9wcy5pY29uICYmXG4gICAgY2xvbmVFbGVtZW50KHByb3BzLmljb24sIHtcbiAgICAgIHNpemU6ICdtZWRpdW0nLFxuICAgICAgY29sb3I6IGdldEljb25Db2xvcihwcm9wcywgdHJ1ZSksXG4gICAgfSk7XG5cbiAgdXNlV2FybkRlcHJlY2F0ZWRQcm9wKFxuICAgICFCb29sZWFuKHByb3BzLmNoaWxkcmVuKSxcbiAgICAnY2hpbGRyZW4nLFxuICAgICdTdGFtcCcsXG4gICAgJ1BsZWFzZSB1c2UgYGxhYmVsYCBhbmQgYGljb25gIHByb3BlcnRpZXMgaW5zdGVhZC4nXG4gICk7XG5cbiAgY29uc3QgU3RhbXBMYWJlbCA9ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IHN0cmluZyB9KTogUmVhY3RFbGVtZW50ID0+XG4gICAgcHJvcHMuaXNDb25kZW5zZWQgPyAoXG4gICAgICA8VGV4dC5DYXB0aW9uIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuQ2FwdGlvbj5cbiAgICApIDogKFxuICAgICAgPFRleHQuRGV0YWlsIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuRGV0YWlsPlxuICAgICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e1tcbiAgICAgICAgZ2V0U3RhbXBTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFRvbmVTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZSBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgIHtJY29ufVxuICAgICAgICB7cHJvcHMubGFiZWwgPyA8U3RhbXBMYWJlbD57cHJvcHMubGFiZWx9PC9TdGFtcExhYmVsPiA6IHByb3BzLmNoaWxkcmVufVxuICAgICAgPC9TcGFjaW5nc0lubGluZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5jb25zdCBkZWZhdWx0UHJvcHM6IFBpY2s8VFN0YW1wUHJvcHMsICdpc0NvbmRlbnNlZCcgfCAndG9uZSc+ID0ge1xuICBpc0NvbmRlbnNlZDogZmFsc2UsXG4gIHRvbmU6ICdpbmZvcm1hdGlvbicsXG59O1xuU3RhbXAuZGlzcGxheU5hbWUgPSAnU3RhbXAnO1xuU3RhbXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBTdGFtcDtcbiJdfQ== */");
};
const getIconColor = (props, overrideTextColor) => {
  if (!overrideTextColor) {
    return 'inherit';
  }
  const toneProps = props.tone && tonesPropsMap[props.tone];
  return toneProps ? toneProps.iconColor : '';
};
const getToneStyles = props => {
  if (!props.tone || !tonesPropsMap[props.tone]) {
    return /*#__PURE__*/css(process.env.NODE_ENV === "production" ? "" : ";label:getToneStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxSWMiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IFNwYWNpbmdzSW5saW5lIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzLWlubGluZSc7XG5pbXBvcnQgeyB1c2VXYXJuRGVwcmVjYXRlZFByb3AgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFRUb25lID1cbiAgfCAnY3JpdGljYWwnXG4gIHwgJ3dhcm5pbmcnXG4gIHwgJ3Bvc2l0aXZlJ1xuICB8ICdpbmZvcm1hdGlvbidcbiAgfCAncHJpbWFyeSdcbiAgfCAnc2Vjb25kYXJ5JztcblxuZXhwb3J0IHR5cGUgVFN0YW1wUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhlIGNvbG9yIHNjaGVtZSBvZiBzdGFtcFxuICAgKi9cbiAgdG9uZT86IFRUb25lO1xuICAvKipcbiAgICogSWYgYHRydWVgLCByZW5kZXJzIGEgY29uZGVuc2VkIHZlcnNpb24gb2YgdGhlIHN0YW1wLlxuICAgKi9cbiAgaXNDb25kZW5zZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDb250ZW50IHRvIHJlbmRlciB3aXRoaW4gdGhlIHN0YW1wLlxuICAgKiBUaGlzIHByb3BlcnR5IGhhcyBiZWVuICoqZGVwcmVjYXRlZCoqIGluIGZhdm9yIG9mIGBsYWJlbGAuXG4gICAqL1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIEljb24gdG8gcmVuZGVyIGJlc2lkZSAobGVmdCkgdGhlIHN0YW1wIHRleHQuXG4gICAqL1xuICBpY29uPzogUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICogVGV4dCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xufTtcblxudHlwZSBUb25lUmVsYXRlZFByb3BzID0ge1xuICBzdHlsZXM6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBib3JkZXJDb2xvcjogc3RyaW5nO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gIH07XG4gIGljb25Db2xvcjogc3RyaW5nO1xufTtcblxudHlwZSBTdHlsZXNGdW5jdGlvblBhcmFtcyA9IFRTdGFtcFByb3BzICYgeyBvdmVycmlkZVRleHRDb2xvcj86IGJvb2xlYW4gfTtcblxuY29uc3QgdG9uZXNQcm9wc01hcDogUmVjb3JkPFRUb25lLCBUb25lUmVsYXRlZFByb3BzPiA9IHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5FcnJvcixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnZXJyb3InLFxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5XYXJuaW5nLFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ3dhcm5pbmcnLFxuICB9LFxuICBwb3NpdGl2ZToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1Bvc2l0aXZlLFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5MjUsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdwcmltYXJ5JyxcbiAgfSxcbiAgaW5mb3JtYXRpb246IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNJbmZvcm1hdGlvbixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdpbmZvJyxcbiAgfSxcbiAgcHJpbWFyeToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcEFzU2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ25ldXRyYWw2MCcsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wQXNDb25kZW5zZWR9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IGdldEljb25Db2xvciA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICBvdmVycmlkZVRleHRDb2xvcjogYm9vbGVhblxuKSA9PiB7XG4gIGlmICghb3ZlcnJpZGVUZXh0Q29sb3IpIHtcbiAgICByZXR1cm4gJ2luaGVyaXQnO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gcHJvcHMudG9uZSAmJiB0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdKSB7XG4gICAgcmV0dXJuIGNzc2BgO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gdG9uZXNQcm9wc01hcFtwcm9wcy50b25lXTtcbiAgcmV0dXJuIGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RvbmVQcm9wcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfTtcblxuICAgICYsXG4gICAgJiAqIHtcbiAgICAgIGNvbG9yOiAke3Byb3BzLm92ZXJyaWRlVGV4dENvbG9yID8gdG9uZVByb3BzLnN0eWxlcy5jb2xvciA6ICdpbmhlcml0J307XG4gICAgfVxuICBgO1xufTtcblxuY29uc3QgZ2V0U3RhbXBTdHlsZXMgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIHJldHVybiBjc3NgXG4gICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyAnaW5oZXJpdCcgOiBkZXNpZ25Ub2tlbnMuY29sb3JTb2xpZH07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGJvcmRlci1yYWRpdXM6ICR7cHJvcHMuaXNDb25kZW5zZWRcbiAgICAgID8gZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wQXNDb25kZW5zZWRcbiAgICAgIDogZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IFN0YW1wID0gKHByb3BzOiBUU3RhbXBQcm9wcykgPT4ge1xuICBjb25zdCBJY29uID1cbiAgICBwcm9wcy5pY29uICYmXG4gICAgY2xvbmVFbGVtZW50KHByb3BzLmljb24sIHtcbiAgICAgIHNpemU6ICdtZWRpdW0nLFxuICAgICAgY29sb3I6IGdldEljb25Db2xvcihwcm9wcywgdHJ1ZSksXG4gICAgfSk7XG5cbiAgdXNlV2FybkRlcHJlY2F0ZWRQcm9wKFxuICAgICFCb29sZWFuKHByb3BzLmNoaWxkcmVuKSxcbiAgICAnY2hpbGRyZW4nLFxuICAgICdTdGFtcCcsXG4gICAgJ1BsZWFzZSB1c2UgYGxhYmVsYCBhbmQgYGljb25gIHByb3BlcnRpZXMgaW5zdGVhZC4nXG4gICk7XG5cbiAgY29uc3QgU3RhbXBMYWJlbCA9ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IHN0cmluZyB9KTogUmVhY3RFbGVtZW50ID0+XG4gICAgcHJvcHMuaXNDb25kZW5zZWQgPyAoXG4gICAgICA8VGV4dC5DYXB0aW9uIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuQ2FwdGlvbj5cbiAgICApIDogKFxuICAgICAgPFRleHQuRGV0YWlsIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuRGV0YWlsPlxuICAgICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e1tcbiAgICAgICAgZ2V0U3RhbXBTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFRvbmVTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZSBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgIHtJY29ufVxuICAgICAgICB7cHJvcHMubGFiZWwgPyA8U3RhbXBMYWJlbD57cHJvcHMubGFiZWx9PC9TdGFtcExhYmVsPiA6IHByb3BzLmNoaWxkcmVufVxuICAgICAgPC9TcGFjaW5nc0lubGluZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5jb25zdCBkZWZhdWx0UHJvcHM6IFBpY2s8VFN0YW1wUHJvcHMsICdpc0NvbmRlbnNlZCcgfCAndG9uZSc+ID0ge1xuICBpc0NvbmRlbnNlZDogZmFsc2UsXG4gIHRvbmU6ICdpbmZvcm1hdGlvbicsXG59O1xuU3RhbXAuZGlzcGxheU5hbWUgPSAnU3RhbXAnO1xuU3RhbXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBTdGFtcDtcbiJdfQ== */");
  }
  const toneProps = tonesPropsMap[props.tone];
  return /*#__PURE__*/css("background-color:", toneProps.styles.backgroundColor, ";&,& *{color:", props.overrideTextColor ? toneProps.styles.color : 'inherit', ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:getToneStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5SVkiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IFNwYWNpbmdzSW5saW5lIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzLWlubGluZSc7XG5pbXBvcnQgeyB1c2VXYXJuRGVwcmVjYXRlZFByb3AgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFRUb25lID1cbiAgfCAnY3JpdGljYWwnXG4gIHwgJ3dhcm5pbmcnXG4gIHwgJ3Bvc2l0aXZlJ1xuICB8ICdpbmZvcm1hdGlvbidcbiAgfCAncHJpbWFyeSdcbiAgfCAnc2Vjb25kYXJ5JztcblxuZXhwb3J0IHR5cGUgVFN0YW1wUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhlIGNvbG9yIHNjaGVtZSBvZiBzdGFtcFxuICAgKi9cbiAgdG9uZT86IFRUb25lO1xuICAvKipcbiAgICogSWYgYHRydWVgLCByZW5kZXJzIGEgY29uZGVuc2VkIHZlcnNpb24gb2YgdGhlIHN0YW1wLlxuICAgKi9cbiAgaXNDb25kZW5zZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDb250ZW50IHRvIHJlbmRlciB3aXRoaW4gdGhlIHN0YW1wLlxuICAgKiBUaGlzIHByb3BlcnR5IGhhcyBiZWVuICoqZGVwcmVjYXRlZCoqIGluIGZhdm9yIG9mIGBsYWJlbGAuXG4gICAqL1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIEljb24gdG8gcmVuZGVyIGJlc2lkZSAobGVmdCkgdGhlIHN0YW1wIHRleHQuXG4gICAqL1xuICBpY29uPzogUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICogVGV4dCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xufTtcblxudHlwZSBUb25lUmVsYXRlZFByb3BzID0ge1xuICBzdHlsZXM6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBib3JkZXJDb2xvcjogc3RyaW5nO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gIH07XG4gIGljb25Db2xvcjogc3RyaW5nO1xufTtcblxudHlwZSBTdHlsZXNGdW5jdGlvblBhcmFtcyA9IFRTdGFtcFByb3BzICYgeyBvdmVycmlkZVRleHRDb2xvcj86IGJvb2xlYW4gfTtcblxuY29uc3QgdG9uZXNQcm9wc01hcDogUmVjb3JkPFRUb25lLCBUb25lUmVsYXRlZFByb3BzPiA9IHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5FcnJvcixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnZXJyb3InLFxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5XYXJuaW5nLFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ3dhcm5pbmcnLFxuICB9LFxuICBwb3NpdGl2ZToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1Bvc2l0aXZlLFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5MjUsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdwcmltYXJ5JyxcbiAgfSxcbiAgaW5mb3JtYXRpb246IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNJbmZvcm1hdGlvbixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdpbmZvJyxcbiAgfSxcbiAgcHJpbWFyeToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcEFzU2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ25ldXRyYWw2MCcsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wQXNDb25kZW5zZWR9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IGdldEljb25Db2xvciA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICBvdmVycmlkZVRleHRDb2xvcjogYm9vbGVhblxuKSA9PiB7XG4gIGlmICghb3ZlcnJpZGVUZXh0Q29sb3IpIHtcbiAgICByZXR1cm4gJ2luaGVyaXQnO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gcHJvcHMudG9uZSAmJiB0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdKSB7XG4gICAgcmV0dXJuIGNzc2BgO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gdG9uZXNQcm9wc01hcFtwcm9wcy50b25lXTtcbiAgcmV0dXJuIGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RvbmVQcm9wcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfTtcblxuICAgICYsXG4gICAgJiAqIHtcbiAgICAgIGNvbG9yOiAke3Byb3BzLm92ZXJyaWRlVGV4dENvbG9yID8gdG9uZVByb3BzLnN0eWxlcy5jb2xvciA6ICdpbmhlcml0J307XG4gICAgfVxuICBgO1xufTtcblxuY29uc3QgZ2V0U3RhbXBTdHlsZXMgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIHJldHVybiBjc3NgXG4gICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyAnaW5oZXJpdCcgOiBkZXNpZ25Ub2tlbnMuY29sb3JTb2xpZH07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGJvcmRlci1yYWRpdXM6ICR7cHJvcHMuaXNDb25kZW5zZWRcbiAgICAgID8gZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wQXNDb25kZW5zZWRcbiAgICAgIDogZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IFN0YW1wID0gKHByb3BzOiBUU3RhbXBQcm9wcykgPT4ge1xuICBjb25zdCBJY29uID1cbiAgICBwcm9wcy5pY29uICYmXG4gICAgY2xvbmVFbGVtZW50KHByb3BzLmljb24sIHtcbiAgICAgIHNpemU6ICdtZWRpdW0nLFxuICAgICAgY29sb3I6IGdldEljb25Db2xvcihwcm9wcywgdHJ1ZSksXG4gICAgfSk7XG5cbiAgdXNlV2FybkRlcHJlY2F0ZWRQcm9wKFxuICAgICFCb29sZWFuKHByb3BzLmNoaWxkcmVuKSxcbiAgICAnY2hpbGRyZW4nLFxuICAgICdTdGFtcCcsXG4gICAgJ1BsZWFzZSB1c2UgYGxhYmVsYCBhbmQgYGljb25gIHByb3BlcnRpZXMgaW5zdGVhZC4nXG4gICk7XG5cbiAgY29uc3QgU3RhbXBMYWJlbCA9ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IHN0cmluZyB9KTogUmVhY3RFbGVtZW50ID0+XG4gICAgcHJvcHMuaXNDb25kZW5zZWQgPyAoXG4gICAgICA8VGV4dC5DYXB0aW9uIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuQ2FwdGlvbj5cbiAgICApIDogKFxuICAgICAgPFRleHQuRGV0YWlsIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuRGV0YWlsPlxuICAgICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e1tcbiAgICAgICAgZ2V0U3RhbXBTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFRvbmVTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZSBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgIHtJY29ufVxuICAgICAgICB7cHJvcHMubGFiZWwgPyA8U3RhbXBMYWJlbD57cHJvcHMubGFiZWx9PC9TdGFtcExhYmVsPiA6IHByb3BzLmNoaWxkcmVufVxuICAgICAgPC9TcGFjaW5nc0lubGluZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5jb25zdCBkZWZhdWx0UHJvcHM6IFBpY2s8VFN0YW1wUHJvcHMsICdpc0NvbmRlbnNlZCcgfCAndG9uZSc+ID0ge1xuICBpc0NvbmRlbnNlZDogZmFsc2UsXG4gIHRvbmU6ICdpbmZvcm1hdGlvbicsXG59O1xuU3RhbXAuZGlzcGxheU5hbWUgPSAnU3RhbXAnO1xuU3RhbXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBTdGFtcDtcbiJdfQ== */");
};
const getStampStyles = props => {
  return /*#__PURE__*/css("color:", props.overrideTextColor ? 'inherit' : designTokens.colorSolid, ";display:inline-block;border-radius:", props.isCondensed ? designTokens.borderRadiusForStampAsCondensed : designTokens.borderRadiusForStamp, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getStampStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvSlkiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IFNwYWNpbmdzSW5saW5lIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzLWlubGluZSc7XG5pbXBvcnQgeyB1c2VXYXJuRGVwcmVjYXRlZFByb3AgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFRUb25lID1cbiAgfCAnY3JpdGljYWwnXG4gIHwgJ3dhcm5pbmcnXG4gIHwgJ3Bvc2l0aXZlJ1xuICB8ICdpbmZvcm1hdGlvbidcbiAgfCAncHJpbWFyeSdcbiAgfCAnc2Vjb25kYXJ5JztcblxuZXhwb3J0IHR5cGUgVFN0YW1wUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhlIGNvbG9yIHNjaGVtZSBvZiBzdGFtcFxuICAgKi9cbiAgdG9uZT86IFRUb25lO1xuICAvKipcbiAgICogSWYgYHRydWVgLCByZW5kZXJzIGEgY29uZGVuc2VkIHZlcnNpb24gb2YgdGhlIHN0YW1wLlxuICAgKi9cbiAgaXNDb25kZW5zZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDb250ZW50IHRvIHJlbmRlciB3aXRoaW4gdGhlIHN0YW1wLlxuICAgKiBUaGlzIHByb3BlcnR5IGhhcyBiZWVuICoqZGVwcmVjYXRlZCoqIGluIGZhdm9yIG9mIGBsYWJlbGAuXG4gICAqL1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIEljb24gdG8gcmVuZGVyIGJlc2lkZSAobGVmdCkgdGhlIHN0YW1wIHRleHQuXG4gICAqL1xuICBpY29uPzogUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICogVGV4dCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xufTtcblxudHlwZSBUb25lUmVsYXRlZFByb3BzID0ge1xuICBzdHlsZXM6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBib3JkZXJDb2xvcjogc3RyaW5nO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gIH07XG4gIGljb25Db2xvcjogc3RyaW5nO1xufTtcblxudHlwZSBTdHlsZXNGdW5jdGlvblBhcmFtcyA9IFRTdGFtcFByb3BzICYgeyBvdmVycmlkZVRleHRDb2xvcj86IGJvb2xlYW4gfTtcblxuY29uc3QgdG9uZXNQcm9wc01hcDogUmVjb3JkPFRUb25lLCBUb25lUmVsYXRlZFByb3BzPiA9IHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5FcnJvcixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnZXJyb3InLFxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5XYXJuaW5nLFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ3dhcm5pbmcnLFxuICB9LFxuICBwb3NpdGl2ZToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1Bvc2l0aXZlLFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5MjUsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdwcmltYXJ5JyxcbiAgfSxcbiAgaW5mb3JtYXRpb246IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNJbmZvcm1hdGlvbixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdpbmZvJyxcbiAgfSxcbiAgcHJpbWFyeToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcEFzU2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ25ldXRyYWw2MCcsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wQXNDb25kZW5zZWR9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IGdldEljb25Db2xvciA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICBvdmVycmlkZVRleHRDb2xvcjogYm9vbGVhblxuKSA9PiB7XG4gIGlmICghb3ZlcnJpZGVUZXh0Q29sb3IpIHtcbiAgICByZXR1cm4gJ2luaGVyaXQnO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gcHJvcHMudG9uZSAmJiB0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdKSB7XG4gICAgcmV0dXJuIGNzc2BgO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gdG9uZXNQcm9wc01hcFtwcm9wcy50b25lXTtcbiAgcmV0dXJuIGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RvbmVQcm9wcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfTtcblxuICAgICYsXG4gICAgJiAqIHtcbiAgICAgIGNvbG9yOiAke3Byb3BzLm92ZXJyaWRlVGV4dENvbG9yID8gdG9uZVByb3BzLnN0eWxlcy5jb2xvciA6ICdpbmhlcml0J307XG4gICAgfVxuICBgO1xufTtcblxuY29uc3QgZ2V0U3RhbXBTdHlsZXMgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIHJldHVybiBjc3NgXG4gICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyAnaW5oZXJpdCcgOiBkZXNpZ25Ub2tlbnMuY29sb3JTb2xpZH07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGJvcmRlci1yYWRpdXM6ICR7cHJvcHMuaXNDb25kZW5zZWRcbiAgICAgID8gZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wQXNDb25kZW5zZWRcbiAgICAgIDogZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IFN0YW1wID0gKHByb3BzOiBUU3RhbXBQcm9wcykgPT4ge1xuICBjb25zdCBJY29uID1cbiAgICBwcm9wcy5pY29uICYmXG4gICAgY2xvbmVFbGVtZW50KHByb3BzLmljb24sIHtcbiAgICAgIHNpemU6ICdtZWRpdW0nLFxuICAgICAgY29sb3I6IGdldEljb25Db2xvcihwcm9wcywgdHJ1ZSksXG4gICAgfSk7XG5cbiAgdXNlV2FybkRlcHJlY2F0ZWRQcm9wKFxuICAgICFCb29sZWFuKHByb3BzLmNoaWxkcmVuKSxcbiAgICAnY2hpbGRyZW4nLFxuICAgICdTdGFtcCcsXG4gICAgJ1BsZWFzZSB1c2UgYGxhYmVsYCBhbmQgYGljb25gIHByb3BlcnRpZXMgaW5zdGVhZC4nXG4gICk7XG5cbiAgY29uc3QgU3RhbXBMYWJlbCA9ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IHN0cmluZyB9KTogUmVhY3RFbGVtZW50ID0+XG4gICAgcHJvcHMuaXNDb25kZW5zZWQgPyAoXG4gICAgICA8VGV4dC5DYXB0aW9uIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuQ2FwdGlvbj5cbiAgICApIDogKFxuICAgICAgPFRleHQuRGV0YWlsIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuRGV0YWlsPlxuICAgICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e1tcbiAgICAgICAgZ2V0U3RhbXBTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFRvbmVTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZSBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgIHtJY29ufVxuICAgICAgICB7cHJvcHMubGFiZWwgPyA8U3RhbXBMYWJlbD57cHJvcHMubGFiZWx9PC9TdGFtcExhYmVsPiA6IHByb3BzLmNoaWxkcmVufVxuICAgICAgPC9TcGFjaW5nc0lubGluZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5jb25zdCBkZWZhdWx0UHJvcHM6IFBpY2s8VFN0YW1wUHJvcHMsICdpc0NvbmRlbnNlZCcgfCAndG9uZSc+ID0ge1xuICBpc0NvbmRlbnNlZDogZmFsc2UsXG4gIHRvbmU6ICdpbmZvcm1hdGlvbicsXG59O1xuU3RhbXAuZGlzcGxheU5hbWUgPSAnU3RhbXAnO1xuU3RhbXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBTdGFtcDtcbiJdfQ== */");
};
const Stamp = props => {
  const Icon = props.icon && /*#__PURE__*/cloneElement(props.icon, {
    size: 'medium',
    color: getIconColor(props, true)
  });
  useWarnDeprecatedProp(!Boolean(props.children), 'children', 'Stamp', 'Please use `label` and `icon` properties instead.');
  const StampLabel = _ref => {
    let children = _ref.children;
    return props.isCondensed ? jsx(Text.Caption, {
      tone: "inherit",
      fontWeight: "medium",
      children: children
    }) : jsx(Text.Detail, {
      tone: "inherit",
      fontWeight: "medium",
      children: children
    });
  };
  return jsx("div", {
    css: [getStampStyles(_objectSpread(_objectSpread({}, props), {}, {
      overrideTextColor: true
    })), getToneStyles(_objectSpread(_objectSpread({}, props), {}, {
      overrideTextColor: true
    })), getPaddingStyle(props), process.env.NODE_ENV === "production" ? "" : ";label:Stamp;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5TE0iLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IFNwYWNpbmdzSW5saW5lIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzLWlubGluZSc7XG5pbXBvcnQgeyB1c2VXYXJuRGVwcmVjYXRlZFByb3AgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFRUb25lID1cbiAgfCAnY3JpdGljYWwnXG4gIHwgJ3dhcm5pbmcnXG4gIHwgJ3Bvc2l0aXZlJ1xuICB8ICdpbmZvcm1hdGlvbidcbiAgfCAncHJpbWFyeSdcbiAgfCAnc2Vjb25kYXJ5JztcblxuZXhwb3J0IHR5cGUgVFN0YW1wUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhlIGNvbG9yIHNjaGVtZSBvZiBzdGFtcFxuICAgKi9cbiAgdG9uZT86IFRUb25lO1xuICAvKipcbiAgICogSWYgYHRydWVgLCByZW5kZXJzIGEgY29uZGVuc2VkIHZlcnNpb24gb2YgdGhlIHN0YW1wLlxuICAgKi9cbiAgaXNDb25kZW5zZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDb250ZW50IHRvIHJlbmRlciB3aXRoaW4gdGhlIHN0YW1wLlxuICAgKiBUaGlzIHByb3BlcnR5IGhhcyBiZWVuICoqZGVwcmVjYXRlZCoqIGluIGZhdm9yIG9mIGBsYWJlbGAuXG4gICAqL1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIEljb24gdG8gcmVuZGVyIGJlc2lkZSAobGVmdCkgdGhlIHN0YW1wIHRleHQuXG4gICAqL1xuICBpY29uPzogUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICogVGV4dCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xufTtcblxudHlwZSBUb25lUmVsYXRlZFByb3BzID0ge1xuICBzdHlsZXM6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBib3JkZXJDb2xvcjogc3RyaW5nO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gIH07XG4gIGljb25Db2xvcjogc3RyaW5nO1xufTtcblxudHlwZSBTdHlsZXNGdW5jdGlvblBhcmFtcyA9IFRTdGFtcFByb3BzICYgeyBvdmVycmlkZVRleHRDb2xvcj86IGJvb2xlYW4gfTtcblxuY29uc3QgdG9uZXNQcm9wc01hcDogUmVjb3JkPFRUb25lLCBUb25lUmVsYXRlZFByb3BzPiA9IHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5FcnJvcixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnZXJyb3InLFxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcFdoZW5XYXJuaW5nLFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ3dhcm5pbmcnLFxuICB9LFxuICBwb3NpdGl2ZToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1Bvc2l0aXZlLFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5MjUsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdwcmltYXJ5JyxcbiAgfSxcbiAgaW5mb3JtYXRpb246IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvclN0YW1wQXNJbmZvcm1hdGlvbixcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdpbmZvJyxcbiAgfSxcbiAgcHJpbWFyeToge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yU3RhbXBBc1ByaW1hcnksXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JTdGFtcEFzU2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw0MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ25ldXRyYWw2MCcsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wQXNDb25kZW5zZWR9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IGdldEljb25Db2xvciA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICBvdmVycmlkZVRleHRDb2xvcjogYm9vbGVhblxuKSA9PiB7XG4gIGlmICghb3ZlcnJpZGVUZXh0Q29sb3IpIHtcbiAgICByZXR1cm4gJ2luaGVyaXQnO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gcHJvcHMudG9uZSAmJiB0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwW3Byb3BzLnRvbmVdKSB7XG4gICAgcmV0dXJuIGNzc2BgO1xuICB9XG5cbiAgY29uc3QgdG9uZVByb3BzID0gdG9uZXNQcm9wc01hcFtwcm9wcy50b25lXTtcbiAgcmV0dXJuIGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RvbmVQcm9wcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfTtcblxuICAgICYsXG4gICAgJiAqIHtcbiAgICAgIGNvbG9yOiAke3Byb3BzLm92ZXJyaWRlVGV4dENvbG9yID8gdG9uZVByb3BzLnN0eWxlcy5jb2xvciA6ICdpbmhlcml0J307XG4gICAgfVxuICBgO1xufTtcblxuY29uc3QgZ2V0U3RhbXBTdHlsZXMgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIHJldHVybiBjc3NgXG4gICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyAnaW5oZXJpdCcgOiBkZXNpZ25Ub2tlbnMuY29sb3JTb2xpZH07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGJvcmRlci1yYWRpdXM6ICR7cHJvcHMuaXNDb25kZW5zZWRcbiAgICAgID8gZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wQXNDb25kZW5zZWRcbiAgICAgIDogZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvclN0YW1wfTtcbiAgYDtcbn07XG5cbmNvbnN0IFN0YW1wID0gKHByb3BzOiBUU3RhbXBQcm9wcykgPT4ge1xuICBjb25zdCBJY29uID1cbiAgICBwcm9wcy5pY29uICYmXG4gICAgY2xvbmVFbGVtZW50KHByb3BzLmljb24sIHtcbiAgICAgIHNpemU6ICdtZWRpdW0nLFxuICAgICAgY29sb3I6IGdldEljb25Db2xvcihwcm9wcywgdHJ1ZSksXG4gICAgfSk7XG5cbiAgdXNlV2FybkRlcHJlY2F0ZWRQcm9wKFxuICAgICFCb29sZWFuKHByb3BzLmNoaWxkcmVuKSxcbiAgICAnY2hpbGRyZW4nLFxuICAgICdTdGFtcCcsXG4gICAgJ1BsZWFzZSB1c2UgYGxhYmVsYCBhbmQgYGljb25gIHByb3BlcnRpZXMgaW5zdGVhZC4nXG4gICk7XG5cbiAgY29uc3QgU3RhbXBMYWJlbCA9ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IHN0cmluZyB9KTogUmVhY3RFbGVtZW50ID0+XG4gICAgcHJvcHMuaXNDb25kZW5zZWQgPyAoXG4gICAgICA8VGV4dC5DYXB0aW9uIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuQ2FwdGlvbj5cbiAgICApIDogKFxuICAgICAgPFRleHQuRGV0YWlsIHRvbmU9XCJpbmhlcml0XCIgZm9udFdlaWdodD1cIm1lZGl1bVwiPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RleHQuRGV0YWlsPlxuICAgICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e1tcbiAgICAgICAgZ2V0U3RhbXBTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFRvbmVTdHlsZXMoeyAuLi5wcm9wcywgb3ZlcnJpZGVUZXh0Q29sb3I6IHRydWUgfSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZSBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgIHtJY29ufVxuICAgICAgICB7cHJvcHMubGFiZWwgPyA8U3RhbXBMYWJlbD57cHJvcHMubGFiZWx9PC9TdGFtcExhYmVsPiA6IHByb3BzLmNoaWxkcmVufVxuICAgICAgPC9TcGFjaW5nc0lubGluZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5jb25zdCBkZWZhdWx0UHJvcHM6IFBpY2s8VFN0YW1wUHJvcHMsICdpc0NvbmRlbnNlZCcgfCAndG9uZSc+ID0ge1xuICBpc0NvbmRlbnNlZDogZmFsc2UsXG4gIHRvbmU6ICdpbmZvcm1hdGlvbicsXG59O1xuU3RhbXAuZGlzcGxheU5hbWUgPSAnU3RhbXAnO1xuU3RhbXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBTdGFtcDtcbiJdfQ== */"],
    children: jsxs(SpacingsInline, {
      alignItems: "center",
      children: [Icon, props.label ? jsx(StampLabel, {
        children: props.label
      }) : props.children]
    })
  });
};
Stamp.propTypes = process.env.NODE_ENV !== "production" ? {
  tone: _pt.oneOf(['critical', 'warning', 'positive', 'information', 'primary', 'secondary']),
  isCondensed: _pt.bool.isRequired,
  children: _pt.node,
  icon: _pt.element,
  label: _pt.string
} : {};
const defaultProps = {
  isCondensed: false,
  tone: 'information'
};
Stamp.displayName = 'Stamp';
Stamp.defaultProps = defaultProps;
var Stamp$1 = Stamp;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { Stamp$1 as default, version };
