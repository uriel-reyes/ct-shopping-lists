'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var react = require('react');
var react$1 = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var Text = require('@commercetools-uikit/text');
var SpacingsInline = require('@commercetools-uikit/spacings-inline');
var utils = require('@commercetools-uikit/utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var Text__default = /*#__PURE__*/_interopDefault(Text);
var SpacingsInline__default = /*#__PURE__*/_interopDefault(SpacingsInline);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const tonesPropsMap = {
  critical: {
    styles: {
      backgroundColor: designSystem.designTokens.colorError95,
      borderColor: designSystem.designTokens.borderColorForStampWhenError,
      color: designSystem.designTokens.colorError40
    },
    iconColor: 'error'
  },
  warning: {
    styles: {
      backgroundColor: designSystem.designTokens.colorWarning95,
      borderColor: designSystem.designTokens.borderColorForStampWhenWarning,
      color: designSystem.designTokens.colorWarning40
    },
    iconColor: 'warning'
  },
  positive: {
    styles: {
      backgroundColor: designSystem.designTokens.backgroundColorForStampAsPositive,
      borderColor: designSystem.designTokens.borderColorForStampAsPositive,
      color: designSystem.designTokens.colorPrimary25
    },
    iconColor: 'primary'
  },
  information: {
    styles: {
      backgroundColor: designSystem.designTokens.colorInfo95,
      borderColor: designSystem.designTokens.borderColorForStampAsInformation,
      color: designSystem.designTokens.colorInfo40
    },
    iconColor: 'info'
  },
  primary: {
    styles: {
      backgroundColor: designSystem.designTokens.backgroundColorForStampAsPrimary,
      borderColor: designSystem.designTokens.borderColorForStampAsPrimary,
      color: designSystem.designTokens.colorPrimary25
    },
    iconColor: 'primary40'
  },
  secondary: {
    styles: {
      backgroundColor: designSystem.designTokens.colorNeutral95,
      borderColor: designSystem.designTokens.borderColorForStampAsSecondary,
      color: designSystem.designTokens.colorNeutral40
    },
    iconColor: 'neutral60'
  }
};
const getPaddingStyle = props => {
  if (props.isCondensed) return /*#__PURE__*/react$1.css("padding:", designSystem.designTokens.paddingForStampAsCondensed, ";" + ("" ), "" );
  return /*#__PURE__*/react$1.css("padding:", designSystem.designTokens.paddingForStamp, ";" + ("" ), "" );
};
const getIconColor = (props, overrideTextColor) => {
  if (!overrideTextColor) {
    return 'inherit';
  }
  const toneProps = props.tone && tonesPropsMap[props.tone];
  return toneProps ? toneProps.iconColor : '';
};
const getToneStyles = props => {
  if (!props.tone || !tonesPropsMap[props.tone]) {
    return /*#__PURE__*/react$1.css("" , "" );
  }
  const toneProps = tonesPropsMap[props.tone];
  return /*#__PURE__*/react$1.css("background-color:", toneProps.styles.backgroundColor, ";&,& *{color:", props.overrideTextColor ? toneProps.styles.color : 'inherit', ";}" + ("" ), "" );
};
const getStampStyles = props => {
  return /*#__PURE__*/react$1.css("color:", props.overrideTextColor ? 'inherit' : designSystem.designTokens.colorSolid, ";display:inline-block;border-radius:", props.isCondensed ? designSystem.designTokens.borderRadiusForStampAsCondensed : designSystem.designTokens.borderRadiusForStamp, ";" + ("" ), "" );
};
const Stamp = props => {
  const Icon = props.icon && /*#__PURE__*/react.cloneElement(props.icon, {
    size: 'medium',
    color: getIconColor(props, true)
  });
  utils.useWarnDeprecatedProp(!Boolean(props.children), 'children', 'Stamp', 'Please use `label` and `icon` properties instead.');
  const StampLabel = _ref => {
    let children = _ref.children;
    return props.isCondensed ? jsxRuntime.jsx(Text__default["default"].Caption, {
      tone: "inherit",
      fontWeight: "medium",
      children: children
    }) : jsxRuntime.jsx(Text__default["default"].Detail, {
      tone: "inherit",
      fontWeight: "medium",
      children: children
    });
  };
  return jsxRuntime.jsx("div", {
    css: [getStampStyles(_objectSpread(_objectSpread({}, props), {}, {
      overrideTextColor: true
    })), getToneStyles(_objectSpread(_objectSpread({}, props), {}, {
      overrideTextColor: true
    })), getPaddingStyle(props), "" , "" ],
    children: jsxRuntime.jsxs(SpacingsInline__default["default"], {
      alignItems: "center",
      children: [Icon, props.label ? jsxRuntime.jsx(StampLabel, {
        children: props.label
      }) : props.children]
    })
  });
};
Stamp.propTypes = {};
const defaultProps = {
  isCondensed: false,
  tone: 'information'
};
Stamp.displayName = 'Stamp';
Stamp.defaultProps = defaultProps;
var Stamp$1 = Stamp;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = Stamp$1;
exports.version = version;
