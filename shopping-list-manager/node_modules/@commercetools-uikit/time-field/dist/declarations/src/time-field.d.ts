import { Component, type ChangeEventHandler, type FocusEventHandler, type KeyboardEvent, type MouseEvent, type ReactElement, type ReactNode } from 'react';
type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
export type TTimeFieldProps = {
    id?: string;
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    errors?: TFieldErrors;
    renderError?: (key: string, error?: boolean) => ReactNode;
    isRequired?: boolean;
    touched?: boolean;
    name?: string;
    autoComplete?: string;
    value: string;
    onChange?: ChangeEventHandler<HTMLInputElement>;
    onBlur?: FocusEventHandler<HTMLInputElement>;
    onFocus?: FocusEventHandler<HTMLInputElement>;
    isAutofocussed?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    placeholder?: string;
    title: ReactNode;
    hint?: ReactNode;
    description?: ReactNode;
    onInfoButtonClick?: (event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>) => void;
    hintIcon?: ReactElement;
    badge?: ReactNode;
};
type TTimeFieldState = Pick<TTimeFieldProps, 'id'>;
declare class TimeField extends Component<TTimeFieldProps, TTimeFieldState> {
    static displayName: string;
    static defaultProps: Pick<TTimeFieldProps, 'horizontalConstraint'>;
    state: {
        id: string | undefined;
    };
    static getDerivedStateFromProps: (props: TTimeFieldProps, state: TTimeFieldState) => {
        id: string;
    };
    static toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export default TimeField;
