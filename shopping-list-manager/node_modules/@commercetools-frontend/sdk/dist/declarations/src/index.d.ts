/// <reference types="react" />
/// <reference types="commercetools__sdk-client" />
import * as actions from './actions';
export { default as version } from './version';
export { default as createMiddleware } from './middleware';
export { default as useAsyncDispatch } from './hooks/use-async-dispatch';
export * from './types';
declare const Sdk: {
    Get: import("react-redux").ConnectedComponent<typeof import("./components/sdk-get/sdk-get").SdkGet, import("react-redux").Omit<Pick<import("react").ClassAttributes<import("./components/sdk-get/sdk-get").SdkGet> & {
        dispatch: (action: import("./types").TSdkAction) => Promise<import("@commercetools/sdk-client").Json>;
    } & {
        actionCreator: (...args: unknown[]) => import("./types").TSdkAction;
        actionCreatorArgs: unknown[];
        shouldRefetch: (prevArgs: unknown[], nextArgs: unknown[]) => boolean;
        onSuccess?: ((result: import("@commercetools/sdk-client").Json) => void) | undefined;
        onError?: ((error: Error | import("@commercetools/sdk-client").HttpErrorType) => void) | undefined;
        render: (options: {
            isLoading: boolean;
            refresh: () => Promise<void | import("@commercetools/sdk-client").Json>;
            result?: import("@commercetools/sdk-client").Json | undefined;
            error?: (Error | import("@commercetools/sdk-client").HttpErrorType) | undefined;
        }) => JSX.Element;
    }, "dispatch" | "render" | "onError" | "actionCreator" | "onSuccess" | keyof import("react").ClassAttributes<import("./components/sdk-get/sdk-get").SdkGet>> & Partial<Pick<import("react").ClassAttributes<import("./components/sdk-get/sdk-get").SdkGet> & {
        dispatch: (action: import("./types").TSdkAction) => Promise<import("@commercetools/sdk-client").Json>;
    } & {
        actionCreator: (...args: unknown[]) => import("./types").TSdkAction;
        actionCreatorArgs: unknown[];
        shouldRefetch: (prevArgs: unknown[], nextArgs: unknown[]) => boolean;
        onSuccess?: ((result: import("@commercetools/sdk-client").Json) => void) | undefined;
        onError?: ((error: Error | import("@commercetools/sdk-client").HttpErrorType) => void) | undefined;
        render: (options: {
            isLoading: boolean;
            refresh: () => Promise<void | import("@commercetools/sdk-client").Json>;
            result?: import("@commercetools/sdk-client").Json | undefined;
            error?: (Error | import("@commercetools/sdk-client").HttpErrorType) | undefined;
        }) => JSX.Element;
    }, "actionCreatorArgs" | "shouldRefetch">> & Partial<Pick<Pick<import("./components/sdk-get/sdk-get").Props, "actionCreatorArgs" | "shouldRefetch">, never>>, "dispatch"> & {
        actionCreator: (...args: unknown[]) => import("./types").TSdkAction;
        actionCreatorArgs: unknown[];
        shouldRefetch: (prevArgs: unknown[], nextArgs: unknown[]) => boolean;
        onSuccess?: ((result: import("@commercetools/sdk-client").Json) => void) | undefined;
        onError?: ((error: Error | import("@commercetools/sdk-client").HttpErrorType) => void) | undefined;
        render: (options: {
            isLoading: boolean;
            refresh: () => Promise<void | import("@commercetools/sdk-client").Json>;
            result?: import("@commercetools/sdk-client").Json | undefined;
            error?: (Error | import("@commercetools/sdk-client").HttpErrorType) | undefined;
        }) => JSX.Element;
    }>;
};
export { Sdk, actions };
