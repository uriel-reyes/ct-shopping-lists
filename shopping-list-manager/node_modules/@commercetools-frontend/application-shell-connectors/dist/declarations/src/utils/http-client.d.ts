export type THeaders = Record<string, string>;
export type TForwardToAudiencePolicy = 'forward-url-full-path' | 'forward-url-origin';
export type TForwardToExchangeTokenClaim = 'permissions';
export type TForwardToConfigVersion = 'v1' | 'v2';
export type TForwardToConfig = {
    uri: string;
    headers?: THeaders;
    audiencePolicy?: TForwardToAudiencePolicy;
    includeUserPermissions?: boolean;
    version?: TForwardToConfigVersion;
};
export type TConfig = {
    userAgent?: string;
    headers?: THeaders;
    forwardToConfig?: TForwardToConfig;
    projectKey?: string;
};
export type TOptions = {
    credentials: 'include';
    headers: THeaders;
};
export type TFetcherResponse<Data> = {
    data: Data;
    statusCode: number;
    getHeader: (headerName: string) => string | null;
};
export type TFetcher<Data> = (options: TOptions) => Promise<TFetcherResponse<Data>>;
declare function buildApiUrl(endpoint: string): string;
declare function createHttpClientOptions(config?: TConfig): TOptions;
declare function executeHttpClientRequest<Data>(fetcher: TFetcher<Data>, config?: TConfig): Promise<Data>;
export { buildApiUrl, createHttpClientOptions, executeHttpClientRequest };
