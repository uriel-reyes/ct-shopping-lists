/// <reference types="node" />
import type { ApplicationWindow } from '@commercetools-frontend/constants';
import { CLOUD_IDENTIFIERS, LOADED_CONFIG_TYPES } from './constants';
import type { JSONSchemaForCustomApplicationConfigurationFiles } from './schemas/generated/custom-application.schema';
import type { JSONSchemaForCustomViewConfigurationFiles } from './schemas/generated/custom-view.schema';
import type { TCustomView } from './types/generated/settings';
export type ConfigOptions = JSONSchemaForCustomApplicationConfigurationFiles;
export type ConfigOptionsForCustomApplication = JSONSchemaForCustomApplicationConfigurationFiles;
export type ConfigOptionsForCustomView = JSONSchemaForCustomViewConfigurationFiles;
export type CloudIdentifier = (typeof CLOUD_IDENTIFIERS)[keyof typeof CLOUD_IDENTIFIERS];
export type LoadedConfigType = (typeof LOADED_CONFIG_TYPES)[keyof typeof LOADED_CONFIG_TYPES];
type LocalizedFieldData = {
    locale: string;
    value: string;
};
type CustomApplicationPermissionData = {
    name: string;
    oAuthScopes: string[];
};
type CustomApplicationMenuLinkData = {
    defaultLabel: string;
    labelAllLocales: LocalizedFieldData[];
    permissions: string[];
};
type CustomApplicationSubmenuLinkData = {
    uriPath: string;
    defaultLabel: string;
    labelAllLocales: LocalizedFieldData[];
    permissions: string[];
};
export type CustomApplicationData = {
    id: string;
    entryPointUriPath: string;
    name: string;
    description?: string;
    url: string;
    icon: string;
    permissions: CustomApplicationPermissionData[];
    mainMenuLink: CustomApplicationMenuLinkData;
    submenuLinks: CustomApplicationSubmenuLinkData[];
};
export type CustomViewPermissionData = CustomApplicationPermissionData;
export type CustomViewData = {
    id: string;
    defaultLabel: string;
    labelAllLocales: LocalizedFieldData[];
    description?: string;
    url: string;
    permissions: CustomViewPermissionData[];
    locators: string[];
    type: TCustomView['type'];
    typeSettings?: TCustomView['typeSettings'];
};
export type ApplicationRuntimeConfig<AdditionalEnvironmentProperties extends {} = {}> = {
    data: CustomApplicationData | CustomViewData;
    env: AdditionalEnvironmentProperties & ApplicationWindow['app'];
    headers: JSONSchemaForCustomApplicationConfigurationFiles['headers'];
};
export type LoadingConfigOptions = {
    processEnv: NodeJS.ProcessEnv;
    applicationPath: string;
};
export type WordSeparators = '-';
export type Split<S extends string, Delimiter extends string> = S extends `${infer Head}${Delimiter}${infer Tail}` ? [Head, ...Split<Tail, Delimiter>] : S extends Delimiter ? [] : [S];
type InnerCamelCaseStringArray<Parts extends readonly unknown[], PreviousPart> = Parts extends [`${infer FirstPart}`, ...infer RemainingParts] ? FirstPart extends undefined ? '' : FirstPart extends '' ? InnerCamelCaseStringArray<RemainingParts, PreviousPart> : `${PreviousPart extends '' ? FirstPart : Capitalize<FirstPart>}${InnerCamelCaseStringArray<RemainingParts, FirstPart>}` : '';
type CamelCaseStringArray<Parts extends readonly string[]> = Parts extends [
    `${infer FirstPart}`,
    ...infer RemainingParts
] ? Uncapitalize<`${FirstPart}${InnerCamelCaseStringArray<RemainingParts, FirstPart>}`> : never;
export type CamelCase<K> = K extends string ? CamelCaseStringArray<Split<K extends Uppercase<K> ? Uppercase<K> : K, WordSeparators>> : K;
export {};
