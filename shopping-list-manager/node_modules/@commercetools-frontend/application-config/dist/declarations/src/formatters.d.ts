import type { CamelCase } from './types';
type TImplicitCustomApplicationResourceAccesses<PermissionGroupName extends string = ''> = Record<`view` | `manage` | `view${Capitalize<CamelCase<PermissionGroupName>>}` | `manage${Capitalize<CamelCase<PermissionGroupName>>}`, string>;
type TImplicitCustomViewResourceAccesses<PermissionGroupName extends string = ''> = TImplicitCustomApplicationResourceAccesses<PermissionGroupName>;
type TImplicitCustomApplicationPermissionKeys<PermissionGroupName extends string = ''> = Record<`View` | `Manage` | `View${Capitalize<CamelCase<PermissionGroupName>>}` | `Manage${Capitalize<CamelCase<PermissionGroupName>>}`, string>;
declare const formatEntryPointUriPathToResourceAccessKey: (entryPointUriPath: string) => string;
declare const formatPermissionGroupNameToResourceAccessKey: (permissionGroupName: string) => string;
declare function entryPointUriPathToResourceAccesses(entryPointUriPath: string): TImplicitCustomApplicationResourceAccesses<''>;
declare function entryPointUriPathToResourceAccesses<PermissionGroupName extends string>(entryPointUriPath: string, permissionGroupNames: PermissionGroupName[]): TImplicitCustomApplicationResourceAccesses<PermissionGroupName>;
declare function computeCustomViewResourceAccesses<PermissionGroupName extends string>(permissionGroupNames?: PermissionGroupName[]): TImplicitCustomViewResourceAccesses<PermissionGroupName>;
declare function computeCustomViewPermissionsKeys<PermissionGroupName extends string>(permissionGroupNames?: PermissionGroupName[]): TImplicitCustomApplicationPermissionKeys<PermissionGroupName>;
declare function entryPointUriPathToPermissionKeys(entryPointUriPath: string): TImplicitCustomApplicationPermissionKeys<''>;
declare function entryPointUriPathToPermissionKeys<PermissionGroupName extends string>(entryPointUriPath: string, permissionGroupNames: PermissionGroupName[]): TImplicitCustomApplicationPermissionKeys<PermissionGroupName>;
export { entryPointUriPathToResourceAccesses, entryPointUriPathToPermissionKeys, formatEntryPointUriPathToResourceAccessKey, formatPermissionGroupNameToResourceAccessKey, computeCustomViewResourceAccesses, computeCustomViewPermissionsKeys, };
