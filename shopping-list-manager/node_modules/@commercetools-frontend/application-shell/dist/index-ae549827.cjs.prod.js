'use strict';

var _pt = require('prop-types');
var react = require('react');
var reactRouterDom = require('react-router-dom');
var index = require('./index-6cd618cc.cjs.prod.js');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _styled = require('@emotion/styled/base');
var _findInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/find');
var _includesInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/includes');
var _Array$isArray = require('@babel/runtime-corejs3/core-js-stable/array/is-array');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var react$1 = require('@emotion/react');
var applicationComponents = require('@commercetools-frontend/application-components');
var applicationShellConnectors = require('@commercetools-frontend/application-shell-connectors');
var constants = require('@commercetools-frontend/constants');
var i18n = require('@commercetools-frontend/i18n');
var reactNotifications = require('@commercetools-frontend/react-notifications');
var sentry = require('@commercetools-frontend/sentry');
var oidc = require('./oidc-b070ff6c.cjs.prod.js');
require('@babel/runtime-corejs3/core-js-stable/url');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var designSystem = require('@commercetools-uikit/design-system');
var Spacings = require('@commercetools-uikit/spacings');
var reactIntl = require('react-intl');
var FlatButton = require('@commercetools-uikit/flat-button');
var icons = require('@commercetools-uikit/icons');
var useIsServedByProxy = require('./use-is-served-by-proxy-845cace5.cjs.prod.js');
var jsxRuntime = require('@emotion/react/jsx-runtime');
var _taggedTemplateLiteral = require('@babel/runtime-corejs3/helpers/taggedTemplateLiteral');
var _objectDestructuringEmpty = require('@babel/runtime-corejs3/helpers/objectDestructuringEmpty');
var _extends = require('@babel/runtime-corejs3/helpers/extends');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var memoize = require('memoize-one');
var reactSelect = require('react-select');
var AccessibleHidden = require('@commercetools-uikit/accessible-hidden');
var SelectInput = require('@commercetools-uikit/select-input');
var CTLogoSVG = require('@commercetools-frontend/assets/images/ct-logo.svg');
var LoadingSpinner = require('@commercetools-uikit/loading-spinner');
var history = require('@commercetools-frontend/browser-history');
var l10n = require('@commercetools-frontend/l10n');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _Reflect$construct = require('@babel/runtime-corejs3/core-js-stable/reflect/construct');
var _classCallCheck = require('@babel/runtime-corejs3/helpers/classCallCheck');
var _createClass = require('@babel/runtime-corejs3/helpers/createClass');
var _inherits = require('@babel/runtime-corejs3/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime-corejs3/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime-corejs3/helpers/getPrototypeOf');
require('@babel/runtime-corejs3/core-js-stable/instance/index-of');
var _sliceInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/slice');
var _Object$fromEntries = require('@babel/runtime-corejs3/core-js-stable/object/from-entries');
var _flagsInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/flags');
var react$2 = require('@apollo/client/react');
var combineAdapters = require('@flopflip/combine-adapters');
var httpAdapter = require('@flopflip/http-adapter');
var ldAdapter = require('@flopflip/launchdarkly-adapter');
var reactBroadcast = require('@flopflip/react-broadcast');
var _reduceInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/reduce');
var reactRedux = require('react-redux');
var upperFirst = require('lodash/upperFirst');
var _startsWithInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/starts-with');
require('@commercetools-uikit/design-system/materials/resets.css');
var ssr = require('@commercetools-frontend/application-config/ssr');
var permissions = require('@commercetools-frontend/permissions');
var _JSON$stringify = require('@babel/runtime-corejs3/core-js-stable/json/stringify');
var _someInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/some');
var actionsGlobal = require('@commercetools-frontend/actions-global');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _findInstanceProperty__default = /*#__PURE__*/_interopDefault(_findInstanceProperty);
var _includesInstanceProperty__default = /*#__PURE__*/_interopDefault(_includesInstanceProperty);
var _Array$isArray__default = /*#__PURE__*/_interopDefault(_Array$isArray);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var Spacings__default = /*#__PURE__*/_interopDefault(Spacings);
var FlatButton__default = /*#__PURE__*/_interopDefault(FlatButton);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var memoize__default = /*#__PURE__*/_interopDefault(memoize);
var AccessibleHidden__default = /*#__PURE__*/_interopDefault(AccessibleHidden);
var SelectInput__default = /*#__PURE__*/_interopDefault(SelectInput);
var CTLogoSVG__default = /*#__PURE__*/_interopDefault(CTLogoSVG);
var LoadingSpinner__default = /*#__PURE__*/_interopDefault(LoadingSpinner);
var history__default = /*#__PURE__*/_interopDefault(history);
var _Reflect$construct__default = /*#__PURE__*/_interopDefault(_Reflect$construct);
var _sliceInstanceProperty__default = /*#__PURE__*/_interopDefault(_sliceInstanceProperty);
var _Object$fromEntries__default = /*#__PURE__*/_interopDefault(_Object$fromEntries);
var _flagsInstanceProperty__default = /*#__PURE__*/_interopDefault(_flagsInstanceProperty);
var combineAdapters__default = /*#__PURE__*/_interopDefault(combineAdapters);
var httpAdapter__default = /*#__PURE__*/_interopDefault(httpAdapter);
var ldAdapter__default = /*#__PURE__*/_interopDefault(ldAdapter);
var _reduceInstanceProperty__default = /*#__PURE__*/_interopDefault(_reduceInstanceProperty);
var upperFirst__default = /*#__PURE__*/_interopDefault(upperFirst);
var _startsWithInstanceProperty__default = /*#__PURE__*/_interopDefault(_startsWithInstanceProperty);
var _JSON$stringify__default = /*#__PURE__*/_interopDefault(_JSON$stringify);
var _someInstanceProperty__default = /*#__PURE__*/_interopDefault(_someInstanceProperty);

// NOTE: This string will be replaced on build time with the package version.
var applicationShellVersion = "22.13.0";

const RequestsInFlightLoader = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./requests-in-flight-loader-fd3c09f0.cjs.prod.js' /* webpackChunkName: "requests-in-flight-loader" */); }));

// Attempt to load the `projectKey` from localStorage
function selectProjectKeyFromLocalStorage() {
  return window.localStorage.getItem(constants.STORAGE_KEYS.ACTIVE_PROJECT_KEY);
}

const getPreviousProjectKey = defaultProjectKeyOfUser => {
  const previouslyUsedProjectKeyFromLocalStorage = selectProjectKeyFromLocalStorage();
  if (previouslyUsedProjectKeyFromLocalStorage) return previouslyUsedProjectKeyFromLocalStorage;
  if (defaultProjectKeyOfUser) return defaultProjectKeyOfUser;
  return;
};

var messages$1 = reactIntl.defineMessages({
  backToProjectLink: {
    id: 'AppBar.backToProjectLink',
    defaultMessage: 'Back to project'
  }
});

/**
 * Note:
 *   A full page reload is needed as the user's project may have changed (deletions and/or additions).
 *   As a result the project and user queries need refetching.
 */
const redirectToProject = key => useIsServedByProxy.location.replace("/".concat(key));
const BackToProject = props => {
  const intl = reactIntl.useIntl();
  return jsxRuntime.jsx(FlatButton__default["default"], {
    onClick: () => redirectToProject(props.projectKey || ''),
    icon: jsxRuntime.jsx(icons.AngleLeftIcon, {}),
    label: intl.formatMessage(messages$1.backToProjectLink)
  });
};
BackToProject.displayName = 'BackToProject';

var _templateObject;
const animationPulse = react$1.keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0% {\n    background-color: ", ";\n  }\n  100% {\n    background-color: ", ";\n  }\n"])), designSystem.customProperties.colorNeutral, designSystem.customProperties.colorNeutral95);
const getWidthBySize = props => {
  switch (props.shape) {
    case 'dot':
      switch (props.size) {
        case 's':
          return designSystem.customProperties.spacingS;
        case 'm':
          return designSystem.customProperties.spacingM;
        case 'l':
          return designSystem.customProperties.spacingL;
        case 'xl':
          return designSystem.customProperties.spacingXl;
        default:
          return 'auto';
      }
    case 'rect':
      switch (props.size) {
        case 's':
          return '150px';
        case 'm':
          return '300px';
        case 'l':
          return '450px';
        case 'xl':
          return '600px';
        default:
          return 'auto';
      }
    default:
      return 'auto';
  }
};
const getHeightBySize = props => {
  switch (props.shape) {
    case 'dot':
      return getWidthBySize(props);
    case 'rect':
      return '32px';
    default:
      return 'auto';
  }
};
const getRadiusBySize = props => {
  switch (props.shape) {
    case 'dot':
      switch (props.size) {
        case 's':
          return designSystem.customProperties.borderRadius4;
        case 'm':
          return '8px';
        case 'l':
          return '12px';
        case 'xl':
          return '16px';
        default:
          return 'none';
      }
    case 'rect':
      return designSystem.customProperties.borderRadius4;
    default:
      return 'none';
  }
};
const LoadingPlaceholder = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e4c5pm00"
} )("background-color:", designSystem.customProperties.colorNeutral, ";animation-name:", animationPulse, ";animation-duration:1s;animation-timing-function:ease-out;animation-delay:0;animation-direction:alternate;animation-iteration-count:infinite;width:", getWidthBySize, ";height:", getHeightBySize, ";border-radius:", getRadiusBySize, ";" + ("" ));
LoadingPlaceholder.displayName = 'LoadingPlaceholder';

var messages = reactIntl.defineMessages({
  projectsLabel: {
    id: 'ProjectSwitcher.projectsLabel',
    description: 'The label for project dropdown switcher',
    defaultMessage: 'Projects menu'
  },
  searchPlaceholder: {
    id: 'ProjectSwitcher.searchPlaceholder',
    description: 'Projects filter search input placeholder',
    defaultMessage: 'Search for a project'
  },
  noResults: {
    id: 'ProjectSwitcher.noResults',
    description: 'Projects filter no results text',
    defaultMessage: 'Sorry, but there are no projects that match your search.'
  },
  suspended: {
    id: 'ProjectSwitcher.suspended',
    description: 'Label for a suspended project',
    defaultMessage: 'Suspended'
  },
  expired: {
    id: 'ProjectSwitcher.expired',
    description: 'Label for a suspended project',
    defaultMessage: 'Expired'
  }
});

function ownKeys$8(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$8(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$8(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
var ProjectsQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchUserProjects" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", alias: { kind: "Name", value: "user" }, name: { kind: "Name", value: "me" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "results" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "suspension" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "expiry" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }] } }] } }] } }] } }] } }], loc: { start: 0, end: 218, source: { body: "query FetchUserProjects {\n  user: me {\n    id\n    projects {\n      results {\n        name\n        key\n        suspension {\n          isActive\n        }\n        expiry {\n          isActive\n        }\n      }\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const PROJECT_SWITCHER_LABEL_ID = 'project-switcher-label';
var _ref3$1 = {
  name: "82a6rk",
  styles: "flex:1"
} ;
var _ref4$1 = {
  name: "zol16h",
  styles: "display:flex;flex:1;align-items:center"
} ;
const ValueContainer = _ref5 => {
  let restProps = _extends({}, (_objectDestructuringEmpty(_ref5), _ref5));
  return jsxRuntime.jsx("div", {
    css: _ref4$1,
    children: jsxRuntime.jsx("div", {
      css: _ref3$1,
      children: jsxRuntime.jsx(SelectInput__default["default"].ValueContainer, _objectSpread$8(_objectSpread$8({}, restProps), {}, {
        children: restProps.children
      }))
    })
  });
};
var _ref$2 = {
  name: "16lqnjx",
  styles: "font-size:1.5rem;display:flex"
} ;
var _ref2$2 = {
  name: "10s3lzp",
  styles: "word-wrap:break-word"
} ;
const ProjectSwitcherOption = props => {
  const project = props.data;
  return jsxRuntime.jsx(SelectInput__default["default"].Option, _objectSpread$8(_objectSpread$8({}, props), {}, {
    children: jsxRuntime.jsxs("div", {
      css: _ref2$2,
      children: [jsxRuntime.jsxs("div", {
        css: /*#__PURE__*/react$1.css("color:", props.isDisabled ? designSystem.designTokens.colorNeutral : designSystem.designTokens.colorAccent, ";" + ("" ), "" ),
        children: [project.name, props.isDisabled && jsxRuntime.jsx("span", {
          css: _ref$2,
          children: jsxRuntime.jsx(icons.ErrorIcon, {
            size: "medium"
          })
        })]
      }), jsxRuntime.jsx("div", {
        css: /*#__PURE__*/react$1.css("font-size:11px;color:", props.isDisabled ? designSystem.designTokens.colorNeutral : 'inherit', ";" + ("" ), "" ),
        children: project.key
      }), project.suspension && project.suspension.isActive && jsxRuntime.jsx("div", {
        css: /*#__PURE__*/react$1.css("font-size:11px;color:", designSystem.designTokens.colorError, ";" + ("" ), "" ),
        children: jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread$8({}, messages.suspended))
      }), project.expiry && project.expiry.isActive && jsxRuntime.jsx("div", {
        css: /*#__PURE__*/react$1.css("font-size:11px;color:", designSystem.designTokens.colorError, ";" + ("" ), "" ),
        children: jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread$8({}, messages.expired))
      })]
    })
  }));
};
const mapProjectsToOptions = memoize__default["default"](projects => _mapInstanceProperty__default["default"](projects).call(projects, project => ({
  key: project.key,
  name: project.name,
  label: project.name,
  value: project.key,
  suspension: project.suspension,
  expiry: project.expiry
})));
const CustomMenuList = props => {
  return jsxRuntime.jsx("div", {
    css: /*#__PURE__*/react$1.css("width:max-content;max-width:", designSystem.designTokens.constraint6, ";" + ("" ), "" ),
    children: jsxRuntime.jsx(reactSelect.components.MenuList, _objectSpread$8(_objectSpread$8({}, props), {}, {
      children: props.children
    }))
  });
};
const redirectTo = targetUrl => useIsServedByProxy.location.replace(targetUrl);
const ProjectSwitcher = props => {
  const intl = reactIntl.useIntl();
  const _useMcQuery = applicationShellConnectors.useMcQuery(ProjectsQuery, {
      onError: sentry.reportErrorToSentry,
      context: {
        target: constants.GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND
      }
    }),
    loading = _useMcQuery.loading,
    data = _useMcQuery.data;
  if (loading) return null;
  return jsxRuntime.jsxs("div", {
    children: [jsxRuntime.jsx(AccessibleHidden__default["default"], {
      children: jsxRuntime.jsx("span", {
        id: PROJECT_SWITCHER_LABEL_ID,
        children: jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread$8({}, messages.projectsLabel))
      })
    }), jsxRuntime.jsx(SelectInput__default["default"], {
      value: props.projectKey || '',
      name: "project-switcher",
      "aria-labelledby": PROJECT_SWITCHER_LABEL_ID,
      onChange: event => {
        const selectedProjectKey = event.target.value;
        if (selectedProjectKey !== props.projectKey) {
          var _window$app$__DEVELOP;
          if ((_window$app$__DEVELOP = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP !== void 0 && (_window$app$__DEVELOP = _window$app$__DEVELOP.oidc) !== null && _window$app$__DEVELOP !== void 0 && _window$app$__DEVELOP.authorizeUrl) {
            applicationShellConnectors.oidcStorage.setActiveProjectKey(selectedProjectKey);
          }

          // We simply redirect to a "new" browser page, instead of using the
          // history router. This will simplify a lot of things and avoid possible
          // problems like e.g. resetting the store/state.
          redirectTo("/".concat(selectedProjectKey));
        }
      },
      options: data && data.user && mapProjectsToOptions(data.user.projects.results),
      isOptionDisabled: option => {
        const project = option;
        return project.suspension.isActive || project.expiry.isActive;
      },
      components: {
        Option: ProjectSwitcherOption,
        ValueContainer,
        MenuList: CustomMenuList
      },
      isClearable: false,
      backspaceRemovesValue: false,
      placeholder: intl.formatMessage(messages.searchPlaceholder),
      noOptionsMessage: () => intl.formatMessage(messages.noResults),
      horizontalConstraint: 'auto'
    })]
  });
};
ProjectSwitcher.displayName = 'ProjectSwitcher';

// eslint-disable-next-line import/prefer-default-export
const REQUESTS_IN_FLIGHT_LOADER_DOM_ID = 'loader-for-requests-in-flight';

const UserSettingsMenu = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./user-settings-menu-2fa90966.cjs.prod.js' /* webpackChunkName: "user-settings-menu" */); }));

var _ref$1 = {
  name: "zjik7",
  styles: "display:flex"
} ;
var _ref2$1 = {
  name: "36bnqj",
  styles: "display:flex;flex:1"
} ;
const AppBar = props => {
  var _props$user$defaultPr, _props$user;
  const previousProjectKey = getPreviousProjectKey((_props$user$defaultPr = (_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.defaultProjectKey) !== null && _props$user$defaultPr !== void 0 ? _props$user$defaultPr : undefined);
  return jsxRuntime.jsxs("div", {
    css: /*#__PURE__*/react$1.css("background-color:", designSystem.designTokens.colorSurface, ";box-shadow:", applicationComponents.designTokens.shadowForAppbar, ";padding:0 40px;min-height:", oidc.DIMENSIONS.header, ";position:relative;width:100%;z-index:20000;display:flex;align-items:center;justify-content:space-between;" + ("" ), "" ),
    "data-test": "top-navigation",
    children: [jsxRuntime.jsx("div", {
      css: /*#__PURE__*/react$1.css("float:right;font-weight:normal;font-size:1rem;margin-right:", applicationComponents.designTokens.marginRightForAppbar, ";display:flex;align-items:center;" + ("" ), "" ),
      children: jsxRuntime.jsxs(Spacings__default["default"].Inline, {
        scale: "m",
        alignItems: "center",
        children: [jsxRuntime.jsxs(Spacings__default["default"].Inline, {
          scale: "m",
          alignItems: "center",
          children: [(() => {
            if (!props.user) {
              return jsxRuntime.jsx(LoadingPlaceholder, {
                shape: "rect",
                size: "s"
              });
            }
            // The `<ProjectSwitcher>` should be rendered only if the
            // user is fetched and the user has projects while the app runs in an project context.
            if (props.user.projects.total > 0 && props.projectKeyFromUrl) return jsxRuntime.jsx(ProjectSwitcher
            // In this case it's not necessary to check if the `projectKey` param
            // is included in the list of projects. In such case
            // the dropdown will still be rendered but no project will be selected.
            // This is fine becase the user has still the possibility to "switch"
            // to a project.
            , {
              projectKey: props.projectKeyFromUrl || previousProjectKey
            });
            if (!props.user.defaultProjectKey) return null;
            return jsxRuntime.jsx(BackToProject, {
              projectKey: previousProjectKey
            });
          })(), jsxRuntime.jsx("div", {
            id: oidc.CONTAINERS.LOCALE_SWITCHER
          })]
        }), jsxRuntime.jsx(Spacings__default["default"].Inline, {
          children: jsxRuntime.jsx("div", {
            id: REQUESTS_IN_FLIGHT_LOADER_DOM_ID,
            css: _ref2$1
          })
        })]
      })
    }), jsxRuntime.jsxs("div", {
      css: _ref$1,
      children: [jsxRuntime.jsx("div", {
        id: oidc.CONTAINERS.LEFT_OF_PROFILE
      }), props.user ? jsxRuntime.jsx(UserSettingsMenu, {
        language: props.user.language,
        firstName: props.user.firstName,
        lastName: props.user.lastName,
        gravatarHash: props.user.gravatarHash,
        email: props.user.email
      }) : jsxRuntime.jsx(LoadingPlaceholder, {
        shape: "dot",
        size: "l"
      })]
    })]
  });
};
AppBar.displayName = 'AppBar';

const ApplicationLoader = props => jsxRuntime.jsxs("div", {
  css: /*#__PURE__*/react$1.css("display:flex;align-items:center;justify-content:center;flex:1;flex-direction:column;height:100vh;padding:", designSystem.customProperties.spacingL, ";>*+*{margin:", designSystem.customProperties.spacingL, " 0 0;}" + ("" ), "" ),
  "data-testid": "application-loader",
  children: [jsxRuntime.jsx(LoadingSpinner__default["default"], {}), props.showLogo === true ? jsxRuntime.jsx("img", {
    alt: "commercetools logo",
    src: CTLogoSVG__default["default"]
  }) : null]
});
ApplicationLoader.displayName = 'ApplicationLoader';

const getBrowserHistory = () => history__default["default"];
const getBrowserLocale = win => {
  const browserLocale = win && win.navigator && win.navigator.language;
  return l10n.getSupportedLocale(browserLocale);
};

const hideAppLoader = () => {
  /**
   * NOTE:
   *   This function is defined in the `index.html` in a script-tag
   *   by the `html-template.js` in the `mc-scripts`. There are
   *   alternative ways of acheiving this namely:
   *   1. Using custom events and dispatching here
   *     - Not supported in IE11 and would need a polyfill
   *   2. Removing the DOM node here
   *     - Both `index.html` and this component would have to
   *       now the div's id/class. If one would change the index.html
   *       the app would never show (always show the loading screen)
   */
  if (window.onAppLoaded) window.onAppLoaded();
};
const ConfigureIntlProvider = props => {
  react.useEffect(() => {
    if (props.locale) {
      hideAppLoader();
    }
  }, [props.locale]);
  if (!props.locale) {
    return null;
  }
  return jsxRuntime.jsx(reactIntl.IntlProvider, {
    locale: props.locale,
    messages: props.messages,
    children: props.children
  });
};
ConfigureIntlProvider.propTypes = {};
ConfigureIntlProvider.displayName = 'ConfigureIntlProvider';

const ErrorApologizer = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./error-apologizer-84dc825c.cjs.prod.js' /* webpackChunkName: "error-apologizer" */); }));

var ProjectQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectKey" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "key" }, value: { kind: "Variable", name: { kind: "Name", value: "projectKey" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "version" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "countries" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "currencies" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "languages" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "initialized" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "expiry" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "daysLeft" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "suspension" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "reason" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedPermissions" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedActionRights" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedDataFences" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "StoreDataFence" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "__typename" }, arguments: [], directives: [] }] } }] } }, { kind: "Field", name: { kind: "Name", value: "allPermissionsForAllApplications" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "allAppliedPermissions" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedActionRights" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedMenuVisibilities" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedDataFences" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "StoreDataFence" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "__typename" }, arguments: [], directives: [] }] } }] } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "sampleDataImportDataset" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 1025, source: { body: "query FetchProject($projectKey: String) {\n  project(key: $projectKey) {\n    key\n    version\n    name\n    countries\n    currencies\n    languages\n    initialized\n    expiry {\n      isActive\n      daysLeft\n    }\n    suspension {\n      isActive\n      reason\n    }\n    allAppliedPermissions {\n      name\n      value\n    }\n    allAppliedActionRights {\n      group\n      name\n      value\n    }\n    allAppliedDataFences {\n      ... on StoreDataFence {\n        type\n        name\n        value\n        group\n        __typename\n      }\n    }\n    allPermissionsForAllApplications {\n      allAppliedPermissions {\n        name\n        value\n      }\n      allAppliedActionRights {\n        group\n        name\n        value\n      }\n      allAppliedMenuVisibilities {\n        name\n        value\n      }\n      allAppliedDataFences {\n        ... on StoreDataFence {\n          type\n          name\n          value\n          group\n          __typename\n        }\n      }\n    }\n    owner {\n      id\n      name\n    }\n    sampleDataImportDataset\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const FetchProject = props => {
  const _useMcQuery = applicationShellConnectors.useMcQuery(ProjectQuery, {
      onError: sentry.reportErrorToSentry,
      variables: {
        projectKey: props.projectKey
      },
      context: {
        target: constants.GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND
      },
      skip: props.skip === true
    }),
    loading = _useMcQuery.loading,
    data = _useMcQuery.data,
    error = _useMcQuery.error;
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: props.children({
      isLoading: loading,
      error,
      project: data && data.project
    })
  });
};
FetchProject.propTypes = {
  projectKey: _pt__default["default"].string,
  skip: _pt__default["default"].bool,
  children: _pt__default["default"].func.isRequired
};
FetchProject.displayName = 'FetchProject';

var LoggedInUserQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchLoggedInUser" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", alias: { kind: "Name", value: "user" }, name: { kind: "Name", value: "me" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "email" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "createdAt" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "gravatarHash" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "firstName" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "lastName" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "language" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "numberFormat" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "timeZone" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingId" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingGroup" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingSubgroup" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingTeam" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingTenant" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "defaultProjectKey" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "businessRole" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "total" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "results" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "suspension" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "expiry" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }] } }] } }] } }, { kind: "Field", name: { kind: "Name", value: "idTokenUserInfo" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "iss" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "sub" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "aud" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "exp" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "iat" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "email" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "additionalClaims" }, arguments: [], directives: [] }] } }] } }] } }], loc: { start: 0, end: 654, source: { body: "query FetchLoggedInUser {\n  user: me {\n    id\n    email\n    createdAt\n    gravatarHash\n    firstName\n    lastName\n    language\n    numberFormat\n    timeZone\n    launchdarklyTrackingId\n    launchdarklyTrackingGroup\n    launchdarklyTrackingSubgroup\n    launchdarklyTrackingTeam\n    launchdarklyTrackingTenant\n    defaultProjectKey\n    businessRole\n    projects {\n      total\n      results {\n        name\n        key\n        suspension {\n          isActive\n        }\n        expiry {\n          isActive\n        }\n      }\n    }\n    idTokenUserInfo {\n      iss\n      sub\n      aud\n      exp\n      iat\n      email\n      name\n      additionalClaims\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const FetchUser = props => {
  const _useMcQuery = applicationShellConnectors.useMcQuery(LoggedInUserQuery, {
      onError: sentry.reportErrorToSentry,
      context: {
        target: constants.GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND
      }
    }),
    loading = _useMcQuery.loading,
    data = _useMcQuery.data,
    error = _useMcQuery.error;
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: props.children({
      isLoading: loading,
      user: data && data.user,
      error
    })
  });
};
FetchUser.propTypes = {
  children: _pt__default["default"].func.isRequired
};
FetchUser.displayName = 'FetchUser';

const Navbar = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./navbar-969b25dc.cjs.prod.js' /* webpackChunkName: "navbar" */); }));

const ProjectContainer = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./project-container-30f9d73a.cjs.prod.js' /* webpackChunkName: "project-container" */); }));

const getSelectedDataLocaleForProject = projectLocales => {
  const cachedDataLocale = window.localStorage.getItem(constants.STORAGE_KEYS.SELECTED_DATA_LOCALE);
  // Make sure the cached locale is listed in the selected project
  const isCachedDataLocaleIncludedInProjectLanguages = _includesInstanceProperty__default["default"](projectLocales).call(projectLocales, cachedDataLocale || '');
  if (cachedDataLocale && isCachedDataLocaleIncludedInProjectLanguages) return cachedDataLocale;
  // Pick the first locale from the list
  const defaultDataLocaleForProject = projectLocales[0];
  // Cache it
  window.localStorage.setItem(constants.STORAGE_KEYS.SELECTED_DATA_LOCALE, defaultDataLocaleForProject);
  return defaultDataLocaleForProject;
};
const ProjectDataLocale = props => {
  const _useState = react.useState(getSelectedDataLocaleForProject(props.locales)),
    _useState2 = _slicedToArray(_useState, 2),
    locale = _useState2[0],
    setLocale = _useState2[1];
  const handleSetProjectDataLocale = react.useCallback(locale => {
    setLocale(locale);
    // Cache it
    window.localStorage.setItem(constants.STORAGE_KEYS.SELECTED_DATA_LOCALE, locale);
  }, []);
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: props.children({
      locale,
      setProjectDataLocale: handleSetProjectDataLocale
    })
  });
};
ProjectDataLocale.propTypes = {
  locales: _pt__default["default"].arrayOf(_pt__default["default"].string).isRequired,
  children: _pt__default["default"].func.isRequired
};
ProjectDataLocale.displayName = 'ProjectDataLocale';

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct__default["default"](Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct__default["default"]) return false; if (_Reflect$construct__default["default"].sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct__default["default"](Boolean, [], function () {})); return true; } catch (e) { return false; } }
let ErrorBoundary = /*#__PURE__*/function (_Component) {
  _inherits(ErrorBoundary, _Component);
  var _super = _createSuper(ErrorBoundary);
  function ErrorBoundary() {
    var _this;
    _classCallCheck(this, ErrorBoundary);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call(this, ...args);
    _this.state = {
      hasError: false
    };
    return _this;
  }
  _createClass(ErrorBoundary, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      const hasRouteChanged = prevProps.pathname !== this.props.pathname;
      this.setState(prevState => hasRouteChanged && prevState.hasError ? {
        hasError: false
      } : null);
    }
  }, {
    key: "componentDidCatch",
    value: function componentDidCatch(error, errorInfo) {
      // Note: In development mode componentDidCatch is not based on try-catch
      // to catch exceptions. Thus exceptions caught here will also be caught in
      // the global `error` event listener (setup-global-error-listener.js).
      // see: https://github.com/facebook/react/issues/10474
      sentry.reportErrorToSentry(error, {
        extra: errorInfo
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.hasError) {
        return jsxRuntime.jsx(ErrorApologizer, {});
      }
      return jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: this.props.children
      });
    }
  }], [{
    key: "getDerivedStateFromError",
    value: function getDerivedStateFromError( /* error */
    ) {
      // Update state so the next render will show the fallback UI.
      return {
        hasError: true
      };
    }
  }]);
  return ErrorBoundary;
}(react.Component);
ErrorBoundary.propTypes = {};

const ButlerContainer = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e1fuwyk10"
} )({
  name: "xvk698",
  styles: "position:absolute;left:0;bottom:0;top:0;right:0;background-color:rgba(0, 0, 0, 0.35);z-index:20001"
} );

var pimIndexerStates = {
  // we did not check yet
  UNCHECKED: 'UNCHECKED',
  // the project is indexed by pim-indexer
  INDEXED: 'INDEXED',
  // the project is not indexed by pim-indexer
  NOT_INDEXED: 'NOT_INDEXED'
};

const QuickAccess = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./quick-access-8c1421d2.cjs.prod.js' /* webpackChunkName: "quick-access" */); }));

const QuickAccessTrigger = props => {
  const _useState = react.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isVisible = _useState2[0],
    setIsVisible = _useState2[1];
  const open = react.useCallback(() => {
    setIsVisible(true);
  }, []);
  const close = react.useCallback(() => {
    setIsVisible(false);
  }, []);
  // We store the information of whether a project is indexed by pim-indexer,
  // to avoid having to refetch that information every time Quick Access is
  // opened. We can't move the information to the quick-access.js component
  // as that component unmounts and would lose its state.
  //
  // We need to know whether a project is indexed by pim-indexer to know
  // whether we should query pim-search or whether we can skip that request.
  //
  // We don't need to update this information when the project key changes,
  // as changing a project always results in a full page reload anyways.
  const _useState3 = react.useState(pimIndexerStates.UNCHECKED),
    _useState4 = _slicedToArray(_useState3, 2),
    pimIndexerState = _useState4[0],
    setPimIndexerState = _useState4[1];
  const handlePimIndexerStateChange = react.useCallback(nextPimIndexerState => {
    setPimIndexerState(nextPimIndexerState);
  }, []);
  const keyHandler = react.useCallback(event => {
    const hotKey = 'f';
    // avoid interfering with any key combinations using modifier keys
    if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) return;

    // Let users close QuickAccess by pressing Escape
    if (event.key === 'Escape' && event.target.id === 'quick-access-search-input') {
      close();
      return;
    }

    // Avoid interfering with any other elements. We only
    // open the QuickAccess when nothing was focused, so target is document.body
    if (event.target !== document.body &&
    // tabIndex="-1" has a special meaning
    // It will make the element focusable, while hiding it from the
    // navigation. It is typically used for modals and overlays.
    // react-modal uses it for example. We want to treat those elements
    // similar to document.body.
    // See https://stackoverflow.com/a/32912224
    event.target.getAttribute('tabindex') !== '-1' &&
    // Do not prevent Quick Access from opening when a link has focus
    event.target.nodeName !== 'A') return;
    if (event.key === hotKey) {
      if (!isVisible) {
        // prevent the letter from appearing in the search input when
        // it is the key press that lead to opening Quick Access
        event.preventDefault();
      }
      open();
    }
    return;
  }, [close, isVisible, open]);
  react.useEffect(() => {
    document.addEventListener('keydown', keyHandler);
    return () => {
      document.removeEventListener('keydown', keyHandler);
    };
  }, [keyHandler]);
  if (!isVisible) return null;
  return jsxRuntime.jsx(ErrorBoundary, {
    children: jsxRuntime.jsx(react.Suspense, {
      fallback: jsxRuntime.jsx(ButlerContainer, {
        tabIndex: -1
      }),
      children: jsxRuntime.jsx(QuickAccess, {
        pimIndexerState: pimIndexerState,
        onPimIndexerStateChange: handlePimIndexerStateChange,
        onClose: close,
        onChangeProjectDataLocale: props.onChangeProjectDataLocale
      })
    })
  });
};
QuickAccessTrigger.propTypes = {};
QuickAccessTrigger.displayName = 'QuickAccessTrigger';

const RedirectToLogout = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./redirect-to-logout-ca5f1840.cjs.prod.js' /* webpackChunkName: "redirect-to-logout" */); }));

const RedirectToProjectCreate = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./redirect-to-project-create-2266c427.cjs.prod.js' /* webpackChunkName: "redirect-to-project-create" */); }));

function ownKeys$7(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$7(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$7(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
var FetchAllMenuFeatureToggles = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchAllMenuFeatureToggles" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "allFeatureToggles" }, arguments: [], directives: [] }] } }], loc: { start: 0, end: 57, source: { body: "query FetchAllMenuFeatureToggles {\n  allFeatureToggles\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const defaultApiUrl = window.location.origin;
const getDefaultedFeatureToggles = allFeatureToggles => _reduceInstanceProperty__default["default"](allFeatureToggles).call(allFeatureToggles, (previouslyDefaultedFeatureToggles, nextFeatureToggle) => _objectSpread$7(_objectSpread$7({}, previouslyDefaultedFeatureToggles), {}, {
  [nextFeatureToggle]: false
}), {});
const useAllMenuFeatureToggles = () => {
  const servedByProxy = useIsServedByProxy.useIsServedByProxy();
  const mcProxyApiUrl = applicationShellConnectors.useApplicationContext(applicationContext => applicationContext.environment.mcProxyApiUrl);
  const _useMcQuery = applicationShellConnectors.useMcQuery(FetchAllMenuFeatureToggles, {
      fetchPolicy: 'cache-and-network',
      skip: !servedByProxy,
      onError: sentry.reportErrorToSentry,
      context: {
        uri: "".concat(mcProxyApiUrl || defaultApiUrl, "/api/graphql"),
        skipGraphQlTargetCheck: true
      }
    }),
    data = _useMcQuery.data,
    refetch = _useMcQuery.refetch,
    loading = _useMcQuery.loading;
  return {
    isLoading: loading,
    refetch,
    allFeatureToggles: data && getDefaultedFeatureToggles(data.allFeatureToggles) || {}
  };
};

function ownKeys$6(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys$6(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys$6(Object(t))).call(_context3, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
var AllFeaturesQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "AllFeatures" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "allFeatures" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "reason" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 72, source: { body: "query AllFeatures {\n  allFeatures {\n    name\n    value\n    reason\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
// This value is hard-coded here because we want to make sure that the
// app uses our account of LD. The value is meant to be public, so there
// is no need to be concerned about security.
const ldClientSideIdProduction = '5979d95f6040390cd07b5e01';
function getUserContextForLaunchDarklyAdapter(user, projectKey) {
  var _user$launchdarklyTra, _user$launchdarklyTra2, _user$launchdarklyTra3, _user$launchdarklyTra4, _user$launchdarklyTra5;
  return {
    kind: 'user',
    key: user === null || user === void 0 ? void 0 : user.id,
    project: projectKey !== null && projectKey !== void 0 ? projectKey : '',
    id: (_user$launchdarklyTra = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingId) !== null && _user$launchdarklyTra !== void 0 ? _user$launchdarklyTra : '',
    team: (_user$launchdarklyTra2 = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingTeam) !== null && _user$launchdarklyTra2 !== void 0 ? _user$launchdarklyTra2 : [],
    group: (_user$launchdarklyTra3 = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingGroup) !== null && _user$launchdarklyTra3 !== void 0 ? _user$launchdarklyTra3 : '',
    subgroup: (_user$launchdarklyTra4 = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingSubgroup) !== null && _user$launchdarklyTra4 !== void 0 ? _user$launchdarklyTra4 : '',
    tenant: (_user$launchdarklyTra5 = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingTenant) !== null && _user$launchdarklyTra5 !== void 0 ? _user$launchdarklyTra5 : ''
  };
}
const parseFlags = fetchedFlags => {
  var _context;
  return _Object$fromEntries__default["default"](_mapInstanceProperty__default["default"](_context = fetchedFlags.allFeatures).call(_context, fetchedFlag => [fetchedFlag.name, {
    value: fetchedFlag.value,
    reason: fetchedFlag.reason
  }]));
};
const SetupFlopFlipProvider = props => {
  const apolloClient = react$2.useApolloClient();
  const enableLongLivedFeatureFlags = applicationShellConnectors.useApplicationContext(context => context.environment.enableLongLivedFeatureFlags);
  const allMenuFeatureToggles = useAllMenuFeatureToggles();
  const flags = react.useMemo(() => _objectSpread$6(_objectSpread$6(_objectSpread$6({}, constants.featureFlags.FLAGS), allMenuFeatureToggles.allFeatureToggles), _flagsInstanceProperty__default["default"](props)), [allMenuFeatureToggles.allFeatureToggles, _flagsInstanceProperty__default["default"](props)]);
  react.useMemo(() => {
    if (enableLongLivedFeatureFlags) {
      combineAdapters__default["default"].combine([ldAdapter__default["default"], httpAdapter__default["default"]]);
    } else {
      combineAdapters__default["default"].combine([ldAdapter__default["default"]]);
    }
  }, [enableLongLivedFeatureFlags]);
  const defaultFlags = react.useMemo(() => _objectSpread$6(_objectSpread$6(_objectSpread$6({}, constants.featureFlags.FLAGS), allMenuFeatureToggles.allFeatureToggles), props.defaultFlags), [allMenuFeatureToggles.allFeatureToggles, props.defaultFlags]);
  const adapterArgs = react.useMemo(() => {
    var _props$user, _props$ldClientSideId, _props$user2;
    return {
      user: {
        key: (_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.id
      },
      launchdarkly: {
        sdk: {
          // Allow to overwrite the client ID, passed via the `additionalEnv` properties
          // of the application config.
          // This is mostly useful for internal usage on our staging environments.
          clientSideId: (_props$ldClientSideId = props.ldClientSideId) !== null && _props$ldClientSideId !== void 0 ? _props$ldClientSideId : ldClientSideIdProduction
        },
        flags,
        context: getUserContextForLaunchDarklyAdapter(props.user, props.projectKey)
      },
      http: {
        user: {
          key: (_props$user2 = props.user) === null || _props$user2 === void 0 ? void 0 : _props$user2.id
        },
        execute: async function () {
          const response = await apolloClient.query({
            query: AllFeaturesQuery,
            errorPolicy: 'ignore',
            context: {
              target: constants.GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND
            }
          });
          return parseFlags(response.data);
        }
      }
    };
  }, [apolloClient, flags, props.ldClientSideId, props.projectKey, props.user]);
  return jsxRuntime.jsx(reactBroadcast.ConfigureFlopFlip, {
    adapter: combineAdapters__default["default"],
    adapterArgs: adapterArgs,
    defaultFlags: defaultFlags,
    shouldDeferAdapterConfiguration: typeof props.shouldDeferAdapterConfiguration === 'boolean' ? props.shouldDeferAdapterConfiguration : !props.user || allMenuFeatureToggles.isLoading,
    children: props.children
  });
};
SetupFlopFlipProvider.propTypes = {};
SetupFlopFlipProvider.displayName = 'SetupFlopFlipProvider';

const ThemeSwitcher = () => {
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: jsxRuntime.jsx(designSystem.ThemeProvider, {
      theme: "default",
      themeOverrides: applicationComponents.themesOverrides.default
    })
  });
};

const VersionTracker = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./version-tracker-7bef59f4.cjs.prod.js' /* webpackChunkName: "version-tracker" */); }));

function ownKeys$5(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys$5(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys$5(Object(t))).call(_context3, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const getHasUnauthorizedError = graphQLErrors => _findInstanceProperty__default["default"](graphQLErrors).call(graphQLErrors, gqlError => gqlError.extensions && gqlError.extensions.code && gqlError.extensions.code === 'UNAUTHENTICATED');
const getHasUserBeenDeletedError = graphQLErrors => _findInstanceProperty__default["default"](graphQLErrors).call(graphQLErrors, gqlError => {
  var _context;
  return gqlError.message &&
  // NOTE: The CTP API does not provide an error code in this case.
  _includesInstanceProperty__default["default"](_context = gqlError.message).call(_context, 'was not found.');
});
const MainContainer = /*#__PURE__*/_styled__default["default"]("main", {
  target: "esrtekc0"
} )({
  name: "evthls",
  styles: "grid-column:2/3;grid-row:3/4;min-width:0;overflow-x:hidden;overflow-y:scroll;display:flex;flex-direction:column;position:relative"
} );

/**
 * This component is rendered whenever the user is considered "authenticated"
 * and contains the "restricted" application part.
 */
var _ref = {
  name: "tlwzvn",
  styles: "flex-grow:1;display:flex;flex-direction:column;position:relative;>*:not(:first-of-type){flex-grow:1;display:flex;flex-direction:column;}"
} ;
var _ref2 = {
  name: "lzrvov",
  styles: "grid-column:1/2;grid-row:2/4;overflow:hidden"
} ;
var _ref3 = {
  name: "tjbz3t",
  styles: "grid-row:'2/3';grid-column:'2/3'"
} ;
var _ref4 = {
  name: "8bdwu0",
  styles: "grid-row:1;grid-column:1/3"
} ;
const ApplicationShellAuthenticated = props => {
  const applicationEnvironment = applicationShellConnectors.useApplicationContext(context => context.environment);
  // TODO: using this hook will subscribe the component to route updates.
  // This is currently useful for detecting a change in the project key
  // from URL ("/" --> "/:projectKey").
  // However, every route change will trigger a re-render. This is probably
  // ok-ish but we might want to look into a more performant solution.
  const location = reactRouterDom.useLocation();
  const notificationsGlobalRef = react.useRef(null);
  const notificationsPageRef = react.useRef(null);
  const layoutRefs = react.useRef({
    notificationsGlobalRef,
    notificationsPageRef
  });
  return jsxRuntime.jsx(FetchUser, {
    children: _ref5 => {
      let isLoadingUser = _ref5.isLoading,
        user = _ref5.user,
        error = _ref5.error;
      if (error) {
        // In case there is an unauthorized error, we redirect to the login page
        if (error.graphQLErrors && _Array$isArray__default["default"](error.graphQLErrors)) {
          const hasUnauthorizedError = getHasUnauthorizedError(error.graphQLErrors);
          const hasUserBeenDeletedError = getHasUserBeenDeletedError(error.graphQLErrors);
          if (hasUnauthorizedError || hasUserBeenDeletedError) {
            let logoutReason;
            if (hasUnauthorizedError) logoutReason = constants.LOGOUT_REASONS.UNAUTHORIZED;else if (hasUserBeenDeletedError) logoutReason = constants.LOGOUT_REASONS.DELETED;
            return jsxRuntime.jsx(RedirectToLogout, {
              reason: logoutReason
            });
          }
        }
        // Since we do not know the locale of the user, we pick it from the
        // user's browser to attempt to match the language for the correct translations.
        const userLocale = getBrowserLocale(window);
        return jsxRuntime.jsx(i18n.AsyncLocaleData, {
          locale: userLocale,
          applicationMessages: props.applicationMessages,
          children: _ref6 => {
            let locale = _ref6.locale,
              messages = _ref6.messages;
            sentry.reportErrorToSentry(error, {});
            return jsxRuntime.jsx(ConfigureIntlProvider, {
              locale: locale,
              messages: messages,
              children: jsxRuntime.jsx(ErrorApologizer, {})
            });
          }
        });
      }
      const projectKeyFromUrl = applicationShellConnectors.selectProjectKeyFromUrl(location.pathname);
      return jsxRuntime.jsx(applicationShellConnectors.ApplicationContextProvider, {
        user: user,
        environment: applicationEnvironment,
        children: jsxRuntime.jsx(i18n.AsyncLocaleData, {
          locale: user === null || user === void 0 ? void 0 : user.language,
          applicationMessages: props.applicationMessages,
          children: _ref7 => {
            let isLoadingLocaleData = _ref7.isLoading,
              locale = _ref7.locale,
              messages = _ref7.messages;
            return jsxRuntime.jsx(ConfigureIntlProvider
            // We do not want to pass the language as long as the locale data
            // is not loaded.
            , _objectSpread$5(_objectSpread$5({}, isLoadingLocaleData ? {} : {
              locale,
              messages
            }), {}, {
              children: jsxRuntime.jsx(SetupFlopFlipProvider, {
                user: user,
                projectKey: projectKeyFromUrl,
                ldClientSideId: applicationEnvironment.ldClientSideId,
                flags: props.featureFlags,
                defaultFlags: props.defaultFeatureFlags,
                children: jsxRuntime.jsxs(jsxRuntime.Fragment, {
                  children: [jsxRuntime.jsx(ThemeSwitcher, {}), jsxRuntime.jsx(VersionTracker, {}), jsxRuntime.jsx(RequestsInFlightLoader, {}), jsxRuntime.jsx(sentry.SentryUserTracker, {
                    user: user !== null && user !== void 0 ? user : undefined
                  }), jsxRuntime.jsxs("div", {
                    css: /*#__PURE__*/react$1.css("height:100vh;display:grid;grid-template-rows:auto ", oidc.DIMENSIONS.header, " 1fr;grid-template-columns:min-content 1fr;" + ("" ), "" ),
                    children: [jsxRuntime.jsxs("div", {
                      ref: notificationsGlobalRef,
                      role: "region",
                      "aria-live": "polite",
                      css: _ref4,
                      children: [jsxRuntime.jsx("div", {
                        id: "above-top-navigation"
                      }), jsxRuntime.jsx(reactNotifications.NotificationsList, {
                        domain: constants.DOMAINS.GLOBAL
                      })]
                    }), jsxRuntime.jsx(reactRouterDom.Route, {
                      children: () => {
                        if (!projectKeyFromUrl) return jsxRuntime.jsx(QuickAccessTrigger, {});
                        return jsxRuntime.jsx(FetchProject, {
                          projectKey: projectKeyFromUrl,
                          children: _ref8 => {
                            let isProjectLoading = _ref8.isLoading,
                              project = _ref8.project;
                            if (isProjectLoading || !project) return null;

                            // when used outside of a project context,
                            // or when the project is expired or supsended
                            const shouldUseProjectContext = !(project.suspension && project.suspension.isActive || project.expiry && project.expiry.isActive);
                            if (!shouldUseProjectContext) return jsxRuntime.jsx(QuickAccessTrigger, {});
                            return jsxRuntime.jsx(ProjectDataLocale, {
                              locales: project.languages,
                              children: _ref9 => {
                                let dataLocale = _ref9.locale,
                                  setProjectDataLocale = _ref9.setProjectDataLocale;
                                return jsxRuntime.jsx(applicationShellConnectors.ApplicationContextProvider, {
                                  user: user,
                                  project: project,
                                  projectDataLocale: dataLocale,
                                  environment: applicationEnvironment,
                                  children: jsxRuntime.jsx(QuickAccessTrigger, {
                                    onChangeProjectDataLocale: setProjectDataLocale
                                  })
                                });
                              }
                            });
                          }
                        });
                      }
                    }), jsxRuntime.jsx("header", {
                      css: _ref3,
                      children: jsxRuntime.jsx(AppBar, {
                        user: user,
                        projectKeyFromUrl: projectKeyFromUrl
                      })
                    }), jsxRuntime.jsx("aside", {
                      css: _ref2,
                      children: (() => {
                        // The <NavBar> should only be rendered within a project
                        // context, therefore when there is a `projectKey`.
                        // If there is no `projectKey` in the URL (e.g. `/account`
                        // routes), we don't render it.
                        // NOTE: we also "cache" the `projectKey` in localStorage
                        // but this should only be used to "re-hydrate" the URL
                        // location (e.g when you go to `/`, there should be a
                        // redirect to `/:projectKey`). Therefore, we should not
                        // rely on the value in localStorage to determine which
                        // `projectKey` is currently used.
                        if (!projectKeyFromUrl) return null;
                        return jsxRuntime.jsx(FetchProject, {
                          projectKey: projectKeyFromUrl,
                          children: _ref10 => {
                            let isLoadingProject = _ref10.isLoading,
                              project = _ref10.project;
                            const isLoading = isLoadingUser || isLoadingLocaleData || isLoadingProject || !locale || !project;
                            return jsxRuntime.jsx(applicationShellConnectors.ApplicationContextProvider, {
                              user: user,
                              environment: applicationEnvironment
                              // NOTE: do not pass the `project` into the application context.
                              // The permissions for the Navbar are resolved separately, within
                              // a different React context.
                              ,
                              children: jsxRuntime.jsx(Navbar, {
                                applicationLocale: locale,
                                projectKey: projectKeyFromUrl,
                                project: project,
                                environment: applicationEnvironment,
                                onMenuItemClick: props.onMenuItemClick,
                                isLoading: isLoading
                              })
                            });
                          }
                        });
                      })()
                    }), isLoadingUser || isLoadingLocaleData ? jsxRuntime.jsx(MainContainer, {
                      role: "main",
                      children: jsxRuntime.jsx(ApplicationLoader, {})
                    }) : jsxRuntime.jsxs(MainContainer, {
                      role: "main",
                      children: [jsxRuntime.jsx("div", {
                        ref: notificationsPageRef,
                        children: jsxRuntime.jsx(reactNotifications.NotificationsList, {
                          domain: constants.DOMAINS.PAGE
                        })
                      }), jsxRuntime.jsx(reactNotifications.NotificationsList, {
                        domain: constants.DOMAINS.SIDE
                      }), jsxRuntime.jsxs("div", {
                        css: _ref,
                        children: [jsxRuntime.jsx(applicationComponents.PortalsContainer
                        // @ts-ignore
                        , {
                          ref: layoutRefs,
                          offsetTop: oidc.DIMENSIONS.header,
                          offsetLeft: projectKeyFromUrl ? oidc.DIMENSIONS.navMenu : '0px',
                          offsetLeftOnExpandedMenu: projectKeyFromUrl ? oidc.DIMENSIONS.navMenuExpanded : '0px'
                        }), jsxRuntime.jsxs(reactRouterDom.Switch, {
                          children: [jsxRuntime.jsx(reactRouterDom.Redirect, {
                            from: "/profile",
                            to: "/account/profile"
                          }), jsxRuntime.jsx(reactRouterDom.Route, {
                            path: "/account",
                            children:
                            /**
                             * In case the AppShell uses the `render` function, we assume it's one of two cases:
                             * 1. The application does not use `children` and therefore implements the routes including
                             * the <RouteCatchAll> (this is the "legacy" behavior).
                             * 2. It's the account application, which always uses `render` and therefore should render as normal.
                             *
                             * In case the AppShell uses the `children` function, we can always assume that
                             * it's a normal Custom Application and that it should trigger a force reload.
                             */
                            props.render ? jsxRuntime.jsx(jsxRuntime.Fragment, {
                              children: props.render()
                            }) : jsxRuntime.jsx(index.RouteCatchAll, {})
                          }), jsxRuntime.jsx(reactRouterDom.Route, {
                            exact: true,
                            path: "/",
                            children: (_user$defaultProjectK => {
                              const previousProjectKey = getPreviousProjectKey((_user$defaultProjectK = user === null || user === void 0 ? void 0 : user.defaultProjectKey) !== null && _user$defaultProjectK !== void 0 ? _user$defaultProjectK : undefined);

                              /**
                               * NOTE:
                               *   Given the user has not been loaded a loading spinner is shown.
                               *   Given the user was not working on a project previously nor has a default
                               *   project, the user will be prompted to create one.
                               *   Given the user was working on a project previously or has a default
                               *   project, the application will redirect to that project.
                               */
                              if (!user) return jsxRuntime.jsx(ApplicationLoader, {});
                              if (!previousProjectKey) return jsxRuntime.jsx(RedirectToProjectCreate, {});
                              return jsxRuntime.jsx(reactRouterDom.Redirect, {
                                to: "/".concat(previousProjectKey)
                              });
                            })()
                          }), jsxRuntime.jsx(reactRouterDom.Route, {
                            exact: false,
                            path: "/:projectKey",
                            children: jsxRuntime.jsx(ProjectContainer, {
                              user: user,
                              environment: applicationEnvironment,
                              disableRoutePermissionCheck: props.disableRoutePermissionCheck
                              // This effectively renders the
                              // children, which is the application
                              // specific part
                              ,
                              render: props.render,
                              children: props.children
                            })
                          })]
                        })]
                      })]
                    })]
                  })]
                })
              })
            }));
          }
        })
      });
    }
  });
};
ApplicationShellAuthenticated.propTypes = {};
ApplicationShellAuthenticated.displayName = 'ApplicationShellAuthenticated';

const maxTitleCharLength = 24;
const staticPaths = ['account', 'login'];
const defaultProps$1 = {
  additionalParts: []
};
const getPageTitle = (pathname, additionalParts) => {
  const _pathname$split = pathname.split('/'),
    _pathname$split2 = _slicedToArray(_pathname$split, 3),
    projectKeyOrStaticPath = _pathname$split2[1],
    entryPointUriPath = _pathname$split2[2];
  const customTitleParts = _mapInstanceProperty__default["default"](additionalParts).call(additionalParts, titlePart => {
    if (titlePart.length <= maxTitleCharLength) {
      return titlePart;
    }
    return [_sliceInstanceProperty__default["default"](titlePart).call(titlePart, 0, maxTitleCharLength / 2), _sliceInstanceProperty__default["default"](titlePart).call(titlePart, titlePart.length - maxTitleCharLength / 2)].join('...');
  });
  if (_includesInstanceProperty__default["default"](staticPaths).call(staticPaths, projectKeyOrStaticPath)) {
    return [...(customTitleParts || []), upperFirst__default["default"](projectKeyOrStaticPath), 'Merchant Center'].join(' - ');
  }
  return [...(customTitleParts || []), upperFirst__default["default"](entryPointUriPath), projectKeyOrStaticPath, 'Merchant Center'].join(' - ');
};
const ApplicationPageTitle = props => {
  const location = reactRouterDom.useLocation();
  react.useLayoutEffect(() => {
    const pageTitle = getPageTitle(location.pathname, props.additionalParts);
    document.title = pageTitle;
  }, [location.pathname, props.additionalParts]);
  return null;
};
ApplicationPageTitle.propTypes = {
  additionalParts: _pt__default["default"].arrayOf(_pt__default["default"].string).isRequired
};
ApplicationPageTitle.displayName = 'ApplicationPageTitle';
ApplicationPageTitle.defaultProps = defaultProps$1;

function ownKeys$4(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$4(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$4(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const SuspendedRoute = props => jsxRuntime.jsx(reactRouterDom.Route, _objectSpread$4(_objectSpread$4({}, props), {}, {
  children: jsxRuntime.jsx(react.Suspense, {
    fallback: jsxRuntime.jsx(LoadingSpinner__default["default"], {}),
    children: props.children
  })
}));
SuspendedRoute.displayName = 'SuspendedRoute';

var AmILoggedInQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "AmILoggedIn" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "amILoggedIn" }, arguments: [], directives: [] }] } }], loc: { start: 0, end: 36, source: { body: "query AmILoggedIn {\n  amILoggedIn\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const AmILoggedIn = props => {
  // ...otherwise, we ping a "secured" endpoint in the MC API to see if there is
  // a valid access token. If we get an error, we assume that the user is not
  // authenticated. If we don't get any error, the access token sent with the cookie
  // is valid. We return null while the query is loading.
  const _useMcQuery = applicationShellConnectors.useMcQuery(AmILoggedInQuery, {
      context: {
        target: constants.GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND,
        skipTokenRetry: true
      },
      // NOTE: With `no-cache` the `useQuery` will not trigger a
      // re-render of the `AmILoggedIn` component. Relying on a default
      // fetch policy results in rendering the component without refetching the data
      // which as a result unmounts child components (such as an application).
      //
      // For example:
      // Given the user not authenticated
      // Then the first pass of useQuery returns an exptected error
      // Given the query is triggered again (through `useQuery`)
      // Then the component will re-render
      // Resulting in inconsistent data with the error not being defined
      fetchPolicy: 'no-cache',
      onCompleted: data => {
        if (!data) {
          // In case the request is 200 but there is no data, we assume
          // there are some errors.
          window.localStorage.removeItem(constants.STORAGE_KEYS.IS_AUTHENTICATED);
        } else {
          // Even though the login page might set this flag, we just make sure that
          // we do it here as well. This will help in the future when we eventually
          // move the auth service to itw own domain, in which case the local storage
          // is not shared anymore.
          window.localStorage.setItem(constants.STORAGE_KEYS.IS_AUTHENTICATED, String(true));
        }
      },
      onError: () => {
        // The query fails without the `mcAccessToken`. In this case the caching
        // needs to be unset as otherwise the application will end up in a infinte
        // redirect loop.
        window.localStorage.removeItem(constants.STORAGE_KEYS.IS_AUTHENTICATED);
      }
    }),
    data = _useMcQuery.data,
    loading = _useMcQuery.loading,
    error = _useMcQuery.error;
  if (error) {
    // No matter what error, we consider it as a failed authentication
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
      children: props.render({
        isAuthenticated: false
      })
    });
  }
  if (!loading && data && data.amILoggedIn) {
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
      children: props.render({
        isAuthenticated: true
      })
    });
  }
  return null;
};
AmILoggedIn.displayName = 'AmILoggedIn';

const withoutProjectKeyClaim = scope => {
  var _context;
  return _filterInstanceProperty__default["default"](_context = scope.split(' ')).call(_context, claim => !_startsWithInstanceProperty__default["default"](claim).call(claim, oidc.OIDC_CLAIMS.PROJECT_KEY)).join(' ');
};
const hasCachedAuthenticationState = () => {
  var _window$app$__DEVELOP;
  if ((_window$app$__DEVELOP = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP !== void 0 && (_window$app$__DEVELOP = _window$app$__DEVELOP.oidc) !== null && _window$app$__DEVELOP !== void 0 && _window$app$__DEVELOP.authorizeUrl) {
    try {
      var _window$app$__DEVELOP5, _window$app$__DEVELOP6, _window$app$__DEVELOP7, _window$app$__DEVELOP8;
      const activeProjectKey = applicationShellConnectors.oidcStorage.getActiveProjectKey();
      if (activeProjectKey) {
        var _window$app$__DEVELOP2;
        // GIVEN The application is not requesting a project key,
        // THEN we assume that the application does not need a project context.
        // GIVEN The application is not requesting a project key,
        // THEN we remove the cached project key.
        // This is the case of an application like `account`.
        if (!((_window$app$__DEVELOP2 = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP2 !== void 0 && (_window$app$__DEVELOP2 = _window$app$__DEVELOP2.oidc) !== null && _window$app$__DEVELOP2 !== void 0 && _window$app$__DEVELOP2.initialProjectKey)) {
          applicationShellConnectors.oidcStorage.removeActiveProjectKey();
        }
      } else {
        var _window$app$__DEVELOP3;
        if ((_window$app$__DEVELOP3 = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP3 !== void 0 && (_window$app$__DEVELOP3 = _window$app$__DEVELOP3.oidc) !== null && _window$app$__DEVELOP3 !== void 0 && _window$app$__DEVELOP3.initialProjectKey) {
          var _window$app$__DEVELOP4;
          // Here we store the initial project key in local storage,
          // so that it gets picked up when we initiate the login flow.
          applicationShellConnectors.oidcStorage.setActiveProjectKey((_window$app$__DEVELOP4 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP4 === void 0 || (_window$app$__DEVELOP4 = _window$app$__DEVELOP4.oidc) === null || _window$app$__DEVELOP4 === void 0 ? void 0 : _window$app$__DEVELOP4.initialProjectKey);
        }
      }

      // cachedScope is assumed to be the exact cached version of the `requestedScope`
      // if they don't match, then we know that one of the claims within the scope has changed
      // given a change, we need to force the user to log in, so that new values on respective claim
      // will apply for the given custom application
      const cachedScope = applicationShellConnectors.oidcStorage.getSessionScope();
      // Force the user to log in again
      if (!cachedScope) {
        return false;
      }
      // Rebuild the requested OIDC scope to verify that it didn't change.
      const requestedScope = oidc.buildOidcScope({
        projectKey: activeProjectKey !== null && activeProjectKey !== void 0 ? activeProjectKey : undefined,
        oAuthScopes: (_window$app$__DEVELOP5 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP5 === void 0 || (_window$app$__DEVELOP5 = _window$app$__DEVELOP5.oidc) === null || _window$app$__DEVELOP5 === void 0 ? void 0 : _window$app$__DEVELOP5.oAuthScopes,
        additionalOAuthScopes: (_window$app$__DEVELOP6 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP6 === void 0 || (_window$app$__DEVELOP6 = _window$app$__DEVELOP6.oidc) === null || _window$app$__DEVELOP6 === void 0 ? void 0 : _window$app$__DEVELOP6.additionalOAuthScopes,
        teamId: (_window$app$__DEVELOP7 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP7 === void 0 || (_window$app$__DEVELOP7 = _window$app$__DEVELOP7.oidc) === null || _window$app$__DEVELOP7 === void 0 ? void 0 : _window$app$__DEVELOP7.teamId,
        applicationId: (_window$app$__DEVELOP8 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP8 === void 0 || (_window$app$__DEVELOP8 = _window$app$__DEVELOP8.oidc) === null || _window$app$__DEVELOP8 === void 0 ? void 0 : _window$app$__DEVELOP8.applicationId
      });
      // Omit the project key from the check. This allows to switch projects
      // without having to log in again.
      const cachedScopeWithoutProjectKey = withoutProjectKeyClaim(cachedScope);
      const requestedScopeWithoutProjectKey = withoutProjectKeyClaim(requestedScope);
      // Check that the session scope didn't change.
      if (cachedScopeWithoutProjectKey === requestedScopeWithoutProjectKey) {
        return true;
      }
      return false;
    } catch (err) {
      return false;
    }
  }
  return window.localStorage.getItem(constants.STORAGE_KEYS.IS_AUTHENTICATED) === 'true';
};

const OidcCallback = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./oidc-callback-402ad034.cjs.prod.js' /* webpackChunkName: "oidc-callback" */); }));

function ownKeys$3(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$3(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$3(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const Authenticated = props => {
  var _window$app$__DEVELOP;
  // We attempt to see if the user was already authenticated by looking
  // at the "cached" flag in local storage.
  const cachedAuthenticationState = hasCachedAuthenticationState();
  if (cachedAuthenticationState) {
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
      children: props.render({
        isAuthenticated: true
      })
    });
  }

  // When using the OIDC workflow, we always return false, to trigger
  // the redirect to the login page.
  if ((_window$app$__DEVELOP = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP !== void 0 && (_window$app$__DEVELOP = _window$app$__DEVELOP.oidc) !== null && _window$app$__DEVELOP !== void 0 && _window$app$__DEVELOP.authorizeUrl) {
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
      children: props.render({
        isAuthenticated: false
      })
    });
  }

  // Fall back to check for cookie-based authentication.
  return jsxRuntime.jsx(AmILoggedIn, _objectSpread$3({}, props));
};
Authenticated.displayName = 'Authenticated';
const AuthenticationRoutes = props => jsxRuntime.jsxs(reactRouterDom.Switch, {
  children: [jsxRuntime.jsx(SuspendedRoute, {
    path: "/account/oidc/callback",
    children: jsxRuntime.jsx(OidcCallback, {
      locale: props.locale,
      applicationMessages: props.applicationMessages
    })
  }), jsxRuntime.jsx(SuspendedRoute, {
    path: "/:projectKey/:identifier/oidc/callback",
    children: jsxRuntime.jsx(OidcCallback, {
      locale: props.locale,
      applicationMessages: props.applicationMessages
    })
  }), jsxRuntime.jsx(reactRouterDom.Route, {
    children: jsxRuntime.jsx(Authenticated, _objectSpread$3({}, props))
  })]
});
AuthenticationRoutes.displayName = 'AuthenticationRoutes';

function ownKeys$2(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys$2(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys$2(Object(t))).call(_context3, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
/**
 * NOTE:
 *   This function try-catches around a `JSON.parse` and return
 *   the parsed value whenever possible.
 *
 *   This allows parsing most primitive values.
 *
 *   - `JSON.parse('null')` => `null`
 *   - `JSON.parse('1')` => `1`
 *   - `JSON.parse('["a", "b"]')` => `['a', 'b']`
 */
const getCoerceEnvironmentValue = environmentValueAsString => {
  // Return the value as-is if it's not a string.
  if (typeof environmentValueAsString !== 'string') {
    return environmentValueAsString;
  }

  // In case the value is a string, we try to parse it to attempt to extract
  // the primitive value, if the original value is indeed supposed to be a primitive.
  // For example, `'1'` is converted to a number, `'true'` is converted to a boolean, etc.
  try {
    // Strip out escaped quotes. This is mostly important to coerce an array of string
    // with escaped quotes.
    return JSON.parse(String(environmentValueAsString).replace(/(\\")/g, '"'));
  } catch (e) {
    return environmentValueAsString;
  }
};
const shallowlyCoerceValues = uncoercedEnvironmentValues => {
  var _context;
  return _reduceInstanceProperty__default["default"](_context = _Object$keys__default["default"](uncoercedEnvironmentValues)).call(_context, (coercedEnvironmentValues, key) => {
    const uncoercedEnvironmentValue = uncoercedEnvironmentValues[key];
    return _objectSpread$2(_objectSpread$2({}, coercedEnvironmentValues), {}, {
      [key]: getCoerceEnvironmentValue(uncoercedEnvironmentValue)
    });
  }, {});
};
const useCoercedEnvironmentValues = environment => {
  const coercedEnvironmentValues = react.useMemo(() => shallowlyCoerceValues(environment), [environment]);
  return coercedEnvironmentValues;
};

const ApplicationShellProvider = props => {
  const apolloClient = react.useMemo(() => {
    var _props$apolloClient;
    return (_props$apolloClient = props.apolloClient) !== null && _props$apolloClient !== void 0 ? _props$apolloClient : applicationShellConnectors.createApolloClient();
  }, [props.apolloClient]);
  react.useEffect(() => {
    applicationShellConnectors.setCachedApolloClient(apolloClient);
  }, [apolloClient]);
  const coercedEnvironmentValues = useCoercedEnvironmentValues(props.environment);
  const browserLocale = getBrowserLocale(window);
  return jsxRuntime.jsx(react.Suspense, {
    fallback: jsxRuntime.jsx(ApplicationLoader, {}),
    children: jsxRuntime.jsx(ErrorBoundary, {
      children: jsxRuntime.jsx(applicationShellConnectors.ApplicationContextProvider, {
        environment: coercedEnvironmentValues,
        children: jsxRuntime.jsx(reactRedux.Provider, {
          store: index.internalReduxStore,
          children: jsxRuntime.jsx(react$2.ApolloProvider, {
            client: apolloClient,
            children: jsxRuntime.jsxs(reactRouterDom.Router, {
              history: getBrowserHistory(),
              children: [jsxRuntime.jsx(ApplicationPageTitle, {}), jsxRuntime.jsx(AuthenticationRoutes, {
                locale: browserLocale,
                applicationMessages: props.applicationMessages,
                render: _ref => {
                  let isAuthenticated = _ref.isAuthenticated;
                  if (isAuthenticated) return props.children({
                    isAuthenticated
                  });
                  return jsxRuntime.jsx(i18n.AsyncLocaleData, {
                    locale: browserLocale,
                    applicationMessages: props.applicationMessages,
                    children: _ref2 => {
                      let locale = _ref2.locale,
                        messages = _ref2.messages;
                      return jsxRuntime.jsx(ConfigureIntlProvider, {
                        locale: locale,
                        messages: messages,
                        children: props.children({
                          isAuthenticated
                        })
                      });
                    }
                  });
                }
              })]
            })
          })
        })
      })
    })
  });
};
ApplicationShellProvider.propTypes = {};
ApplicationShellProvider.displayName = 'ApplicationShellProvider';

const RedirectToLogin = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./redirect-to-login-573b012a.cjs.prod.js' /* webpackChunkName: "redirect-to-login" */); }));

const styles = {
  name: "1prreal",
  styles: "html,body{font-size:var(--font-size-for-body);height:100vh;}#app{height:100%;}"
} ;
const GlobalStyles = () => jsxRuntime.jsx(react$1.Global, {
  styles: styles
});

const StrictModeEnablement$1 = props => {
  if (props.enableReactStrictMode) {
    return jsxRuntime.jsx(react.StrictMode, {
      children: props.children
    });
  } else {
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
      children: props.children
    });
  }
};
StrictModeEnablement$1.propTypes = {};
const ApplicationShell = props => {
  react.useEffect(() => {
    var _props$onRegisterErro;
    (_props$onRegisterErro = props.onRegisterErrorListeners) === null || _props$onRegisterErro === void 0 || _props$onRegisterErro.call(props, {
      dispatch: index.internalReduxStore.dispatch
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // <-- run only once, when component mounts

  return jsxRuntime.jsxs(StrictModeEnablement$1, {
    enableReactStrictMode: props.enableReactStrictMode,
    children: [jsxRuntime.jsx(GlobalStyles, {}), jsxRuntime.jsx(ApplicationShellProvider, {
      apolloClient: props.apolloClient,
      environment: props.environment,
      applicationMessages: props.applicationMessages,
      children: _ref => {
        let isAuthenticated = _ref.isAuthenticated;
        if (isAuthenticated) {
          return jsxRuntime.jsxs(reactRouterDom.Switch, {
            children: [jsxRuntime.jsx(SuspendedRoute, {
              path: "/logout",
              children: jsxRuntime.jsx(RedirectToLogout, {})
            }), jsxRuntime.jsx(SuspendedRoute, {
              children: jsxRuntime.jsx(ApplicationShellAuthenticated, {
                defaultFeatureFlags: props.defaultFeatureFlags,
                featureFlags: props.featureFlags,
                render: props.render,
                applicationMessages: props.applicationMessages,
                onMenuItemClick: props.onMenuItemClick,
                disableRoutePermissionCheck: props.disableRoutePermissionCheck,
                children: props.children
              })
            })]
          });
        }
        return jsxRuntime.jsx(RedirectToLogin, {});
      }
    })]
  });
};
ApplicationShell.propTypes = {};
ApplicationShell.displayName = 'ApplicationShell';
ApplicationShell.version = applicationShellVersion;

function ownKeys$1(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$1(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$1(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const CustomViewWithPermissionCheck = props => {
  const permissionKeys = ssr.entryPointUriPathToPermissionKeys(constants.CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH);

  // Require View permission to render the application.
  const canView = permissions.useIsAuthorized({
    demandedPermissions: [permissionKeys.View]
  });
  if (canView) {
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
      children: props.children
    });
  }
  return jsxRuntime.jsx(applicationComponents.PageUnauthorized, {});
};
CustomViewWithPermissionCheck.propTypes = {};
function CustomViewShellAuthenticated(props) {
  const browserLocale = getBrowserLocale(window);
  return jsxRuntime.jsx(FetchUser, {
    children: _ref => {
      let isLoading = _ref.isLoading,
        fetchUserError = _ref.error,
        user = _ref.user;
      if (isLoading) {
        return jsxRuntime.jsx(ApplicationLoader, {});
      }
      return jsxRuntime.jsx(i18n.AsyncLocaleData, {
        locale: (user === null || user === void 0 ? void 0 : user.language) || browserLocale,
        applicationMessages: props.messages,
        children: _ref2 => {
          let isLoadingLocaleData = _ref2.isLoading,
            locale = _ref2.locale,
            messages = _ref2.messages;
          return jsxRuntime.jsx(ConfigureIntlProvider
          // We do not want to pass the language as long as the locale data
          // is not loaded.
          , _objectSpread$1(_objectSpread$1({}, isLoadingLocaleData ? {} : {
            locale,
            messages
          }), {}, {
            children: jsxRuntime.jsx(applicationShellConnectors.ApplicationContextProvider, {
              user: user,
              environment: props.environment,
              children: jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: [jsxRuntime.jsx(designSystem.ThemeProvider, {
                  theme: "default"
                }), jsxRuntime.jsx(FetchProject, {
                  projectKey: props.projectKey,
                  children: _ref3 => {
                    let isProjectLoading = _ref3.isLoading,
                      project = _ref3.project;
                    if (fetchUserError) {
                      return jsxRuntime.jsx(applicationComponents.PageUnauthorized, {});
                    }
                    if (isProjectLoading) {
                      return jsxRuntime.jsx(ApplicationLoader, {});
                    }
                    return jsxRuntime.jsx(applicationShellConnectors.ApplicationContextProvider, {
                      user: user,
                      project: project,
                      projectDataLocale: props.dataLocale,
                      environment: props.environment,
                      children: jsxRuntime.jsx(CustomViewWithPermissionCheck, {
                        children: props.children
                      })
                    });
                  }
                })]
              })
            })
          }));
        }
      });
    }
  });
}
CustomViewShellAuthenticated.propTypes = {};

const browserLocale = getBrowserLocale(window);
function StrictModeEnablement(props) {
  if (props.enableReactStrictMode) {
    return jsxRuntime.jsx(react.StrictMode, {
      children: props.children
    });
  } else {
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
      children: props.children
    });
  }
}
StrictModeEnablement.propTypes = {};
function CustomViewShell(props) {
  const _useState = react.useState(),
    _useState2 = _slicedToArray(_useState, 2),
    hostContext = _useState2[0],
    setHostContext = _useState2[1];
  const iFrameCommunicationPort = react.useRef();
  const hostMessageHandler = react.useCallback(event => {
    if (event.data.eventName === constants.CUSTOM_VIEWS_EVENTS_NAMES.CUSTOM_VIEW_INITIALIZATION) {
      setHostContext(event.data.eventData.context);
    } else {
      console.warn("CustomViewShell: Unknown received event with name: ".concat(event.data.eventName), {
        event
      });
    }
  }, []);
  react.useEffect(() => {
    const bootstrapMessageHandler = event => {
      if ((event.origin === window.location.origin ||
      // event.origin is not defined in test environment
              "production" === 'test') && event.data === constants.CUSTOM_VIEWS_EVENTS_NAMES.CUSTOM_VIEW_BOOTSTRAP) {
        iFrameCommunicationPort.current = event.ports[0];
        iFrameCommunicationPort.current.onmessage = hostMessageHandler;
        // Once bootstraped, we don't want to listen for global messages anymore.
        // We will only listen to messages coming through the MessageChannel port.
        window.removeEventListener('message', bootstrapMessageHandler);
      } else {
        console.warn('CustomViewShell: Received an event that is not allowed.', {
          event
        });
      }
    };
    window.addEventListener('message', bootstrapMessageHandler);
    return () => {
      window.removeEventListener('message', bootstrapMessageHandler);
    };
  }, [hostMessageHandler]);
  react.useEffect(() => {
    // Close the channel when the component unmounts
    return () => {
      var _iFrameCommunicationP;
      (_iFrameCommunicationP = iFrameCommunicationPort.current) === null || _iFrameCommunicationP === void 0 || _iFrameCommunicationP.close();
      iFrameCommunicationPort.current = undefined;
    };
  }, []);
  if (!hostContext) {
    return jsxRuntime.jsx(ApplicationLoader, {
      showLogo: true
    });
  }
  const hostUrl = hostContext.hostUrl;
  return jsxRuntime.jsx(ApplicationShellProvider, {
    environment: window.app,
    applicationMessages: props.applicationMessages,
    apolloClient: props.apolloClient,
    children: _ref => {
      let isAuthenticated = _ref.isAuthenticated;
      if (isAuthenticated) {
        return jsxRuntime.jsx(applicationShellConnectors.CustomViewContextProvider, {
          hostUrl: hostUrl,
          customViewConfig: hostContext.customViewConfig,
          children: jsxRuntime.jsx(CustomViewShellAuthenticated, {
            dataLocale: hostContext.dataLocale,
            environment: window.app,
            messages: props.applicationMessages,
            projectKey: hostContext.projectKey,
            customViewConfig: hostContext.customViewConfig,
            children: props.children
          })
        });
      }
      return jsxRuntime.jsx(i18n.AsyncLocaleData, {
        locale: browserLocale,
        applicationMessages: props.applicationMessages,
        children: _ref2 => {
          let locale = _ref2.locale,
            messages = _ref2.messages;
          return jsxRuntime.jsx(ConfigureIntlProvider, {
            locale: locale,
            messages: messages,
            children: jsxRuntime.jsx(applicationComponents.PageUnauthorized, {})
          });
        }
      });
    }
  });
}
CustomViewShell.propTypes = {};
const CustomViewShellWrapper = props => {
  return jsxRuntime.jsx(StrictModeEnablement, {
    enableReactStrictMode: props.enableReactStrictMode,
    children: jsxRuntime.jsx(CustomViewShell, {
      applicationMessages: props.applicationMessages,
      children: props.children
    })
  });
};
CustomViewShellWrapper.propTypes = {};

const defaultProps = {
  shouldCleanUpOnUnmount: true
};
const InjectReducers = props => {
  const _useState = react.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    areReducersInjected = _useState2[0],
    setAreReducersInjected = _useState2[1];
  const store = reactRedux.useStore();
  react.useEffect(() => {
    store.injectReducers({
      id: props.id,
      reducers: props.reducers
    });
    setAreReducersInjected(true);
    return () => {
      if (props.shouldCleanUpOnUnmount) {
        store.removeReducers({
          id: props.id
        });
      }
    };
  }, [props.id, props.reducers, props.shouldCleanUpOnUnmount, store]);

  // Render children only when the plugin reducers have been injected
  if (areReducersInjected) return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: props.children
  });
  return null;
};
InjectReducers.propTypes = {
  id: _pt__default["default"].string.isRequired,
  reducers: _pt__default["default"].any.isRequired,
  shouldCleanUpOnUnmount: _pt__default["default"].bool.isRequired,
  children: _pt__default["default"].node.isRequired
};
InjectReducers.displayName = 'InjectReducers';
InjectReducers.defaultProps = defaultProps;

const errorMessageIgnoreList = [/ResizeObserver loop limit exceeded/i];

// Ensure to initialize Sentry as soon as possible, so that we have the chance
// of catching possible errors.
sentry.boot();
const makeErrorToCapture = error => {
  if (error instanceof Error) return error;
  if (error instanceof ErrorEvent) return new Error(error.message);
  return new Error(_JSON$stringify__default["default"](error.reason || 'Unhandled rejection without a reason'));
};
const getErrorMessage = error => {
  if (typeof error === 'string') return error;
  const errorToCapture = makeErrorToCapture(error);
  return errorToCapture.message || errorToCapture.name;
};
const shouldErrorBeTracked = error => {
  const errorMessage = getErrorMessage(error);
  return !_someInstanceProperty__default["default"](errorMessageIgnoreList).call(errorMessageIgnoreList, match => match.test(errorMessage));
};
function setupGlobalErrorListener() {
  // Capture unhandled errors generated from rejected Promises.
  //
  // http://www.2ality.com/2016/04/unhandled-rejections.html
  // https://docs.getsentry.com/hosted/clients/javascript/usage/#promises
  //
  // Note: this currently works only in Chrome, and it might not be needed.
  // We just keep it here as a nice-to-have thing.
  window.addEventListener('unhandledrejection', event => {
    if (shouldErrorBeTracked(event)) {
      const errorId = sentry.reportErrorToSentry(event);
      index.internalReduxStore.dispatch(actionsGlobal.showUnexpectedErrorNotification({
        errorId
      }));
    }
  });

  // Capture normal global errors coming from non Promise code.
  window.addEventListener('error', errorEvent => {
    if (shouldErrorBeTracked(errorEvent)) {
      const errorId = sentry.reportErrorToSentry(errorEvent);
      index.internalReduxStore.dispatch(actionsGlobal.showUnexpectedErrorNotification({
        errorId
      }));
    }
  });
}

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(t))).call(_context3, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }

/**
 * The route path to match. Usually it starts with `/:projectKey/my-entry-point`.
 */

const makeRoute = (routePath, routeOptions) => {
  const getUrl = (nextParams, nextQueryParams) => {
    const baseUrl = reactRouterDom.generatePath(routePath, _objectSpread(_objectSpread({}, routeOptions.params), nextParams));
    if (nextQueryParams) {
      var _context;
      return _concatInstanceProperty__default["default"](_context = "".concat(baseUrl, "?")).call(_context, nextQueryParams.toString());
    }
    return baseUrl;
  };
  const go = (nextParams, nextQueryParams) => {
    routeOptions.goTo(getUrl(nextParams, nextQueryParams));
  };
  return {
    path: routePath,
    getUrl,
    go
  };
};
function useRoutesCreator() {
  const _useRouteMatch = reactRouterDom.useRouteMatch(),
    params = _useRouteMatch.params;
  const _useHistory = reactRouterDom.useHistory(),
    goTo = _useHistory.push,
    location = _useHistory.location;
  const createRoute = routePath => makeRoute(routePath, {
    goTo,
    params,
    location
  });
  return {
    createRoute
  };
}

exports.ApplicationLoader = ApplicationLoader;
exports.ApplicationPageTitle = ApplicationPageTitle;
exports.ApplicationShell = ApplicationShell;
exports.ApplicationShellProvider = ApplicationShellProvider;
exports.ButlerContainer = ButlerContainer;
exports.ConfigureIntlProvider = ConfigureIntlProvider;
exports.CustomViewShellWrapper = CustomViewShellWrapper;
exports.ErrorBoundary = ErrorBoundary;
exports.FetchProject = FetchProject;
exports.InjectReducers = InjectReducers;
exports.ProjectDataLocale = ProjectDataLocale;
exports.ProjectSwitcher = ProjectSwitcher;
exports.REQUESTS_IN_FLIGHT_LOADER_DOM_ID = REQUESTS_IN_FLIGHT_LOADER_DOM_ID;
exports.RedirectToLogin = RedirectToLogin;
exports.RedirectToProjectCreate = RedirectToProjectCreate;
exports.SetupFlopFlipProvider = SetupFlopFlipProvider;
exports.SuspendedRoute = SuspendedRoute;
exports.applicationShellVersion = applicationShellVersion;
exports.pimIndexerStates = pimIndexerStates;
exports.setupGlobalErrorListener = setupGlobalErrorListener;
exports.useRoutesCreator = useRoutesCreator;
