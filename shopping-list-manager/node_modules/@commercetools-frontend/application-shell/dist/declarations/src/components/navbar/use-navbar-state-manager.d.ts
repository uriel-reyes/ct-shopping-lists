/// <reference types="react" />
import { type TApplicationContext } from '@commercetools-frontend/application-shell-connectors';
import type { TNavbarMenu } from '../../types/generated/proxy';
type HookProps = {
    environment: TApplicationContext<{}>['environment'];
};
declare const useNavbarStateManager: (props: HookProps) => {
    navBarNode: import("react").RefObject<HTMLElement>;
    handleToggleItem: (nextActiveItemIndex: string) => void;
    handleToggleMenu: () => void;
    shouldCloseMenuFly: (e: React.MouseEvent<HTMLElement> | MouseEvent) => void;
    allInternalApplicationsNavbarMenu: {
        __typename?: "NavbarMenu" | undefined;
        key: string;
        uriPath: string;
        icon: string;
        featureToggle?: string | null | undefined;
        menuVisibility?: string | null | undefined;
        permissions: string[];
        labelAllLocales: {
            __typename?: "LocalizedField" | undefined;
            locale: string;
            value: string;
        }[];
        dataFences?: {
            __typename?: "DataFence" | undefined;
            group: string;
            name: string;
            type: string;
        }[] | null | undefined;
        actionRights?: {
            __typename?: "ActionRight" | undefined;
            group: string;
            name: string;
        }[] | null | undefined;
        submenu: {
            __typename?: "BaseMenu" | undefined;
            key: string;
            uriPath: string;
            featureToggle?: string | null | undefined;
            menuVisibility?: string | null | undefined;
            permissions: string[];
            labelAllLocales: {
                __typename?: "LocalizedField" | undefined;
                locale: string;
                value: string;
            }[];
            actionRights?: {
                __typename?: "ActionRight" | undefined;
                group: string;
                name: string;
            }[] | null | undefined;
            dataFences?: {
                __typename?: "DataFence" | undefined;
                group: string;
                name: string;
                type: string;
            }[] | null | undefined;
        }[];
    }[];
    allCustomApplicationsNavbarMenu: TNavbarMenu[];
    activeItemIndex?: string | undefined;
    isExpanderVisible: boolean;
    isMenuOpen: boolean;
};
export default useNavbarStateManager;
