import { type ReactNode, type SyntheticEvent } from 'react';
import type { NormalizedCacheObject } from '@apollo/client';
import { ApolloClient } from '@apollo/client';
import type { TFlags } from '@flopflip/types';
import type { Dispatch } from 'redux';
import type { TApplicationContext } from '@commercetools-frontend/application-shell-connectors';
import type { TAsyncLocaleDataProps } from '@commercetools-frontend/i18n';
type TApplicationShellProps = {
    apolloClient?: ApolloClient<NormalizedCacheObject>;
    environment: TApplicationContext<{}>['environment'];
    featureFlags?: TFlags;
    defaultFeatureFlags?: TFlags;
    applicationMessages: TAsyncLocaleDataProps['applicationMessages'];
    onRegisterErrorListeners?: (args: {
        dispatch: Dispatch;
    }) => void;
    onMenuItemClick?: (event: SyntheticEvent<HTMLAnchorElement>) => void;
    disableRoutePermissionCheck?: boolean;
    enableReactStrictMode?: boolean;
    render?: () => JSX.Element;
    children?: ReactNode;
};
declare const ApplicationShell: {
    (props: TApplicationShellProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
    version: string;
};
export default ApplicationShell;
