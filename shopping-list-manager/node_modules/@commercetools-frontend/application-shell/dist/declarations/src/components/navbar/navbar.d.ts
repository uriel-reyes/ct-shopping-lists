import { type MouseEventHandler } from 'react';
import type { RouteComponentProps } from 'react-router-dom';
import type { TApplicationContext, TNormalizedMenuVisibilities, TNormalizedPermissions, TNormalizedActionRights, TNormalizedDataFences } from '@commercetools-frontend/application-shell-connectors';
import type { TFetchProjectQuery } from '../../types/generated/mc';
import type { TNavbarMenu } from '../../types/generated/proxy';
import { type MenuItemLinkProps } from './menu-items';
type TProjectPermissions = {
    permissions: TNormalizedPermissions | null;
    actionRights: TNormalizedActionRights | null;
    dataFences: TNormalizedDataFences | null;
};
type TMenuWithDefaultLabel = TNavbarMenu & {
    defaultLabel?: string;
};
type ApplicationMenuProps = {
    location: RouteComponentProps['location'];
    menu: TMenuWithDefaultLabel;
    isActive: boolean;
    isMenuOpen: boolean;
    shouldCloseMenuFly: MouseEventHandler<HTMLElement>;
    projectPermissions: TProjectPermissions;
    menuVisibilities: TNormalizedMenuVisibilities | null;
    handleToggleItem: () => void;
    applicationLocale: string;
    projectKey: string;
    useFullRedirectsForLinks: boolean;
    onMenuItemClick?: MenuItemLinkProps['onClick'];
};
export declare const ApplicationMenu: {
    (props: ApplicationMenuProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
};
export type TNavbarProps = {
    applicationLocale?: string;
    projectKey: string;
    environment: TApplicationContext<{
        useFullRedirectsForLinks?: boolean;
    }>['environment'];
    project: TFetchProjectQuery['project'];
    onMenuItemClick?: MenuItemLinkProps['onClick'];
    isLoading: boolean;
};
declare const NavBar: {
    (props: TNavbarProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
};
export default NavBar;
