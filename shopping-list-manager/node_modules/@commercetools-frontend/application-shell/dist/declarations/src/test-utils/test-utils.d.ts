import { type ReactElement } from 'react';
import { ApolloClient, type NormalizedCacheObject } from '@apollo/client';
import { type MockedResponse } from '@apollo/client/testing';
import type { TFlags } from '@flopflip/types';
import * as rtl from '@testing-library/react';
import * as rtlHooks from '@testing-library/react-hooks';
import { type TProviderProps } from '@commercetools-frontend/application-shell-connectors';
import { createEnhancedHistory } from '@commercetools-frontend/browser-history';
import { type TMapNotificationToComponentProps } from '@commercetools-frontend/react-notifications';
import { type TSdkMock } from '@commercetools-frontend/sdk/test-utils';
import { createReduxStore } from '../configure-store';
type TPermissions = {
    [key: string]: boolean;
};
type TAllAppliedPermission = {
    name: string;
    value: boolean;
};
declare const denormalizePermissions: (permissions?: TPermissions) => TAllAppliedPermission[];
type TNormalizedActionRights = {
    [key: string]: TPermissions;
};
type TAllAppliedActionRight = TAllAppliedPermission & {
    group: string;
};
declare const denormalizeActionRights: (actionRights?: TNormalizedActionRights) => TAllAppliedActionRight[];
type TNormalizedDataFenceStorePermissions = {
    [key: string]: {
        values: string[];
    };
};
type TNormalizedDataFenceStores = {
    [key: string]: TNormalizedDataFenceStorePermissions;
};
type TNormalizedDataFences = {
    store: TNormalizedDataFenceStores;
};
type TAllAppliedDataFence = {
    __typename: 'StoreDataFence';
    type: string;
    name: string;
    value: string;
    group: string;
};
declare const denormalizeDataFences: (dataFences?: TNormalizedDataFences) => TAllAppliedDataFence[];
declare const mapResourceAccessToAppliedPermissions: (resourceAccesses: string[]) => TAllAppliedPermission[];
export type TRenderAppOptions<AdditionalEnvironmentProperties extends {} = {}> = {
    locale: string;
    mocks?: ReadonlyArray<MockedResponse>;
    apolloClient?: ApolloClient<NormalizedCacheObject>;
    route: string;
    disableRoutePermissionCheck: boolean;
    disableAutomaticEntryPointRoutes: boolean;
    history: ReturnType<typeof createEnhancedHistory>;
    flags: TFlags;
    environment: Partial<TProviderProps<AdditionalEnvironmentProperties>['environment']>;
    user: Partial<TProviderProps<AdditionalEnvironmentProperties>['user']>;
    project: Partial<TProviderProps<AdditionalEnvironmentProperties>['project']>;
    dataLocale: TProviderProps<AdditionalEnvironmentProperties>['projectDataLocale'];
} & rtl.RenderOptions;
type TRenderAppResult<AdditionalEnvironmentProperties extends {} = {}> = rtl.RenderResult & Pick<TRenderAppOptions<AdditionalEnvironmentProperties>, 'history' | 'user' | 'project' | 'environment'>;
declare function renderApp<AdditionalEnvironmentProperties extends {} = {}>(ui: ReactElement, options?: Partial<TRenderAppOptions<AdditionalEnvironmentProperties>>): TRenderAppResult<AdditionalEnvironmentProperties>;
export type TRenderAppWithReduxOptions<AdditionalEnvironmentProperties extends {} = {}, StoreState extends {} = {}> = {
    store: ReturnType<typeof createReduxStore>;
    storeState: StoreState;
    sdkMocks: TSdkMock[];
    mapNotificationToComponent: TMapNotificationToComponentProps['mapNotificationToComponent'];
} & TRenderAppOptions<AdditionalEnvironmentProperties>;
type TRenderAppWithReduxResult<AdditionalEnvironmentProperties extends {} = {}, StoreState extends {} = {}> = TRenderAppResult<AdditionalEnvironmentProperties> & Pick<TRenderAppWithReduxOptions<AdditionalEnvironmentProperties, StoreState>, 'store'>;
declare function renderAppWithRedux<AdditionalEnvironmentProperties extends {} = {}, StoreState extends {} = {}>(ui: ReactElement, options?: Partial<TRenderAppWithReduxOptions<AdditionalEnvironmentProperties, StoreState>>): TRenderAppWithReduxResult<AdditionalEnvironmentProperties, StoreState>;
export type TRenderHookOptions<RenderedHookProps, AdditionalEnvironmentProperties extends {} = {}, StoreState extends {} = {}> = TRenderAppWithReduxOptions<AdditionalEnvironmentProperties, StoreState> & rtlHooks.RenderHookOptions<RenderedHookProps>;
export type TRenderHookResult<RenderHookCallbackProps, RenderHookCallbackValue, AdditionalEnvironmentProperties extends {} = {}, StoreState extends {} = {}> = rtlHooks.RenderHookResult<RenderHookCallbackProps, RenderHookCallbackValue> & Pick<TRenderAppWithReduxResult<AdditionalEnvironmentProperties, StoreState>, 'store' | 'history' | 'user' | 'project' | 'environment'>;
declare function renderHook<RenderedHookProps, RenderedHookResult, AdditionalEnvironmentProperties extends {} = {}, StoreState extends {} = {}>(callback: (props: RenderedHookProps) => RenderedHookResult, options?: Partial<TRenderHookOptions<RenderedHookProps, AdditionalEnvironmentProperties, StoreState>>): TRenderHookResult<RenderedHookProps, RenderedHookResult, AdditionalEnvironmentProperties, StoreState>;
export * from '@testing-library/react';
declare const hooks: {
    renderHook: typeof renderHook;
    act: rtlHooks.Act;
    cleanup: () => Promise<void>;
    addCleanup: (callback: rtlHooks.CleanupCallback) => () => void;
    removeCleanup: (callback: rtlHooks.CleanupCallback) => void;
    suppressErrorOutput: () => () => void;
};
export { renderApp, renderAppWithRedux, hooks, mapResourceAccessToAppliedPermissions, denormalizePermissions, denormalizeActionRights, denormalizeDataFences, };
