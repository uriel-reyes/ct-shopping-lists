import _pt from 'prop-types';
import { lazy, useEffect, useState, useCallback, Component, Suspense, useMemo, useRef, useLayoutEffect, StrictMode } from 'react';
import { useLocation, Route, Switch, Redirect, Router, useRouteMatch, useHistory, generatePath } from 'react-router-dom';
import { R as RouteCatchAll, i as internalReduxStore } from './index-89e5711a.esm.js';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _styled from '@emotion/styled/base';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import _Array$isArray from '@babel/runtime-corejs3/core-js-stable/array/is-array';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import { keyframes, css, Global } from '@emotion/react';
import { designTokens as designTokens$1, themesOverrides, PortalsContainer, PageUnauthorized } from '@commercetools-frontend/application-components';
import { useMcQuery, oidcStorage, useApplicationContext, selectProjectKeyFromUrl, ApplicationContextProvider, createApolloClient, setCachedApolloClient, CustomViewContextProvider } from '@commercetools-frontend/application-shell-connectors';
import { STORAGE_KEYS, GRAPHQL_TARGETS, featureFlags, LOGOUT_REASONS, DOMAINS, CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH, CUSTOM_VIEWS_EVENTS_NAMES } from '@commercetools-frontend/constants';
import { AsyncLocaleData } from '@commercetools-frontend/i18n';
import { NotificationsList } from '@commercetools-frontend/react-notifications';
import { reportErrorToSentry, SentryUserTracker, boot } from '@commercetools-frontend/sentry';
import { D as DIMENSIONS, C as CONTAINERS, b as buildOidcScope, O as OIDC_CLAIMS } from './oidc-da8526e3.esm.js';
import '@babel/runtime-corejs3/core-js-stable/url';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import { customProperties, designTokens, ThemeProvider } from '@commercetools-uikit/design-system';
import Spacings from '@commercetools-uikit/spacings';
import { defineMessages, useIntl, FormattedMessage, IntlProvider } from 'react-intl';
import FlatButton from '@commercetools-uikit/flat-button';
import { AngleLeftIcon, ErrorIcon } from '@commercetools-uikit/icons';
import { l as location, u as useIsServedByProxy } from './use-is-served-by-proxy-77984220.esm.js';
import { jsx, jsxs, Fragment } from '@emotion/react/jsx-runtime';
import _taggedTemplateLiteral from '@babel/runtime-corejs3/helpers/esm/taggedTemplateLiteral';
import _objectDestructuringEmpty from '@babel/runtime-corejs3/helpers/esm/objectDestructuringEmpty';
import _extends from '@babel/runtime-corejs3/helpers/esm/extends';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import memoize from 'memoize-one';
import { components } from 'react-select';
import AccessibleHidden from '@commercetools-uikit/accessible-hidden';
import SelectInput from '@commercetools-uikit/select-input';
import CTLogoSVG from '@commercetools-frontend/assets/images/ct-logo.svg';
import LoadingSpinner from '@commercetools-uikit/loading-spinner';
import history from '@commercetools-frontend/browser-history';
import { getSupportedLocale } from '@commercetools-frontend/l10n';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _Reflect$construct from '@babel/runtime-corejs3/core-js-stable/reflect/construct';
import _classCallCheck from '@babel/runtime-corejs3/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime-corejs3/helpers/esm/createClass';
import _inherits from '@babel/runtime-corejs3/helpers/esm/inherits';
import _possibleConstructorReturn from '@babel/runtime-corejs3/helpers/esm/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime-corejs3/helpers/esm/getPrototypeOf';
import '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import _sliceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/slice';
import _Object$fromEntries from '@babel/runtime-corejs3/core-js-stable/object/from-entries';
import _flagsInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/flags';
import { useApolloClient, ApolloProvider } from '@apollo/client/react';
import combineAdapters from '@flopflip/combine-adapters';
import httpAdapter from '@flopflip/http-adapter';
import ldAdapter from '@flopflip/launchdarkly-adapter';
import { ConfigureFlopFlip } from '@flopflip/react-broadcast';
import _reduceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import { Provider, useStore } from 'react-redux';
import upperFirst from 'lodash/upperFirst';
import _startsWithInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/starts-with';
import '@commercetools-uikit/design-system/materials/resets.css';
import { entryPointUriPathToPermissionKeys } from '@commercetools-frontend/application-config/ssr';
import { useIsAuthorized } from '@commercetools-frontend/permissions';
import _JSON$stringify from '@babel/runtime-corejs3/core-js-stable/json/stringify';
import _someInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/some';
import { showUnexpectedErrorNotification } from '@commercetools-frontend/actions-global';

// NOTE: This string will be replaced on build time with the package version.
var applicationShellVersion = "22.13.0";

const RequestsInFlightLoader = /*#__PURE__*/lazy(() => import('./requests-in-flight-loader-d835125d.esm.js' /* webpackChunkName: "requests-in-flight-loader" */));

// Attempt to load the `projectKey` from localStorage
function selectProjectKeyFromLocalStorage() {
  return window.localStorage.getItem(STORAGE_KEYS.ACTIVE_PROJECT_KEY);
}

const getPreviousProjectKey = defaultProjectKeyOfUser => {
  const previouslyUsedProjectKeyFromLocalStorage = selectProjectKeyFromLocalStorage();
  if (previouslyUsedProjectKeyFromLocalStorage) return previouslyUsedProjectKeyFromLocalStorage;
  if (defaultProjectKeyOfUser) return defaultProjectKeyOfUser;
  return;
};

var messages$1 = defineMessages({
  backToProjectLink: {
    id: 'AppBar.backToProjectLink',
    defaultMessage: 'Back to project'
  }
});

/**
 * Note:
 *   A full page reload is needed as the user's project may have changed (deletions and/or additions).
 *   As a result the project and user queries need refetching.
 */
const redirectToProject = key => location.replace("/".concat(key));
const BackToProject = props => {
  const intl = useIntl();
  return jsx(FlatButton, {
    onClick: () => redirectToProject(props.projectKey || ''),
    icon: jsx(AngleLeftIcon, {}),
    label: intl.formatMessage(messages$1.backToProjectLink)
  });
};
BackToProject.displayName = 'BackToProject';

var _templateObject;
const animationPulse = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0% {\n    background-color: ", ";\n  }\n  100% {\n    background-color: ", ";\n  }\n"])), customProperties.colorNeutral, customProperties.colorNeutral95);
const getWidthBySize = props => {
  switch (props.shape) {
    case 'dot':
      switch (props.size) {
        case 's':
          return customProperties.spacingS;
        case 'm':
          return customProperties.spacingM;
        case 'l':
          return customProperties.spacingL;
        case 'xl':
          return customProperties.spacingXl;
        default:
          return 'auto';
      }
    case 'rect':
      switch (props.size) {
        case 's':
          return '150px';
        case 'm':
          return '300px';
        case 'l':
          return '450px';
        case 'xl':
          return '600px';
        default:
          return 'auto';
      }
    default:
      return 'auto';
  }
};
const getHeightBySize = props => {
  switch (props.shape) {
    case 'dot':
      return getWidthBySize(props);
    case 'rect':
      return '32px';
    default:
      return 'auto';
  }
};
const getRadiusBySize = props => {
  switch (props.shape) {
    case 'dot':
      switch (props.size) {
        case 's':
          return customProperties.borderRadius4;
        case 'm':
          return '8px';
        case 'l':
          return '12px';
        case 'xl':
          return '16px';
        default:
          return 'none';
      }
    case 'rect':
      return customProperties.borderRadius4;
    default:
      return 'none';
  }
};
const LoadingPlaceholder = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e4c5pm00"
} : {
  target: "e4c5pm00",
  label: "LoadingPlaceholder"
})("background-color:", customProperties.colorNeutral, ";animation-name:", animationPulse, ";animation-duration:1s;animation-timing-function:ease-out;animation-delay:0;animation-direction:alternate;animation-iteration-count:infinite;width:", getWidthBySize, ";height:", getHeightBySize, ";border-radius:", getRadiusBySize, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvYWRpbmctcGxhY2Vob2xkZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtGNEMiLCJmaWxlIjoibG9hZGluZy1wbGFjZWhvbGRlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjdXN0b21Qcm9wZXJ0aWVzIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNoYXBlOiAnZG90JyB8ICdyZWN0JztcbiAgc2l6ZTogJ3MnIHwgJ20nIHwgJ2wnIHwgJ3hsJztcbn07XG5cbmNvbnN0IGFuaW1hdGlvblB1bHNlID0ga2V5ZnJhbWVzYFxuICAwJSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjdXN0b21Qcm9wZXJ0aWVzLmNvbG9yTmV1dHJhbH07XG4gIH1cbiAgMTAwJSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjdXN0b21Qcm9wZXJ0aWVzLmNvbG9yTmV1dHJhbDk1fTtcbiAgfVxuYDtcblxuY29uc3QgZ2V0V2lkdGhCeVNpemUgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIHN3aXRjaCAocHJvcHMuc2hhcGUpIHtcbiAgICBjYXNlICdkb3QnOlxuICAgICAgc3dpdGNoIChwcm9wcy5zaXplKSB7XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgIHJldHVybiBjdXN0b21Qcm9wZXJ0aWVzLnNwYWNpbmdTO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICByZXR1cm4gY3VzdG9tUHJvcGVydGllcy5zcGFjaW5nTTtcbiAgICAgICAgY2FzZSAnbCc6XG4gICAgICAgICAgcmV0dXJuIGN1c3RvbVByb3BlcnRpZXMuc3BhY2luZ0w7XG4gICAgICAgIGNhc2UgJ3hsJzpcbiAgICAgICAgICByZXR1cm4gY3VzdG9tUHJvcGVydGllcy5zcGFjaW5nWGw7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICdhdXRvJztcbiAgICAgIH1cbiAgICBjYXNlICdyZWN0JzpcbiAgICAgIHN3aXRjaCAocHJvcHMuc2l6ZSkge1xuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICByZXR1cm4gJzE1MHB4JztcbiAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgcmV0dXJuICczMDBweCc7XG4gICAgICAgIGNhc2UgJ2wnOlxuICAgICAgICAgIHJldHVybiAnNDUwcHgnO1xuICAgICAgICBjYXNlICd4bCc6XG4gICAgICAgICAgcmV0dXJuICc2MDBweCc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICdhdXRvJztcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdhdXRvJztcbiAgfVxufTtcbmNvbnN0IGdldEhlaWdodEJ5U2l6ZSA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgc3dpdGNoIChwcm9wcy5zaGFwZSkge1xuICAgIGNhc2UgJ2RvdCc6XG4gICAgICByZXR1cm4gZ2V0V2lkdGhCeVNpemUocHJvcHMpO1xuICAgIGNhc2UgJ3JlY3QnOlxuICAgICAgcmV0dXJuICczMnB4JztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdhdXRvJztcbiAgfVxufTtcbmNvbnN0IGdldFJhZGl1c0J5U2l6ZSA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgc3dpdGNoIChwcm9wcy5zaGFwZSkge1xuICAgIGNhc2UgJ2RvdCc6XG4gICAgICBzd2l0Y2ggKHByb3BzLnNpemUpIHtcbiAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgcmV0dXJuIGN1c3RvbVByb3BlcnRpZXMuYm9yZGVyUmFkaXVzNDtcbiAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgcmV0dXJuICc4cHgnO1xuICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICByZXR1cm4gJzEycHgnO1xuICAgICAgICBjYXNlICd4bCc6XG4gICAgICAgICAgcmV0dXJuICcxNnB4JztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgfVxuICAgIGNhc2UgJ3JlY3QnOlxuICAgICAgcmV0dXJuIGN1c3RvbVByb3BlcnRpZXMuYm9yZGVyUmFkaXVzNDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdub25lJztcbiAgfVxufTtcblxuY29uc3QgTG9hZGluZ1BsYWNlaG9sZGVyID0gc3R5bGVkLmRpdjxQcm9wcz5gXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y3VzdG9tUHJvcGVydGllcy5jb2xvck5ldXRyYWx9O1xuICBhbmltYXRpb24tbmFtZTogJHthbmltYXRpb25QdWxzZX07XG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogMXM7XG4gIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xuICBhbmltYXRpb24tZGVsYXk6IDA7XG4gIGFuaW1hdGlvbi1kaXJlY3Rpb246IGFsdGVybmF0ZTtcbiAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG5cbiAgd2lkdGg6ICR7Z2V0V2lkdGhCeVNpemV9O1xuICBoZWlnaHQ6ICR7Z2V0SGVpZ2h0QnlTaXplfTtcbiAgYm9yZGVyLXJhZGl1czogJHtnZXRSYWRpdXNCeVNpemV9O1xuYDtcbkxvYWRpbmdQbGFjZWhvbGRlci5kaXNwbGF5TmFtZSA9ICdMb2FkaW5nUGxhY2Vob2xkZXInO1xuXG5leHBvcnQgZGVmYXVsdCBMb2FkaW5nUGxhY2Vob2xkZXI7XG4iXX0= */"));
LoadingPlaceholder.displayName = 'LoadingPlaceholder';

var messages = defineMessages({
  projectsLabel: {
    id: 'ProjectSwitcher.projectsLabel',
    description: 'The label for project dropdown switcher',
    defaultMessage: 'Projects menu'
  },
  searchPlaceholder: {
    id: 'ProjectSwitcher.searchPlaceholder',
    description: 'Projects filter search input placeholder',
    defaultMessage: 'Search for a project'
  },
  noResults: {
    id: 'ProjectSwitcher.noResults',
    description: 'Projects filter no results text',
    defaultMessage: 'Sorry, but there are no projects that match your search.'
  },
  suspended: {
    id: 'ProjectSwitcher.suspended',
    description: 'Label for a suspended project',
    defaultMessage: 'Suspended'
  },
  expired: {
    id: 'ProjectSwitcher.expired',
    description: 'Label for a suspended project',
    defaultMessage: 'Expired'
  }
});

function ownKeys$8(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys$8(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys$8(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
function _EMOTION_STRINGIFIED_CSS_ERROR__$4() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
var ProjectsQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchUserProjects" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", alias: { kind: "Name", value: "user" }, name: { kind: "Name", value: "me" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "results" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "suspension" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "expiry" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }] } }] } }] } }] } }] } }], loc: { start: 0, end: 218, source: { body: "query FetchUserProjects {\n  user: me {\n    id\n    projects {\n      results {\n        name\n        key\n        suspension {\n          isActive\n        }\n        expiry {\n          isActive\n        }\n      }\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const PROJECT_SWITCHER_LABEL_ID = 'project-switcher-label';
var _ref3$1 = process.env.NODE_ENV === "production" ? {
  name: "82a6rk",
  styles: "flex:1"
} : {
  name: "1vwn61i-ValueContainer",
  styles: "flex:1;label:ValueContainer;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$4
};
var _ref4$1 = process.env.NODE_ENV === "production" ? {
  name: "zol16h",
  styles: "display:flex;flex:1;align-items:center"
} : {
  name: "10jgptp-ValueContainer",
  styles: "display:flex;flex:1;align-items:center;label:ValueContainer;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$4
};
const ValueContainer = _ref5 => {
  let restProps = _extends({}, (_objectDestructuringEmpty(_ref5), _ref5));
  return jsx("div", {
    css: _ref4$1,
    children: jsx("div", {
      css: _ref3$1,
      children: jsx(SelectInput.ValueContainer, _objectSpread$8(_objectSpread$8({}, restProps), {}, {
        children: restProps.children
      }))
    })
  });
};
var _ref$2 = process.env.NODE_ENV === "production" ? {
  name: "16lqnjx",
  styles: "font-size:1.5rem;display:flex"
} : {
  name: "1nmxni5-ProjectSwitcherOption",
  styles: "font-size:1.5rem;display:flex;label:ProjectSwitcherOption;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$4
};
var _ref2$2 = process.env.NODE_ENV === "production" ? {
  name: "10s3lzp",
  styles: "word-wrap:break-word"
} : {
  name: "16pedup-ProjectSwitcherOption",
  styles: "word-wrap:break-word;label:ProjectSwitcherOption;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$4
};
const ProjectSwitcherOption = props => {
  const project = props.data;
  return jsx(SelectInput.Option, _objectSpread$8(_objectSpread$8({}, props), {}, {
    children: jsxs("div", {
      css: _ref2$2,
      children: [jsxs("div", {
        css: /*#__PURE__*/css("color:", props.isDisabled ? designTokens.colorNeutral : designTokens.colorAccent, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:ProjectSwitcherOption;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
        children: [project.name, props.isDisabled && jsx("span", {
          css: _ref$2,
          children: jsx(ErrorIcon, {
            size: "medium"
          })
        })]
      }), jsx("div", {
        css: /*#__PURE__*/css("font-size:11px;color:", props.isDisabled ? designTokens.colorNeutral : 'inherit', ";" + (process.env.NODE_ENV === "production" ? "" : ";label:ProjectSwitcherOption;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
        children: project.key
      }), project.suspension && project.suspension.isActive && jsx("div", {
        css: /*#__PURE__*/css("font-size:11px;color:", designTokens.colorError, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:ProjectSwitcherOption;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
        children: jsx(FormattedMessage, _objectSpread$8({}, messages.suspended))
      }), project.expiry && project.expiry.isActive && jsx("div", {
        css: /*#__PURE__*/css("font-size:11px;color:", designTokens.colorError, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:ProjectSwitcherOption;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
        children: jsx(FormattedMessage, _objectSpread$8({}, messages.expired))
      })]
    })
  }));
};
const mapProjectsToOptions = memoize(projects => _mapInstanceProperty(projects).call(projects, project => ({
  key: project.key,
  name: project.name,
  label: project.name,
  value: project.key,
  suspension: project.suspension,
  expiry: project.expiry
})));
const CustomMenuList = props => {
  return jsx("div", {
    css: /*#__PURE__*/css("width:max-content;max-width:", designTokens.constraint6, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:CustomMenuList;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
    children: jsx(components.MenuList, _objectSpread$8(_objectSpread$8({}, props), {}, {
      children: props.children
    }))
  });
};
const redirectTo = targetUrl => location.replace(targetUrl);
const ProjectSwitcher = props => {
  const intl = useIntl();
  const _useMcQuery = useMcQuery(ProjectsQuery, {
      onError: reportErrorToSentry,
      context: {
        target: GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND
      }
    }),
    loading = _useMcQuery.loading,
    data = _useMcQuery.data;
  if (loading) return null;
  return jsxs("div", {
    children: [jsx(AccessibleHidden, {
      children: jsx("span", {
        id: PROJECT_SWITCHER_LABEL_ID,
        children: jsx(FormattedMessage, _objectSpread$8({}, messages.projectsLabel))
      })
    }), jsx(SelectInput, {
      value: props.projectKey || '',
      name: "project-switcher",
      "aria-labelledby": PROJECT_SWITCHER_LABEL_ID,
      onChange: event => {
        const selectedProjectKey = event.target.value;
        if (selectedProjectKey !== props.projectKey) {
          var _window$app$__DEVELOP;
          if ((_window$app$__DEVELOP = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP !== void 0 && (_window$app$__DEVELOP = _window$app$__DEVELOP.oidc) !== null && _window$app$__DEVELOP !== void 0 && _window$app$__DEVELOP.authorizeUrl) {
            oidcStorage.setActiveProjectKey(selectedProjectKey);
          }

          // We simply redirect to a "new" browser page, instead of using the
          // history router. This will simplify a lot of things and avoid possible
          // problems like e.g. resetting the store/state.
          redirectTo("/".concat(selectedProjectKey));
        }
      },
      options: data && data.user && mapProjectsToOptions(data.user.projects.results),
      isOptionDisabled: option => {
        const project = option;
        return project.suspension.isActive || project.expiry.isActive;
      },
      components: {
        Option: ProjectSwitcherOption,
        ValueContainer,
        MenuList: CustomMenuList
      },
      isClearable: false,
      backspaceRemovesValue: false,
      placeholder: intl.formatMessage(messages.searchPlaceholder),
      noOptionsMessage: () => intl.formatMessage(messages.noResults),
      horizontalConstraint: 'auto'
    })]
  });
};
ProjectSwitcher.displayName = 'ProjectSwitcher';

// eslint-disable-next-line import/prefer-default-export
const REQUESTS_IN_FLIGHT_LOADER_DOM_ID = 'loader-for-requests-in-flight';

const UserSettingsMenu = /*#__PURE__*/lazy(() => import('./user-settings-menu-c087b178.esm.js' /* webpackChunkName: "user-settings-menu" */));

function _EMOTION_STRINGIFIED_CSS_ERROR__$3() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
var _ref$1 = process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "183miex-AppBar",
  styles: "display:flex;label:AppBar;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC1iYXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNGZ0IiLCJmaWxlIjoiYXBwLWJhci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgYXBwS2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtZnJvbnRlbmQvYXBwbGljYXRpb24tY29tcG9uZW50cyc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgdWlraXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBTcGFjaW5ncyBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncyc7XG5pbXBvcnQgeyBDT05UQUlORVJTLCBESU1FTlNJT05TIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHsgVEZldGNoTG9nZ2VkSW5Vc2VyUXVlcnkgfSBmcm9tICcuLi8uLi90eXBlcy9nZW5lcmF0ZWQvbWMnO1xuaW1wb3J0IHsgZ2V0UHJldmlvdXNQcm9qZWN0S2V5IH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IEJhY2tUb1Byb2plY3QgZnJvbSAnLi4vYmFjay10by1wcm9qZWN0JztcbmltcG9ydCBMb2FkaW5nUGxhY2Vob2xkZXIgZnJvbSAnLi4vbG9hZGluZy1wbGFjZWhvbGRlcic7XG5pbXBvcnQgUHJvamVjdFN3aXRjaGVyIGZyb20gJy4uL3Byb2plY3Qtc3dpdGNoZXInO1xuaW1wb3J0IHsgUkVRVUVTVFNfSU5fRkxJR0hUX0xPQURFUl9ET01fSUQgfSBmcm9tICcuLi9yZXF1ZXN0cy1pbi1mbGlnaHQtbG9hZGVyL2NvbnN0YW50cyc7XG5pbXBvcnQgVXNlclNldHRpbmdzTWVudSBmcm9tICcuLi91c2VyLXNldHRpbmdzLW1lbnUnO1xuXG50eXBlIFByb3BzID0ge1xuICB1c2VyOiBURmV0Y2hMb2dnZWRJblVzZXJRdWVyeVsndXNlciddO1xuICBwcm9qZWN0S2V5RnJvbVVybD86IHN0cmluZztcbn07XG5cbmNvbnN0IEFwcEJhciA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgcHJldmlvdXNQcm9qZWN0S2V5ID0gZ2V0UHJldmlvdXNQcm9qZWN0S2V5KFxuICAgIHByb3BzLnVzZXI/LmRlZmF1bHRQcm9qZWN0S2V5ID8/IHVuZGVmaW5lZFxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dWlraXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgICAgICAgYm94LXNoYWRvdzogJHthcHBLaXREZXNpZ25Ub2tlbnMuc2hhZG93Rm9yQXBwYmFyfTtcbiAgICAgICAgcGFkZGluZzogMCA0MHB4O1xuICAgICAgICBtaW4taGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgei1pbmRleDogMjAwMDA7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgIGB9XG4gICAgICBkYXRhLXRlc3Q9XCJ0b3AtbmF2aWdhdGlvblwiXG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2FwcEtpdERlc2lnblRva2Vucy5tYXJnaW5SaWdodEZvckFwcGJhcn07XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8U3BhY2luZ3MuSW5saW5lIHNjYWxlPVwibVwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICA8U3BhY2luZ3MuSW5saW5lIHNjYWxlPVwibVwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgIHsoKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIXByb3BzLnVzZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPExvYWRpbmdQbGFjZWhvbGRlciBzaGFwZT1cInJlY3RcIiBzaXplPVwic1wiIC8+O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIFRoZSBgPFByb2plY3RTd2l0Y2hlcj5gIHNob3VsZCBiZSByZW5kZXJlZCBvbmx5IGlmIHRoZVxuICAgICAgICAgICAgICAvLyB1c2VyIGlzIGZldGNoZWQgYW5kIHRoZSB1c2VyIGhhcyBwcm9qZWN0cyB3aGlsZSB0aGUgYXBwIHJ1bnMgaW4gYW4gcHJvamVjdCBjb250ZXh0LlxuICAgICAgICAgICAgICBpZiAocHJvcHMudXNlci5wcm9qZWN0cy50b3RhbCA+IDAgJiYgcHJvcHMucHJvamVjdEtleUZyb21VcmwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDxQcm9qZWN0U3dpdGNoZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlIGl0J3Mgbm90IG5lY2Vzc2FyeSB0byBjaGVjayBpZiB0aGUgYHByb2plY3RLZXlgIHBhcmFtXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIGluY2x1ZGVkIGluIHRoZSBsaXN0IG9mIHByb2plY3RzLiBJbiBzdWNoIGNhc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGRyb3Bkb3duIHdpbGwgc3RpbGwgYmUgcmVuZGVyZWQgYnV0IG5vIHByb2plY3Qgd2lsbCBiZSBzZWxlY3RlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBmaW5lIGJlY2FzZSB0aGUgdXNlciBoYXMgc3RpbGwgdGhlIHBvc3NpYmlsaXR5IHRvIFwic3dpdGNoXCJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBwcm9qZWN0LlxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0S2V5PXtwcm9wcy5wcm9qZWN0S2V5RnJvbVVybCB8fCBwcmV2aW91c1Byb2plY3RLZXl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmICghcHJvcHMudXNlci5kZWZhdWx0UHJvamVjdEtleSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIHJldHVybiA8QmFja1RvUHJvamVjdCBwcm9qZWN0S2V5PXtwcmV2aW91c1Byb2plY3RLZXl9IC8+O1xuICAgICAgICAgICAgfSkoKX1cbiAgICAgICAgICAgIHsvKiBUaGlzIG5vZGUgaXMgdXNlZCBieSBhIHJlYWN0IHBvcnRhbCAqL31cbiAgICAgICAgICAgIDxkaXYgaWQ9e0NPTlRBSU5FUlMuTE9DQUxFX1NXSVRDSEVSfSAvPlxuICAgICAgICAgIDwvU3BhY2luZ3MuSW5saW5lPlxuICAgICAgICAgIDxTcGFjaW5ncy5JbmxpbmU+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGlkPXtSRVFVRVNUU19JTl9GTElHSFRfTE9BREVSX0RPTV9JRH1cbiAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1NwYWNpbmdzLklubGluZT5cbiAgICAgICAgPC9TcGFjaW5ncy5JbmxpbmU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBpZD17Q09OVEFJTkVSUy5MRUZUX09GX1BST0ZJTEV9PjwvZGl2PlxuICAgICAgICB7cHJvcHMudXNlciA/IChcbiAgICAgICAgICA8VXNlclNldHRpbmdzTWVudVxuICAgICAgICAgICAgbGFuZ3VhZ2U9e3Byb3BzLnVzZXIubGFuZ3VhZ2V9XG4gICAgICAgICAgICBmaXJzdE5hbWU9e3Byb3BzLnVzZXIuZmlyc3ROYW1lfVxuICAgICAgICAgICAgbGFzdE5hbWU9e3Byb3BzLnVzZXIubGFzdE5hbWV9XG4gICAgICAgICAgICBncmF2YXRhckhhc2g9e3Byb3BzLnVzZXIuZ3JhdmF0YXJIYXNofVxuICAgICAgICAgICAgZW1haWw9e3Byb3BzLnVzZXIuZW1haWx9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8TG9hZGluZ1BsYWNlaG9sZGVyIHNoYXBlPVwiZG90XCIgc2l6ZT1cImxcIiAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuQXBwQmFyLmRpc3BsYXlOYW1lID0gJ0FwcEJhcic7XG5cbmV4cG9ydCBkZWZhdWx0IEFwcEJhcjtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$3
};
var _ref2$1 = process.env.NODE_ENV === "production" ? {
  name: "36bnqj",
  styles: "display:flex;flex:1"
} : {
  name: "p3e2aw-AppBar",
  styles: "display:flex;flex:1;label:AppBar;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC1iYXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZFc0IiLCJmaWxlIjoiYXBwLWJhci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgYXBwS2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtZnJvbnRlbmQvYXBwbGljYXRpb24tY29tcG9uZW50cyc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgdWlraXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBTcGFjaW5ncyBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncyc7XG5pbXBvcnQgeyBDT05UQUlORVJTLCBESU1FTlNJT05TIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHsgVEZldGNoTG9nZ2VkSW5Vc2VyUXVlcnkgfSBmcm9tICcuLi8uLi90eXBlcy9nZW5lcmF0ZWQvbWMnO1xuaW1wb3J0IHsgZ2V0UHJldmlvdXNQcm9qZWN0S2V5IH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IEJhY2tUb1Byb2plY3QgZnJvbSAnLi4vYmFjay10by1wcm9qZWN0JztcbmltcG9ydCBMb2FkaW5nUGxhY2Vob2xkZXIgZnJvbSAnLi4vbG9hZGluZy1wbGFjZWhvbGRlcic7XG5pbXBvcnQgUHJvamVjdFN3aXRjaGVyIGZyb20gJy4uL3Byb2plY3Qtc3dpdGNoZXInO1xuaW1wb3J0IHsgUkVRVUVTVFNfSU5fRkxJR0hUX0xPQURFUl9ET01fSUQgfSBmcm9tICcuLi9yZXF1ZXN0cy1pbi1mbGlnaHQtbG9hZGVyL2NvbnN0YW50cyc7XG5pbXBvcnQgVXNlclNldHRpbmdzTWVudSBmcm9tICcuLi91c2VyLXNldHRpbmdzLW1lbnUnO1xuXG50eXBlIFByb3BzID0ge1xuICB1c2VyOiBURmV0Y2hMb2dnZWRJblVzZXJRdWVyeVsndXNlciddO1xuICBwcm9qZWN0S2V5RnJvbVVybD86IHN0cmluZztcbn07XG5cbmNvbnN0IEFwcEJhciA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgcHJldmlvdXNQcm9qZWN0S2V5ID0gZ2V0UHJldmlvdXNQcm9qZWN0S2V5KFxuICAgIHByb3BzLnVzZXI/LmRlZmF1bHRQcm9qZWN0S2V5ID8/IHVuZGVmaW5lZFxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dWlraXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgICAgICAgYm94LXNoYWRvdzogJHthcHBLaXREZXNpZ25Ub2tlbnMuc2hhZG93Rm9yQXBwYmFyfTtcbiAgICAgICAgcGFkZGluZzogMCA0MHB4O1xuICAgICAgICBtaW4taGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgei1pbmRleDogMjAwMDA7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgIGB9XG4gICAgICBkYXRhLXRlc3Q9XCJ0b3AtbmF2aWdhdGlvblwiXG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2FwcEtpdERlc2lnblRva2Vucy5tYXJnaW5SaWdodEZvckFwcGJhcn07XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8U3BhY2luZ3MuSW5saW5lIHNjYWxlPVwibVwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICA8U3BhY2luZ3MuSW5saW5lIHNjYWxlPVwibVwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgIHsoKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIXByb3BzLnVzZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPExvYWRpbmdQbGFjZWhvbGRlciBzaGFwZT1cInJlY3RcIiBzaXplPVwic1wiIC8+O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIFRoZSBgPFByb2plY3RTd2l0Y2hlcj5gIHNob3VsZCBiZSByZW5kZXJlZCBvbmx5IGlmIHRoZVxuICAgICAgICAgICAgICAvLyB1c2VyIGlzIGZldGNoZWQgYW5kIHRoZSB1c2VyIGhhcyBwcm9qZWN0cyB3aGlsZSB0aGUgYXBwIHJ1bnMgaW4gYW4gcHJvamVjdCBjb250ZXh0LlxuICAgICAgICAgICAgICBpZiAocHJvcHMudXNlci5wcm9qZWN0cy50b3RhbCA+IDAgJiYgcHJvcHMucHJvamVjdEtleUZyb21VcmwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDxQcm9qZWN0U3dpdGNoZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlIGl0J3Mgbm90IG5lY2Vzc2FyeSB0byBjaGVjayBpZiB0aGUgYHByb2plY3RLZXlgIHBhcmFtXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIGluY2x1ZGVkIGluIHRoZSBsaXN0IG9mIHByb2plY3RzLiBJbiBzdWNoIGNhc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGRyb3Bkb3duIHdpbGwgc3RpbGwgYmUgcmVuZGVyZWQgYnV0IG5vIHByb2plY3Qgd2lsbCBiZSBzZWxlY3RlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBmaW5lIGJlY2FzZSB0aGUgdXNlciBoYXMgc3RpbGwgdGhlIHBvc3NpYmlsaXR5IHRvIFwic3dpdGNoXCJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBwcm9qZWN0LlxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0S2V5PXtwcm9wcy5wcm9qZWN0S2V5RnJvbVVybCB8fCBwcmV2aW91c1Byb2plY3RLZXl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmICghcHJvcHMudXNlci5kZWZhdWx0UHJvamVjdEtleSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIHJldHVybiA8QmFja1RvUHJvamVjdCBwcm9qZWN0S2V5PXtwcmV2aW91c1Byb2plY3RLZXl9IC8+O1xuICAgICAgICAgICAgfSkoKX1cbiAgICAgICAgICAgIHsvKiBUaGlzIG5vZGUgaXMgdXNlZCBieSBhIHJlYWN0IHBvcnRhbCAqL31cbiAgICAgICAgICAgIDxkaXYgaWQ9e0NPTlRBSU5FUlMuTE9DQUxFX1NXSVRDSEVSfSAvPlxuICAgICAgICAgIDwvU3BhY2luZ3MuSW5saW5lPlxuICAgICAgICAgIDxTcGFjaW5ncy5JbmxpbmU+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGlkPXtSRVFVRVNUU19JTl9GTElHSFRfTE9BREVSX0RPTV9JRH1cbiAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1NwYWNpbmdzLklubGluZT5cbiAgICAgICAgPC9TcGFjaW5ncy5JbmxpbmU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBpZD17Q09OVEFJTkVSUy5MRUZUX09GX1BST0ZJTEV9PjwvZGl2PlxuICAgICAgICB7cHJvcHMudXNlciA/IChcbiAgICAgICAgICA8VXNlclNldHRpbmdzTWVudVxuICAgICAgICAgICAgbGFuZ3VhZ2U9e3Byb3BzLnVzZXIubGFuZ3VhZ2V9XG4gICAgICAgICAgICBmaXJzdE5hbWU9e3Byb3BzLnVzZXIuZmlyc3ROYW1lfVxuICAgICAgICAgICAgbGFzdE5hbWU9e3Byb3BzLnVzZXIubGFzdE5hbWV9XG4gICAgICAgICAgICBncmF2YXRhckhhc2g9e3Byb3BzLnVzZXIuZ3JhdmF0YXJIYXNofVxuICAgICAgICAgICAgZW1haWw9e3Byb3BzLnVzZXIuZW1haWx9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8TG9hZGluZ1BsYWNlaG9sZGVyIHNoYXBlPVwiZG90XCIgc2l6ZT1cImxcIiAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuQXBwQmFyLmRpc3BsYXlOYW1lID0gJ0FwcEJhcic7XG5cbmV4cG9ydCBkZWZhdWx0IEFwcEJhcjtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$3
};
const AppBar = props => {
  var _props$user$defaultPr, _props$user;
  const previousProjectKey = getPreviousProjectKey((_props$user$defaultPr = (_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.defaultProjectKey) !== null && _props$user$defaultPr !== void 0 ? _props$user$defaultPr : undefined);
  return jsxs("div", {
    css: /*#__PURE__*/css("background-color:", designTokens.colorSurface, ";box-shadow:", designTokens$1.shadowForAppbar, ";padding:0 40px;min-height:", DIMENSIONS.header, ";position:relative;width:100%;z-index:20000;display:flex;align-items:center;justify-content:space-between;" + (process.env.NODE_ENV === "production" ? "" : ";label:AppBar;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC1iYXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlCYyIsImZpbGUiOiJhcHAtYmFyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aWtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IFNwYWNpbmdzIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzJztcbmltcG9ydCB7IENPTlRBSU5FUlMsIERJTUVOU0lPTlMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuaW1wb3J0IHR5cGUgeyBURmV0Y2hMb2dnZWRJblVzZXJRdWVyeSB9IGZyb20gJy4uLy4uL3R5cGVzL2dlbmVyYXRlZC9tYyc7XG5pbXBvcnQgeyBnZXRQcmV2aW91c1Byb2plY3RLZXkgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgQmFja1RvUHJvamVjdCBmcm9tICcuLi9iYWNrLXRvLXByb2plY3QnO1xuaW1wb3J0IExvYWRpbmdQbGFjZWhvbGRlciBmcm9tICcuLi9sb2FkaW5nLXBsYWNlaG9sZGVyJztcbmltcG9ydCBQcm9qZWN0U3dpdGNoZXIgZnJvbSAnLi4vcHJvamVjdC1zd2l0Y2hlcic7XG5pbXBvcnQgeyBSRVFVRVNUU19JTl9GTElHSFRfTE9BREVSX0RPTV9JRCB9IGZyb20gJy4uL3JlcXVlc3RzLWluLWZsaWdodC1sb2FkZXIvY29uc3RhbnRzJztcbmltcG9ydCBVc2VyU2V0dGluZ3NNZW51IGZyb20gJy4uL3VzZXItc2V0dGluZ3MtbWVudSc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHVzZXI6IFRGZXRjaExvZ2dlZEluVXNlclF1ZXJ5Wyd1c2VyJ107XG4gIHByb2plY3RLZXlGcm9tVXJsPzogc3RyaW5nO1xufTtcblxuY29uc3QgQXBwQmFyID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCBwcmV2aW91c1Byb2plY3RLZXkgPSBnZXRQcmV2aW91c1Byb2plY3RLZXkoXG4gICAgcHJvcHMudXNlcj8uZGVmYXVsdFByb2plY3RLZXkgPz8gdW5kZWZpbmVkXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2Nzc2BcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt1aWtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgICAgICBib3gtc2hhZG93OiAke2FwcEtpdERlc2lnblRva2Vucy5zaGFkb3dGb3JBcHBiYXJ9O1xuICAgICAgICBwYWRkaW5nOiAwIDQwcHg7XG4gICAgICAgIG1pbi1oZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB6LWluZGV4OiAyMDAwMDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgYH1cbiAgICAgIGRhdGEtdGVzdD1cInRvcC1uYXZpZ2F0aW9uXCJcbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgIGZsb2F0OiByaWdodDtcbiAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLm1hcmdpblJpZ2h0Rm9yQXBwYmFyfTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGB9XG4gICAgICA+XG4gICAgICAgIDxTcGFjaW5ncy5JbmxpbmUgc2NhbGU9XCJtXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgIDxTcGFjaW5ncy5JbmxpbmUgc2NhbGU9XCJtXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgeygoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghcHJvcHMudXNlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiA8TG9hZGluZ1BsYWNlaG9sZGVyIHNoYXBlPVwicmVjdFwiIHNpemU9XCJzXCIgLz47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gVGhlIGA8UHJvamVjdFN3aXRjaGVyPmAgc2hvdWxkIGJlIHJlbmRlcmVkIG9ubHkgaWYgdGhlXG4gICAgICAgICAgICAgIC8vIHVzZXIgaXMgZmV0Y2hlZCBhbmQgdGhlIHVzZXIgaGFzIHByb2plY3RzIHdoaWxlIHRoZSBhcHAgcnVucyBpbiBhbiBwcm9qZWN0IGNvbnRleHQuXG4gICAgICAgICAgICAgIGlmIChwcm9wcy51c2VyLnByb2plY3RzLnRvdGFsID4gMCAmJiBwcm9wcy5wcm9qZWN0S2V5RnJvbVVybClcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPFByb2plY3RTd2l0Y2hlclxuICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UgaXQncyBub3QgbmVjZXNzYXJ5IHRvIGNoZWNrIGlmIHRoZSBgcHJvamVjdEtleWAgcGFyYW1cbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgaW5jbHVkZWQgaW4gdGhlIGxpc3Qgb2YgcHJvamVjdHMuIEluIHN1Y2ggY2FzZVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZHJvcGRvd24gd2lsbCBzdGlsbCBiZSByZW5kZXJlZCBidXQgbm8gcHJvamVjdCB3aWxsIGJlIHNlbGVjdGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGZpbmUgYmVjYXNlIHRoZSB1c2VyIGhhcyBzdGlsbCB0aGUgcG9zc2liaWxpdHkgdG8gXCJzd2l0Y2hcIlxuICAgICAgICAgICAgICAgICAgICAvLyB0byBhIHByb2plY3QuXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RLZXk9e3Byb3BzLnByb2plY3RLZXlGcm9tVXJsIHx8IHByZXZpb3VzUHJvamVjdEtleX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaWYgKCFwcm9wcy51c2VyLmRlZmF1bHRQcm9qZWN0S2V5KSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIDxCYWNrVG9Qcm9qZWN0IHByb2plY3RLZXk9e3ByZXZpb3VzUHJvamVjdEtleX0gLz47XG4gICAgICAgICAgICB9KSgpfVxuICAgICAgICAgICAgey8qIFRoaXMgbm9kZSBpcyB1c2VkIGJ5IGEgcmVhY3QgcG9ydGFsICovfVxuICAgICAgICAgICAgPGRpdiBpZD17Q09OVEFJTkVSUy5MT0NBTEVfU1dJVENIRVJ9IC8+XG4gICAgICAgICAgPC9TcGFjaW5ncy5JbmxpbmU+XG4gICAgICAgICAgPFNwYWNpbmdzLklubGluZT5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgaWQ9e1JFUVVFU1RTX0lOX0ZMSUdIVF9MT0FERVJfRE9NX0lEfVxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvU3BhY2luZ3MuSW5saW5lPlxuICAgICAgICA8L1NwYWNpbmdzLklubGluZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGlkPXtDT05UQUlORVJTLkxFRlRfT0ZfUFJPRklMRX0+PC9kaXY+XG4gICAgICAgIHtwcm9wcy51c2VyID8gKFxuICAgICAgICAgIDxVc2VyU2V0dGluZ3NNZW51XG4gICAgICAgICAgICBsYW5ndWFnZT17cHJvcHMudXNlci5sYW5ndWFnZX1cbiAgICAgICAgICAgIGZpcnN0TmFtZT17cHJvcHMudXNlci5maXJzdE5hbWV9XG4gICAgICAgICAgICBsYXN0TmFtZT17cHJvcHMudXNlci5sYXN0TmFtZX1cbiAgICAgICAgICAgIGdyYXZhdGFySGFzaD17cHJvcHMudXNlci5ncmF2YXRhckhhc2h9XG4gICAgICAgICAgICBlbWFpbD17cHJvcHMudXNlci5lbWFpbH1cbiAgICAgICAgICAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxMb2FkaW5nUGxhY2Vob2xkZXIgc2hhcGU9XCJkb3RcIiBzaXplPVwibFwiIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5BcHBCYXIuZGlzcGxheU5hbWUgPSAnQXBwQmFyJztcblxuZXhwb3J0IGRlZmF1bHQgQXBwQmFyO1xuIl19 */"),
    "data-test": "top-navigation",
    children: [jsx("div", {
      css: /*#__PURE__*/css("float:right;font-weight:normal;font-size:1rem;margin-right:", designTokens$1.marginRightForAppbar, ";display:flex;align-items:center;" + (process.env.NODE_ENV === "production" ? "" : ";label:AppBar;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC1iYXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdDZ0IiLCJmaWxlIjoiYXBwLWJhci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgYXBwS2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtZnJvbnRlbmQvYXBwbGljYXRpb24tY29tcG9uZW50cyc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgdWlraXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBTcGFjaW5ncyBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncyc7XG5pbXBvcnQgeyBDT05UQUlORVJTLCBESU1FTlNJT05TIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHsgVEZldGNoTG9nZ2VkSW5Vc2VyUXVlcnkgfSBmcm9tICcuLi8uLi90eXBlcy9nZW5lcmF0ZWQvbWMnO1xuaW1wb3J0IHsgZ2V0UHJldmlvdXNQcm9qZWN0S2V5IH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IEJhY2tUb1Byb2plY3QgZnJvbSAnLi4vYmFjay10by1wcm9qZWN0JztcbmltcG9ydCBMb2FkaW5nUGxhY2Vob2xkZXIgZnJvbSAnLi4vbG9hZGluZy1wbGFjZWhvbGRlcic7XG5pbXBvcnQgUHJvamVjdFN3aXRjaGVyIGZyb20gJy4uL3Byb2plY3Qtc3dpdGNoZXInO1xuaW1wb3J0IHsgUkVRVUVTVFNfSU5fRkxJR0hUX0xPQURFUl9ET01fSUQgfSBmcm9tICcuLi9yZXF1ZXN0cy1pbi1mbGlnaHQtbG9hZGVyL2NvbnN0YW50cyc7XG5pbXBvcnQgVXNlclNldHRpbmdzTWVudSBmcm9tICcuLi91c2VyLXNldHRpbmdzLW1lbnUnO1xuXG50eXBlIFByb3BzID0ge1xuICB1c2VyOiBURmV0Y2hMb2dnZWRJblVzZXJRdWVyeVsndXNlciddO1xuICBwcm9qZWN0S2V5RnJvbVVybD86IHN0cmluZztcbn07XG5cbmNvbnN0IEFwcEJhciA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgcHJldmlvdXNQcm9qZWN0S2V5ID0gZ2V0UHJldmlvdXNQcm9qZWN0S2V5KFxuICAgIHByb3BzLnVzZXI/LmRlZmF1bHRQcm9qZWN0S2V5ID8/IHVuZGVmaW5lZFxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dWlraXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgICAgICAgYm94LXNoYWRvdzogJHthcHBLaXREZXNpZ25Ub2tlbnMuc2hhZG93Rm9yQXBwYmFyfTtcbiAgICAgICAgcGFkZGluZzogMCA0MHB4O1xuICAgICAgICBtaW4taGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgei1pbmRleDogMjAwMDA7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgIGB9XG4gICAgICBkYXRhLXRlc3Q9XCJ0b3AtbmF2aWdhdGlvblwiXG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke2FwcEtpdERlc2lnblRva2Vucy5tYXJnaW5SaWdodEZvckFwcGJhcn07XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8U3BhY2luZ3MuSW5saW5lIHNjYWxlPVwibVwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICA8U3BhY2luZ3MuSW5saW5lIHNjYWxlPVwibVwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgIHsoKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIXByb3BzLnVzZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPExvYWRpbmdQbGFjZWhvbGRlciBzaGFwZT1cInJlY3RcIiBzaXplPVwic1wiIC8+O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIFRoZSBgPFByb2plY3RTd2l0Y2hlcj5gIHNob3VsZCBiZSByZW5kZXJlZCBvbmx5IGlmIHRoZVxuICAgICAgICAgICAgICAvLyB1c2VyIGlzIGZldGNoZWQgYW5kIHRoZSB1c2VyIGhhcyBwcm9qZWN0cyB3aGlsZSB0aGUgYXBwIHJ1bnMgaW4gYW4gcHJvamVjdCBjb250ZXh0LlxuICAgICAgICAgICAgICBpZiAocHJvcHMudXNlci5wcm9qZWN0cy50b3RhbCA+IDAgJiYgcHJvcHMucHJvamVjdEtleUZyb21VcmwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDxQcm9qZWN0U3dpdGNoZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlIGl0J3Mgbm90IG5lY2Vzc2FyeSB0byBjaGVjayBpZiB0aGUgYHByb2plY3RLZXlgIHBhcmFtXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIGluY2x1ZGVkIGluIHRoZSBsaXN0IG9mIHByb2plY3RzLiBJbiBzdWNoIGNhc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGRyb3Bkb3duIHdpbGwgc3RpbGwgYmUgcmVuZGVyZWQgYnV0IG5vIHByb2plY3Qgd2lsbCBiZSBzZWxlY3RlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBmaW5lIGJlY2FzZSB0aGUgdXNlciBoYXMgc3RpbGwgdGhlIHBvc3NpYmlsaXR5IHRvIFwic3dpdGNoXCJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBwcm9qZWN0LlxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0S2V5PXtwcm9wcy5wcm9qZWN0S2V5RnJvbVVybCB8fCBwcmV2aW91c1Byb2plY3RLZXl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmICghcHJvcHMudXNlci5kZWZhdWx0UHJvamVjdEtleSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIHJldHVybiA8QmFja1RvUHJvamVjdCBwcm9qZWN0S2V5PXtwcmV2aW91c1Byb2plY3RLZXl9IC8+O1xuICAgICAgICAgICAgfSkoKX1cbiAgICAgICAgICAgIHsvKiBUaGlzIG5vZGUgaXMgdXNlZCBieSBhIHJlYWN0IHBvcnRhbCAqL31cbiAgICAgICAgICAgIDxkaXYgaWQ9e0NPTlRBSU5FUlMuTE9DQUxFX1NXSVRDSEVSfSAvPlxuICAgICAgICAgIDwvU3BhY2luZ3MuSW5saW5lPlxuICAgICAgICAgIDxTcGFjaW5ncy5JbmxpbmU+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGlkPXtSRVFVRVNUU19JTl9GTElHSFRfTE9BREVSX0RPTV9JRH1cbiAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1NwYWNpbmdzLklubGluZT5cbiAgICAgICAgPC9TcGFjaW5ncy5JbmxpbmU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBpZD17Q09OVEFJTkVSUy5MRUZUX09GX1BST0ZJTEV9PjwvZGl2PlxuICAgICAgICB7cHJvcHMudXNlciA/IChcbiAgICAgICAgICA8VXNlclNldHRpbmdzTWVudVxuICAgICAgICAgICAgbGFuZ3VhZ2U9e3Byb3BzLnVzZXIubGFuZ3VhZ2V9XG4gICAgICAgICAgICBmaXJzdE5hbWU9e3Byb3BzLnVzZXIuZmlyc3ROYW1lfVxuICAgICAgICAgICAgbGFzdE5hbWU9e3Byb3BzLnVzZXIubGFzdE5hbWV9XG4gICAgICAgICAgICBncmF2YXRhckhhc2g9e3Byb3BzLnVzZXIuZ3JhdmF0YXJIYXNofVxuICAgICAgICAgICAgZW1haWw9e3Byb3BzLnVzZXIuZW1haWx9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8TG9hZGluZ1BsYWNlaG9sZGVyIHNoYXBlPVwiZG90XCIgc2l6ZT1cImxcIiAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuQXBwQmFyLmRpc3BsYXlOYW1lID0gJ0FwcEJhcic7XG5cbmV4cG9ydCBkZWZhdWx0IEFwcEJhcjtcbiJdfQ== */"),
      children: jsxs(Spacings.Inline, {
        scale: "m",
        alignItems: "center",
        children: [jsxs(Spacings.Inline, {
          scale: "m",
          alignItems: "center",
          children: [(() => {
            if (!props.user) {
              return jsx(LoadingPlaceholder, {
                shape: "rect",
                size: "s"
              });
            }
            // The `<ProjectSwitcher>` should be rendered only if the
            // user is fetched and the user has projects while the app runs in an project context.
            if (props.user.projects.total > 0 && props.projectKeyFromUrl) return jsx(ProjectSwitcher
            // In this case it's not necessary to check if the `projectKey` param
            // is included in the list of projects. In such case
            // the dropdown will still be rendered but no project will be selected.
            // This is fine becase the user has still the possibility to "switch"
            // to a project.
            , {
              projectKey: props.projectKeyFromUrl || previousProjectKey
            });
            if (!props.user.defaultProjectKey) return null;
            return jsx(BackToProject, {
              projectKey: previousProjectKey
            });
          })(), jsx("div", {
            id: CONTAINERS.LOCALE_SWITCHER
          })]
        }), jsx(Spacings.Inline, {
          children: jsx("div", {
            id: REQUESTS_IN_FLIGHT_LOADER_DOM_ID,
            css: _ref2$1
          })
        })]
      })
    }), jsxs("div", {
      css: _ref$1,
      children: [jsx("div", {
        id: CONTAINERS.LEFT_OF_PROFILE
      }), props.user ? jsx(UserSettingsMenu, {
        language: props.user.language,
        firstName: props.user.firstName,
        lastName: props.user.lastName,
        gravatarHash: props.user.gravatarHash,
        email: props.user.email
      }) : jsx(LoadingPlaceholder, {
        shape: "dot",
        size: "l"
      })]
    })]
  });
};
AppBar.displayName = 'AppBar';

const ApplicationLoader = props => jsxs("div", {
  css: /*#__PURE__*/css("display:flex;align-items:center;justify-content:center;flex:1;flex-direction:column;height:100vh;padding:", customProperties.spacingL, ";>*+*{margin:", customProperties.spacingL, " 0 0;}" + (process.env.NODE_ENV === "production" ? "" : ";label:ApplicationLoader;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcGxpY2F0aW9uLWxvYWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV1kiLCJmaWxlIjoiYXBwbGljYXRpb24tbG9hZGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBDVExvZ29TVkcgZnJvbSAnQGNvbW1lcmNldG9vbHMtZnJvbnRlbmQvYXNzZXRzL2ltYWdlcy9jdC1sb2dvLnN2Zyc7XG5pbXBvcnQgeyBjdXN0b21Qcm9wZXJ0aWVzIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgTG9hZGluZ1NwaW5uZXIgZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvbG9hZGluZy1zcGlubmVyJztcblxudHlwZSBQcm9wcyA9IHtcbiAgc2hvd0xvZ28/OiBib29sZWFuO1xufTtcblxuY29uc3QgQXBwbGljYXRpb25Mb2FkZXIgPSAocHJvcHM6IFByb3BzKSA9PiAoXG4gIDxkaXZcbiAgICBjc3M9e2Nzc2BcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBmbGV4OiAxO1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICBwYWRkaW5nOiAke2N1c3RvbVByb3BlcnRpZXMuc3BhY2luZ0x9O1xuXG4gICAgICA+ICogKyAqIHtcbiAgICAgICAgbWFyZ2luOiAke2N1c3RvbVByb3BlcnRpZXMuc3BhY2luZ0x9IDAgMDtcbiAgICAgIH1cbiAgICBgfVxuICAgIGRhdGEtdGVzdGlkPVwiYXBwbGljYXRpb24tbG9hZGVyXCJcbiAgPlxuICAgIDxMb2FkaW5nU3Bpbm5lciAvPlxuICAgIHtwcm9wcy5zaG93TG9nbyA9PT0gdHJ1ZSA/IChcbiAgICAgIDxpbWcgYWx0PVwiY29tbWVyY2V0b29scyBsb2dvXCIgc3JjPXtDVExvZ29TVkd9IC8+XG4gICAgKSA6IG51bGx9XG4gIDwvZGl2PlxuKTtcbkFwcGxpY2F0aW9uTG9hZGVyLmRpc3BsYXlOYW1lID0gJ0FwcGxpY2F0aW9uTG9hZGVyJztcblxuZXhwb3J0IGRlZmF1bHQgQXBwbGljYXRpb25Mb2FkZXI7XG4iXX0= */"),
  "data-testid": "application-loader",
  children: [jsx(LoadingSpinner, {}), props.showLogo === true ? jsx("img", {
    alt: "commercetools logo",
    src: CTLogoSVG
  }) : null]
});
ApplicationLoader.displayName = 'ApplicationLoader';

const getBrowserHistory = () => history;
const getBrowserLocale = win => {
  const browserLocale = win && win.navigator && win.navigator.language;
  return getSupportedLocale(browserLocale);
};

const hideAppLoader = () => {
  /**
   * NOTE:
   *   This function is defined in the `index.html` in a script-tag
   *   by the `html-template.js` in the `mc-scripts`. There are
   *   alternative ways of acheiving this namely:
   *   1. Using custom events and dispatching here
   *     - Not supported in IE11 and would need a polyfill
   *   2. Removing the DOM node here
   *     - Both `index.html` and this component would have to
   *       now the div's id/class. If one would change the index.html
   *       the app would never show (always show the loading screen)
   */
  if (window.onAppLoaded) window.onAppLoaded();
};
const ConfigureIntlProvider = props => {
  useEffect(() => {
    if (props.locale) {
      hideAppLoader();
    }
  }, [props.locale]);
  if (!props.locale) {
    return null;
  }
  return jsx(IntlProvider, {
    locale: props.locale,
    messages: props.messages,
    children: props.children
  });
};
ConfigureIntlProvider.propTypes = process.env.NODE_ENV !== "production" ? {
  locale: _pt.string,
  children: _pt.node.isRequired
} : {};
ConfigureIntlProvider.displayName = 'ConfigureIntlProvider';

const ErrorApologizer = /*#__PURE__*/lazy(() => import('./error-apologizer-76f087f4.esm.js' /* webpackChunkName: "error-apologizer" */));

var ProjectQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectKey" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "key" }, value: { kind: "Variable", name: { kind: "Name", value: "projectKey" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "version" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "countries" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "currencies" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "languages" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "initialized" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "expiry" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "daysLeft" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "suspension" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "reason" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedPermissions" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedActionRights" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedDataFences" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "StoreDataFence" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "__typename" }, arguments: [], directives: [] }] } }] } }, { kind: "Field", name: { kind: "Name", value: "allPermissionsForAllApplications" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "allAppliedPermissions" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedActionRights" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedMenuVisibilities" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "allAppliedDataFences" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "StoreDataFence" } }, directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "__typename" }, arguments: [], directives: [] }] } }] } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "sampleDataImportDataset" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 1025, source: { body: "query FetchProject($projectKey: String) {\n  project(key: $projectKey) {\n    key\n    version\n    name\n    countries\n    currencies\n    languages\n    initialized\n    expiry {\n      isActive\n      daysLeft\n    }\n    suspension {\n      isActive\n      reason\n    }\n    allAppliedPermissions {\n      name\n      value\n    }\n    allAppliedActionRights {\n      group\n      name\n      value\n    }\n    allAppliedDataFences {\n      ... on StoreDataFence {\n        type\n        name\n        value\n        group\n        __typename\n      }\n    }\n    allPermissionsForAllApplications {\n      allAppliedPermissions {\n        name\n        value\n      }\n      allAppliedActionRights {\n        group\n        name\n        value\n      }\n      allAppliedMenuVisibilities {\n        name\n        value\n      }\n      allAppliedDataFences {\n        ... on StoreDataFence {\n          type\n          name\n          value\n          group\n          __typename\n        }\n      }\n    }\n    owner {\n      id\n      name\n    }\n    sampleDataImportDataset\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const FetchProject = props => {
  const _useMcQuery = useMcQuery(ProjectQuery, {
      onError: reportErrorToSentry,
      variables: {
        projectKey: props.projectKey
      },
      context: {
        target: GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND
      },
      skip: props.skip === true
    }),
    loading = _useMcQuery.loading,
    data = _useMcQuery.data,
    error = _useMcQuery.error;
  return jsx(Fragment, {
    children: props.children({
      isLoading: loading,
      error,
      project: data && data.project
    })
  });
};
FetchProject.propTypes = {
  projectKey: _pt.string,
  skip: _pt.bool,
  children: _pt.func.isRequired
};
FetchProject.displayName = 'FetchProject';

var LoggedInUserQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchLoggedInUser" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", alias: { kind: "Name", value: "user" }, name: { kind: "Name", value: "me" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "email" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "createdAt" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "gravatarHash" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "firstName" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "lastName" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "language" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "numberFormat" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "timeZone" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingId" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingGroup" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingSubgroup" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingTeam" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "launchdarklyTrackingTenant" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "defaultProjectKey" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "businessRole" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "total" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "results" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "suspension" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "expiry" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "isActive" }, arguments: [], directives: [] }] } }] } }] } }, { kind: "Field", name: { kind: "Name", value: "idTokenUserInfo" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "iss" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "sub" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "aud" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "exp" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "iat" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "email" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "additionalClaims" }, arguments: [], directives: [] }] } }] } }] } }], loc: { start: 0, end: 654, source: { body: "query FetchLoggedInUser {\n  user: me {\n    id\n    email\n    createdAt\n    gravatarHash\n    firstName\n    lastName\n    language\n    numberFormat\n    timeZone\n    launchdarklyTrackingId\n    launchdarklyTrackingGroup\n    launchdarklyTrackingSubgroup\n    launchdarklyTrackingTeam\n    launchdarklyTrackingTenant\n    defaultProjectKey\n    businessRole\n    projects {\n      total\n      results {\n        name\n        key\n        suspension {\n          isActive\n        }\n        expiry {\n          isActive\n        }\n      }\n    }\n    idTokenUserInfo {\n      iss\n      sub\n      aud\n      exp\n      iat\n      email\n      name\n      additionalClaims\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const FetchUser = props => {
  const _useMcQuery = useMcQuery(LoggedInUserQuery, {
      onError: reportErrorToSentry,
      context: {
        target: GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND
      }
    }),
    loading = _useMcQuery.loading,
    data = _useMcQuery.data,
    error = _useMcQuery.error;
  return jsx(Fragment, {
    children: props.children({
      isLoading: loading,
      user: data && data.user,
      error
    })
  });
};
FetchUser.propTypes = {
  children: _pt.func.isRequired
};
FetchUser.displayName = 'FetchUser';

const Navbar = /*#__PURE__*/lazy(() => import('./navbar-508a24b2.esm.js' /* webpackChunkName: "navbar" */));

const ProjectContainer = /*#__PURE__*/lazy(() => import('./project-container-3c8f6f03.esm.js' /* webpackChunkName: "project-container" */));

const getSelectedDataLocaleForProject = projectLocales => {
  const cachedDataLocale = window.localStorage.getItem(STORAGE_KEYS.SELECTED_DATA_LOCALE);
  // Make sure the cached locale is listed in the selected project
  const isCachedDataLocaleIncludedInProjectLanguages = _includesInstanceProperty(projectLocales).call(projectLocales, cachedDataLocale || '');
  if (cachedDataLocale && isCachedDataLocaleIncludedInProjectLanguages) return cachedDataLocale;
  // Pick the first locale from the list
  const defaultDataLocaleForProject = projectLocales[0];
  // Cache it
  window.localStorage.setItem(STORAGE_KEYS.SELECTED_DATA_LOCALE, defaultDataLocaleForProject);
  return defaultDataLocaleForProject;
};
const ProjectDataLocale = props => {
  const _useState = useState(getSelectedDataLocaleForProject(props.locales)),
    _useState2 = _slicedToArray(_useState, 2),
    locale = _useState2[0],
    setLocale = _useState2[1];
  const handleSetProjectDataLocale = useCallback(locale => {
    setLocale(locale);
    // Cache it
    window.localStorage.setItem(STORAGE_KEYS.SELECTED_DATA_LOCALE, locale);
  }, []);
  return jsx(Fragment, {
    children: props.children({
      locale,
      setProjectDataLocale: handleSetProjectDataLocale
    })
  });
};
ProjectDataLocale.propTypes = {
  locales: _pt.arrayOf(_pt.string).isRequired,
  children: _pt.func.isRequired
};
ProjectDataLocale.displayName = 'ProjectDataLocale';

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
let ErrorBoundary = /*#__PURE__*/function (_Component) {
  _inherits(ErrorBoundary, _Component);
  var _super = _createSuper(ErrorBoundary);
  function ErrorBoundary() {
    var _this;
    _classCallCheck(this, ErrorBoundary);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call(this, ...args);
    _this.state = {
      hasError: false
    };
    return _this;
  }
  _createClass(ErrorBoundary, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      const hasRouteChanged = prevProps.pathname !== this.props.pathname;
      this.setState(prevState => hasRouteChanged && prevState.hasError ? {
        hasError: false
      } : null);
    }
  }, {
    key: "componentDidCatch",
    value: function componentDidCatch(error, errorInfo) {
      // Note: In development mode componentDidCatch is not based on try-catch
      // to catch exceptions. Thus exceptions caught here will also be caught in
      // the global `error` event listener (setup-global-error-listener.js).
      // see: https://github.com/facebook/react/issues/10474
      reportErrorToSentry(error, {
        extra: errorInfo
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.hasError) {
        return jsx(ErrorApologizer, {});
      }
      return jsx(Fragment, {
        children: this.props.children
      });
    }
  }], [{
    key: "getDerivedStateFromError",
    value: function getDerivedStateFromError( /* error */
    ) {
      // Update state so the next render will show the fallback UI.
      return {
        hasError: true
      };
    }
  }]);
  return ErrorBoundary;
}(Component);
ErrorBoundary.propTypes = process.env.NODE_ENV !== "production" ? {
  pathname: _pt.string,
  children: _pt.node.isRequired
} : {};

function _EMOTION_STRINGIFIED_CSS_ERROR__$2() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const ButlerContainer = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1fuwyk10"
} : {
  target: "e1fuwyk10",
  label: "ButlerContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "xvk698",
  styles: "position:absolute;left:0;bottom:0;top:0;right:0;background-color:rgba(0, 0, 0, 0.35);z-index:20001"
} : {
  name: "xvk698",
  styles: "position:absolute;left:0;bottom:0;top:0;right:0;background-color:rgba(0, 0, 0, 0.35);z-index:20001",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dGxlci1jb250YWluZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVrQyIsImZpbGUiOiJidXRsZXItY29udGFpbmVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuY29uc3QgQnV0bGVyQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICBib3R0b206IDA7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4zNSk7XG4gIHotaW5kZXg6IDIwMDAxO1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgQnV0bGVyQ29udGFpbmVyO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$2
});

var pimIndexerStates = {
  // we did not check yet
  UNCHECKED: 'UNCHECKED',
  // the project is indexed by pim-indexer
  INDEXED: 'INDEXED',
  // the project is not indexed by pim-indexer
  NOT_INDEXED: 'NOT_INDEXED'
};

const QuickAccess = /*#__PURE__*/lazy(() => import('./quick-access-a4eef30e.esm.js' /* webpackChunkName: "quick-access" */));

const QuickAccessTrigger = props => {
  const _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isVisible = _useState2[0],
    setIsVisible = _useState2[1];
  const open = useCallback(() => {
    setIsVisible(true);
  }, []);
  const close = useCallback(() => {
    setIsVisible(false);
  }, []);
  // We store the information of whether a project is indexed by pim-indexer,
  // to avoid having to refetch that information every time Quick Access is
  // opened. We can't move the information to the quick-access.js component
  // as that component unmounts and would lose its state.
  //
  // We need to know whether a project is indexed by pim-indexer to know
  // whether we should query pim-search or whether we can skip that request.
  //
  // We don't need to update this information when the project key changes,
  // as changing a project always results in a full page reload anyways.
  const _useState3 = useState(pimIndexerStates.UNCHECKED),
    _useState4 = _slicedToArray(_useState3, 2),
    pimIndexerState = _useState4[0],
    setPimIndexerState = _useState4[1];
  const handlePimIndexerStateChange = useCallback(nextPimIndexerState => {
    setPimIndexerState(nextPimIndexerState);
  }, []);
  const keyHandler = useCallback(event => {
    const hotKey = 'f';
    // avoid interfering with any key combinations using modifier keys
    if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) return;

    // Let users close QuickAccess by pressing Escape
    if (event.key === 'Escape' && event.target.id === 'quick-access-search-input') {
      close();
      return;
    }

    // Avoid interfering with any other elements. We only
    // open the QuickAccess when nothing was focused, so target is document.body
    if (event.target !== document.body &&
    // tabIndex="-1" has a special meaning
    // It will make the element focusable, while hiding it from the
    // navigation. It is typically used for modals and overlays.
    // react-modal uses it for example. We want to treat those elements
    // similar to document.body.
    // See https://stackoverflow.com/a/32912224
    event.target.getAttribute('tabindex') !== '-1' &&
    // Do not prevent Quick Access from opening when a link has focus
    event.target.nodeName !== 'A') return;
    if (event.key === hotKey) {
      if (!isVisible) {
        // prevent the letter from appearing in the search input when
        // it is the key press that lead to opening Quick Access
        event.preventDefault();
      }
      open();
    }
    return;
  }, [close, isVisible, open]);
  useEffect(() => {
    document.addEventListener('keydown', keyHandler);
    return () => {
      document.removeEventListener('keydown', keyHandler);
    };
  }, [keyHandler]);
  if (!isVisible) return null;
  return jsx(ErrorBoundary, {
    children: jsx(Suspense, {
      fallback: jsx(ButlerContainer, {
        tabIndex: -1
      }),
      children: jsx(QuickAccess, {
        pimIndexerState: pimIndexerState,
        onPimIndexerStateChange: handlePimIndexerStateChange,
        onClose: close,
        onChangeProjectDataLocale: props.onChangeProjectDataLocale
      })
    })
  });
};
QuickAccessTrigger.propTypes = process.env.NODE_ENV !== "production" ? {
  onChangeProjectDataLocale: _pt.func
} : {};
QuickAccessTrigger.displayName = 'QuickAccessTrigger';

const RedirectToLogout = /*#__PURE__*/lazy(() => import('./redirect-to-logout-d194325e.esm.js' /* webpackChunkName: "redirect-to-logout" */));

const RedirectToProjectCreate = /*#__PURE__*/lazy(() => import('./redirect-to-project-create-c5323504.esm.js' /* webpackChunkName: "redirect-to-project-create" */));

function ownKeys$7(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys$7(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys$7(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
var FetchAllMenuFeatureToggles = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchAllMenuFeatureToggles" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "allFeatureToggles" }, arguments: [], directives: [] }] } }], loc: { start: 0, end: 57, source: { body: "query FetchAllMenuFeatureToggles {\n  allFeatureToggles\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const defaultApiUrl = window.location.origin;
const getDefaultedFeatureToggles = allFeatureToggles => _reduceInstanceProperty(allFeatureToggles).call(allFeatureToggles, (previouslyDefaultedFeatureToggles, nextFeatureToggle) => _objectSpread$7(_objectSpread$7({}, previouslyDefaultedFeatureToggles), {}, {
  [nextFeatureToggle]: false
}), {});
const useAllMenuFeatureToggles = () => {
  const servedByProxy = useIsServedByProxy();
  const mcProxyApiUrl = useApplicationContext(applicationContext => applicationContext.environment.mcProxyApiUrl);
  const _useMcQuery = useMcQuery(FetchAllMenuFeatureToggles, {
      fetchPolicy: 'cache-and-network',
      skip: !servedByProxy,
      onError: reportErrorToSentry,
      context: {
        uri: "".concat(mcProxyApiUrl || defaultApiUrl, "/api/graphql"),
        skipGraphQlTargetCheck: true
      }
    }),
    data = _useMcQuery.data,
    refetch = _useMcQuery.refetch,
    loading = _useMcQuery.loading;
  return {
    isLoading: loading,
    refetch,
    allFeatureToggles: data && getDefaultedFeatureToggles(data.allFeatureToggles) || {}
  };
};

function ownKeys$6(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context2 = ownKeys$6(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys$6(Object(t))).call(_context3, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
var AllFeaturesQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "AllFeatures" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "allFeatures" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "reason" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 72, source: { body: "query AllFeatures {\n  allFeatures {\n    name\n    value\n    reason\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
// This value is hard-coded here because we want to make sure that the
// app uses our account of LD. The value is meant to be public, so there
// is no need to be concerned about security.
const ldClientSideIdProduction = '5979d95f6040390cd07b5e01';
function getUserContextForLaunchDarklyAdapter(user, projectKey) {
  var _user$launchdarklyTra, _user$launchdarklyTra2, _user$launchdarklyTra3, _user$launchdarklyTra4, _user$launchdarklyTra5;
  return {
    kind: 'user',
    key: user === null || user === void 0 ? void 0 : user.id,
    project: projectKey !== null && projectKey !== void 0 ? projectKey : '',
    id: (_user$launchdarklyTra = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingId) !== null && _user$launchdarklyTra !== void 0 ? _user$launchdarklyTra : '',
    team: (_user$launchdarklyTra2 = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingTeam) !== null && _user$launchdarklyTra2 !== void 0 ? _user$launchdarklyTra2 : [],
    group: (_user$launchdarklyTra3 = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingGroup) !== null && _user$launchdarklyTra3 !== void 0 ? _user$launchdarklyTra3 : '',
    subgroup: (_user$launchdarklyTra4 = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingSubgroup) !== null && _user$launchdarklyTra4 !== void 0 ? _user$launchdarklyTra4 : '',
    tenant: (_user$launchdarklyTra5 = user === null || user === void 0 ? void 0 : user.launchdarklyTrackingTenant) !== null && _user$launchdarklyTra5 !== void 0 ? _user$launchdarklyTra5 : ''
  };
}
const parseFlags = fetchedFlags => {
  var _context;
  return _Object$fromEntries(_mapInstanceProperty(_context = fetchedFlags.allFeatures).call(_context, fetchedFlag => [fetchedFlag.name, {
    value: fetchedFlag.value,
    reason: fetchedFlag.reason
  }]));
};
const SetupFlopFlipProvider = props => {
  const apolloClient = useApolloClient();
  const enableLongLivedFeatureFlags = useApplicationContext(context => context.environment.enableLongLivedFeatureFlags);
  const allMenuFeatureToggles = useAllMenuFeatureToggles();
  const flags = useMemo(() => _objectSpread$6(_objectSpread$6(_objectSpread$6({}, featureFlags.FLAGS), allMenuFeatureToggles.allFeatureToggles), _flagsInstanceProperty(props)), [allMenuFeatureToggles.allFeatureToggles, _flagsInstanceProperty(props)]);
  useMemo(() => {
    if (enableLongLivedFeatureFlags) {
      combineAdapters.combine([ldAdapter, httpAdapter]);
    } else {
      combineAdapters.combine([ldAdapter]);
    }
  }, [enableLongLivedFeatureFlags]);
  const defaultFlags = useMemo(() => _objectSpread$6(_objectSpread$6(_objectSpread$6({}, featureFlags.FLAGS), allMenuFeatureToggles.allFeatureToggles), props.defaultFlags), [allMenuFeatureToggles.allFeatureToggles, props.defaultFlags]);
  const adapterArgs = useMemo(() => {
    var _props$user, _props$ldClientSideId, _props$user2;
    return {
      user: {
        key: (_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.id
      },
      launchdarkly: {
        sdk: {
          // Allow to overwrite the client ID, passed via the `additionalEnv` properties
          // of the application config.
          // This is mostly useful for internal usage on our staging environments.
          clientSideId: (_props$ldClientSideId = props.ldClientSideId) !== null && _props$ldClientSideId !== void 0 ? _props$ldClientSideId : ldClientSideIdProduction
        },
        flags,
        context: getUserContextForLaunchDarklyAdapter(props.user, props.projectKey)
      },
      http: {
        user: {
          key: (_props$user2 = props.user) === null || _props$user2 === void 0 ? void 0 : _props$user2.id
        },
        execute: async function () {
          const response = await apolloClient.query({
            query: AllFeaturesQuery,
            errorPolicy: 'ignore',
            context: {
              target: GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND
            }
          });
          return parseFlags(response.data);
        }
      }
    };
  }, [apolloClient, flags, props.ldClientSideId, props.projectKey, props.user]);

  /**
   * The `<ApplicationShell />` tests itself. When it does so it can not setup and use
   * the `launchdarkly-adapter` and `http-adapter`. As a result the `process.env`
   * is evaluated and a test provider is rendered for feature flags.
   *
   * The `process.env` check also ensures that this block is excluded from production
   * bundles.
   */
  if (process.env.NODE_ENV === 'test') {
    const _require = require('@flopflip/react-broadcast'),
      TestProviderFlopFlip = _require.TestProviderFlopFlip;
    return jsx(TestProviderFlopFlip, {
      flags: defaultFlags,
      children: props.children
    });
  }
  return jsx(ConfigureFlopFlip, {
    adapter: combineAdapters,
    adapterArgs: adapterArgs,
    defaultFlags: defaultFlags,
    shouldDeferAdapterConfiguration: typeof props.shouldDeferAdapterConfiguration === 'boolean' ? props.shouldDeferAdapterConfiguration : !props.user || allMenuFeatureToggles.isLoading,
    children: props.children
  });
};
SetupFlopFlipProvider.propTypes = process.env.NODE_ENV !== "production" ? {
  projectKey: _pt.string,
  flags: _pt.any,
  defaultFlags: _pt.any,
  ldClientSideId: _pt.string,
  children: _pt.node.isRequired,
  shouldDeferAdapterConfiguration: _pt.bool
} : {};
SetupFlopFlipProvider.displayName = 'SetupFlopFlipProvider';

const ThemeSwitcher = () => {
  return jsx(Fragment, {
    children: jsx(ThemeProvider, {
      theme: "default",
      themeOverrides: themesOverrides.default
    })
  });
};

const VersionTracker = /*#__PURE__*/lazy(() => import('./version-tracker-e89a6e6b.esm.js' /* webpackChunkName: "version-tracker" */));

function ownKeys$5(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context2 = ownKeys$5(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys$5(Object(t))).call(_context3, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
function _EMOTION_STRINGIFIED_CSS_ERROR__$1() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const getHasUnauthorizedError = graphQLErrors => _findInstanceProperty(graphQLErrors).call(graphQLErrors, gqlError => gqlError.extensions && gqlError.extensions.code && gqlError.extensions.code === 'UNAUTHENTICATED');
const getHasUserBeenDeletedError = graphQLErrors => _findInstanceProperty(graphQLErrors).call(graphQLErrors, gqlError => {
  var _context;
  return gqlError.message &&
  // NOTE: The CTP API does not provide an error code in this case.
  _includesInstanceProperty(_context = gqlError.message).call(_context, 'was not found.');
});
const MainContainer = /*#__PURE__*/_styled("main", process.env.NODE_ENV === "production" ? {
  target: "esrtekc0"
} : {
  target: "esrtekc0",
  label: "MainContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "evthls",
  styles: "grid-column:2/3;grid-row:3/4;min-width:0;overflow-x:hidden;overflow-y:scroll;display:flex;flex-direction:column;position:relative"
} : {
  name: "evthls",
  styles: "grid-column:2/3;grid-row:3/4;min-width:0;overflow-x:hidden;overflow-y:scroll;display:flex;flex-direction:column;position:relative",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
});

/**
 * This component is rendered whenever the user is considered "authenticated"
 * and contains the "restricted" application part.
 */
var _ref = process.env.NODE_ENV === "production" ? {
  name: "tlwzvn",
  styles: "flex-grow:1;display:flex;flex-direction:column;position:relative;>*:not(:first-of-type){flex-grow:1;display:flex;flex-direction:column;}"
} : {
  name: "1y4p4ln-ApplicationShellAuthenticated",
  styles: "flex-grow:1;display:flex;flex-direction:column;position:relative;>*:not(:first-of-type){flex-grow:1;display:flex;flex-direction:column;};label:ApplicationShellAuthenticated;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "lzrvov",
  styles: "grid-column:1/2;grid-row:2/4;overflow:hidden"
} : {
  name: "b768-ApplicationShellAuthenticated",
  styles: "grid-column:1/2;grid-row:2/4;overflow:hidden;label:ApplicationShellAuthenticated;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "tjbz3t",
  styles: "grid-row:'2/3';grid-column:'2/3'"
} : {
  name: "arpkii-ApplicationShellAuthenticated",
  styles: "grid-row:'2/3';grid-column:'2/3';label:ApplicationShellAuthenticated;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "8bdwu0",
  styles: "grid-row:1;grid-column:1/3"
} : {
  name: "u4fwut-ApplicationShellAuthenticated",
  styles: "grid-row:1;grid-column:1/3;label:ApplicationShellAuthenticated;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const ApplicationShellAuthenticated = props => {
  const applicationEnvironment = useApplicationContext(context => context.environment);
  // TODO: using this hook will subscribe the component to route updates.
  // This is currently useful for detecting a change in the project key
  // from URL ("/" --> "/:projectKey").
  // However, every route change will trigger a re-render. This is probably
  // ok-ish but we might want to look into a more performant solution.
  const location = useLocation();
  const notificationsGlobalRef = useRef(null);
  const notificationsPageRef = useRef(null);
  const layoutRefs = useRef({
    notificationsGlobalRef,
    notificationsPageRef
  });
  return jsx(FetchUser, {
    children: _ref5 => {
      let isLoadingUser = _ref5.isLoading,
        user = _ref5.user,
        error = _ref5.error;
      if (error) {
        // In case there is an unauthorized error, we redirect to the login page
        if (error.graphQLErrors && _Array$isArray(error.graphQLErrors)) {
          const hasUnauthorizedError = getHasUnauthorizedError(error.graphQLErrors);
          const hasUserBeenDeletedError = getHasUserBeenDeletedError(error.graphQLErrors);
          if (hasUnauthorizedError || hasUserBeenDeletedError) {
            let logoutReason;
            if (hasUnauthorizedError) logoutReason = LOGOUT_REASONS.UNAUTHORIZED;else if (hasUserBeenDeletedError) logoutReason = LOGOUT_REASONS.DELETED;
            return jsx(RedirectToLogout, {
              reason: logoutReason
            });
          }
        }
        // Since we do not know the locale of the user, we pick it from the
        // user's browser to attempt to match the language for the correct translations.
        const userLocale = getBrowserLocale(window);
        return jsx(AsyncLocaleData, {
          locale: userLocale,
          applicationMessages: props.applicationMessages,
          children: _ref6 => {
            let locale = _ref6.locale,
              messages = _ref6.messages;
            reportErrorToSentry(error, {});
            return jsx(ConfigureIntlProvider, {
              locale: locale,
              messages: messages,
              children: jsx(ErrorApologizer, {})
            });
          }
        });
      }
      const projectKeyFromUrl = selectProjectKeyFromUrl(location.pathname);
      return jsx(ApplicationContextProvider, {
        user: user,
        environment: applicationEnvironment,
        children: jsx(AsyncLocaleData, {
          locale: user === null || user === void 0 ? void 0 : user.language,
          applicationMessages: props.applicationMessages,
          children: _ref7 => {
            let isLoadingLocaleData = _ref7.isLoading,
              locale = _ref7.locale,
              messages = _ref7.messages;
            return jsx(ConfigureIntlProvider
            // We do not want to pass the language as long as the locale data
            // is not loaded.
            , _objectSpread$5(_objectSpread$5({}, isLoadingLocaleData ? {} : {
              locale,
              messages
            }), {}, {
              children: jsx(SetupFlopFlipProvider, {
                user: user,
                projectKey: projectKeyFromUrl,
                ldClientSideId: applicationEnvironment.ldClientSideId,
                flags: props.featureFlags,
                defaultFlags: props.defaultFeatureFlags,
                children: jsxs(Fragment, {
                  children: [jsx(ThemeSwitcher, {}), jsx(VersionTracker, {}), jsx(RequestsInFlightLoader, {}), jsx(SentryUserTracker, {
                    user: user !== null && user !== void 0 ? user : undefined
                  }), jsxs("div", {
                    css: /*#__PURE__*/css("height:100vh;display:grid;grid-template-rows:auto ", DIMENSIONS.header, " 1fr;grid-template-columns:min-content 1fr;" + (process.env.NODE_ENV === "production" ? "" : ";label:ApplicationShellAuthenticated;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
                    children: [jsxs("div", {
                      ref: notificationsGlobalRef,
                      role: "region",
                      "aria-live": "polite",
                      css: _ref4,
                      children: [jsx("div", {
                        id: "above-top-navigation"
                      }), jsx(NotificationsList, {
                        domain: DOMAINS.GLOBAL
                      })]
                    }), jsx(Route, {
                      children: () => {
                        if (!projectKeyFromUrl) return jsx(QuickAccessTrigger, {});
                        return jsx(FetchProject, {
                          projectKey: projectKeyFromUrl,
                          children: _ref8 => {
                            let isProjectLoading = _ref8.isLoading,
                              project = _ref8.project;
                            if (isProjectLoading || !project) return null;

                            // when used outside of a project context,
                            // or when the project is expired or supsended
                            const shouldUseProjectContext = !(project.suspension && project.suspension.isActive || project.expiry && project.expiry.isActive);
                            if (!shouldUseProjectContext) return jsx(QuickAccessTrigger, {});
                            return jsx(ProjectDataLocale, {
                              locales: project.languages,
                              children: _ref9 => {
                                let dataLocale = _ref9.locale,
                                  setProjectDataLocale = _ref9.setProjectDataLocale;
                                return jsx(ApplicationContextProvider, {
                                  user: user,
                                  project: project,
                                  projectDataLocale: dataLocale,
                                  environment: applicationEnvironment,
                                  children: jsx(QuickAccessTrigger, {
                                    onChangeProjectDataLocale: setProjectDataLocale
                                  })
                                });
                              }
                            });
                          }
                        });
                      }
                    }), jsx("header", {
                      css: _ref3,
                      children: jsx(AppBar, {
                        user: user,
                        projectKeyFromUrl: projectKeyFromUrl
                      })
                    }), jsx("aside", {
                      css: _ref2,
                      children: (() => {
                        // The <NavBar> should only be rendered within a project
                        // context, therefore when there is a `projectKey`.
                        // If there is no `projectKey` in the URL (e.g. `/account`
                        // routes), we don't render it.
                        // NOTE: we also "cache" the `projectKey` in localStorage
                        // but this should only be used to "re-hydrate" the URL
                        // location (e.g when you go to `/`, there should be a
                        // redirect to `/:projectKey`). Therefore, we should not
                        // rely on the value in localStorage to determine which
                        // `projectKey` is currently used.
                        if (!projectKeyFromUrl) return null;
                        return jsx(FetchProject, {
                          projectKey: projectKeyFromUrl,
                          children: _ref10 => {
                            let isLoadingProject = _ref10.isLoading,
                              project = _ref10.project;
                            const isLoading = isLoadingUser || isLoadingLocaleData || isLoadingProject || !locale || !project;
                            return jsx(ApplicationContextProvider, {
                              user: user,
                              environment: applicationEnvironment
                              // NOTE: do not pass the `project` into the application context.
                              // The permissions for the Navbar are resolved separately, within
                              // a different React context.
                              ,
                              children: jsx(Navbar, {
                                applicationLocale: locale,
                                projectKey: projectKeyFromUrl,
                                project: project,
                                environment: applicationEnvironment,
                                onMenuItemClick: props.onMenuItemClick,
                                isLoading: isLoading
                              })
                            });
                          }
                        });
                      })()
                    }), isLoadingUser || isLoadingLocaleData ? jsx(MainContainer, {
                      role: "main",
                      children: jsx(ApplicationLoader, {})
                    }) : jsxs(MainContainer, {
                      role: "main",
                      children: [jsx("div", {
                        ref: notificationsPageRef,
                        children: jsx(NotificationsList, {
                          domain: DOMAINS.PAGE
                        })
                      }), jsx(NotificationsList, {
                        domain: DOMAINS.SIDE
                      }), jsxs("div", {
                        css: _ref,
                        children: [jsx(PortalsContainer
                        // @ts-ignore
                        , {
                          ref: layoutRefs,
                          offsetTop: DIMENSIONS.header,
                          offsetLeft: projectKeyFromUrl ? DIMENSIONS.navMenu : '0px',
                          offsetLeftOnExpandedMenu: projectKeyFromUrl ? DIMENSIONS.navMenuExpanded : '0px'
                        }), jsxs(Switch, {
                          children: [jsx(Redirect, {
                            from: "/profile",
                            to: "/account/profile"
                          }), jsx(Route, {
                            path: "/account",
                            children:
                            /**
                             * In case the AppShell uses the `render` function, we assume it's one of two cases:
                             * 1. The application does not use `children` and therefore implements the routes including
                             * the <RouteCatchAll> (this is the "legacy" behavior).
                             * 2. It's the account application, which always uses `render` and therefore should render as normal.
                             *
                             * In case the AppShell uses the `children` function, we can always assume that
                             * it's a normal Custom Application and that it should trigger a force reload.
                             */
                            props.render ? jsx(Fragment, {
                              children: props.render()
                            }) : jsx(RouteCatchAll, {})
                          }), jsx(Route, {
                            exact: true,
                            path: "/",
                            children: (_user$defaultProjectK => {
                              const previousProjectKey = getPreviousProjectKey((_user$defaultProjectK = user === null || user === void 0 ? void 0 : user.defaultProjectKey) !== null && _user$defaultProjectK !== void 0 ? _user$defaultProjectK : undefined);

                              /**
                               * NOTE:
                               *   Given the user has not been loaded a loading spinner is shown.
                               *   Given the user was not working on a project previously nor has a default
                               *   project, the user will be prompted to create one.
                               *   Given the user was working on a project previously or has a default
                               *   project, the application will redirect to that project.
                               */
                              if (!user) return jsx(ApplicationLoader, {});
                              if (!previousProjectKey) return jsx(RedirectToProjectCreate, {});
                              return jsx(Redirect, {
                                to: "/".concat(previousProjectKey)
                              });
                            })()
                          }), jsx(Route, {
                            exact: false,
                            path: "/:projectKey",
                            children: jsx(ProjectContainer, {
                              user: user,
                              environment: applicationEnvironment,
                              disableRoutePermissionCheck: props.disableRoutePermissionCheck
                              // This effectively renders the
                              // children, which is the application
                              // specific part
                              ,
                              render: props.render,
                              children: props.children
                            })
                          })]
                        })]
                      })]
                    })]
                  })]
                })
              })
            }));
          }
        })
      });
    }
  });
};
ApplicationShellAuthenticated.propTypes = process.env.NODE_ENV !== "production" ? {
  featureFlags: _pt.any,
  defaultFeatureFlags: _pt.any,
  onMenuItemClick: _pt.func,
  disableRoutePermissionCheck: _pt.bool,
  render: _pt.func,
  children: _pt.node
} : {};
ApplicationShellAuthenticated.displayName = 'ApplicationShellAuthenticated';

const maxTitleCharLength = 24;
const staticPaths = ['account', 'login'];
const defaultProps$1 = {
  additionalParts: []
};
const getPageTitle = (pathname, additionalParts) => {
  const _pathname$split = pathname.split('/'),
    _pathname$split2 = _slicedToArray(_pathname$split, 3),
    projectKeyOrStaticPath = _pathname$split2[1],
    entryPointUriPath = _pathname$split2[2];
  const customTitleParts = _mapInstanceProperty(additionalParts).call(additionalParts, titlePart => {
    if (titlePart.length <= maxTitleCharLength) {
      return titlePart;
    }
    return [_sliceInstanceProperty(titlePart).call(titlePart, 0, maxTitleCharLength / 2), _sliceInstanceProperty(titlePart).call(titlePart, titlePart.length - maxTitleCharLength / 2)].join('...');
  });
  if (_includesInstanceProperty(staticPaths).call(staticPaths, projectKeyOrStaticPath)) {
    return [...(customTitleParts || []), upperFirst(projectKeyOrStaticPath), 'Merchant Center'].join(' - ');
  }
  return [...(customTitleParts || []), upperFirst(entryPointUriPath), projectKeyOrStaticPath, 'Merchant Center'].join(' - ');
};
const ApplicationPageTitle = props => {
  const location = useLocation();
  useLayoutEffect(() => {
    const pageTitle = getPageTitle(location.pathname, props.additionalParts);
    document.title = pageTitle;
  }, [location.pathname, props.additionalParts]);
  return null;
};
ApplicationPageTitle.propTypes = {
  additionalParts: _pt.arrayOf(_pt.string).isRequired
};
ApplicationPageTitle.displayName = 'ApplicationPageTitle';
ApplicationPageTitle.defaultProps = defaultProps$1;

function ownKeys$4(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys$4(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys$4(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const SuspendedRoute = props => jsx(Route, _objectSpread$4(_objectSpread$4({}, props), {}, {
  children: jsx(Suspense, {
    fallback: jsx(LoadingSpinner, {}),
    children: props.children
  })
}));
SuspendedRoute.displayName = 'SuspendedRoute';

var AmILoggedInQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "AmILoggedIn" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "amILoggedIn" }, arguments: [], directives: [] }] } }], loc: { start: 0, end: 36, source: { body: "query AmILoggedIn {\n  amILoggedIn\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const AmILoggedIn = props => {
  // ...otherwise, we ping a "secured" endpoint in the MC API to see if there is
  // a valid access token. If we get an error, we assume that the user is not
  // authenticated. If we don't get any error, the access token sent with the cookie
  // is valid. We return null while the query is loading.
  const _useMcQuery = useMcQuery(AmILoggedInQuery, {
      context: {
        target: GRAPHQL_TARGETS.MERCHANT_CENTER_BACKEND,
        skipTokenRetry: true
      },
      // NOTE: With `no-cache` the `useQuery` will not trigger a
      // re-render of the `AmILoggedIn` component. Relying on a default
      // fetch policy results in rendering the component without refetching the data
      // which as a result unmounts child components (such as an application).
      //
      // For example:
      // Given the user not authenticated
      // Then the first pass of useQuery returns an exptected error
      // Given the query is triggered again (through `useQuery`)
      // Then the component will re-render
      // Resulting in inconsistent data with the error not being defined
      fetchPolicy: 'no-cache',
      onCompleted: data => {
        if (!data) {
          // In case the request is 200 but there is no data, we assume
          // there are some errors.
          window.localStorage.removeItem(STORAGE_KEYS.IS_AUTHENTICATED);
        } else {
          // Even though the login page might set this flag, we just make sure that
          // we do it here as well. This will help in the future when we eventually
          // move the auth service to itw own domain, in which case the local storage
          // is not shared anymore.
          window.localStorage.setItem(STORAGE_KEYS.IS_AUTHENTICATED, String(true));
        }
      },
      onError: () => {
        // The query fails without the `mcAccessToken`. In this case the caching
        // needs to be unset as otherwise the application will end up in a infinte
        // redirect loop.
        window.localStorage.removeItem(STORAGE_KEYS.IS_AUTHENTICATED);
      }
    }),
    data = _useMcQuery.data,
    loading = _useMcQuery.loading,
    error = _useMcQuery.error;
  if (error) {
    // No matter what error, we consider it as a failed authentication
    return jsx(Fragment, {
      children: props.render({
        isAuthenticated: false
      })
    });
  }
  if (!loading && data && data.amILoggedIn) {
    return jsx(Fragment, {
      children: props.render({
        isAuthenticated: true
      })
    });
  }
  return null;
};
AmILoggedIn.displayName = 'AmILoggedIn';

const withoutProjectKeyClaim = scope => {
  var _context;
  return _filterInstanceProperty(_context = scope.split(' ')).call(_context, claim => !_startsWithInstanceProperty(claim).call(claim, OIDC_CLAIMS.PROJECT_KEY)).join(' ');
};
const hasCachedAuthenticationState = () => {
  var _window$app$__DEVELOP;
  if ((_window$app$__DEVELOP = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP !== void 0 && (_window$app$__DEVELOP = _window$app$__DEVELOP.oidc) !== null && _window$app$__DEVELOP !== void 0 && _window$app$__DEVELOP.authorizeUrl) {
    try {
      var _window$app$__DEVELOP5, _window$app$__DEVELOP6, _window$app$__DEVELOP7, _window$app$__DEVELOP8;
      const activeProjectKey = oidcStorage.getActiveProjectKey();
      if (activeProjectKey) {
        var _window$app$__DEVELOP2;
        // GIVEN The application is not requesting a project key,
        // THEN we assume that the application does not need a project context.
        // GIVEN The application is not requesting a project key,
        // THEN we remove the cached project key.
        // This is the case of an application like `account`.
        if (!((_window$app$__DEVELOP2 = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP2 !== void 0 && (_window$app$__DEVELOP2 = _window$app$__DEVELOP2.oidc) !== null && _window$app$__DEVELOP2 !== void 0 && _window$app$__DEVELOP2.initialProjectKey)) {
          oidcStorage.removeActiveProjectKey();
        }
      } else {
        var _window$app$__DEVELOP3;
        if ((_window$app$__DEVELOP3 = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP3 !== void 0 && (_window$app$__DEVELOP3 = _window$app$__DEVELOP3.oidc) !== null && _window$app$__DEVELOP3 !== void 0 && _window$app$__DEVELOP3.initialProjectKey) {
          var _window$app$__DEVELOP4;
          // Here we store the initial project key in local storage,
          // so that it gets picked up when we initiate the login flow.
          oidcStorage.setActiveProjectKey((_window$app$__DEVELOP4 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP4 === void 0 || (_window$app$__DEVELOP4 = _window$app$__DEVELOP4.oidc) === null || _window$app$__DEVELOP4 === void 0 ? void 0 : _window$app$__DEVELOP4.initialProjectKey);
        }
      }

      // cachedScope is assumed to be the exact cached version of the `requestedScope`
      // if they don't match, then we know that one of the claims within the scope has changed
      // given a change, we need to force the user to log in, so that new values on respective claim
      // will apply for the given custom application
      const cachedScope = oidcStorage.getSessionScope();
      // Force the user to log in again
      if (!cachedScope) {
        return false;
      }
      // Rebuild the requested OIDC scope to verify that it didn't change.
      const requestedScope = buildOidcScope({
        projectKey: activeProjectKey !== null && activeProjectKey !== void 0 ? activeProjectKey : undefined,
        oAuthScopes: (_window$app$__DEVELOP5 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP5 === void 0 || (_window$app$__DEVELOP5 = _window$app$__DEVELOP5.oidc) === null || _window$app$__DEVELOP5 === void 0 ? void 0 : _window$app$__DEVELOP5.oAuthScopes,
        additionalOAuthScopes: (_window$app$__DEVELOP6 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP6 === void 0 || (_window$app$__DEVELOP6 = _window$app$__DEVELOP6.oidc) === null || _window$app$__DEVELOP6 === void 0 ? void 0 : _window$app$__DEVELOP6.additionalOAuthScopes,
        teamId: (_window$app$__DEVELOP7 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP7 === void 0 || (_window$app$__DEVELOP7 = _window$app$__DEVELOP7.oidc) === null || _window$app$__DEVELOP7 === void 0 ? void 0 : _window$app$__DEVELOP7.teamId,
        applicationId: (_window$app$__DEVELOP8 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP8 === void 0 || (_window$app$__DEVELOP8 = _window$app$__DEVELOP8.oidc) === null || _window$app$__DEVELOP8 === void 0 ? void 0 : _window$app$__DEVELOP8.applicationId
      });
      // Omit the project key from the check. This allows to switch projects
      // without having to log in again.
      const cachedScopeWithoutProjectKey = withoutProjectKeyClaim(cachedScope);
      const requestedScopeWithoutProjectKey = withoutProjectKeyClaim(requestedScope);
      // Check that the session scope didn't change.
      if (cachedScopeWithoutProjectKey === requestedScopeWithoutProjectKey) {
        return true;
      }
      return false;
    } catch (err) {
      return false;
    }
  }
  return window.localStorage.getItem(STORAGE_KEYS.IS_AUTHENTICATED) === 'true';
};

const OidcCallback = /*#__PURE__*/lazy(() => import('./oidc-callback-9a7982c6.esm.js' /* webpackChunkName: "oidc-callback" */));

function ownKeys$3(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys$3(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys$3(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const Authenticated = props => {
  var _window$app$__DEVELOP;
  // We attempt to see if the user was already authenticated by looking
  // at the "cached" flag in local storage.
  const cachedAuthenticationState = hasCachedAuthenticationState();
  if (cachedAuthenticationState) {
    return jsx(Fragment, {
      children: props.render({
        isAuthenticated: true
      })
    });
  }

  // When using the OIDC workflow, we always return false, to trigger
  // the redirect to the login page.
  if ((_window$app$__DEVELOP = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP !== void 0 && (_window$app$__DEVELOP = _window$app$__DEVELOP.oidc) !== null && _window$app$__DEVELOP !== void 0 && _window$app$__DEVELOP.authorizeUrl) {
    return jsx(Fragment, {
      children: props.render({
        isAuthenticated: false
      })
    });
  }

  // Fall back to check for cookie-based authentication.
  return jsx(AmILoggedIn, _objectSpread$3({}, props));
};
Authenticated.displayName = 'Authenticated';
const AuthenticationRoutes = props => jsxs(Switch, {
  children: [jsx(SuspendedRoute, {
    path: "/account/oidc/callback",
    children: jsx(OidcCallback, {
      locale: props.locale,
      applicationMessages: props.applicationMessages
    })
  }), jsx(SuspendedRoute, {
    path: "/:projectKey/:identifier/oidc/callback",
    children: jsx(OidcCallback, {
      locale: props.locale,
      applicationMessages: props.applicationMessages
    })
  }), jsx(Route, {
    children: jsx(Authenticated, _objectSpread$3({}, props))
  })]
});
AuthenticationRoutes.displayName = 'AuthenticationRoutes';

function ownKeys$2(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context2 = ownKeys$2(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys$2(Object(t))).call(_context3, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * NOTE:
 *   This function try-catches around a `JSON.parse` and return
 *   the parsed value whenever possible.
 *
 *   This allows parsing most primitive values.
 *
 *   - `JSON.parse('null')` => `null`
 *   - `JSON.parse('1')` => `1`
 *   - `JSON.parse('["a", "b"]')` => `['a', 'b']`
 */
const getCoerceEnvironmentValue = environmentValueAsString => {
  // Return the value as-is if it's not a string.
  if (typeof environmentValueAsString !== 'string') {
    return environmentValueAsString;
  }

  // In case the value is a string, we try to parse it to attempt to extract
  // the primitive value, if the original value is indeed supposed to be a primitive.
  // For example, `'1'` is converted to a number, `'true'` is converted to a boolean, etc.
  try {
    // Strip out escaped quotes. This is mostly important to coerce an array of string
    // with escaped quotes.
    return JSON.parse(String(environmentValueAsString).replace(/(\\")/g, '"'));
  } catch (e) {
    return environmentValueAsString;
  }
};
const shallowlyCoerceValues = uncoercedEnvironmentValues => {
  var _context;
  return _reduceInstanceProperty(_context = _Object$keys(uncoercedEnvironmentValues)).call(_context, (coercedEnvironmentValues, key) => {
    const uncoercedEnvironmentValue = uncoercedEnvironmentValues[key];
    return _objectSpread$2(_objectSpread$2({}, coercedEnvironmentValues), {}, {
      [key]: getCoerceEnvironmentValue(uncoercedEnvironmentValue)
    });
  }, {});
};
const useCoercedEnvironmentValues = environment => {
  const coercedEnvironmentValues = useMemo(() => shallowlyCoerceValues(environment), [environment]);
  return coercedEnvironmentValues;
};

const ApplicationShellProvider = props => {
  const apolloClient = useMemo(() => {
    var _props$apolloClient;
    return (_props$apolloClient = props.apolloClient) !== null && _props$apolloClient !== void 0 ? _props$apolloClient : createApolloClient();
  }, [props.apolloClient]);
  useEffect(() => {
    setCachedApolloClient(apolloClient);
  }, [apolloClient]);
  const coercedEnvironmentValues = useCoercedEnvironmentValues(props.environment);
  const browserLocale = getBrowserLocale(window);
  return jsx(Suspense, {
    fallback: jsx(ApplicationLoader, {}),
    children: jsx(ErrorBoundary, {
      children: jsx(ApplicationContextProvider, {
        environment: coercedEnvironmentValues,
        children: jsx(Provider, {
          store: internalReduxStore,
          children: jsx(ApolloProvider, {
            client: apolloClient,
            children: jsxs(Router, {
              history: getBrowserHistory(),
              children: [jsx(ApplicationPageTitle, {}), jsx(AuthenticationRoutes, {
                locale: browserLocale,
                applicationMessages: props.applicationMessages,
                render: _ref => {
                  let isAuthenticated = _ref.isAuthenticated;
                  if (isAuthenticated) return props.children({
                    isAuthenticated
                  });
                  return jsx(AsyncLocaleData, {
                    locale: browserLocale,
                    applicationMessages: props.applicationMessages,
                    children: _ref2 => {
                      let locale = _ref2.locale,
                        messages = _ref2.messages;
                      return jsx(ConfigureIntlProvider, {
                        locale: locale,
                        messages: messages,
                        children: props.children({
                          isAuthenticated
                        })
                      });
                    }
                  });
                }
              })]
            })
          })
        })
      })
    })
  });
};
ApplicationShellProvider.propTypes = process.env.NODE_ENV !== "production" ? {
  apolloClient: _pt.any,
  children: _pt.func.isRequired
} : {};
ApplicationShellProvider.displayName = 'ApplicationShellProvider';

const RedirectToLogin = /*#__PURE__*/lazy(() => import('./redirect-to-login-e569bd46.esm.js' /* webpackChunkName: "redirect-to-login" */));

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const styles = process.env.NODE_ENV === "production" ? {
  name: "1prreal",
  styles: "html,body{font-size:var(--font-size-for-body);height:100vh;}#app{height:100%;}"
} : {
  name: "6fkj0f-styles",
  styles: "html,body{font-size:var(--font-size-for-body);height:100vh;}#app{height:100%;};label:styles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdsb2JhbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdrQiIsImZpbGUiOiJnbG9iYWwtc3R5bGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbS9tYXRlcmlhbHMvcmVzZXRzLmNzcyc7XG5pbXBvcnQgeyBHbG9iYWwsIGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuY29uc3Qgc3R5bGVzID0gY3NzYFxuICBodG1sLFxuICBib2R5IHtcbiAgICBmb250LXNpemU6IHZhcigtLWZvbnQtc2l6ZS1mb3ItYm9keSk7XG4gICAgaGVpZ2h0OiAxMDB2aDtcbiAgfVxuXG4gICNhcHAge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYDtcblxuY29uc3QgR2xvYmFsU3R5bGVzID0gKCkgPT4gPEdsb2JhbCBzdHlsZXM9e3N0eWxlc30gLz47XG5cbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFN0eWxlcztcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const GlobalStyles = () => jsx(Global, {
  styles: styles
});

const StrictModeEnablement$1 = props => {
  if (props.enableReactStrictMode) {
    return jsx(StrictMode, {
      children: props.children
    });
  } else {
    return jsx(Fragment, {
      children: props.children
    });
  }
};
StrictModeEnablement$1.propTypes = process.env.NODE_ENV !== "production" ? {
  enableReactStrictMode: _pt.bool,
  children: _pt.node
} : {};
const ApplicationShell = props => {
  useEffect(() => {
    var _props$onRegisterErro;
    (_props$onRegisterErro = props.onRegisterErrorListeners) === null || _props$onRegisterErro === void 0 || _props$onRegisterErro.call(props, {
      dispatch: internalReduxStore.dispatch
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // <-- run only once, when component mounts

  return jsxs(StrictModeEnablement$1, {
    enableReactStrictMode: props.enableReactStrictMode,
    children: [jsx(GlobalStyles, {}), jsx(ApplicationShellProvider, {
      apolloClient: props.apolloClient,
      environment: props.environment,
      applicationMessages: props.applicationMessages,
      children: _ref => {
        let isAuthenticated = _ref.isAuthenticated;
        if (isAuthenticated) {
          return jsxs(Switch, {
            children: [jsx(SuspendedRoute, {
              path: "/logout",
              children: jsx(RedirectToLogout, {})
            }), jsx(SuspendedRoute, {
              children: jsx(ApplicationShellAuthenticated, {
                defaultFeatureFlags: props.defaultFeatureFlags,
                featureFlags: props.featureFlags,
                render: props.render,
                applicationMessages: props.applicationMessages,
                onMenuItemClick: props.onMenuItemClick,
                disableRoutePermissionCheck: props.disableRoutePermissionCheck,
                children: props.children
              })
            })]
          });
        }
        return jsx(RedirectToLogin, {});
      }
    })]
  });
};
ApplicationShell.propTypes = process.env.NODE_ENV !== "production" ? {
  apolloClient: _pt.any,
  featureFlags: _pt.any,
  defaultFeatureFlags: _pt.any,
  onRegisterErrorListeners: _pt.func,
  onMenuItemClick: _pt.func,
  disableRoutePermissionCheck: _pt.bool,
  enableReactStrictMode: _pt.bool,
  render: _pt.func,
  children: _pt.node
} : {};
ApplicationShell.displayName = 'ApplicationShell';
ApplicationShell.version = applicationShellVersion;

const CustomViewDevHost = /*#__PURE__*/lazy(() => import('./custom-view-dev-host-c91d881b.esm.js' /* webpackChunkName: "custom-view-dev-host" */));

function ownKeys$1(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys$1(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys$1(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const CustomViewWithPermissionCheck = props => {
  const permissionKeys = entryPointUriPathToPermissionKeys(CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH);

  // Require View permission to render the application.
  const canView = useIsAuthorized({
    demandedPermissions: [permissionKeys.View]
  });
  if (canView) {
    return jsx(Fragment, {
      children: props.children
    });
  }
  return jsx(PageUnauthorized, {});
};
CustomViewWithPermissionCheck.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _pt.node
} : {};
function CustomViewShellAuthenticated(props) {
  const browserLocale = getBrowserLocale(window);
  return jsx(FetchUser, {
    children: _ref => {
      let isLoading = _ref.isLoading,
        fetchUserError = _ref.error,
        user = _ref.user;
      if (isLoading) {
        return jsx(ApplicationLoader, {});
      }
      return jsx(AsyncLocaleData, {
        locale: (user === null || user === void 0 ? void 0 : user.language) || browserLocale,
        applicationMessages: props.messages,
        children: _ref2 => {
          let isLoadingLocaleData = _ref2.isLoading,
            locale = _ref2.locale,
            messages = _ref2.messages;
          return jsx(ConfigureIntlProvider
          // We do not want to pass the language as long as the locale data
          // is not loaded.
          , _objectSpread$1(_objectSpread$1({}, isLoadingLocaleData ? {} : {
            locale,
            messages
          }), {}, {
            children: jsx(ApplicationContextProvider, {
              user: user,
              environment: props.environment,
              children: jsxs(Fragment, {
                children: [jsx(ThemeProvider, {
                  theme: "default"
                }), jsx(FetchProject, {
                  projectKey: props.projectKey,
                  children: _ref3 => {
                    let isProjectLoading = _ref3.isLoading,
                      project = _ref3.project;
                    if (fetchUserError) {
                      return jsx(PageUnauthorized, {});
                    }
                    if (isProjectLoading) {
                      return jsx(ApplicationLoader, {});
                    }
                    return jsx(ApplicationContextProvider, {
                      user: user,
                      project: project,
                      projectDataLocale: props.dataLocale,
                      environment: props.environment,
                      children: jsx(CustomViewWithPermissionCheck, {
                        children: props.children
                      })
                    });
                  }
                })]
              })
            })
          }));
        }
      });
    }
  });
}
CustomViewShellAuthenticated.propTypes = process.env.NODE_ENV !== "production" ? {
  dataLocale: _pt.string.isRequired,
  projectKey: _pt.string,
  customViewConfig: _pt.any.isRequired,
  children: _pt.node.isRequired
} : {};

const browserLocale = getBrowserLocale(window);
function StrictModeEnablement(props) {
  if (props.enableReactStrictMode) {
    return jsx(StrictMode, {
      children: props.children
    });
  } else {
    return jsx(Fragment, {
      children: props.children
    });
  }
}
StrictModeEnablement.propTypes = process.env.NODE_ENV !== "production" ? {
  enableReactStrictMode: _pt.bool,
  children: _pt.node
} : {};
function CustomViewShell(props) {
  var _window$app$__DEVELOP;
  const _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    hostContext = _useState2[0],
    setHostContext = _useState2[1];
  const iFrameCommunicationPort = useRef();
  const hostMessageHandler = useCallback(event => {
    if (event.data.eventName === CUSTOM_VIEWS_EVENTS_NAMES.CUSTOM_VIEW_INITIALIZATION) {
      setHostContext(event.data.eventData.context);
    } else {
      console.warn("CustomViewShell: Unknown received event with name: ".concat(event.data.eventName), {
        event
      });
    }
  }, []);
  useEffect(() => {
    const bootstrapMessageHandler = event => {
      if ((event.origin === window.location.origin ||
      // event.origin is not defined in test environment
      process.env.NODE_ENV === 'test') && event.data === CUSTOM_VIEWS_EVENTS_NAMES.CUSTOM_VIEW_BOOTSTRAP) {
        iFrameCommunicationPort.current = event.ports[0];
        iFrameCommunicationPort.current.onmessage = hostMessageHandler;
        // Once bootstraped, we don't want to listen for global messages anymore.
        // We will only listen to messages coming through the MessageChannel port.
        window.removeEventListener('message', bootstrapMessageHandler);
      } else {
        console.warn('CustomViewShell: Received an event that is not allowed.', {
          event
        });
      }
    };
    window.addEventListener('message', bootstrapMessageHandler);
    return () => {
      window.removeEventListener('message', bootstrapMessageHandler);
    };
  }, [hostMessageHandler]);
  useEffect(() => {
    // Close the channel when the component unmounts
    return () => {
      var _iFrameCommunicationP;
      (_iFrameCommunicationP = iFrameCommunicationPort.current) === null || _iFrameCommunicationP === void 0 || _iFrameCommunicationP.close();
      iFrameCommunicationPort.current = undefined;
    };
  }, []);
  if (!hostContext) {
    return jsx(ApplicationLoader, {
      showLogo: true
    });
  }
  const hostUrl = process.env.NODE_ENV === 'development' ? (_window$app$__DEVELOP = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP === void 0 ? void 0 : _window$app$__DEVELOP.customViewHostUrl : hostContext.hostUrl;
  return jsx(ApplicationShellProvider, {
    environment: window.app,
    applicationMessages: props.applicationMessages,
    apolloClient: props.apolloClient,
    children: _ref => {
      let isAuthenticated = _ref.isAuthenticated;
      if (isAuthenticated) {
        return jsx(CustomViewContextProvider, {
          hostUrl: hostUrl,
          customViewConfig: hostContext.customViewConfig,
          children: jsx(CustomViewShellAuthenticated, {
            dataLocale: hostContext.dataLocale,
            environment: window.app,
            messages: props.applicationMessages,
            projectKey: hostContext.projectKey,
            customViewConfig: hostContext.customViewConfig,
            children: props.children
          })
        });
      }
      return jsx(AsyncLocaleData, {
        locale: browserLocale,
        applicationMessages: props.applicationMessages,
        children: _ref2 => {
          let locale = _ref2.locale,
            messages = _ref2.messages;
          return jsx(ConfigureIntlProvider, {
            locale: locale,
            messages: messages,
            children: jsx(PageUnauthorized, {})
          });
        }
      });
    }
  });
}
CustomViewShell.propTypes = process.env.NODE_ENV !== "production" ? {
  apolloClient: _pt.any,
  disableDevHost: _pt.bool,
  enableReactStrictMode: _pt.bool,
  children: _pt.node.isRequired
} : {};
const CustomViewShellWrapper = props => {
  if (process.env.NODE_ENV === 'development' && !props.disableDevHost) {
    return jsx(StrictModeEnablement, {
      enableReactStrictMode: props.enableReactStrictMode,
      children: jsx(Suspense, {
        fallback: jsx(ApplicationLoader, {}),
        children: jsx(CustomViewDevHost, {
          applicationMessages: props.applicationMessages,
          children: jsx(CustomViewShell, {
            applicationMessages: props.applicationMessages,
            children: props.children
          })
        })
      })
    });
  }
  return jsx(StrictModeEnablement, {
    enableReactStrictMode: props.enableReactStrictMode,
    children: jsx(CustomViewShell, {
      applicationMessages: props.applicationMessages,
      children: props.children
    })
  });
};
CustomViewShellWrapper.propTypes = process.env.NODE_ENV !== "production" ? {
  apolloClient: _pt.any,
  disableDevHost: _pt.bool,
  enableReactStrictMode: _pt.bool,
  children: _pt.node.isRequired
} : {};

const defaultProps = {
  shouldCleanUpOnUnmount: true
};
const InjectReducers = props => {
  const _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    areReducersInjected = _useState2[0],
    setAreReducersInjected = _useState2[1];
  const store = useStore();
  useEffect(() => {
    store.injectReducers({
      id: props.id,
      reducers: props.reducers
    });
    setAreReducersInjected(true);
    return () => {
      if (props.shouldCleanUpOnUnmount) {
        store.removeReducers({
          id: props.id
        });
      }
    };
  }, [props.id, props.reducers, props.shouldCleanUpOnUnmount, store]);

  // Render children only when the plugin reducers have been injected
  if (areReducersInjected) return jsx(Fragment, {
    children: props.children
  });
  return null;
};
InjectReducers.propTypes = {
  id: _pt.string.isRequired,
  reducers: _pt.any.isRequired,
  shouldCleanUpOnUnmount: _pt.bool.isRequired,
  children: _pt.node.isRequired
};
InjectReducers.displayName = 'InjectReducers';
InjectReducers.defaultProps = defaultProps;

const errorMessageIgnoreList = [/ResizeObserver loop limit exceeded/i];

// Ensure to initialize Sentry as soon as possible, so that we have the chance
// of catching possible errors.
boot();
const makeErrorToCapture = error => {
  if (error instanceof Error) return error;
  if (error instanceof ErrorEvent) return new Error(error.message);
  return new Error(_JSON$stringify(error.reason || 'Unhandled rejection without a reason'));
};
const getErrorMessage = error => {
  if (typeof error === 'string') return error;
  const errorToCapture = makeErrorToCapture(error);
  return errorToCapture.message || errorToCapture.name;
};
const shouldErrorBeTracked = error => {
  const errorMessage = getErrorMessage(error);
  return !_someInstanceProperty(errorMessageIgnoreList).call(errorMessageIgnoreList, match => match.test(errorMessage));
};
function setupGlobalErrorListener() {
  // Capture unhandled errors generated from rejected Promises.
  //
  // http://www.2ality.com/2016/04/unhandled-rejections.html
  // https://docs.getsentry.com/hosted/clients/javascript/usage/#promises
  //
  // Note: this currently works only in Chrome, and it might not be needed.
  // We just keep it here as a nice-to-have thing.
  window.addEventListener('unhandledrejection', event => {
    if (process.env.NODE_ENV !== 'production')
      // eslint-disable-next-line no-console
      console.warn('An uncaught promise has been rejected and not properly ' + 'handled. This is most likely a bug in the software. Please ensure ' + 'that the promise is correctly handled.');
    if (shouldErrorBeTracked(event)) {
      const errorId = reportErrorToSentry(event);
      internalReduxStore.dispatch(showUnexpectedErrorNotification({
        errorId
      }));
    }
  });

  // Capture normal global errors coming from non Promise code.
  window.addEventListener('error', errorEvent => {
    if (shouldErrorBeTracked(errorEvent)) {
      const errorId = reportErrorToSentry(errorEvent);
      internalReduxStore.dispatch(showUnexpectedErrorNotification({
        errorId
      }));
    }
  });
}

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys(Object(t))).call(_context3, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }

/**
 * The route path to match. Usually it starts with `/:projectKey/my-entry-point`.
 */

const makeRoute = (routePath, routeOptions) => {
  const getUrl = (nextParams, nextQueryParams) => {
    const baseUrl = generatePath(routePath, _objectSpread(_objectSpread({}, routeOptions.params), nextParams));
    if (nextQueryParams) {
      var _context;
      return _concatInstanceProperty(_context = "".concat(baseUrl, "?")).call(_context, nextQueryParams.toString());
    }
    return baseUrl;
  };
  const go = (nextParams, nextQueryParams) => {
    routeOptions.goTo(getUrl(nextParams, nextQueryParams));
  };
  return {
    path: routePath,
    getUrl,
    go
  };
};
function useRoutesCreator() {
  const _useRouteMatch = useRouteMatch(),
    params = _useRouteMatch.params;
  const _useHistory = useHistory(),
    goTo = _useHistory.push,
    location = _useHistory.location;
  const createRoute = routePath => makeRoute(routePath, {
    goTo,
    params,
    location
  });
  return {
    createRoute
  };
}

export { ApplicationShell as A, ButlerContainer as B, ConfigureIntlProvider as C, ErrorBoundary as E, FetchProject as F, InjectReducers as I, ProjectDataLocale as P, RedirectToLogin as R, SetupFlopFlipProvider as S, RedirectToProjectCreate as a, ApplicationLoader as b, REQUESTS_IN_FLIGHT_LOADER_DOM_ID as c, applicationShellVersion as d, ProjectSwitcher as e, ApplicationShellProvider as f, ApplicationPageTitle as g, CustomViewShellWrapper as h, SuspendedRoute as i, pimIndexerStates as p, setupGlobalErrorListener as s, useRoutesCreator as u };
