'use strict';

var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _URL = require('@babel/runtime-corejs3/core-js-stable/url');
var _reverseInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/reverse');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _URL__default = /*#__PURE__*/_interopDefault(_URL);
var _reverseInstanceProperty__default = /*#__PURE__*/_interopDefault(_reverseInstanceProperty);

/**
 * Get the "real" Merchant Center frontend URL to redirect the user
 * to the login page.
 * We use an explicit full URL so that if a user tries to access the
 * Custom Applications directly to its domain, it will always redirect
 * the user to the login page.
 *
 * To determine the "real" URL, we need to check if the current location
 * is a Merchant Center domain, or if it's a custom user domain.
 * For the latter, we can derive the URL from the Merchant Center API URL.
 *
 * A Merchant Center hostname is composed by the following parts:
 *    https://<mc-prefix>.<region>.<provider>.<ct-domain>.<tld>
 * We neeed to check if at least the first 4 parts (right-to-left) are
 * the same.
 */
function getMcOrigin(mcApiUrl) {
  var _context, _context2;
  let actualWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
  const mcApiUrlObject = new _URL__default["default"](mcApiUrl);
  const _mcApiUrlObject$hostn = _reverseInstanceProperty__default["default"](_context = mcApiUrlObject.hostname.split('.')).call(_context),
    _mcApiUrlObject$hostn2 = _slicedToArray(_mcApiUrlObject$hostn, 4),
    tldMcApi = _mcApiUrlObject$hostn2[0],
    ctDomainMcApi = _mcApiUrlObject$hostn2[1],
    providerMcApi = _mcApiUrlObject$hostn2[2],
    regionMcApi = _mcApiUrlObject$hostn2[3];
  const _actualWindow$locatio = _reverseInstanceProperty__default["default"](_context2 = actualWindow.location.hostname.split('.')).call(_context2),
    _actualWindow$locatio2 = _slicedToArray(_actualWindow$locatio, 4),
    tldMc = _actualWindow$locatio2[0],
    ctDomainMc = _actualWindow$locatio2[1],
    providerMc = _actualWindow$locatio2[2],
    regionMc = _actualWindow$locatio2[3];
  const isMatching = tldMcApi === tldMc && ctDomainMcApi === ctDomainMc && providerMcApi === providerMc && regionMcApi === regionMc;
  if (isMatching) {
    return actualWindow.location.origin;
  }
  return mcApiUrlObject.origin.replace('mc-api', 'mc');
}

exports.getMcOrigin = getMcOrigin;
