import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';

const DIMENSIONS = {
  header: '56px',
  navMenu: '80px',
  navMenuExpanded: '256px',
  navMenuItemHeight: '48px'
};
const WINDOW_SIZES = {
  STANDARD: 1024,
  WIDE: 1200
};
const CONTAINERS = {
  LOCALE_SWITCHER: 'locale-switcher-container',
  LEFT_OF_PROFILE: 'left-of-profile'
};
const SUSPENSION_REASONS = {
  TEMPORARY_MAINTENANCE: 'TemporaryMaintenance',
  PAYMENT: 'Payment',
  OTHER: 'Other'
};

// OIDC params
const OIDC_RESPONSE_TYPES = {
  ID_TOKEN: 'id_token'
};
const OIDC_CLAIMS = {
  OPEN_ID: 'openid',
  PROJECT_KEY: 'project_key',
  TEAM_ID: 'team_id',
  APPLICATION_ID: 'application_id',
  VIEW: 'view',
  MANAGE: 'manage'
};

const buildOidcScope = options => {
  var _context2, _options$oAuthScopes$, _options$oAuthScopes, _context4, _options$oAuthScopes$2, _options$oAuthScopes2;
  const claims = [];

  // Set the projectKey
  if (options.projectKey) {
    var _context;
    claims.push(_concatInstanceProperty(_context = "".concat(OIDC_CLAIMS.PROJECT_KEY, ":")).call(_context, options.projectKey));
  }

  // Set the OAuth Scopes
  claims.push(..._mapInstanceProperty(_context2 = (_options$oAuthScopes$ = (_options$oAuthScopes = options.oAuthScopes) === null || _options$oAuthScopes === void 0 ? void 0 : _options$oAuthScopes.view) !== null && _options$oAuthScopes$ !== void 0 ? _options$oAuthScopes$ : []).call(_context2, scope => {
    var _context3;
    return _concatInstanceProperty(_context3 = "".concat(OIDC_CLAIMS.VIEW, ":")).call(_context3, scope);
  }));
  claims.push(..._mapInstanceProperty(_context4 = (_options$oAuthScopes$2 = (_options$oAuthScopes2 = options.oAuthScopes) === null || _options$oAuthScopes2 === void 0 ? void 0 : _options$oAuthScopes2.manage) !== null && _options$oAuthScopes$2 !== void 0 ? _options$oAuthScopes$2 : []).call(_context4, scope => {
    var _context5;
    return _concatInstanceProperty(_context5 = "".concat(OIDC_CLAIMS.MANAGE, ":")).call(_context5, scope);
  }));
  // Set additional OAuth scopes
  if (options !== null && options !== void 0 && options.additionalOAuthScopes) {
    var _context6;
    _forEachInstanceProperty(_context6 = options.additionalOAuthScopes).call(_context6, additionalOAuthScope => {
      var _context7, _additionalOAuthScope, _context9, _additionalOAuthScope2;
      claims.push(..._mapInstanceProperty(_context7 = (_additionalOAuthScope = additionalOAuthScope.view) !== null && _additionalOAuthScope !== void 0 ? _additionalOAuthScope : []).call(_context7, viewOAuthScope => {
        var _context8;
        return _concatInstanceProperty(_context8 = "view/".concat(additionalOAuthScope.name, ":")).call(_context8, viewOAuthScope);
      }), ..._mapInstanceProperty(_context9 = (_additionalOAuthScope2 = additionalOAuthScope.manage) !== null && _additionalOAuthScope2 !== void 0 ? _additionalOAuthScope2 : []).call(_context9, manageOAuthScope => {
        var _context10;
        return _concatInstanceProperty(_context10 = "manage/".concat(additionalOAuthScope.name, ":")).call(_context10, manageOAuthScope);
      }));
    });
  }

  // Set the teamId and applicationId
  if (options.teamId) {
    var _context11;
    claims.push(_concatInstanceProperty(_context11 = "".concat(OIDC_CLAIMS.TEAM_ID, ":")).call(_context11, options.teamId));
    if (options.applicationId) {
      var _context12;
      claims.push(_concatInstanceProperty(_context12 = "".concat(OIDC_CLAIMS.APPLICATION_ID, ":")).call(_context12, options.applicationId));
    }
  }
  return [
  // This is required as per OIDC spec.
  OIDC_CLAIMS.OPEN_ID,
  // Custom claims
  ...claims].join(' ');
};

export { CONTAINERS as C, DIMENSIONS as D, OIDC_CLAIMS as O, SUSPENSION_REASONS as S, WINDOW_SIZES as W, OIDC_RESPONSE_TYPES as a, buildOidcScope as b };
