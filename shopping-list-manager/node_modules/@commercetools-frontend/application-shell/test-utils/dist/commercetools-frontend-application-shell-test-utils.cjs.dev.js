'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _objectWithoutProperties = require('@babel/runtime-corejs3/helpers/objectWithoutProperties');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _reduceInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/reduce');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _valuesInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/values');
var _flagsInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/flags');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var react = require('react');
var _pt = require('prop-types');
var react$1 = require('@apollo/client/react');
var testing = require('@apollo/client/testing');
var reactBroadcast = require('@flopflip/react-broadcast');
var rtl = require('@testing-library/react');
var rtlHooks = require('@testing-library/react-hooks');
var history$1 = require('history');
var reactIntl = require('react-intl');
var reactRedux = require('react-redux');
var reactRouterDom = require('react-router-dom');
var invariant = require('tiny-invariant');
var ssr = require('@commercetools-frontend/application-config/ssr');
var applicationShellConnectors = require('@commercetools-frontend/application-shell-connectors');
var history = require('@commercetools-frontend/browser-history');
var constants = require('@commercetools-frontend/constants');
var reactNotifications = require('@commercetools-frontend/react-notifications');
var testUtils = require('@commercetools-frontend/sdk/test-utils');
var applicationEntryPoint = require('../../dist/application-entry-point-fd6f9973.cjs.dev.js');
var index = require('../../dist/index-37a25e51.cjs.dev.js');
var jsxRuntime = require('@emotion/react/jsx-runtime');
require('@commercetools-frontend/application-components');
require('@commercetools-frontend/permissions');
require('@babel/runtime-corejs3/helpers/slicedToArray');
require('@babel/runtime-corejs3/core-js-stable/object/entries');
require('@babel/runtime-corejs3/core-js-stable/reflect/has');
require('@reduxjs/toolkit');
require('lodash/mapValues');
require('omit-empty-es');
require('redux-thunk');
require('@commercetools-frontend/notifications');
require('@commercetools-frontend/sdk');
require('@babel/runtime-corejs3/core-js-stable/instance/index-of');
require('@babel/runtime-corejs3/core-js-stable/instance/slice');
require('@babel/runtime-corejs3/core-js-stable/instance/includes');
require('@commercetools-frontend/sentry');
require('@babel/runtime-corejs3/core-js-stable/instance/starts-with');
require('redux-logger');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _reduceInstanceProperty__default = /*#__PURE__*/_interopDefault(_reduceInstanceProperty);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _valuesInstanceProperty__default = /*#__PURE__*/_interopDefault(_valuesInstanceProperty);
var _flagsInstanceProperty__default = /*#__PURE__*/_interopDefault(_flagsInstanceProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var rtl__namespace = /*#__PURE__*/_interopNamespace(rtl);
var rtlHooks__namespace = /*#__PURE__*/_interopNamespace(rtlHooks);
var invariant__default = /*#__PURE__*/_interopDefault(invariant);

const _excluded = ["children"],
  _excluded2 = ["children"];
function ownKeys$1(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var _context9, _context10; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context9 = ownKeys$1(Object(t), !0)).call(_context9, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context10 = ownKeys$1(Object(t))).call(_context10, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const defaultProject = {
  key: 'test-with-big-data',
  version: 43,
  name: 'Test with big data',
  countries: ['de', 'en'],
  currencies: ['EUR', 'GBP'],
  languages: ['de', 'en-GB', 'en'],
  owner: {
    id: 'organization-id-1',
    name: 'Organization Name'
  },
  initialized: true,
  expiry: {
    isActive: false,
    daysLeft: undefined
  },
  suspension: {
    isActive: false,
    reason: undefined
  },
  allAppliedPermissions: [],
  allAppliedActionRights: [],
  allAppliedDataFences: [],
  allPermissionsForAllApplications: {
    allAppliedPermissions: [],
    allAppliedActionRights: [],
    allAppliedDataFences: [],
    allAppliedMenuVisibilities: []
  }
};
const defaultUser = {
  id: 'user-id-1',
  email: 'sheldon.cooper@caltech.edu',
  createdAt: '2020-01-01T12:29:33.916Z',
  firstName: 'Sheldon',
  lastName: 'Cooper',
  language: 'en',
  timeZone: 'Etc/UTC',
  numberFormat: 'en',
  defaultProjectKey: defaultProject.key,
  businessRole: 'Other',
  projects: {
    total: 1,
    results: [defaultProject]
  },
  gravatarHash: 'aaa',
  launchdarklyTrackingGroup: 'commercetools',
  launchdarklyTrackingSubgroup: 'dev',
  launchdarklyTrackingId: '111',
  launchdarklyTrackingTeam: undefined,
  launchdarklyTrackingTenant: 'gcp-eu'
};
const defaultEnvironment = {
  applicationId: '__local',
  applicationName: 'my-app',
  entryPointUriPath: 'random-entry-point',
  frontendHost: 'localhost:3001',
  mcApiUrl: 'https://mc-api.europe-west1.gcp.commercetools.com',
  location: 'eu',
  env: 'production',
  cdnUrl: 'http://localhost:3001',
  servedByProxy: false
};
const LoadingFallback = () => jsxRuntime.jsx(jsxRuntime.Fragment, {
  children: 'Loading...'
});
LoadingFallback.displayName = 'LoadingFallback';

// For backwards compatibility we need to denormalize the given `permissions` option
// (which is now deprecated) to `allAppliedPermissions`, in order to pass the value
// to the `project` prop in the application context provider.
const denormalizePermissions = permissions => {
  var _context;
  if (!permissions) return [];
  return _reduceInstanceProperty__default["default"](_context = _Object$keys__default["default"](permissions)).call(_context, (allAppliedPermissions, permissionKey) => [...allAppliedPermissions, {
    name: permissionKey,
    value: permissions[permissionKey]
  }], []);
};
// For backwards compatibility we need to denormalize the given `actionRights` option
// (which is now deprecated) to `allAppliedActionRights`, in order to pass the value
// to the `project` prop in the application context provider.
const denormalizeActionRights = actionRights => {
  var _context2;
  if (!actionRights) return [];
  return _reduceInstanceProperty__default["default"](_context2 = _Object$keys__default["default"](actionRights)).call(_context2, (allAppliedActionRights, actionRightGroup) => {
    var _context3;
    return [...allAppliedActionRights, ..._reduceInstanceProperty__default["default"](_context3 = _Object$keys__default["default"](actionRights[actionRightGroup])).call(_context3, (allActionRightsByGroup, actionRightKey) => [...allActionRightsByGroup, {
      group: actionRightGroup,
      name: actionRightKey,
      value: actionRights[actionRightGroup][actionRightKey]
    }], [])];
  }, []);
};
// For backwards compatibility we need to denormalize the given `dataFences` option
// (which is now deprecated) to `allAppliedDataFences`, in order to pass the value
// to the `project` prop in the application context provider.
const denormalizeDataFences = dataFences => {
  var _context4;
  if (!dataFences) return [];
  return _reduceInstanceProperty__default["default"](_context4 = _Object$keys__default["default"](dataFences)).call(_context4, (allAppliedDataFences, dataFenceGroupKey) => {
    var _context5;
    switch (dataFenceGroupKey) {
      case 'store':
        return [...allAppliedDataFences, ..._reduceInstanceProperty__default["default"](_context5 = _Object$keys__default["default"](dataFences.store)).call(_context5, (allResources, resourceType) => {
          var _context6;
          return [...allResources, ..._reduceInstanceProperty__default["default"](_context6 = _Object$keys__default["default"](dataFences.store[resourceType])).call(_context6, (allPermissions, permissionKey) => {
            var _context7;
            return [...allPermissions, ..._mapInstanceProperty__default["default"](_context7 = _valuesInstanceProperty__default["default"](dataFences.store[resourceType][permissionKey])).call(_context7, value => ({
              __typename: 'StoreDataFence',
              type: 'store',
              value,
              group: resourceType,
              name: permissionKey
            }))];
          }, [])];
        }, [])];
      default:
        return allAppliedDataFences;
    }
  }, []);
};
const mapResourceAccessToAppliedPermissions = resourceAccesses => _mapInstanceProperty__default["default"](resourceAccesses).call(resourceAccesses, resourceAccess => ({
  name: "can".concat(resourceAccess),
  value: true
}));
const wrapIfNeeded = (children, wrapper) => wrapper ? /*#__PURE__*/react.createElement(wrapper, null, children) : children;
const ApolloProviderWrapper = props => {
  var _props$apolloClient, _apolloClient$cache$a;
  const apolloClient = (_props$apolloClient = props.apolloClient) !== null && _props$apolloClient !== void 0 ? _props$apolloClient : applicationShellConnectors.createApolloClient();
  const enableApolloMocks = Boolean(props.mocks && props.mocks.length > 0);
  if (!enableApolloMocks) {
    return (
      // eslint-disable-next-line testing-library/no-node-access
      jsxRuntime.jsx(react$1.ApolloProvider, {
        client: apolloClient,
        children: props.children
      })
    );
  }
  return jsxRuntime.jsx(testing.MockedProvider, {
    mocks: props.mocks
    // The `addTypename` field is a private field of the cache in TS
    // but we should be able to still access it.
    // This is to ensure the `addTypename` behavior is the same between the
    // Apollo cache and the mocked provider.
    // @ts-expect-error
    ,
    addTypename: (_apolloClient$cache$a = apolloClient.cache.addTypename) !== null && _apolloClient$cache$a !== void 0 ? _apolloClient$cache$a : true,
    cache: apolloClient.cache,
    children: props.children
  });
};

// This function renders any component within the application context, as if it
// was rendered inside <ApplicationShell />.
// The context is not completely set up yet, some things are missing:
//   - Tracking on context
//   - react-intl's information from addLocaleData
//   - possibly more that I'm not aware of right now
//
//  We can add these things as we go and when we need them.
ApolloProviderWrapper.propTypes = process.env.NODE_ENV !== "production" ? {
  apolloClient: _pt__default["default"].any,
  mocks: _pt__default["default"].any,
  children: _pt__default["default"].element.isRequired
} : {};
function createApplicationProviders() {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$disableAutomatic = _ref.disableAutomaticEntryPointRoutes,
    disableAutomaticEntryPointRoutes = _ref$disableAutomatic === void 0 ? false : _ref$disableAutomatic,
    _ref$disableRoutePerm = _ref.disableRoutePermissionCheck,
    disableRoutePermissionCheck = _ref$disableRoutePerm === void 0 ? false : _ref$disableRoutePerm,
    _ref$locale = _ref.locale,
    locale = _ref$locale === void 0 ? 'en' : _ref$locale,
    mocks = _ref.mocks,
    apolloClient = _ref.apolloClient,
    route = _ref.route,
    history$2 = _ref.history,
    _ref$flags = _flagsInstanceProperty__default["default"](_ref),
    flags = _ref$flags === void 0 ? {} : _ref$flags,
    environment = _ref.environment,
    user = _ref.user,
    project = _ref.project,
    _ref$dataLocale = _ref.dataLocale,
    dataLocale = _ref$dataLocale === void 0 ? 'en' : _ref$dataLocale;
  const mergedUser = user === null ? undefined : _objectSpread$1(_objectSpread$1({}, defaultUser), user);
  const mergedProject = project === null ? undefined : _objectSpread$1(_objectSpread$1({}, defaultProject), project);
  const mergedEnvironment = _objectSpread$1(_objectSpread$1({}, defaultEnvironment), environment);

  // Provide default permissions to render the application route.
  if (mergedProject) {
    if (mergedProject.allAppliedPermissions.length === 0) {
      const defaultPermissionKeys = ssr.entryPointUriPathToPermissionKeys(mergedEnvironment.entryPointUriPath);
      mergedProject.allAppliedPermissions = mapResourceAccessToAppliedPermissions([defaultPermissionKeys.View]);
    }
  }
  let initialRoute = route;
  if (!route && mergedProject) {
    var _context8;
    initialRoute = _concatInstanceProperty__default["default"](_context8 = "/".concat(mergedProject.key, "/")).call(_context8, mergedEnvironment.entryPointUriPath);
  }
  const memoryHistory = history$2 !== null && history$2 !== void 0 ? history$2 : history.createEnhancedHistory(history$1.createMemoryHistory({
    initialEntries: [initialRoute || '/']
  }));
  const ApplicationProviders = props => jsxRuntime.jsx(reactIntl.IntlProvider, {
    locale: locale,
    children: jsxRuntime.jsx(ApolloProviderWrapper, {
      apolloClient: apolloClient,
      mocks: mocks,
      children: jsxRuntime.jsx(reactBroadcast.TestProviderFlopFlip, {
        flags: flags,
        children: jsxRuntime.jsx(applicationShellConnectors.ApplicationContextProvider, {
          user: mergedUser,
          project: mergedProject,
          environment: mergedEnvironment,
          projectDataLocale: dataLocale,
          children: jsxRuntime.jsx(reactRouterDom.Router, {
            history: memoryHistory,
            children: jsxRuntime.jsx(react.Suspense, {
              fallback: jsxRuntime.jsx(LoadingFallback, {}),
              children: jsxRuntime.jsx(applicationEntryPoint.ApplicationEntryPoint, {
                environment: mergedEnvironment,
                disableRoutePermissionCheck: disableRoutePermissionCheck,
                render: disableAutomaticEntryPointRoutes ?
                // eslint-disable-next-line testing-library/no-node-access
                () => jsxRuntime.jsx(jsxRuntime.Fragment, {
                  children: props.children
                }) : undefined,
                children: disableAutomaticEntryPointRoutes ? undefined :
                // eslint-disable-next-line testing-library/no-node-access
                props.children
              })
            })
          })
        })
      })
    })
  });
  ApplicationProviders.propTypes = process.env.NODE_ENV !== "production" ? {
    children: _pt__default["default"].node.isRequired
  } : {};
  return {
    ApplicationProviders,
    mergedUser,
    mergedProject,
    mergedEnvironment,
    history: memoryHistory
  };
}

// Inspired by
// https://github.com/kentcdodds/react-testing-library-course/blob/2a5b1560656790bb1d9c055fba3845780b2c2c97/src/__tests__/react-router-03.js
function renderApp(ui) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const _createApplicationPro = createApplicationProviders(options),
    ApplicationProviders = _createApplicationPro.ApplicationProviders,
    mergedUser = _createApplicationPro.mergedUser,
    mergedProject = _createApplicationPro.mergedProject,
    mergedEnvironment = _createApplicationPro.mergedEnvironment,
    history = _createApplicationPro.history;

  // eslint-disable-next-line testing-library/render-result-naming-convention
  const rendered = rtl__namespace.render(ui, _objectSpread$1(_objectSpread$1({}, options), {}, {
    // eslint-disable-next-line react/display-name
    wrapper: _ref2 => {
      let children = _ref2.children,
        props = _objectWithoutProperties(_ref2, _excluded);
      return jsxRuntime.jsx(ApplicationProviders, _objectSpread$1(_objectSpread$1({}, props), {}, {
        children: wrapIfNeeded(children, options.wrapper)
      }));
    }
  }));
  return _objectSpread$1(_objectSpread$1({}, rendered), {}, {
    // adding `history` to the returned utilities to allow us
    // to reference it in our tests (just try to avoid using
    // this to test implementation details).
    history,
    // Adding user, project & environment so tests know about the merge results
    // Note that these objects do not resemble the application context, they are
    // only intended to communicate the test setup back to the tests.
    user: mergedUser,
    project: mergedProject,
    environment: mergedEnvironment
  });
}
function createReduxProviders() {
  let _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref3$store = _ref3.store,
    store = _ref3$store === void 0 ? undefined : _ref3$store,
    _ref3$storeState = _ref3.storeState,
    storeState = _ref3$storeState === void 0 ? undefined : _ref3$storeState,
    _ref3$sdkMocks = _ref3.sdkMocks,
    sdkMocks = _ref3$sdkMocks === void 0 ? [] : _ref3$sdkMocks,
    _ref3$mapNotification = _ref3.mapNotificationToComponent,
    mapNotificationToComponent = _ref3$mapNotification === void 0 ? () => null : _ref3$mapNotification;
  !!(store && storeState) ? process.env.NODE_ENV !== "production" ? invariant__default["default"](false, '@commercetools-frontend/application-shell/test-utils: You provided both `store` and `storeState`. Please provide only one of them.') : invariant__default["default"](false) : void 0;
  !!(store && sdkMocks.length > 0) ? process.env.NODE_ENV !== "production" ? invariant__default["default"](false, '@commercetools-frontend/application-shell/test-utils: You provided both `store` and `sdkMocks`. Please provide only one of them.') : invariant__default["default"](false) : void 0;

  // Determine the redux store to use in tests.
  // - When the user passed in a "store", we use that store and ignore
  //   sdkMocks and storeState.
  // - When the user passed in no sdkMocks, we create a store using the
  //   provided storeState. If storeState is undefined, then the defaults kick
  //   in anyways.
  // - Lastly, when sdkMocks were provided (and no store was provided), we
  //   create a store which applies a special middleware to allow mocking sdk
  //   responses. We further initialize the store with the provided storeState.
  //   If storeState is undefined, then the defaults kick in anyways.
  const reduxStore = (() => {
    if (store) return store;
    if (sdkMocks.length === 0) return index.createReduxStore(storeState);
    const testingMiddleware = testUtils.createTestMiddleware(sdkMocks);
    return index.createReduxStore(storeState, [testingMiddleware]);
  })();
  const ReduxProviders = props => jsxRuntime.jsx(reactNotifications.NotificationProviderForCustomComponent, {
    mapNotificationToComponent: mapNotificationToComponent,
    children: jsxRuntime.jsx(reactRedux.Provider, {
      store: reduxStore,
      children: jsxRuntime.jsxs("div", {
        children: [jsxRuntime.jsx(reactNotifications.NotificationsList, {
          domain: constants.DOMAINS.GLOBAL
        }), jsxRuntime.jsx(reactNotifications.NotificationsList, {
          domain: constants.DOMAINS.PAGE
        }), jsxRuntime.jsx(reactNotifications.NotificationsList, {
          domain: constants.DOMAINS.SIDE
        }), props.children]
      })
    })
  });
  ReduxProviders.propTypes = process.env.NODE_ENV !== "production" ? {
    children: _pt__default["default"].node.isRequired
  } : {};
  return {
    ReduxProviders,
    reduxStore
  };
}

// Test setup for rendering with Redux
// We expose a sophisticated function because we plan to get rid of Redux
// Use this function only when your test actually needs Redux
function renderAppWithRedux(ui) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const _createReduxProviders = createReduxProviders(options),
    ReduxProviders = _createReduxProviders.ReduxProviders,
    reduxStore = _createReduxProviders.reduxStore;
  // eslint-disable-next-line testing-library/render-result-naming-convention
  const rendered = renderApp(ui, _objectSpread$1(_objectSpread$1({}, options), {}, {
    // eslint-disable-next-line react/display-name
    wrapper: _ref4 => {
      let children = _ref4.children,
        props = _objectWithoutProperties(_ref4, _excluded2);
      return jsxRuntime.jsx(ReduxProviders, _objectSpread$1(_objectSpread$1({}, props), {}, {
        children: wrapIfNeeded(children, options.wrapper)
      }));
    }
  }));
  return _objectSpread$1(_objectSpread$1({}, rendered), {}, {
    // adding `store` to the returned utilities to allow us
    // to reference it in our tests (just try to avoid using
    // this to test implementation details).
    store: reduxStore
  });
}
function renderHook(callback) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const _createReduxProviders2 = createReduxProviders(options),
    ReduxProviders = _createReduxProviders2.ReduxProviders,
    reduxStore = _createReduxProviders2.reduxStore;
  const _createApplicationPro2 = createApplicationProviders(options),
    ApplicationProviders = _createApplicationPro2.ApplicationProviders,
    mergedUser = _createApplicationPro2.mergedUser,
    mergedProject = _createApplicationPro2.mergedProject,
    mergedEnvironment = _createApplicationPro2.mergedEnvironment,
    history = _createApplicationPro2.history;

  // eslint-disable-next-line testing-library/render-result-naming-convention
  const rendered = rtlHooks__namespace.renderHook(callback, _objectSpread$1(_objectSpread$1({}, options), {}, {
    // eslint-disable-next-line react/display-name
    wrapper: _ref5 => {
      let children = _ref5.children;
      return jsxRuntime.jsx(ApplicationProviders, {
        children: jsxRuntime.jsx(ReduxProviders, {
          children: wrapIfNeeded(children, options.wrapper)
        })
      });
    }
  }));
  return _objectSpread$1(_objectSpread$1({}, rendered), {}, {
    store: reduxStore,
    history,
    user: mergedUser,
    project: mergedProject,
    environment: mergedEnvironment
  });
}

// namespace for hooks related helpers
const hooks = _objectSpread$1(_objectSpread$1({}, rtlHooks__namespace), {}, {
  renderHook
});

/** All built-in and custom scalars, mapped to their actual values */
let TCustomViewType = /*#__PURE__*/function (TCustomViewType) {
  TCustomViewType["CustomPanel"] = "CustomPanel";
  return TCustomViewType;
}({});

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const testCustomViewData = {
  id: 'custom-view-id',
  defaultLabel: 'My View',
  labelAllLocales: [],
  url: 'https://my-view.com',
  type: TCustomViewType.CustomPanel,
  locators: ['products.product_details.general'],
  permissions: [{
    name: 'view',
    oAuthScopes: ['view_products']
  }]
};
const renderCustomView = props => {
  var _props$customViewHost;
  return renderApp(jsxRuntime.jsx(applicationShellConnectors.CustomViewContextProvider, {
    hostUrl: (_props$customViewHost = props.customViewHostUrl) !== null && _props$customViewHost !== void 0 ? _props$customViewHost : 'https://mc.ct.com/my-project/products/product-id-1',
    customViewConfig: _objectSpread(_objectSpread({}, testCustomViewData), props.customViewConfig),
    children: props.children
  }), {
    apolloClient: props.apolloClient,
    locale: props.locale,
    project: {
      key: props.projectKey,
      allAppliedPermissions: props.projectAllAppliedPermissions || []
    },
    environment: _objectSpread(_objectSpread({}, props.environment || {}), {}, {
      entryPointUriPath: constants.CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH
    }),
    user: props.user
  });
};

exports.denormalizeActionRights = denormalizeActionRights;
exports.denormalizeDataFences = denormalizeDataFences;
exports.denormalizePermissions = denormalizePermissions;
exports.hooks = hooks;
exports.mapResourceAccessToAppliedPermissions = mapResourceAccessToAppliedPermissions;
exports.renderApp = renderApp;
exports.renderAppWithRedux = renderAppWithRedux;
exports.renderCustomView = renderCustomView;
Object.keys(rtl).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return rtl[k]; }
  });
});
