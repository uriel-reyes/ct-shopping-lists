import { SyntheticEvent, ReactNode, ReactElement } from 'react';
import type { CSSObject } from '@emotion/react';
type MessageDescriptor = {
    id: string;
    description?: string | object;
    defaultMessage?: string;
};
type Label = string | MessageDescriptor;
type Props = {
    level?: number;
    title: string;
    isOpen: boolean;
    onClose?: (event: SyntheticEvent) => void;
    customViewLocatorCode?: string;
    children: ReactNode;
    zIndex?: number;
    baseZIndex?: number;
    getParentSelector?: () => HTMLElement;
    shouldDelayOnClose?: boolean;
    afterOpenStyles?: string | CSSObject;
    topBarCurrentPathLabel?: string;
    topBarPreviousPathLabel?: Label;
    subtitle?: string | ReactElement;
    isPrimaryButtonDisabled?: boolean;
    isSecondaryButtonDisabled?: boolean;
    dataAttributesPrimaryButton?: {
        [key: string]: string;
    };
    dataAttributesSecondaryButton?: {
        [key: string]: string;
    };
    labelPrimaryButton?: Label;
    labelSecondaryButton?: Label;
    onPrimaryButtonClick: (event: SyntheticEvent) => void;
    onSecondaryButtonClick: (event: SyntheticEvent) => void;
    hideControls: boolean;
    iconLeftSecondaryButton?: ReactElement;
};
declare const FormModalPage: {
    (props: Props): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
    defaultProps: Pick<Props, "hideControls">;
    Intl: {
        cancel: {
            id: string;
            defaultMessage: string;
        };
        revert: {
            id: string;
            defaultMessage: string;
        };
        confirm: {
            id: string;
            defaultMessage: string;
        };
        save: {
            id: string;
            defaultMessage: string;
        };
        update: {
            id: string;
            defaultMessage: string;
        };
        create: {
            id: string;
            defaultMessage: string;
        };
        delete: {
            id: string;
            defaultMessage: string;
        };
        add: {
            id: string;
            defaultMessage: string;
        };
        remove: {
            id: string;
            defaultMessage: string;
        };
        close: {
            id: string;
            defaultMessage: string;
        };
        edit: {
            id: string;
            defaultMessage: string;
        };
        open: {
            id: string;
            defaultMessage: string;
        };
        activate: {
            id: string;
            defaultMessage: string;
        };
        deactivate: {
            id: string;
            defaultMessage: string;
        };
        active: {
            id: string;
            defaultMessage: string;
        };
        inactive: {
            id: string;
            defaultMessage: string;
        };
        enable: {
            id: string;
            defaultMessage: string;
        };
        disable: {
            id: string;
            defaultMessage: string;
        };
    };
};
export default FormModalPage;
