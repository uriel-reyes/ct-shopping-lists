import type { ReactElement, ReactNode } from 'react';
type CustomFormMainPageProps = {
    title?: string;
    subtitle?: string | ReactElement;
    customTitleRow?: ReactNode;
    customViewLocatorCode?: string;
    children: ReactNode;
    formControls?: ReactNode;
    hideControls?: boolean;
    hideDivider?: boolean;
};
declare const CustomFormMainPage: {
    (props: CustomFormMainPageProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
    defaultProps: Pick<CustomFormMainPageProps, "hideControls" | "hideDivider">;
    PageHeaderTitle: {
        (props: {
            title: string;
            titleSize: "big" | "small" | "medium";
            truncate: boolean;
            subtitle?: string | ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
            children?: undefined;
        }): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
        displayName: string;
        defaultProps: Pick<{
            title: string;
            titleSize: "big" | "small" | "medium";
            truncate: boolean;
            subtitle?: string | ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
            children?: undefined;
        }, "truncate" | "titleSize">;
    };
    FormPrimaryButton: {
        (props: {
            label: string | {
                id: string;
                description?: string | object | undefined;
                defaultMessage?: string | undefined;
            };
            onClick: (event: import("react").SyntheticEvent<Element, Event>) => void;
            isDisabled: boolean;
            dataAttributes: {
                [key: string]: string;
            };
            children?: undefined;
        }): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
        displayName: string;
        defaultProps: Pick<{
            label: string | {
                id: string;
                description?: string | object | undefined;
                defaultMessage?: string | undefined;
            };
            onClick: (event: import("react").SyntheticEvent<Element, Event>) => void;
            isDisabled: boolean;
            dataAttributes: {
                [key: string]: string;
            };
            children?: undefined;
        }, "label" | "isDisabled" | "dataAttributes">;
    };
    FormSecondaryButton: {
        (props: {
            iconLeft?: ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        } & {
            label: string | {
                id: string;
                description?: string | object | undefined;
                defaultMessage?: string | undefined;
            };
            onClick: (event: import("react").SyntheticEvent<Element, Event>) => void;
            isDisabled: boolean;
            dataAttributes: {
                [key: string]: string;
            };
            children?: undefined;
        }): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
        displayName: string;
        defaultProps: Pick<{
            iconLeft?: ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        } & {
            label: string | {
                id: string;
                description?: string | object | undefined;
                defaultMessage?: string | undefined;
            };
            onClick: (event: import("react").SyntheticEvent<Element, Event>) => void;
            isDisabled: boolean;
            dataAttributes: {
                [key: string]: string;
            };
            children?: undefined;
        }, "label" | "isDisabled" | "dataAttributes">;
    };
    FormDeleteButton: {
        (props: {
            label: string | {
                id: string;
                description?: string | object | undefined;
                defaultMessage?: string | undefined;
            };
            onClick: (event: import("react").SyntheticEvent<Element, Event>) => void;
            isDisabled: boolean;
            dataAttributes: {
                [key: string]: string;
            };
            children?: undefined;
        }): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
        displayName: string;
        defaultProps: Pick<{
            label: string | {
                id: string;
                description?: string | object | undefined;
                defaultMessage?: string | undefined;
            };
            onClick: (event: import("react").SyntheticEvent<Element, Event>) => void;
            isDisabled: boolean;
            dataAttributes: {
                [key: string]: string;
            };
            children?: undefined;
        }, "label" | "isDisabled" | "dataAttributes">;
    };
    Intl: {
        cancel: {
            id: string;
            defaultMessage: string;
        };
        revert: {
            id: string;
            defaultMessage: string;
        };
        confirm: {
            id: string;
            defaultMessage: string;
        };
        save: {
            id: string;
            defaultMessage: string;
        };
        update: {
            id: string;
            defaultMessage: string;
        };
        create: {
            id: string;
            defaultMessage: string;
        };
        delete: {
            id: string;
            defaultMessage: string;
        };
        add: {
            id: string;
            defaultMessage: string;
        };
        remove: {
            id: string;
            defaultMessage: string;
        };
        close: {
            id: string;
            defaultMessage: string;
        };
        edit: {
            id: string;
            defaultMessage: string;
        };
        open: {
            id: string;
            defaultMessage: string;
        };
        activate: {
            id: string;
            defaultMessage: string;
        };
        deactivate: {
            id: string;
            defaultMessage: string;
        };
        active: {
            id: string;
            defaultMessage: string;
        };
        inactive: {
            id: string;
            defaultMessage: string;
        };
        enable: {
            id: string;
            defaultMessage: string;
        };
        disable: {
            id: string;
            defaultMessage: string;
        };
    };
};
export default CustomFormMainPage;
