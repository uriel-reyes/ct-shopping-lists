import type { ReactElement, ReactNode, MouseEvent, KeyboardEvent } from 'react';
type MessageDescriptor = {
    id: string;
    description?: string | object;
    defaultMessage?: string;
    values?: Record<string, ReactNode>;
};
type InfoDetailPageProps = {
    title?: string;
    subtitle?: string | ReactElement;
    customTitleRow?: ReactNode;
    children: ReactNode;
    previousPathLabel?: string | MessageDescriptor;
    customViewLocatorCode?: string;
    onPreviousPathClick: (event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>) => void;
};
declare const InfoDetailPage: {
    (props: InfoDetailPageProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
    PageHeaderTitle: {
        (props: {
            title: string;
            titleSize: "big" | "small" | "medium";
            truncate: boolean;
            subtitle?: string | ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
            children?: undefined;
        }): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
        displayName: string;
        defaultProps: Pick<{
            title: string;
            titleSize: "big" | "small" | "medium";
            truncate: boolean;
            subtitle?: string | ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
            children?: undefined;
        }, "truncate" | "titleSize">;
    };
};
export default InfoDetailPage;
