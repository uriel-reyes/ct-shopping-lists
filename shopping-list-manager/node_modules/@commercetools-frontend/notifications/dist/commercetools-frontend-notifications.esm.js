import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import _Map from '@babel/runtime-corejs3/core-js-stable/map';
import _setTimeout from '@babel/runtime-corejs3/core-js-stable/set-timeout';

// NOTE: This string will be replaced on build time with the package version.
var version = "22.13.0";

const ADD_NOTIFICATION = 'ADD_NOTIFICATION';
const REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION';

function addNotification(notification, meta) {
  const action = {
    type: ADD_NOTIFICATION,
    payload: notification
  };
  if (meta) action.meta = meta;
  return action;
}
function removeNotification(id) {
  return {
    type: REMOVE_NOTIFICATION,
    payload: {
      id
    }
  };
}

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys(Object(t))).call(_context3, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
// Force TS cast of generic action to TNotificationAction
const isNotificationAction = action => {
  var _context;
  return _includesInstanceProperty(_context = [ADD_NOTIFICATION, REMOVE_NOTIFICATION]).call(_context, action.type);
};
const dismissCallbacksMap = new _Map();
let id = 0;
const middleware = _ref => {
  let dispatch = _ref.dispatch;
  return next => action => {
    if (!isNotificationAction(action)) {
      return next(action);
    }
    switch (action.type) {
      case ADD_NOTIFICATION:
        {
          id += 1;
          const notification = _objectSpread(_objectSpread({}, action.payload), {}, {
            id
          });
          const dismissCallback = () => {
            dispatch(removeNotification(notification.id));
          };
          if (action.meta) {
            if (action.meta.dismissAfter) _setTimeout(dismissCallback, action.meta.dismissAfter);
            if (typeof action.meta.onDismiss === 'function') dismissCallbacksMap.set(notification.id, action.meta.onDismiss);
          }
          const nextAction = _objectSpread(_objectSpread({}, action), {}, {
            payload: notification,
            dismiss: dismissCallback
          });
          return next(nextAction);
        }
      case REMOVE_NOTIFICATION:
        {
          const notificationId = action.payload.id;
          const callback = dismissCallbacksMap.get(notificationId);
          if (callback) callback(notificationId);
          dismissCallbacksMap.delete(notificationId);
          return next(action);
        }
      default:
        return next(action);
    }
  };
};

function notificationsReducer() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (!action || !action.type) return state;
  switch (action.type) {
    case ADD_NOTIFICATION:
      {
        return [action.payload, ...state];
      }
    case REMOVE_NOTIFICATION:
      return _filterInstanceProperty(state).call(state, notification => action.payload.id !== notification.id);
    default:
      return state;
  }
}

export { ADD_NOTIFICATION, REMOVE_NOTIFICATION, addNotification, middleware, notificationsReducer as reducer, removeNotification, version };
