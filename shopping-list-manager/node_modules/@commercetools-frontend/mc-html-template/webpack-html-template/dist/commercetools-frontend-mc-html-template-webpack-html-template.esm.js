import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _indexOfInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import { g as generateTemplate } from '../../dist/generate-template-90e274ba.esm.js';

function webpackHtmlTemplate(templateParams) {
  var _context, _context2, _context3;
  const cssVendorChunks = [];
  const cssAppChunks = [];
  _forEachInstanceProperty(_context = templateParams.htmlWebpackPlugin.files.css).call(_context, file => {
    if (_indexOfInstanceProperty(file).call(file, 'vendor') === -1) {
      cssAppChunks.push(file);
    } else {
      cssVendorChunks.push(file);
    }
  });
  const cssChunks = _mapInstanceProperty(_context2 = _concatInstanceProperty(cssVendorChunks).call(cssVendorChunks, cssAppChunks)).call(_context2, fileName => fileName.replace(/^\//, ''));
  const scriptChunks = _mapInstanceProperty(_context3 = templateParams.htmlWebpackPlugin.files.js).call(_context3, fileName =>
  // Trim leading slash, the CDN_URL will ensure to have a trailing slash
  // (see `replaceHtmlPlaceholders`)
  fileName.replace(/^\//, ''));
  const cssImports = _mapInstanceProperty(cssChunks).call(cssChunks, chunkPath => "<link href=\"__CDN_URL__".concat(chunkPath, "\" rel='stylesheet' type='text/css'>"));
  const scriptImports = _mapInstanceProperty(scriptChunks).call(scriptChunks, chunkPath => "<script src=\"__CDN_URL__".concat(chunkPath, "\"></script>"));
  return generateTemplate({
    cssImports,
    scriptImports
  });
}

export { webpackHtmlTemplate as default };
