import type { TCustomView } from './types/generated/settings';
export declare const PORTALS_CONTAINER_ID = "portals-container";
export declare const SUPPORT_PORTAL_URL = "https://support.commercetools.com";
export declare const SHOW_LOADING = "SHOW_LOADING";
export declare const HIDE_LOADING = "HIDE_LOADING";
export declare const HIDE_ALL_PAGE_NOTIFICATIONS = "HIDE_ALL_PAGE_NOTIFICATIONS";
export declare const NOTIFICATION_DOMAINS: {
    readonly GLOBAL: "global";
    readonly PAGE: "page";
    readonly SIDE: "side";
};
export declare const NOTIFICATION_KINDS_SIDE: {
    readonly error: "error";
    readonly warning: "warning";
    readonly info: "info";
    readonly success: "success";
};
export declare const NOTIFICATION_KINDS_GLOBAL: {
    readonly error: "error";
    readonly warning: "warning";
    readonly info: "info";
    readonly success: "success";
    readonly 'unexpected-error': "unexpected-error";
};
export declare const NOTIFICATION_KINDS_PAGE: {
    readonly error: "error";
    readonly warning: "warning";
    readonly info: "info";
    readonly success: "success";
    readonly 'unexpected-error': "unexpected-error";
    readonly 'api-error': "api-error";
};
export type TAppNotificationDomain = (typeof NOTIFICATION_DOMAINS)[keyof typeof NOTIFICATION_DOMAINS];
export declare const DOMAINS: {
    readonly GLOBAL: "global";
    readonly PAGE: "page";
    readonly SIDE: "side";
};
export type TAppNotificationKindSide = (typeof NOTIFICATION_KINDS_SIDE)[keyof typeof NOTIFICATION_KINDS_SIDE];
export type TAppNotificationKindGlobal = (typeof NOTIFICATION_KINDS_GLOBAL)[keyof typeof NOTIFICATION_KINDS_GLOBAL];
export type TAppNotificationKindPage = (typeof NOTIFICATION_KINDS_PAGE)[keyof typeof NOTIFICATION_KINDS_PAGE];
export type TAppNotificationKind = TAppNotificationKindSide | TAppNotificationKindGlobal | TAppNotificationKindPage;
export type TAppNotificationOfDomain = {
    domain: TAppNotificationDomain;
};
export type TAppNotificationOfKind<T extends TAppNotificationOfDomain> = TAppNotificationOfDomain & {
    kind: 'global' extends T['domain'] ? TAppNotificationKindGlobal : 'page' extends T['domain'] ? TAppNotificationKindPage : 'side' extends T['domain'] ? TAppNotificationKindSide : never;
};
export type TAppNotificationApiError<ExtraFields extends {} = {}> = {
    message: string;
    code?: string;
    extensions?: {
        code?: string;
    };
} & ExtraFields;
export type TAppNotificationValuesApiError<ExtraFields extends {} = {}> = {
    errors: TAppNotificationApiError<ExtraFields>[];
};
export type TAppNotificationValuesUnexpectedError = {
    errorId?: string;
};
export type TAppNotification<T extends TAppNotificationOfKind<T>> = TAppNotificationOfKind<T> & {
    id: number;
    text?: TAppNotificationKindSide extends T['kind'] ? string : never;
    values?: 'api-error' extends T['kind'] ? TAppNotificationValuesApiError : 'unexpected-error' extends T['kind'] ? TAppNotificationValuesUnexpectedError : never;
};
export type TAppNotificationGlobal = TAppNotification<{
    domain: typeof NOTIFICATION_DOMAINS.GLOBAL;
    kind: TAppNotificationKindGlobal;
}>;
export type TAppNotificationPage = TAppNotification<{
    domain: typeof NOTIFICATION_DOMAINS.PAGE;
    kind: TAppNotificationKindPage;
}>;
export type TAppNotificationSide = TAppNotification<{
    domain: typeof NOTIFICATION_DOMAINS.SIDE;
    kind: TAppNotificationKindSide;
}>;
export declare const NO_VALUE_FALLBACK = "- -";
export declare const STATUS_CODES: {
    readonly UNAUTHORIZED: 401;
    readonly FORBIDDEN: 403;
    readonly UNAUTHENTICATED: 299;
    readonly NOT_FOUND: 404;
};
export type TStatusCode = (typeof STATUS_CODES)[keyof typeof STATUS_CODES];
export declare const LOGOUT_REASONS: {
    readonly USER: "user";
    readonly UNAUTHORIZED: "unauthorized";
    readonly INVALID: "invalid";
    readonly DELETED: "deleted";
    readonly NO_PROJECTS: "no-projects";
};
export type TLogoutReason = (typeof LOGOUT_REASONS)[keyof typeof LOGOUT_REASONS];
export declare const GRAPHQL_TARGETS: {
    readonly MERCHANT_CENTER_BACKEND: "mc";
    readonly COMMERCETOOLS_PLATFORM: "ctp";
    readonly DASHBOARD_SERVICE: "dashboard";
    readonly CHANGE_HISTORY_SERVICE: "change-history";
    readonly PIM_INDEXER: "pim-indexer";
    readonly ORDER_INDEXER: "order-indexer";
    readonly SETTINGS_SERVICE: "settings";
    readonly ADMINISTRATION_SERVICE: "administration";
};
export type TGraphQLTargets = (typeof GRAPHQL_TARGETS)[keyof typeof GRAPHQL_TARGETS];
export declare const MC_API_PROXY_TARGETS: {
    readonly COMMERCETOOLS_PLATFORM: "ctp";
    readonly MACHINE_LEARNING: "ml";
    readonly PIM_SEARCH: "pim-search";
    readonly ORDER_SEARCH: "order-search";
    readonly MC_METRICS: "mc-metrics";
    readonly IMPORT: "import";
};
export type TMcApiProxyTargets = (typeof MC_API_PROXY_TARGETS)[keyof typeof MC_API_PROXY_TARGETS];
export type TLocalizedField = {
    locale: string;
    value: string;
};
export type TPermissionData = {
    name: string;
    oAuthScopes: string[];
};
export type ApplicationMenuLinksForDevelopmentConfig = {
    icon: string;
    defaultLabel: string;
    labelAllLocales: TLocalizedField[];
    permissions: string[];
    submenuLinks: {
        uriPath: string;
        defaultLabel: string;
        labelAllLocales: TLocalizedField[];
        permissions: string[];
    }[];
};
export type ApplicationOidcForDevelopmentConfig = {
    authorizeUrl: string;
    initialProjectKey?: string;
    teamId?: string;
    applicationId?: string;
    customViewId?: string;
    oAuthScopes?: {
        view: string[];
        manage: string[];
    };
    additionalOAuthScopes?: {
        name: string;
        view: string[];
        manage: string[];
    }[];
};
export type CustomViewData = {
    id: string;
    defaultLabel: string;
    labelAllLocales: TLocalizedField[];
    description?: string;
    url: string;
    permissions: TPermissionData[];
    locators: string[];
    type: TCustomView['type'];
    typeSettings?: TCustomView['typeSettings'];
};
export type ApplicationRuntimeEnvironmentForDevelopment = {
    oidc?: ApplicationOidcForDevelopmentConfig;
    menuLinks?: ApplicationMenuLinksForDevelopmentConfig;
    customViewHostUrl?: string;
    customViewConfig?: CustomViewData;
};
export type ApplicationRuntimeEnvironment = {
    applicationId: string;
    applicationIdentifier: string;
    applicationName: string;
    entryPointUriPath: string;
    customViewId?: string;
    revision: string;
    env: string;
    location: string;
    cdnUrl: string;
    mcApiUrl: string;
    frontendHost: string;
    servedByProxy: boolean;
    ldClientSideId?: string;
    trackingSentry?: string;
    __DEVELOPMENT__?: ApplicationRuntimeEnvironmentForDevelopment;
};
export interface ApplicationWindow extends Window {
    app: ApplicationRuntimeEnvironment;
}
export declare const CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH = "@@custom-view-host@@";
export declare const SUPPORTED_HEADERS: {
    readonly ACCEPT: "Accept";
    readonly ACCEPT_VERSION: "Accept-version";
    readonly AUTHORIZATION: "Authorization";
    readonly CONTENT_TYPE: "Content-Type";
    readonly X_APPLICATION_ID: "X-Application-Id";
    readonly X_CUSTOM_VIEW_ID: "X-Custom-View-Id";
    readonly X_CORRELATION_ID: "X-Correlation-Id";
    readonly X_FEATURE_FLAG: "X-Feature-Flag";
    readonly X_FORWARD_TO: "X-Forward-To";
    readonly X_FORWARD_TO_AUDIENCE_POLICY: "X-Forward-To-Audience-Policy";
    readonly X_FORWARD_TO_CLAIMS: "X-Forward-To-Claims";
    readonly X_GRAPHQL_TARGET: "X-Graphql-Target";
    readonly X_GRAPHQL_OPERATION_NAME: "X-Graphql-Operation-Name";
    readonly X_PROJECT_KEY: "X-Project-Key";
    readonly X_TEAM_ID: "X-Team-Id";
    readonly X_TOKEN_RETRY: "X-Force-Token";
    readonly X_USER_AGENT: "X-User-Agent";
};
export declare const STORAGE_KEYS: {
    readonly NONCE: "nonce";
    readonly IS_AUTHENTICATED: "isAuthenticated";
    readonly SESSION_TOKEN: "sessionToken";
    readonly SESSION_SCOPE: "sessionScope";
    readonly ACTIVE_PROJECT_KEY: "activeProjectKey";
    readonly ACTIVE_TEAM_ID: "activeTeamId";
    readonly SELECTED_DATA_LOCALE: "selectedDataLocale";
    readonly IS_FORCED_MENU_OPEN: "isForcedMenuOpen";
    readonly LOGIN_STRATEGY: "loginStrategy";
};
export declare const HTTP_SECURITY_HEADERS: {
    readonly 'Strict-Transport-Security': "max-age=31536000; includeSubDomains; preload";
    readonly 'X-XSS-Protection': "1; mode=block";
    readonly 'X-Content-Type-Options': "nosniff";
    readonly 'X-Frame-Options': "SAMEORIGIN";
    readonly 'Referrer-Policy': "same-origin";
};
export declare const CUSTOM_VIEWS_EVENTS_NAMES: {
    CUSTOM_VIEW_BOOTSTRAP: string;
    CUSTOM_VIEW_INITIALIZATION: string;
};
export declare const CUSTOM_VIEWS_EVENTS_META: {
    SOURCE: string;
    DESTINATION_PREFIX: string;
};
export declare const ORGANIZATION_GENERAL_ERROR = "organizationGeneralError";
export declare const LOGIN_STRATEGY_DEFAULT = "default";
export declare const LOGIN_STRATEGY_OIDC = "oidc";
export declare const LOGIN_STRATEGY_SSO = "sso";
