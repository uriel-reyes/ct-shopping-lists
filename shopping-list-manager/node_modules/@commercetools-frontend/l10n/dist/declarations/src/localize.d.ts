import { LocalizedString, LocalizedField, FieldNameTranformationMapping, FormatLocalizedStringOptions } from './types';
export declare const transformLocalizedFieldToLocalizedString: (localizedFields?: LocalizedField[]) => LocalizedString | null;
export declare const transformLocalizedStringToLocalizedField: (localizedString?: LocalizedString) => LocalizedField[];
export declare const applyTransformedLocalizedFields: <Input extends Record<string, unknown>, Output extends Record<string, unknown>>(objectWithLocalizedFields: Input, fieldNames: FieldNameTranformationMapping[]) => Output;
export declare const applyTransformedLocalizedStrings: <Input extends Record<string, unknown>, Output extends Record<string, unknown>>(objectWithLocalizedStrings: Input, fieldNames: FieldNameTranformationMapping[]) => Output;
export declare const formatLocalizedString: <Input extends Record<string, unknown>>(entity: Input | null, { key, locale, fallbackOrder, fallback, }: FormatLocalizedStringOptions<Input>) => string;
