'use strict';

var _parseInt = require('@babel/runtime-corejs3/core-js-stable/parse-int');
var _JSON$stringify = require('@babel/runtime-corejs3/core-js-stable/json/stringify');
var path = require('path');
var pluginGraphql = require('@rollup/plugin-graphql');
var pluginReact = require('@vitejs/plugin-react');
var fs = require('fs-extra');
var vite = require('vite');
var assets = require('@commercetools-frontend/assets');
var mcHtmlTemplate = require('@commercetools-frontend/mc-html-template');
var paths = require('./paths-d1febc82.cjs.dev.js');
var vitePluginSvgr = require('./vite-plugin-svgr-5eb1c511.cjs.dev.js');
require('@babel/runtime-corejs3/core-js-stable/instance/find');
require('@babel/runtime-corejs3/core-js-stable/instance/concat');
require('fs');
require('@rollup/pluginutils');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _parseInt__default = /*#__PURE__*/_interopDefault(_parseInt);
var _JSON$stringify__default = /*#__PURE__*/_interopDefault(_JSON$stringify);
var path__default = /*#__PURE__*/_interopDefault(path);
var pluginGraphql__default = /*#__PURE__*/_interopDefault(pluginGraphql);
var pluginReact__default = /*#__PURE__*/_interopDefault(pluginReact);
var fs__default = /*#__PURE__*/_interopDefault(fs);

// This script/function is injected into the `index.html` and used by Vite
// on runtime to build the assets URL (for example when using a separate CDN for the assets).
// Inspired by https://github.com/vitejs/vite/blob/main/playground/assets/vite.config-runtime-base.js
const dynamicBaseAssetsCode = "globalThis.__toCdnUrl = filePath => window.app.cdnUrl.replace(/\\/$/, '') + '/' + filePath;";
function vitePluginDynamicBaseAssetsGlobals() {
  return {
    name: 'dynamic-base-assets-globals',
    transformIndexHtml(html, ctx) {
      if (ctx.bundle) {
        // Only inject during build
        return [{
          tag: 'script',
          attrs: {
            type: 'module'
          },
          children: dynamicBaseAssetsCode
        }];
      }
      return html;
    }
  };
}

async function run() {
  const DEFAULT_PORT = _parseInt__default["default"](String(process.env.HTTP_PORT), 10) || 3001;

  // Ensure the `/public` folder exists.
  fs__default["default"].mkdirSync(paths.paths.appBuild, {
    recursive: true
  });

  // Generate `index.html` (template).
  const appEntryPoint = path__default["default"].relative(paths.paths.appRoot, paths.paths.entryPoint);
  const html = mcHtmlTemplate.generateTemplate({
    // Define the module entry point (path relative from the `/public` folder).
    // NOTE: that this is different from the development configuration.
    scriptImports: ["<script type=\"module\" src=\"/".concat(appEntryPoint, "\"></script>")]
  });
  // Write `index.html` (template) into the `/public` folder.
  fs__default["default"].writeFileSync(paths.paths.appIndexHtml, html, {
    encoding: 'utf8'
  });
  await vite.build({
    root: paths.paths.appRoot,
    base: './',
    // <-- Important to allow configuring the runtime base path.
    define: {
      'process.env.DEBUG': _JSON$stringify__default["default"](false),
      'process.env.NODE_ENV': _JSON$stringify__default["default"]('production')
    },
    build: {
      outDir: 'public',
      rollupOptions: {
        // This is necessary to instruct Vite that the `index.html` (template)
        // is located in the `/public` folder.
        // NOTE that after the build, Vite will write the `index.html` (template)
        // at the `/public/public/index.html` location. See `fs.renameSync` below.
        input: paths.paths.appIndexHtml,
        // Reduce the memory footpring when building sourcemaps.
        // https://github.com/vitejs/vite/issues/2433#issuecomment-1361094727
        cache: false
      },
      sourcemap:
      // Generating sourcemaps can increase the memory footprint of the build process,
      // therefore it's an opt-in option.
      // TODO: make it a CLI option when Vite support becomes stable.
      process.env.ENABLE_EXPERIMENTAL_VITE_BUNDLER_SOURCEMAP === 'true'
    },
    server: {
      port: DEFAULT_PORT
    },
    experimental: {
      // https://vitejs.dev/guide/build.html#advanced-base-options
      renderBuiltUrl(filename, _ref) {
        let hostType = _ref.hostType;
        if (hostType === 'html') {
          return "__CDN_URL__".concat(filename);
        }
        return {
          runtime: "window.__toCdnUrl(".concat(_JSON$stringify__default["default"](filename), ")")
        };
      }
    },
    plugins: [pluginGraphql__default["default"](), pluginReact__default["default"]({
      jsxImportSource: '@emotion/react',
      babel: {
        plugins: ['@emotion/babel-plugin', '@babel/plugin-proposal-do-expressions']
      }
    }), vitePluginSvgr.vitePluginSvgr(), vitePluginDynamicBaseAssetsGlobals()]
  });

  // Rename `/public/public/index.html` to `/public/index.html.template`
  fs__default["default"].renameSync(
  // Because of our custom entry point path (`/public/index.html`),
  // Vite will write the `index.html` to `/public/public/index.html`.
  // We need to move this file to the `/public` folder and rename it
  // to `index.html.template` (as expected by the `compile-html` command).
  path__default["default"].join(paths.paths.appBuild, 'public/index.html'), paths.paths.appIndexHtmlTemplate);
  // Clean up nested folder
  fs__default["default"].rmdirSync(path__default["default"].join(paths.paths.appBuild, 'public'));

  // Copy public assets
  fs__default["default"].copySync(path__default["default"].join(assets.packageLocation, 'html-page'), paths.paths.appBuild, {
    dereference: true
  });
}

exports["default"] = run;
