'use strict';

var http = require('http');
var serveHandler = require('serve-handler');
var paths = require('./paths-854af5ef.cjs.prod.js');
require('@babel/runtime-corejs3/core-js-stable/instance/find');
require('@babel/runtime-corejs3/core-js-stable/instance/concat');
require('fs');
require('path');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var http__default = /*#__PURE__*/_interopDefault(http);
var serveHandler__default = /*#__PURE__*/_interopDefault(serveHandler);

const port = 3001;
async function run() {
  const server = http__default["default"].createServer((request, response) => {
    // You pass two more arguments for config and middleware
    // More details here: https://github.com/vercel/serve-handler#options
    return serveHandler__default["default"](request, response, {
      public: paths.paths.appBuild,
      rewrites: [{
        source: '/favicon*',
        destination: '/favicon.png'
      }, {
        source: '/login*',
        destination: '/login.html'
      }, {
        source: '/logout',
        destination: '/logout.html'
      }, {
        // Match all routes except for the login, logout, and favicon routes.
        // NOTE: this complex glob pattern would not be necessary if the rewrite
        // implementation would stop at the first match.
        // See https://github.com/vercel/serve-handler/issues/71
        source: '{/!(favicon|login|logout)*/**,/!(favicon|login|logout)*}',
        destination: '/index.html'
      }]
    });
  });
  server.listen(port, () => {
    console.log("Running at http://localhost:".concat(port));
  });
}

exports["default"] = run;
