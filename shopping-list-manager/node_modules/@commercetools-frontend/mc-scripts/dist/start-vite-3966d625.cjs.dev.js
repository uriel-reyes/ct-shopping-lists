'use strict';

var _parseInt = require('@babel/runtime-corejs3/core-js-stable/parse-int');
var _JSON$stringify = require('@babel/runtime-corejs3/core-js-stable/json/stringify');
var path = require('path');
var pluginGraphql = require('@rollup/plugin-graphql');
var pluginReact = require('@vitejs/plugin-react-swc');
var fs = require('fs-extra');
var vite = require('vite');
var applicationConfig = require('@commercetools-frontend/application-config');
var assets = require('@commercetools-frontend/assets');
var mcHtmlTemplate = require('@commercetools-frontend/mc-html-template');
var paths = require('./paths-d1febc82.cjs.dev.js');
var _Object$assign = require('@babel/runtime-corejs3/core-js-stable/object/assign');
var mcDevAuthentication = require('@commercetools-frontend/mc-dev-authentication');
var vitePluginSvgr = require('./vite-plugin-svgr-5eb1c511.cjs.dev.js');
require('@babel/runtime-corejs3/core-js-stable/instance/find');
require('@babel/runtime-corejs3/core-js-stable/instance/concat');
require('fs');
require('@rollup/pluginutils');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _parseInt__default = /*#__PURE__*/_interopDefault(_parseInt);
var _JSON$stringify__default = /*#__PURE__*/_interopDefault(_JSON$stringify);
var path__default = /*#__PURE__*/_interopDefault(path);
var pluginGraphql__default = /*#__PURE__*/_interopDefault(pluginGraphql);
var pluginReact__default = /*#__PURE__*/_interopDefault(pluginReact);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var _Object$assign__default = /*#__PURE__*/_interopDefault(_Object$assign);

const vitePluginCustomApplication = applicationConfig => {
  return {
    name: 'custom-application',
    configureServer(server) {
      return () => {
        // Users do not need to have/maintain the `index.html` (as expected by Vite)
        // as it's generated and maintained by the Custom Application CLI.
        // Therefore, the generated `index.html` (template) is written into the `/public`
        // folder so that it's gitignored.
        // As a result, we need to make sure to point the URI path to the correct location.
        server.middlewares.use((req, _res, next) => {
          if (req.url === '/index.html') {
            req.url = '/public/index.html';
          }
          next();
        });

        // Handle auth routes for internal local development.
        server.middlewares.use(mcDevAuthentication.createMcDevAuthenticationMiddleware(applicationConfig));
      };
    },
    /**
     * @type {import('vite').IndexHtmlTransformHook}
     */
    transformIndexHtml(rawHtml, _ctx) {
      const compiledHeaders = mcHtmlTemplate.processHeaders(applicationConfig);
      const enhancedLocalEnv = _Object$assign__default["default"]({}, applicationConfig.env,
      // Now that the app config is defined as a `env.json`, when we start the FE app
      // to point to the local backend API by passing the `MC_API_URL` env does not
      // work anymore). To make it work again, we can override the `env.json` config
      // with the env variable before injecting the values into the index.html.
      // NOTE: this is only necessary for development.
      process.env.MC_API_URL ? {
        mcApiUrl: process.env.MC_API_URL
      } : {});

      // Resolve the placeholders of the `index.html` (template) file, before serving it.
      const html = mcHtmlTemplate.replaceHtmlPlaceholders(rawHtml, {
        env: enhancedLocalEnv,
        headers: compiledHeaders
      });
      return html;
    }
  };
};

async function run() {
  const DEFAULT_PORT = _parseInt__default["default"](String(process.env.HTTP_PORT), 10) || 3001;

  // Load the Custom Application config file first.
  const applicationConfig$1 = applicationConfig.processConfig();

  // Ensure the `/public` folder exists.
  fs__default["default"].mkdirSync(paths.paths.appBuild, {
    recursive: true
  });

  // Generate `index.html` (template).
  const appEntryPoint = path__default["default"].relative(paths.paths.appRoot, paths.paths.entryPoint);
  const html = mcHtmlTemplate.generateTemplate({
    // Define the module entry point (path relative to the `/public` folder).
    // NOTE: that this is different from the production configuration.
    scriptImports: ["<script type=\"module\" src=\"/../".concat(appEntryPoint, "\"></script>")]
  });
  // Write `index.html` (template) into the `/public` folder.
  fs__default["default"].writeFileSync(paths.paths.appIndexHtml, html, {
    encoding: 'utf8'
  });
  const server = await vite.createServer({
    root: paths.paths.appRoot,
    define: {
      'process.env.DEBUG': _JSON$stringify__default["default"](false),
      'process.env.NODE_ENV': _JSON$stringify__default["default"]('development')
    },
    server: {
      port: DEFAULT_PORT
    },
    plugins: [pluginGraphql__default["default"](), pluginReact__default["default"](), vitePluginSvgr.vitePluginSvgr(), vitePluginCustomApplication(applicationConfig$1)]
  });
  await server.listen();

  // Copy public assets to `/public` folder (even in development).
  fs__default["default"].copySync(path__default["default"].join(assets.packageLocation, 'html-page'), paths.paths.appBuild, {
    dereference: true
  });
  server.printUrls();
}

exports["default"] = run;
