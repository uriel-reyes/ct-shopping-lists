import createHttpUserAgent from '@commercetools/http-user-agent';
import { p as pkgJson } from './package-53e602ff.esm.js';
import _classCallCheck from '@babel/runtime-corejs3/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime-corejs3/helpers/esm/createClass';
import _JSON$stringify from '@babel/runtime-corejs3/core-js-stable/json/stringify';
import _Date$now from '@babel/runtime-corejs3/core-js-stable/date/now';
import fs from 'fs';
import os from 'os';
import path from 'path';

const userAgent = createHttpUserAgent({
  name: 'graphql-request',
  libraryName: 'mc-scripts',
  libraryVersion: pkgJson.version,
  contactUrl: 'https://git.io/fjuyC',
  // points to the appkit repo issues
  contactEmail: 'support@commercetools.com'
});

const homedir = os.homedir();
const credentialsFolderPath = path.join(homedir, ".commercetools");
const credentialsFilePath = path.join(credentialsFolderPath, 'mc-credentials.json');
let CredentialsStorage = /*#__PURE__*/function () {
  function CredentialsStorage() {
    _classCallCheck(this, CredentialsStorage);
    // Ensure the credentials file is present
    if (!fs.existsSync(credentialsFilePath)) {
      fs.mkdirSync(credentialsFolderPath, {
        recursive: true
      });
      // Initialize with an empty object
      this._writeCredentials();
    }
  }
  _createClass(CredentialsStorage, [{
    key: "_writeCredentials",
    value: function _writeCredentials(credentials) {
      fs.writeFileSync(credentialsFilePath, _JSON$stringify(credentials || {}, null, 2), {
        encoding: 'utf8'
      });
    }
  }, {
    key: "_loadCredentials",
    value: function _loadCredentials() {
      const data = fs.readFileSync(credentialsFilePath, {
        encoding: 'utf8'
      });
      return JSON.parse(data);
    }
  }, {
    key: "getToken",
    value: function getToken(environmentKey) {
      const allCredentials = this._loadCredentials();
      if (!this.isSessionValid(environmentKey)) {
        return null;
      }
      return allCredentials[environmentKey].token;
    }
  }, {
    key: "setToken",
    value: function setToken(environmentKey, credentials) {
      const allCredentials = this._loadCredentials();
      allCredentials[environmentKey] = credentials;
      this._writeCredentials(allCredentials);
    }
  }, {
    key: "isSessionValid",
    value: function isSessionValid(environmentKey) {
      const allCredentials = this._loadCredentials();
      const credentials = allCredentials[environmentKey];
      if (!credentials) {
        return false;
      }
      const now = Math.floor(_Date$now() / 1000);
      return now < credentials.expiresAt;
    }
  }]);
  return CredentialsStorage;
}();
CredentialsStorage.location = credentialsFilePath;

export { CredentialsStorage as C, userAgent as u };
