import type { TCustomApplicationDraftDataInput, TCustomViewDraftDataInput } from '../generated/settings';
type TFetchCustomApplicationOptions = {
    mcApiUrl: string;
    entryPointUriPath: string;
    applicationIdentifier: string;
};
type TFetchCustomViewOptions = {
    mcApiUrl: string;
    customViewId: string;
    applicationIdentifier: string;
};
type TUpdateCustomApplicationOptions = {
    mcApiUrl: string;
    applicationId: string;
    organizationId: string;
    data: TCustomApplicationDraftDataInput;
    applicationIdentifier: string;
};
type TUpdateCustomViewOptions = {
    mcApiUrl: string;
    customViewId: string;
    organizationId: string;
    data: TCustomViewDraftDataInput;
    applicationIdentifier: string;
};
type TCreateCustomApplicationOptions = {
    mcApiUrl: string;
    organizationId: string;
    data: TCustomApplicationDraftDataInput;
    applicationIdentifier: string;
};
type TCreateCustomViewOptions = {
    mcApiUrl: string;
    organizationId: string;
    data: TCustomViewDraftDataInput;
    applicationIdentifier: string;
};
type TFetchUserOrganizationsOptions = {
    mcApiUrl: string;
    applicationIdentifier: string;
    customViewId?: string;
};
declare const fetchCustomApplication: ({ mcApiUrl, entryPointUriPath, applicationIdentifier, }: TFetchCustomApplicationOptions) => Promise<{
    __typename?: "OrganizationExtensionForCustomApplication" | undefined;
    organizationId: string;
    application: {
        __typename?: "RestrictedCustomApplicationForOrganization" | undefined;
        id: string;
        entryPointUriPath: string;
        name: string;
        description?: string | null | undefined;
        url: string;
        icon: string;
        permissions: {
            __typename?: "CustomApplicationPermission" | undefined;
            name: string;
            oAuthScopes: string[];
        }[];
        mainMenuLink: {
            __typename?: "CustomApplicationMenuLink" | undefined;
            defaultLabel: string;
            permissions: string[];
            labelAllLocales: {
                __typename?: "LocalizedField" | undefined;
                locale: string;
                value: string;
            }[];
        };
        submenuLinks: {
            __typename?: "CustomApplicationSubmenuLink" | undefined;
            uriPath: string;
            defaultLabel: string;
            permissions: string[];
            labelAllLocales: {
                __typename?: "LocalizedField" | undefined;
                locale: string;
                value: string;
            }[];
        }[];
    };
} | null | undefined>;
declare const fetchCustomView: ({ mcApiUrl, customViewId, applicationIdentifier, }: TFetchCustomViewOptions) => Promise<{
    __typename?: "OrganizationExtensionForCustomView" | undefined;
    organizationId: string;
    customView?: {
        __typename?: "RestrictedCustomViewForOrganization" | undefined;
        id: string;
        defaultLabel: string;
        url: string;
        type: import("../generated/settings").TCustomViewType;
        locators: string[];
        labelAllLocales: {
            __typename?: "LocalizedField" | undefined;
            locale: string;
            value: string;
        }[];
        typeSettings?: {
            __typename?: "CustomViewTypeSettings" | undefined;
            size?: import("../generated/settings").TCustomViewSize | null | undefined;
        } | null | undefined;
        permissions: {
            __typename?: "CustomViewPermission" | undefined;
            name: string;
            oAuthScopes: string[];
        }[];
    } | null | undefined;
} | null | undefined>;
declare const updateCustomApplication: ({ mcApiUrl, applicationId, organizationId, data, applicationIdentifier, }: TUpdateCustomApplicationOptions) => Promise<{
    __typename?: "RestrictedCustomApplicationForOrganization" | undefined;
    id: string;
} | null | undefined>;
declare const updateCustomView: ({ mcApiUrl, organizationId, data, customViewId, applicationIdentifier, }: TUpdateCustomViewOptions) => Promise<{
    __typename?: "RestrictedCustomViewForOrganization" | undefined;
    id: string;
} | null | undefined>;
declare const createCustomApplication: ({ mcApiUrl, organizationId, data, applicationIdentifier, }: TCreateCustomApplicationOptions) => Promise<{
    __typename?: "RestrictedCustomApplicationForOrganization" | undefined;
    id: string;
} | null | undefined>;
declare const createCustomView: ({ mcApiUrl, organizationId, data, applicationIdentifier, }: TCreateCustomViewOptions) => Promise<{
    __typename?: "RestrictedCustomViewForOrganization" | undefined;
    id: string;
} | null | undefined>;
declare const fetchUserOrganizations: ({ mcApiUrl, applicationIdentifier, customViewId, }: TFetchUserOrganizationsOptions) => Promise<{
    __typename?: "OrganizationQueryResult" | undefined;
    total: any;
    results: {
        __typename?: "Organization" | undefined;
        id: string;
        name: string;
    }[];
}>;
export { fetchCustomApplication, fetchCustomView, updateCustomApplication, createCustomApplication, fetchUserOrganizations, createCustomView, updateCustomView, };
