import chalk from 'chalk';
import prompts from 'prompts';
import { processConfig } from '@commercetools-frontend/application-config';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _JSON$stringify from '@babel/runtime-corejs3/core-js-stable/json/stringify';
import fetch from 'node-fetch';
import { u as userAgent, C as CredentialsStorage } from './credentials-storage-001c09fb.esm.js';
import '@commercetools/http-user-agent';
import './package-53e602ff.esm.js';
import '@babel/runtime-corejs3/helpers/classCallCheck';
import '@babel/runtime-corejs3/helpers/createClass';
import '@babel/runtime-corejs3/core-js-stable/date/now';
import 'fs';
import 'os';
import 'path';

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const getAuthToken = async (mcApiUrl, payload, headers) => {
  const response = await fetch("".concat(mcApiUrl, "/tokens/cli"), {
    method: 'POST',
    headers: _objectSpread({
      Accept: 'application/json',
      'Content-Type': 'application/json',
      'x-user-agent': userAgent
    }, headers),
    body: _JSON$stringify(payload)
  });
  if (!response.ok) {
    const text = await response.text();
    let parsed;
    try {
      parsed = JSON.parse(text);
    } catch (error) {}
    const errorMessage = parsed ? parsed.message : text;
    throw new Error(errorMessage);
  }
  const authToken = await response.json();
  return authToken;
};

const credentialsStorage = new CredentialsStorage();
async function run() {
  const applicationConfig = processConfig();
  const mcApiUrl = applicationConfig.env.mcApiUrl;
  console.log("Using Merchant Center environment \"".concat(chalk.green(mcApiUrl), "\"."));
  console.log();
  if (credentialsStorage.isSessionValid(mcApiUrl)) {
    console.log("You already have a valid session.");
    return;
  }
  console.log("Enter the login credentials:");
  const _await$prompts = await prompts({
      type: 'text',
      name: 'email',
      message: 'Email'
    }),
    email = _await$prompts.email;
  const _await$prompts2 = await prompts({
      type: 'invisible',
      name: 'password',
      message: 'Password (hidden)'
    }),
    password = _await$prompts2.password;
  if (!email || !password) {
    throw new Error("Missing email or password values. Aborting.");
  }
  const credentials = await getAuthToken(mcApiUrl, {
    email,
    password
  });
  credentialsStorage.setToken(mcApiUrl, credentials);
  console.log(chalk.green("Login successful.\n"));
}

export { run as default };
