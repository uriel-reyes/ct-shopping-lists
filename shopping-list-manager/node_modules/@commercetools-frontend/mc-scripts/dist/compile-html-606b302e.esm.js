import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _JSON$stringify from '@babel/runtime-corejs3/core-js-stable/json/stringify';
import fs from 'fs';
import chalk from 'chalk';
import { compileHtml } from '@commercetools-frontend/mc-html-template';
import { p as paths } from './paths-ded20ae1.esm.js';
import '@babel/runtime-corejs3/core-js-stable/instance/find';
import 'path';

const appDirectory = fs.realpathSync(process.cwd());
async function run(options) {
  console.log('Compiling index.html...');
  const compiled = await compileHtml(paths.appIndexHtmlTemplate);
  fs.writeFileSync(paths.appIndexHtml, compiled.indexHtmlContent, {
    encoding: 'utf8'
  });
  if (options.transformer) {
    try {
      const transformerPath = require.resolve(options.transformer, {
        paths: [appDirectory]
      });
      const transformerFn = require(transformerPath);
      transformerFn(compiled);
    } catch (error) {
      var _context;
      throw new Error(_concatInstanceProperty(_context = "Could not load transformer module \"".concat(options.transformer, "\"\n")).call(_context, error instanceof Error ? error.stack : ''));
    }
  } else if (options.printSecurityHeaders) {
    console.log(_JSON$stringify(compiled.headers));
  }
  console.log(chalk.green('Compiled successfully.\n'));
}

export { run as default };
