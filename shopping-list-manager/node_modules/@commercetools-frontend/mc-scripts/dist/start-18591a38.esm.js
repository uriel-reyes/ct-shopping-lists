import _parseInt from '@babel/runtime-corejs3/core-js-stable/parse-int';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import fs from 'fs';
import chalk from 'chalk';
import checkRequiredFiles from 'react-dev-utils/checkRequiredFiles';
import clearConsole from 'react-dev-utils/clearConsole';
import openBrowser from 'react-dev-utils/openBrowser';
import { choosePort, prepareUrls, createCompiler } from 'react-dev-utils/WebpackDevServerUtils';
import webpack from 'webpack';
import WebpackDevServer from 'webpack-dev-server';
import { c as createWebpackConfigForDevelopment } from './create-webpack-config-for-development-3b40205e.esm.js';
import { p as paths } from './paths-ded20ae1.esm.js';
import { processConfig } from '@commercetools-frontend/application-config';
import { createMcDevAuthenticationMiddleware } from '@commercetools-frontend/mc-dev-authentication';
import { processHeaders } from '@commercetools-frontend/mc-html-template';
import '@babel/runtime-corejs3/core-js-stable/object/keys';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import '@babel/runtime-corejs3/core-js-stable/object/define-property';
import '@babel/runtime-corejs3/helpers/defineProperty';
import '@babel/runtime-corejs3/core-js-stable/instance/map';
import '@babel/runtime-corejs3/core-js-stable/instance/filter';
import '@babel/runtime-corejs3/core-js-stable/json/stringify';
import '@babel/runtime-corejs3/core-js-stable/instance/ends-with';
import '@babel/runtime-corejs3/core-js-stable/instance/concat';
import 'path';
import '@pmmmwh/react-refresh-webpack-plugin';
import 'html-webpack-plugin';
import 'moment-locales-webpack-plugin';
import 'webpackbar';
import '@babel/runtime-corejs3/helpers/classCallCheck';
import '@babel/runtime-corejs3/helpers/createClass';
import '@babel/runtime-corejs3/core-js-stable/object/assign';
import './create-postcss-config-354ba07a.esm.js';
import '@babel/runtime-corejs3/helpers/slicedToArray';
import './package-53e602ff.esm.js';
import './has-jsx-runtime-e3ecb09b.esm.js';
import './vendors-to-transpile-7dc84a72.esm.js';
import '@babel/runtime-corejs3/core-js-stable/instance/find';

const host = process.env.HOST || '0.0.0.0';
// We support configuring the sockjs pathname during development.
// These settings let a developer run multiple simultaneous projects.
// They are used as the connection `hostname`, `pathname` and `port`
// in webpackHotDevClient. They are used as the `sockHost`, `sockPath`
// and `sockPort` options in webpack-dev-server.
const sockHost = process.env.WDS_SOCKET_HOST;
const sockPath = process.env.WDS_SOCKET_PATH; // default: '/ws'
const sockPort = process.env.WDS_SOCKET_PORT;
const createWebpackDevServerConfig = _ref => {
  let port = _ref.port,
    publicPath = _ref.publicPath;
  const applicationConfig = processConfig();
  const compiledHeaders = processHeaders(applicationConfig);
  return {
    client: {
      overlay: false,
      webSocketURL: {
        hostname: sockHost,
        pathname: sockPath,
        port: sockPort
      }
    },
    // Enable gzip compression of generated files.
    compress: true,
    devMiddleware: {
      // It is important to tell WebpackDevServer to use the same "publicPath" path as
      // we specified in the webpack config. When homepage is '.', default to serving
      // from the root.
      publicPath
    },
    headers: compiledHeaders,
    historyApiFallback: {
      // Paths with dots should still use the history fallback.
      // See https://github.com/facebookincubator/create-react-app/issues/387.
      disableDotRule: true,
      index: publicPath
    },
    host,
    hot: true,
    https: false,
    port,
    setupMiddlewares(middlewares, devServer) {
      var _devServer$app;
      if (!devServer) {
        throw new Error('webpack-dev-server is not defined');
      }
      (_devServer$app = devServer.app) === null || _devServer$app === void 0 || _devServer$app.use(createMcDevAuthenticationMiddleware(applicationConfig));
      return middlewares;
    }
  };
};

async function run() {
  var _config$output, _context;
  const useYarn = fs.existsSync(paths.yarnLockFile);
  const isInteractive = process.stdout.isTTY;

  // Whether or not `react-refresh` is enabled, `react-refresh` is not 100% stable at this time,
  // which is why it's disabled by default.

  const hasWebpackConfig = fs.existsSync(paths.appWebpackConfig);

  // Warn and crash if required files are missing
  if (!checkRequiredFiles([])) {
    process.exit(1);
  }

  // Tools like Cloud9 rely on this.
  const DEFAULT_PORT = _parseInt(String(process.env.HTTP_PORT), 10) || 3001;
  const HOST = process.env.HOST || '0.0.0.0';

  // We attempt to use the default port but if it is busy, we offer the user to
  // run on a different port. `detect()` Promise resolves to the next free port.
  const port = await choosePort(HOST, DEFAULT_PORT);
  if (port == null) {
    console.warn('Could not find a free port. Aborting.');
    // We have not found a port.
    return;
  }
  const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
  const appName = require(paths.appPackageJson).name;
  const urls = prepareUrls(protocol, HOST, port);
  // Get webpack config
  const config = hasWebpackConfig ? require(paths.appWebpackConfig) : createWebpackConfigForDevelopment();

  // Create a webpack compiler that is configured with custom messages.
  const compiler = createCompiler({
    appName,
    config,
    useYarn,
    webpack,
    urls
  });

  // Serve webpack assets generated by the compiler over a web sever.
  const serverConfig = createWebpackDevServerConfig({
    port,
    publicPath: (_config$output = config.output) === null || _config$output === void 0 ? void 0 : _config$output.publicPath
  });
  const devServer = new WebpackDevServer(serverConfig, compiler);
  await devServer.start();
  if (isInteractive) {
    clearConsole();
  }
  console.log(chalk.cyan('Starting the development server...\n'));
  openBrowser(urls.localUrlForBrowser);
  _forEachInstanceProperty(_context = ['SIGINT', 'SIGTERM']).call(_context, sig => {
    process.on(sig, () => {
      devServer.close();
      process.exit();
    });
  });
}

export { run as default };
