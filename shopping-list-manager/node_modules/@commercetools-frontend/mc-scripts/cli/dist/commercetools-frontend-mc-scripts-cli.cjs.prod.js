'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Array$isArray = require('@babel/runtime-corejs3/core-js-stable/array/is-array');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var fs = require('fs');
var path = require('path');
var cac = require('cac');
var dotenv = require('dotenv');
var dotenvExpand = require('dotenv-expand');
var _package = require('../../dist/package-db6d1141.cjs.prod.js');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Array$isArray__default = /*#__PURE__*/_interopDefault(_Array$isArray);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var path__default = /*#__PURE__*/_interopDefault(path);
var dotenv__default = /*#__PURE__*/_interopDefault(dotenv);
var dotenvExpand__default = /*#__PURE__*/_interopDefault(dotenvExpand);

const cli = cac.cac('mc-scripts');

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Get the current directory where the CLI is executed from. Usually this is the application folder.
const applicationDirectory = fs__default["default"].realpathSync(process.cwd());
async function run() {
  cli.option('--env <path>', "(optional) Parses the file path as a dotenv file and adds the variables to the environment. Multiple flags are allowed.");

  // Default command
  cli.command('').usage('\n\n  Develop and build Custom Applications.').action(() => {
    cli.outputHelp();
  });

  // Command: start
  const usageStart = 'Starts the application in development mode using Webpack Dev Server.';
  cli.command('start', usageStart).usage("\n\n  ".concat(usageStart)).alias('dev').action(async options => {
    // Load dotenv files into the process environment.
    // This is essentially what `dotenv-cli` does, but it's now built into this CLI.
    loadDotEnvFiles(options);

    // Do this as the first thing so that any code reading it knows the right env.
    process.env.BABEL_ENV = 'development';
    process.env.NODE_ENV = 'development';
    const shouldUseExperimentalBundler = process.env.ENABLE_EXPERIMENTAL_VITE_BUNDLER === 'true';
    if (shouldUseExperimentalBundler) {
      console.log('Experimental Vite bundler enabled! ðŸš€');
      console.log('');
    }
    const startCommand = shouldUseExperimentalBundler ? await Promise.resolve().then(function () { return require('../../dist/start-vite-5c78605b.cjs.prod.js'); }) : await Promise.resolve().then(function () { return require('../../dist/start-19554dc8.cjs.prod.js'); });
    await startCommand.default();
  });

  // Command: build
  const usageBuild = 'Bundles the application in production mode. Outputs a "public" folder.';
  cli.command('build', usageBuild).usage("\n\n  ".concat(usageBuild)).option('--build-only', '(optional) If defined, the command only creates the production bundles without compiling the "index.html".', {
    default: false
  }).action(async options => {
    // Load dotenv files into the process environment.
    // This is essentially what `dotenv-cli` does, but it's now built into this CLI.
    loadDotEnvFiles(options);

    // Do this as the first thing so that any code reading it knows the right env.
    process.env.BABEL_ENV = 'production';
    process.env.NODE_ENV = 'production';
    const shouldUseExperimentalBundler = process.env.ENABLE_EXPERIMENTAL_VITE_BUNDLER === 'true';
    if (shouldUseExperimentalBundler) {
      console.log('Experimental Vite bundler enabled! ðŸš€');
      console.log('');
    }
    const buildCommand = shouldUseExperimentalBundler ? await Promise.resolve().then(function () { return require('../../dist/build-vite-1ba28dd8.cjs.prod.js'); }) : await Promise.resolve().then(function () { return require('../../dist/build-5bfca7c8.cjs.prod.js'); });
    await buildCommand.default();
    const shouldAlsoCompile = !options.buildOnly;
    if (shouldAlsoCompile) {
      console.log('');
      const compileHtmlCommand = await Promise.resolve().then(function () { return require('../../dist/compile-html-079067bd.cjs.prod.js'); });
      await compileHtmlCommand.default({
        printSecurityHeaders: false
      });
    }
  });

  // Command: compile-html
  const usageCompileHtml = 'Compiles "index.html.template" file into a "index.html" with all the required runtime configuration. The security headers are also compiled and injected into the "index.html".';
  cli.command('compile-html', usageCompileHtml).usage("\n\n  ".concat(usageCompileHtml)).option('--transformer <path>', '(optional) The path to a JS module that can be used to generate a configuration for a specific cloud provider (e.g. Vercel, Netlify).').option('--print-security-headers', '(optional) If defined, the compiled security headers are printed to stdout.', {
    default: false
  }).action(async options => {
    // Load dotenv files into the process environment.
    // This is essentially what `dotenv-cli` does, but it's now built into this CLI.
    loadDotEnvFiles(options);

    // Do this as the first thing so that any code reading it knows the right env.
    process.env.NODE_ENV = 'production';
    const compileHtmlCommand = await Promise.resolve().then(function () { return require('../../dist/compile-html-079067bd.cjs.prod.js'); });
    await compileHtmlCommand.default(options);
  });

  // Command: serve
  const usageServe = 'Serves previously built and compiled application from the "public" folder.';
  cli.command('serve', usageServe).usage("\n\n  ".concat(usageServe)).action(async options => {
    // Load dotenv files into the process environment.
    // This is essentially what `dotenv-cli` does, but it's now built into this CLI.
    loadDotEnvFiles(options);

    // Do this as the first thing so that any code reading it knows the right env.
    process.env.NODE_ENV = 'production';
    const serveCommand = await Promise.resolve().then(function () { return require('../../dist/serve-12571b42.cjs.prod.js'); });
    await serveCommand.default();
  });

  // Command: login
  const usageLogin = 'Log in to your Merchant Center account through the CLI, using the cloud environment information from the Custom Application config file. An API token is generated and stored in a configuration file for the related cloud environment, and valid for 36 hours.';
  cli.command('login', usageLogin).usage("\n\n  ".concat(usageLogin)).action(async options => {
    // Load dotenv files into the process environment.
    // This is essentially what `dotenv-cli` does, but it's now built into this CLI.
    loadDotEnvFiles(options);

    // Do this as the first thing so that any code reading it knows the right env.
    process.env.NODE_ENV = 'production';
    const loginCommand = await Promise.resolve().then(function () { return require('../../dist/login-506d2457.cjs.prod.js'); });
    await loginCommand.default();
  });

  // Command: config:sync
  const usageConfigSync = 'Synchronizes the local Custom Application config with the Merchant Center. A new Custom Application will be created if none existed, otherwise it will be updated.';
  cli.command('config:sync', usageConfigSync).usage("\n\n  ".concat(usageConfigSync)).option('--dry-run', '(optional) Executes the command but does not send any mutation request.', {
    default: false
  }).action(async options => {
    // Load dotenv files into the process environment.
    // This is essentially what `dotenv-cli` does, but it's now built into this CLI.
    loadDotEnvFiles(options);

    // Do this as the first thing so that any code reading it knows the right env.
    process.env.NODE_ENV = 'production';
    const configSyncCommand = await Promise.resolve().then(function () { return require('../../dist/config-sync-bef101a0.cjs.prod.js'); });
    await configSyncCommand.default(options);
  });
  cli.help();
  cli.version(_package.pkgJson.version);
  cli.parse(process.argv, {
    run: false
  });
  await cli.runMatchedCommand();
}

// Load dotenv files into the process environment.
// This is essentially what `dotenv-cli` does, but it's now built into this CLI.
// Inspired also by https://create-react-app.dev/docs/adding-custom-environment-variables/#what-other-env-files-can-be-used
function loadDotEnvFiles(globalOptions) {
  var _context;
  const environment = process.env.MC_APP_ENV ||         "production";
  const dotenvFiles = [];

  // Custom dotenv files specified by the `--env` option takes precedence.
  if (typeof globalOptions.env === 'string') {
    dotenvFiles.push(globalOptions.env);
  } else if (_Array$isArray__default["default"](globalOptions.env)) {
    // Multiple `--env` options are allowed.
    dotenvFiles.push(...globalOptions.env);
  }

  // https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use
  dotenvFiles.push(..._filterInstanceProperty__default["default"](_context = [".env.".concat(environment, ".local"),
  // Don't include `.env.local` for `test` environment
  // since normally you expect tests to produce the same
  // results for everyone
  ".env.local", ".env.".concat(environment), '.env']).call(_context, Boolean));

  // Load environment variables from .env* files. Suppress warnings using silent
  // if this file is missing. dotenv will never modify any environment variables
  // that have already been set.  Variable expansion is supported in .env files.
  // https://github.com/motdotla/dotenv
  // https://github.com/motdotla/dotenv-expand
  _forEachInstanceProperty__default["default"](dotenvFiles).call(dotenvFiles, dotenvFile => {
    const dotenvFilePath = path__default["default"].resolve(path__default["default"].join(applicationDirectory, dotenvFile));
    if (fs__default["default"].existsSync(dotenvFilePath)) {
      dotenvExpand__default["default"].expand(dotenv__default["default"].config({
        path: dotenvFilePath
      }));
    }
  });
}

exports.loadDotEnvFiles = loadDotEnvFiles;
exports.run = run;
