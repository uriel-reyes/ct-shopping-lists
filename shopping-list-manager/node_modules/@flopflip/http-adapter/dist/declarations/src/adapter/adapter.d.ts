import { AdapterConfigurationStatus, adapterIdentifiers, AdapterInitializationStatus, type TAdapterEventHandlers, type TFlagName, type TFlagsUpdateFunction, type TFlagVariation, type THttpAdapterArgs, type THttpAdapterInterface, type TUser } from '@flopflip/types';
declare class HttpAdapter implements THttpAdapterInterface {
    #private;
    id: typeof adapterIdentifiers.http;
    constructor();
    getUser: () => TUser | undefined;
    updateFlags: TFlagsUpdateFunction;
    configure(adapterArgs: THttpAdapterArgs, adapterEventHandlers: TAdapterEventHandlers): Promise<{
        initializationStatus: AdapterInitializationStatus;
    }>;
    reconfigure(adapterArgs: THttpAdapterArgs, _adapterEventHandlers: TAdapterEventHandlers): Promise<{
        initializationStatus: AdapterInitializationStatus;
    }>;
    waitUntilConfigured(): Promise<void>;
    getIsConfigurationStatus(configurationStatus: AdapterConfigurationStatus): boolean;
    getFlag(flagName: TFlagName): TFlagVariation;
    reset: () => void;
    setConfigurationStatus(nextConfigurationStatus: AdapterConfigurationStatus): void;
    unsubscribe: () => void;
    subscribe: () => void;
}
declare const adapter: HttpAdapter;
export default adapter;
