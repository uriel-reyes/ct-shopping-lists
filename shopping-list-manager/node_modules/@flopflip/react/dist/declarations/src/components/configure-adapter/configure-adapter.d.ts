import { type TAdapter, type TAdapterArgs, type TAdapterEventHandlers, type TAdaptersStatus, type TConfigureAdapterChildren, type TFlags } from '@flopflip/types';
import React from 'react';
type ValueOf<T> = T[keyof T];
export declare const AdapterStates: {
    readonly UNCONFIGURED: "unconfigured";
    readonly CONFIGURING: "configuring";
    readonly CONFIGURED: "configured";
};
export type TAdapterStates = ValueOf<typeof AdapterStates>;
type TProps = {
    readonly shouldDeferAdapterConfiguration?: boolean;
    readonly adapter: TAdapter;
    readonly adapterArgs: TAdapterArgs;
    readonly adapterStatus?: TAdaptersStatus;
    readonly defaultFlags?: TFlags;
    readonly onFlagsStateChange: TAdapterEventHandlers['onFlagsStateChange'];
    readonly onStatusStateChange: TAdapterEventHandlers['onStatusStateChange'];
    readonly render?: () => React.ReactNode;
    readonly children?: TConfigureAdapterChildren;
};
declare function ConfigureAdapter(props: TProps): JSX.Element;
declare namespace ConfigureAdapter {
    var defaultProps: {
        shouldDeferAdapterConfiguration: boolean;
        defaultFlags: {};
        children: null;
        render: null;
    };
    var displayName: string;
}
export default ConfigureAdapter;
