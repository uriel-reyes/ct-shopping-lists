import { AdapterConfigurationStatus, adapterIdentifiers, AdapterInitializationStatus, type TAdapter, type TAdapterEventHandlers, type TAdapterIdentifiers, type TCombinedAdapterArgs, type TCombinedAdapterInterface, type TFlags, type TUpdateFlagsOptions } from '@flopflip/types';
declare class CombineAdapters implements TCombinedAdapterInterface {
    #private;
    id: typeof adapterIdentifiers.combined;
    effectIds?: TAdapterIdentifiers[];
    constructor();
    updateFlags: (flags: TFlags, options?: TUpdateFlagsOptions) => void;
    combine(adapters: TAdapter[]): void;
    configure(adapterArgs: TCombinedAdapterArgs, adapterEventHandlers: TAdapterEventHandlers): Promise<{
        initializationStatus: AdapterInitializationStatus;
    }>;
    reconfigure(adapterArgs: TCombinedAdapterArgs, adapterEventHandlers: TAdapterEventHandlers): Promise<{
        initializationStatus: AdapterInitializationStatus;
    }>;
    getIsConfigurationStatus(configurationStatus: AdapterConfigurationStatus): boolean;
    setConfigurationStatus(nextConfigurationStatus: AdapterConfigurationStatus): void;
    reset: () => void;
    waitUntilConfigured(): Promise<unknown[]>;
    unsubscribe: () => void;
    subscribe: () => void;
}
declare const adapter: CombineAdapters;
export default adapter;
