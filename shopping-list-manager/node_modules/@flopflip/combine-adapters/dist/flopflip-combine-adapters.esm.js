import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import _classPrivateFieldLooseBase from '@babel/runtime/helpers/esm/classPrivateFieldLooseBase';
import _classPrivateFieldLooseKey from '@babel/runtime/helpers/esm/classPrivateFieldLooseKey';
import { exposeGlobally } from '@flopflip/adapter-utilities';
import { AdapterConfigurationStatus, AdapterSubscriptionStatus, adapterIdentifiers, AdapterInitializationStatus } from '@flopflip/types';
import mitt from 'mitt';
import warning from 'tiny-warning';

const intialAdapterState = {
  configurationStatus: AdapterConfigurationStatus.Unconfigured,
  subscriptionStatus: AdapterSubscriptionStatus.Subscribed,
  emitter: mitt()
};
var _internalConfiguredStatusChange__ = /*#__PURE__*/_classPrivateFieldLooseKey("__internalConfiguredStatusChange__");
var _adapters = /*#__PURE__*/_classPrivateFieldLooseKey("adapters");
var _adapterState = /*#__PURE__*/_classPrivateFieldLooseKey("adapterState");
var _getHasCombinedAdapters = /*#__PURE__*/_classPrivateFieldLooseKey("getHasCombinedAdapters");
var _getHasArgsForAllAdapters = /*#__PURE__*/_classPrivateFieldLooseKey("getHasArgsForAllAdapters");
var _getIsAdapterUnsubscribed = /*#__PURE__*/_classPrivateFieldLooseKey("getIsAdapterUnsubscribed");
class CombineAdapters {
  constructor() {
    this.id = void 0;
    this.effectIds = void 0;
    // eslint-disable-next-line @typescript-eslint/prefer-readonly
    Object.defineProperty(this, _internalConfiguredStatusChange__, {
      writable: true,
      value: '__internalConfiguredStatusChange__'
    });
    Object.defineProperty(this, _adapters, {
      writable: true,
      value: []
    });
    Object.defineProperty(this, _adapterState, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _getHasCombinedAdapters, {
      writable: true,
      value: () => _classPrivateFieldLooseBase(this, _adapters)[_adapters].length > 0
    });
    Object.defineProperty(this, _getHasArgsForAllAdapters, {
      writable: true,
      value: adapterArgs => _classPrivateFieldLooseBase(this, _adapters)[_adapters].every(adapter => adapterArgs[adapter.id])
    });
    Object.defineProperty(this, _getIsAdapterUnsubscribed, {
      writable: true,
      value: () => _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].subscriptionStatus === AdapterSubscriptionStatus.Unsubscribed
    });
    this.updateFlags = (flags, options) => {
      const isAdapterConfigured = this.getIsConfigurationStatus(AdapterConfigurationStatus.Configured);
      const hasCombinedAdapters = _classPrivateFieldLooseBase(this, _getHasCombinedAdapters)[_getHasCombinedAdapters]();
      warning(isAdapterConfigured, '@flopflip/combine-adapters: adapter is not configured. Flags can not be updated before.');
      warning(hasCombinedAdapters, '@flopflip/combine-adapters: adapter has no combined adapters. Please combine before updating flags.');
      if (!isAdapterConfigured || !hasCombinedAdapters) {
        return;
      }
      _classPrivateFieldLooseBase(this, _adapters)[_adapters].forEach(adapter => {
        adapter.updateFlags(flags, options);
      });
    };
    this.reset = () => {
      _classPrivateFieldLooseBase(this, _adapterState)[_adapterState] = _objectSpread({}, intialAdapterState);
    };
    this.unsubscribe = () => {
      _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].subscriptionStatus = AdapterSubscriptionStatus.Unsubscribed;
    };
    this.subscribe = () => {
      _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].subscriptionStatus = AdapterSubscriptionStatus.Subscribed;
    };
    _classPrivateFieldLooseBase(this, _adapterState)[_adapterState] = _objectSpread({}, intialAdapterState);
    this.id = adapterIdentifiers.combined;
  }
  combine(adapters) {
    _classPrivateFieldLooseBase(this, _adapters)[_adapters] = adapters;
    this.effectIds = adapters.map(adapter => adapter.id).concat(this.id);
  }
  async configure(adapterArgs, adapterEventHandlers) {
    const hasCombinedAdapters = _classPrivateFieldLooseBase(this, _getHasCombinedAdapters)[_getHasCombinedAdapters]();
    const hasArgsForAllAdapters = _classPrivateFieldLooseBase(this, _getHasArgsForAllAdapters)[_getHasArgsForAllAdapters](adapterArgs);
    warning(hasCombinedAdapters, '@flopflip/combine-adapters: adapter has no combined adapters. Please combine before reconfiguring flags.');
    warning(hasArgsForAllAdapters, '@flopflip/combine-adapters: not all adapters have args. Please provide args for all adapters.');
    if (!hasCombinedAdapters || !hasArgsForAllAdapters) {
      return Promise.resolve({
        initializationStatus: AdapterInitializationStatus.Failed
      });
    }
    const handleStatusChange = nextStatus => {
      if (_classPrivateFieldLooseBase(this, _getIsAdapterUnsubscribed)[_getIsAdapterUnsubscribed]()) return;
      adapterEventHandlers.onStatusStateChange({
        status: nextStatus,
        id: this.id
      });
    };
    _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.on('statusStateChange', handleStatusChange);
    this.setConfigurationStatus(AdapterConfigurationStatus.Configuring);
    return Promise.all(_classPrivateFieldLooseBase(this, _adapters)[_adapters].map(async adapter => {
      const adapterArgsForAdapter = adapterArgs[adapter.id];

      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      return adapter.configure(adapterArgsForAdapter, {
        onFlagsStateChange: adapterEventHandlers.onFlagsStateChange,
        onStatusStateChange: adapterEventHandlers.onStatusStateChange
      });
    })).then(allInitializationStatus => {
      const haveAllAdaptersInitializedSuccessfully = allInitializationStatus.every(_ref => {
        let initializationStatus = _ref.initializationStatus;
        return initializationStatus === AdapterInitializationStatus.Succeeded;
      });

      // NOTE: We consider this adapter configured if all adapters have been asked to do so
      // and have reported to be initialized successfully.
      this.setConfigurationStatus(AdapterConfigurationStatus.Configured);
      _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.emit(_classPrivateFieldLooseBase(this, _internalConfiguredStatusChange__)[_internalConfiguredStatusChange__]);
      if (haveAllAdaptersInitializedSuccessfully) {
        return {
          initializationStatus: AdapterInitializationStatus.Succeeded
        };
      }

      // NOTE: If not all adapters have initialized successfully we can not consider
      // this adapter being configured fully.
      this.setConfigurationStatus(AdapterConfigurationStatus.Unconfigured);
      _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.emit(_classPrivateFieldLooseBase(this, _internalConfiguredStatusChange__)[_internalConfiguredStatusChange__]);
      return {
        initializationStatus: AdapterInitializationStatus.Failed
      };
    });
  }
  async reconfigure(adapterArgs, adapterEventHandlers) {
    this.setConfigurationStatus(AdapterConfigurationStatus.Configuring);
    const hasCombinedAdapters = _classPrivateFieldLooseBase(this, _getHasCombinedAdapters)[_getHasCombinedAdapters]();
    const hasArgsForAllAdapters = _classPrivateFieldLooseBase(this, _getHasArgsForAllAdapters)[_getHasArgsForAllAdapters](adapterArgs);
    warning(hasCombinedAdapters, '@flopflip/combine-adapters: adapter has no combined adapters. Please combine before reconfiguring flags.');
    warning(hasArgsForAllAdapters, '@flopflip/combine-adapters: not all adapters have args. Please provide args for all adapters.');
    if (!hasCombinedAdapters || !hasArgsForAllAdapters) {
      return Promise.resolve({
        initializationStatus: AdapterInitializationStatus.Failed
      });
    }
    return Promise.all(_classPrivateFieldLooseBase(this, _adapters)[_adapters].map(async adapter => {
      const adapterArgsForAdapter = adapterArgs[adapter.id];

      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      return adapter.reconfigure(adapterArgsForAdapter, {
        onFlagsStateChange: adapterEventHandlers.onFlagsStateChange,
        onStatusStateChange: adapterEventHandlers.onStatusStateChange
      });
    })).then(allInitializationStatus => {
      const haveAllAdaptersInitializedSuccessfully = allInitializationStatus.every(_ref2 => {
        let initializationStatus = _ref2.initializationStatus;
        return initializationStatus === AdapterInitializationStatus.Succeeded;
      });

      // NOTE: We consider this adapter reconfigured if all adapters have been asked to do so
      // and have reported to be initialized successfully.
      this.setConfigurationStatus(AdapterConfigurationStatus.Configured);
      _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.emit(_classPrivateFieldLooseBase(this, _internalConfiguredStatusChange__)[_internalConfiguredStatusChange__]);
      if (haveAllAdaptersInitializedSuccessfully) {
        return {
          initializationStatus: AdapterInitializationStatus.Succeeded
        };
      }

      // NOTE: If not all adapters have initialized successfully we can not consider
      // this adapter being configured fully.
      this.setConfigurationStatus(AdapterConfigurationStatus.Unconfigured);
      _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.emit(_classPrivateFieldLooseBase(this, _internalConfiguredStatusChange__)[_internalConfiguredStatusChange__]);
      return {
        initializationStatus: AdapterInitializationStatus.Failed
      };
    });
  }
  getIsConfigurationStatus(configurationStatus) {
    return _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].configurationStatus === configurationStatus;
  }
  setConfigurationStatus(nextConfigurationStatus) {
    _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].configurationStatus = nextConfigurationStatus;
    _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.emit('statusStateChange', {
      configurationStatus: _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].configurationStatus
    });
  }
  async waitUntilConfigured() {
    return Promise.all(_classPrivateFieldLooseBase(this, _adapters)[_adapters].map(async adapter => {
      var _adapter$waitUntilCon;
      return adapter === null || adapter === void 0 || (_adapter$waitUntilCon = adapter.waitUntilConfigured) === null || _adapter$waitUntilCon === void 0 ? void 0 : _adapter$waitUntilCon.call(adapter);
    }));
  }
}
const adapter = new CombineAdapters();
exposeGlobally(adapter);

const version = "13.1.7";

export { adapter as default, version };
