/// <reference types=".pnpm/launchdarkly-js-sdk-common@5.0.3/node_modules/launchdarkly-js-sdk-common" />
import { AdapterConfigurationStatus, adapterIdentifiers, AdapterInitializationStatus, type TAdapterEventHandlers, type TFlagName, type TFlags, type TFlagVariation, type TLaunchDarklyAdapterArgs, type TLaunchDarklyAdapterInterface, type TUpdateFlagsOptions } from '@flopflip/types';
import { type LDClient } from 'launchdarkly-js-client-sdk';
declare class LaunchDarklyAdapter implements TLaunchDarklyAdapterInterface {
    #private;
    id: typeof adapterIdentifiers.launchdarkly;
    constructor();
    updateFlags: (flags: TFlags, options?: TUpdateFlagsOptions) => void;
    configure(adapterArgs: TLaunchDarklyAdapterArgs, adapterEventHandlers: TAdapterEventHandlers): Promise<{
        initializationStatus: AdapterInitializationStatus;
    }>;
    reconfigure(adapterArgs: TLaunchDarklyAdapterArgs, _adapterEventHandlers: TAdapterEventHandlers): Promise<{
        initializationStatus: AdapterInitializationStatus;
    }>;
    getIsConfigurationStatus(configurationStatus: AdapterConfigurationStatus): boolean;
    setConfigurationStatus(nextConfigurationStatus: AdapterConfigurationStatus): void;
    getClient(): LDClient | undefined;
    getFlag(flagName: TFlagName): TFlagVariation;
    updateClientContext(updatedContextProps: TLaunchDarklyAdapterArgs['context']): Promise<import("launchdarkly-js-sdk-common").LDFlagSet>;
    unsubscribe: () => void;
    subscribe: () => void;
}
declare const adapter: LaunchDarklyAdapter;
export default adapter;
