"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRunner;

var _jestWorker = require("jest-worker");

var _throat = _interopRequireDefault(require("throat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function determineSlowTestResult(test, result) {
  // See: https://github.com/facebook/jest/blob/acd7c83c8365140f4ecf44a456ff7366ffa31fa2/packages/jest-runner/src/runTest.ts#L287
  if (result.perfStats.runtime / 1000 > test.context.config.slowTestThreshold) {
    return { ...result,
      perfStats: { ...result.perfStats,
        slow: true
      }
    };
  }

  return result;
}

class CancelRun extends Error {
  constructor(message) {
    super(message);
    this.name = 'CancelRun';
  }

}

function createRunner(runPath, {
  getExtraOptions
} = {}) {
  var _globalConfig;

  return _globalConfig = /*#__PURE__*/new WeakMap(), class BaseTestRunner {
    constructor(globalConfig) {
      _classPrivateFieldInitSpec(this, _globalConfig, {
        writable: true,
        value: void 0
      });

      _classPrivateFieldSet(this, _globalConfig, globalConfig);
    }

    runTests(tests, watcher, onStart, onResult, onFailure, options) {
      return options.serial ? this._createInBandTestRun(tests, watcher, onStart, onResult, onFailure, options) : this._createParallelTestRun(tests, watcher, onStart, onResult, onFailure, options);
    }

    _createInBandTestRun(tests, watcher, onStart, onResult, onFailure, options) {
      const mutex = (0, _throat.default)(1);
      return tests.reduce((promise, test) => mutex(() => promise.then(() => {
        if (watcher.isInterrupted()) {
          throw new CancelRun();
        }

        return onStart(test).then(() => {
          // eslint-disable-next-line import/no-dynamic-require, global-require, @typescript-eslint/no-var-requires
          const runner = require(runPath);

          const baseOptions = {
            config: test.context.config,
            globalConfig: _classPrivateFieldGet(this, _globalConfig),
            testPath: test.path,
            rawModuleMap: watcher.isWatchMode() ? test.context.moduleMap.getRawModuleMap() : null,
            options,
            extraOptions: getExtraOptions ? getExtraOptions() : {}
          };

          if (typeof runner.default === 'function') {
            return runner.default(baseOptions);
          }

          return runner(baseOptions);
        });
      }).then(result => determineSlowTestResult(test, result)).then(result => onResult(test, result)).catch(err => onFailure(test, err))), Promise.resolve());
    }

    _createParallelTestRun(tests, watcher, onStart, onResult, onFailure, options) {
      const worker = new _jestWorker.Worker(runPath, {
        exposedMethods: ['default'],
        numWorkers: _classPrivateFieldGet(this, _globalConfig).maxWorkers,
        forkOptions: {
          stdio: 'inherit'
        }
      });
      const mutex = (0, _throat.default)(_classPrivateFieldGet(this, _globalConfig).maxWorkers);

      const runTestInWorker = test => mutex(() => {
        if (watcher.isInterrupted()) {
          throw new CancelRun();
        }

        return onStart(test).then(() => {
          const runTestOptions = {
            config: test.context.config,
            globalConfig: _classPrivateFieldGet(this, _globalConfig),
            testPath: test.path,
            rawModuleMap: watcher.isWatchMode() ? test.context.moduleMap.getRawModuleMap() : null,
            options,
            extraOptions: getExtraOptions ? getExtraOptions() : {}
          };
          return worker.default(runTestOptions);
        });
      });

      const onInterrupt = new Promise((_, reject) => {
        watcher.on('change', state => {
          if (state.interrupted) {
            reject(new CancelRun());
          }
        });
      });
      const runAllTests = Promise.all(tests.map(test => runTestInWorker(test).then(result => determineSlowTestResult(test, result)).then(testResult => onResult(test, testResult)).catch(error => onFailure(test, error))));

      const cleanup = () => {
        worker.end();
      };

      return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);
    }

  };
}