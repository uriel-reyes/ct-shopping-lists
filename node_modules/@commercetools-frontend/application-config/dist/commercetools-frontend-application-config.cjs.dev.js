'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _includesInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/includes');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var _URL = require('@babel/runtime-corejs3/core-js-stable/url');
var fs = require('node:fs');
var path = require('node:path');
var omitEmpty = require('omit-empty-es');
var constants = require('@commercetools-frontend/constants');
var node_child_process = require('node:child_process');
var cosmiconfig = require('cosmiconfig');
var _Reflect$construct = require('@babel/runtime-corejs3/core-js-stable/reflect/construct');
var _createClass = require('@babel/runtime-corejs3/helpers/createClass');
var _classCallCheck = require('@babel/runtime-corejs3/helpers/classCallCheck');
var _assertThisInitialized = require('@babel/runtime-corejs3/helpers/assertThisInitialized');
var _inherits = require('@babel/runtime-corejs3/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime-corejs3/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime-corejs3/helpers/getPrototypeOf');
var _wrapNativeSuper = require('@babel/runtime-corejs3/helpers/wrapNativeSuper');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _trimInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/trim');
var _JSON$stringify = require('@babel/runtime-corejs3/core-js-stable/json/stringify');
var _startsWithInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/starts-with');
var _reduceInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/reduce');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var formatters = require('./formatters-a09672cf.cjs.dev.js');
var _Set = require('@babel/runtime-corejs3/core-js-stable/set');
var _Array$isArray = require('@babel/runtime-corejs3/core-js-stable/array/is-array');
var Ajv = require('ajv');
var _Object$values = require('@babel/runtime-corejs3/core-js-stable/object/values');
var uniq = require('lodash/uniq');
var createDOMPurify = require('dompurify');
var jsdom$1 = require('jsdom');
require('@babel/runtime-corejs3/core-js-stable/object/entries');
require('lodash/upperFirst');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _includesInstanceProperty__default = /*#__PURE__*/_interopDefault(_includesInstanceProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var _URL__default = /*#__PURE__*/_interopDefault(_URL);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var path__default = /*#__PURE__*/_interopDefault(path);
var omitEmpty__default = /*#__PURE__*/_interopDefault(omitEmpty);
var _Reflect$construct__default = /*#__PURE__*/_interopDefault(_Reflect$construct);
var _trimInstanceProperty__default = /*#__PURE__*/_interopDefault(_trimInstanceProperty);
var _JSON$stringify__default = /*#__PURE__*/_interopDefault(_JSON$stringify);
var _startsWithInstanceProperty__default = /*#__PURE__*/_interopDefault(_startsWithInstanceProperty);
var _reduceInstanceProperty__default = /*#__PURE__*/_interopDefault(_reduceInstanceProperty);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _Set__default = /*#__PURE__*/_interopDefault(_Set);
var _Array$isArray__default = /*#__PURE__*/_interopDefault(_Array$isArray);
var Ajv__default = /*#__PURE__*/_interopDefault(Ajv);
var _Object$values__default = /*#__PURE__*/_interopDefault(_Object$values);
var uniq__default = /*#__PURE__*/_interopDefault(uniq);
var createDOMPurify__default = /*#__PURE__*/_interopDefault(createDOMPurify);

/**
 * The entryPointUriPath may be between 2 and 64 characters and only contain alphabetic lowercase characters,
 * non-consecutive underscores and hyphens. Leading and trailing underscore and hyphens are also not allowed.
 */
const ENTRY_POINT_URI_PATH_REGEX = /^[^-_#]([0-9a-z]|[-_](?![-_])){0,62}[^-_#]$/g;

/**
 * The permission group name may be between 2 and 64 characters and only contain alphanumeric lowercase characters and non-consecutive hyphens. Leading and trailing hyphens are also not allowed.
 */
const PERMISSION_GROUP_NAME_REGEX = /^[^-#]([a-z]|[-](?![-])){0,62}[^-#]$/g;
const CLOUD_IDENTIFIERS = {
  GCP_AU: 'gcp-au',
  GCP_EU: 'gcp-eu',
  GCP_US: 'gcp-us',
  AWS_FRA: 'aws-fra',
  AWS_OHIO: 'aws-ohio',
  AWS_CN: 'aws-cn'
};
const MC_API_URLS = {
  GCP_AU: 'https://mc-api.australia-southeast1.gcp.commercetools.com',
  GCP_EU: 'https://mc-api.europe-west1.gcp.commercetools.com',
  GCP_US: 'https://mc-api.us-central1.gcp.commercetools.com',
  AWS_FRA: 'https://mc-api.eu-central-1.aws.commercetools.com',
  AWS_OHIO: 'https://mc-api.us-east-2.aws.commercetools.com',
  AWS_CN: 'https://mc-api.cn-northwest-1.aws.commercetools.cn'
};
const LOADED_CONFIG_TYPES = {
  CUSTOM_APPLICATION: 'custom-application',
  CUSTOM_VIEW: 'custom-view'
};

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct__default["default"](Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct__default["default"]) return false; if (_Reflect$construct__default["default"].sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct__default["default"](Boolean, [], function () {})); return true; } catch (e) { return false; } }
let MissingOrInvalidConfigError = /*#__PURE__*/function (_Error) {
  _inherits(MissingOrInvalidConfigError, _Error);
  var _super = _createSuper(MissingOrInvalidConfigError);
  function MissingOrInvalidConfigError(message) {
    var _this;
    _classCallCheck(this, MissingOrInvalidConfigError);
    _this = _super.call(this, message);
    _Object$defineProperty__default["default"](_assertThisInitialized(_this), 'name', {
      value: 'MissingOrInvalidConfigError'
    });
    return _this;
  }
  return _createClass(MissingOrInvalidConfigError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

// Helper function to find the package root path from the current location,
// for instance in respect to both source files and dist files.
const findPackageRootPath = dir => {
  const packageJsonPath = path__default["default"].join(dir, 'package.json');
  if (fs__default["default"].existsSync(packageJsonPath)) {
    return dir;
  }
  const parentDir = path__default["default"].join(dir, '..');
  return findPackageRootPath(parentDir);
};
const loadJsModule = filePath => {
  const packageRootPath = findPackageRootPath(
  // Start from the parent folder
  path__default["default"].join(__dirname, '..'));
  // Load the JS module using a child process. This is primarly to avoid
  // unwanted behaviors using `@babel/register` in the main process.
  // The loader script does the actual `require` of the given `filePath`
  // and uses `@babel/register` to correctly parse and execute the file.
  // The "required module output" is then written into `stdout` and parsed
  // as JSON.
  const output = node_child_process.execFileSync('node', [path__default["default"].join(packageRootPath, 'scripts/load-js-module.js'), filePath], {
    encoding: 'utf8'
  });
  return JSON.parse(output);
};
const createExplorerFor = configFileName => {
  return cosmiconfig.cosmiconfigSync(configFileName, {
    // Restrict the supported file formats / names
    searchPlaces: [".".concat(configFileName, "rc"), ".".concat(configFileName, ".json"), ".".concat(configFileName, ".js"), ".".concat(configFileName, ".cjs"), ".".concat(configFileName, ".mjs"), ".".concat(configFileName, ".ts"), "".concat(configFileName, ".json"), "".concat(configFileName, ".js"), "".concat(configFileName, ".cjs"), "".concat(configFileName, ".mjs"), "".concat(configFileName, ".ts")],
    loaders: {
      noExt: cosmiconfig.defaultLoaders['.json'],
      '.js': loadJsModule,
      '.cjs': loadJsModule,
      '.mjs': loadJsModule,
      '.ts': loadJsModule
    }
  });
};
const customApplicationExplorer = createExplorerFor('custom-application-config');
const customViewExplorer = createExplorerFor('custom-view-config');
const getConfigPath = () => {
  const customApplicationConfigFile = customApplicationExplorer.search();
  const customViewConfigFile = customViewExplorer.search();
  if (!customApplicationConfigFile && !customViewConfigFile) {
    throw new Error("Missing or invalid configuration file.");
  }
  return (customApplicationConfigFile === null || customApplicationConfigFile === void 0 ? void 0 : customApplicationConfigFile.filepath) || (customViewConfigFile === null || customViewConfigFile === void 0 ? void 0 : customViewConfigFile.filepath);
};
const loadConfig = applicationPath => {
  const customApplicationConfigFile = customApplicationExplorer.search(applicationPath);
  const customViewConfigFile = customViewExplorer.search(applicationPath);
  if ((!customApplicationConfigFile || !customApplicationConfigFile.config) && (!customViewConfigFile || !customViewConfigFile.config)) {
    throw new MissingOrInvalidConfigError("Missing or invalid configuration file.");
  }
  if (customApplicationConfigFile && customViewConfigFile) {
    throw new MissingOrInvalidConfigError("Found configuration files for both Custom Application and Custom View. Please remove one of them.");
  }
  return customViewConfigFile || customApplicationConfigFile;
};

// Transifex's Structured JSON format.
// https://help.transifex.com/en/articles/6220899-structured-json
/**
 * NOTE:
 * Allows variable placeholders. Supported types are:
 * - `env`: For example `${env:MC_API_URL}`.
 * - `intl`: For example `${intl:en:Menu.title}`.
 * - `path`: For example `${path:./app.svg}`, or `${path:@commercetools-frontend/assets/application-icons/rocket.svg}`.
 */
const variableSyntax = /\${([ ~:\w.'",\-/()@]+?)}/g;
const envRefSyntax = /^env:/g;
const intlRefSyntax = /^intl:/g;
const filePathRefSyntax = /^path:/g;
const hasVariablePlaceholder = valueOfEnvConfig => typeof valueOfEnvConfig === 'string' &&
// Using `{regex}.test()` might cause false positives if called multiple
// times on a global regular expression:
// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test
//    As with exec() (or in combination with it), test() called multiple times
//    on the same global regular expression instance will advance past the previous match.
Boolean(valueOfEnvConfig.match(variableSyntax));
const isEnvVariablePlaceholder = valueOfPlaceholder => Boolean(valueOfPlaceholder.match(envRefSyntax));
const isIntlVariablePlaceholder = valueOfPlaceholder => Boolean(valueOfPlaceholder.match(intlRefSyntax));
const isFilePathVariablePlaceholder = valueOfPlaceholder => Boolean(valueOfPlaceholder.match(filePathRefSyntax));
const isStructuredJson = message => (message === null || message === void 0 ? void 0 : message.string) !== undefined;
const substituteEnvVariablePlaceholder = (valueOfPlaceholder, matchedString, valueOfEnvConfig, loadingOptions) => {
  const _valueOfPlaceholder$s = valueOfPlaceholder.split(':'),
    _valueOfPlaceholder$s2 = _slicedToArray(_valueOfPlaceholder$s, 2),
    requestedEnvVar = _valueOfPlaceholder$s2[1];
  const hasEnvField = loadingOptions.processEnv.hasOwnProperty(requestedEnvVar);
  if (!hasEnvField) {
    var _context;
    throw new Error(_concatInstanceProperty__default["default"](_context = "Missing environment variable '".concat(requestedEnvVar, "' specified in config as 'env:")).call(_context, requestedEnvVar, "'."));
  }
  const escapedMatchedString = matchedString.replace(/[${}:]/g, '\\$&');
  return valueOfEnvConfig.replace(new RegExp("(".concat(escapedMatchedString, ")+"), 'g'), loadingOptions.processEnv[requestedEnvVar]);
};
const substituteIntlVariablePlaceholder = (valueOfPlaceholder, matchedString, valueOfEnvConfig, loadingOptions) => {
  const _valueOfPlaceholder$s3 = valueOfPlaceholder.split(':'),
    _valueOfPlaceholder$s4 = _slicedToArray(_valueOfPlaceholder$s3, 3),
    locale = _valueOfPlaceholder$s4[1],
    requestedIntlMessageId = _valueOfPlaceholder$s4[2];
  const translationsFilePath = require.resolve("./i18n/data/".concat(locale, ".json"), {
    paths: ["".concat(loadingOptions.applicationPath, "/src"), loadingOptions.applicationPath]
  });
  const translations = require(translationsFilePath);
  const hasIntlMessage = translations.hasOwnProperty(requestedIntlMessageId);
  if (!hasIntlMessage) {
    var _context2, _context3;
    throw new Error(_concatInstanceProperty__default["default"](_context2 = _concatInstanceProperty__default["default"](_context3 = "Missing message key '".concat(requestedIntlMessageId, "' specified in config as 'intl:")).call(_context3, locale, ":")).call(_context2, requestedIntlMessageId, "'."));
  }
  const translation = translations[requestedIntlMessageId];
  const translationValue = isStructuredJson(translation) ? translation.string : translation;
  const escapedMatchedString = matchedString.replace(/[${}:]/g, '\\$&');
  return valueOfEnvConfig.replace(new RegExp("(".concat(escapedMatchedString, ")+"), 'g'), translationValue);
};
const substituteFilePathVariablePlaceholder = (valueOfPlaceholder, matchedString, valueOfEnvConfig, loadingOptions) => {
  const _valueOfPlaceholder$s5 = valueOfPlaceholder.split(':'),
    _valueOfPlaceholder$s6 = _slicedToArray(_valueOfPlaceholder$s5, 2),
    filePathOrModule = _valueOfPlaceholder$s6[1];
  const content = fs__default["default"].readFileSync(require.resolve(filePathOrModule, {
    // Relative paths should be resolved from the application folder.
    paths: [loadingOptions.applicationPath]
  }), {
    encoding: 'utf-8'
  });
  const escapedMatchedString = matchedString.replace(/[${}:]/g, '\\$&');
  return valueOfEnvConfig.replace(new RegExp("(".concat(escapedMatchedString, ")+"), 'g'), content);
};
const getValueOfPlaceholder = valueWithPlaceholder => valueWithPlaceholder.replace(variableSyntax, (_match, varName) => _trimInstanceProperty__default["default"](varName).call(varName)).replace(/\s/g, '');
const substituteVariablePlaceholders = (config, loadingOptions) => JSON.parse(_JSON$stringify__default["default"](config), (_key, value) => {
  // Only strings are allowed
  let substitutedValue = value;
  if (hasVariablePlaceholder(substitutedValue)) {
    const matchResult = substitutedValue.match(variableSyntax);
    if (matchResult) {
      _forEachInstanceProperty__default["default"](matchResult).call(matchResult, matchedString => {
        const valueOfPlaceholder = getValueOfPlaceholder(matchedString);
        if (isEnvVariablePlaceholder(valueOfPlaceholder)) {
          substitutedValue = substituteEnvVariablePlaceholder(valueOfPlaceholder, matchedString, substitutedValue, loadingOptions);
        } else if (isIntlVariablePlaceholder(valueOfPlaceholder)) {
          substitutedValue = substituteIntlVariablePlaceholder(valueOfPlaceholder, matchedString, substitutedValue, loadingOptions);
        } else if (isFilePathVariablePlaceholder(valueOfPlaceholder)) {
          substitutedValue = substituteFilePathVariablePlaceholder(valueOfPlaceholder, matchedString, substitutedValue, loadingOptions);
        }
      });
    }
  }
  return substitutedValue;
});

var customApplicationSchemaJson = {
	$schema: "http://json-schema.org/draft-07/schema",
	$id: "https://docs.commercetools.com/custom-applications/schema.json",
	title: "JSON schema for Custom Application configuration files",
	type: "object",
	definitions: {
		cspDirective: {
			type: "array",
			items: {
				type: "string"
			},
			uniqueItems: true
		}
	},
	properties: {
		name: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#name",
			type: "string"
		},
		description: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#description",
			type: "string"
		},
		entryPointUriPath: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#entrypointuripath",
			type: "string"
		},
		cloudIdentifier: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#cloudidentifier",
			type: "string"
		},
		mcApiUrl: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#mcapiurl",
			type: "string"
		},
		oAuthScopes: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#oauthscopes",
			type: "object",
			properties: {
				view: {
					description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#oauthscopesview",
					type: "array",
					"default": [
					],
					items: {
						type: "string",
						pattern: "view_(.*)"
					},
					uniqueItems: true
				},
				manage: {
					description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#oauthscopesmanage",
					type: "array",
					"default": [
					],
					items: {
						type: "string",
						pattern: "manage_(.*)"
					},
					uniqueItems: true
				}
			},
			additionalProperties: false,
			required: [
				"view",
				"manage"
			]
		},
		additionalOAuthScopes: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#additionaloauthscopes",
			type: "array",
			"default": [
			],
			uniqueItems: true,
			items: {
				type: "object",
				properties: {
					name: {
						description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#additionaloauthscopesname",
						type: "string"
					},
					view: {
						description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#additionaloauthscopesview",
						type: "array",
						"default": [
						],
						items: {
							type: "string",
							pattern: "view_(.*)"
						},
						uniqueItems: true
					},
					manage: {
						description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#additionaloauthscopesmanage",
						type: "array",
						"default": [
						],
						items: {
							type: "string",
							pattern: "manage_(.*)"
						},
						uniqueItems: true
					}
				},
				additionalProperties: false,
				required: [
					"name",
					"view",
					"manage"
				]
			}
		},
		env: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#env",
			type: "object",
			properties: {
				development: {
					type: "object",
					properties: {
						initialProjectKey: {
							description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#envdevelopmentinitialprojectkey",
							type: "string"
						},
						teamId: {
							type: "string"
						}
					},
					additionalProperties: false,
					required: [
						"initialProjectKey"
					]
				},
				production: {
					type: "object",
					properties: {
						applicationId: {
							description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#envproductionapplicationid",
							type: "string"
						},
						url: {
							description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#envproductionurl",
							type: "string"
						},
						cdnUrl: {
							description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#envproductioncdnurl",
							type: "string"
						}
					},
					additionalProperties: false,
					required: [
						"applicationId",
						"url"
					]
				}
			},
			additionalProperties: false,
			required: [
				"development",
				"production"
			]
		},
		additionalEnv: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#additionalenv",
			type: "object"
		},
		headers: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#headers",
			type: "object",
			properties: {
				csp: {
					description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#headerscsp",
					type: "object",
					properties: {
						"connect-src": {
							$ref: "#/definitions/cspDirective"
						},
						"font-src": {
							$ref: "#/definitions/cspDirective"
						},
						"img-src": {
							$ref: "#/definitions/cspDirective"
						},
						"script-src": {
							$ref: "#/definitions/cspDirective"
						},
						"style-src": {
							$ref: "#/definitions/cspDirective"
						},
						"frame-src": {
							$ref: "#/definitions/cspDirective"
						}
					},
					additionalProperties: false,
					required: [
						"connect-src"
					]
				},
				permissionsPolicies: {
					description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#headerspermissionspolicies",
					type: "object"
				},
				strictTransportSecurity: {
					description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#headersstricttransportsecurity",
					type: "array",
					items: {
						"enum": [
							"includeSubDomains",
							"preload"
						]
					},
					uniqueItems: true
				}
			},
			additionalProperties: false
		},
		icon: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#icon",
			type: "string"
		},
		mainMenuLink: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#mainmenulink",
			type: "object",
			properties: {
				defaultLabel: {
					description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#mainmenulinkdefaultlabel",
					type: "string"
				},
				labelAllLocales: {
					description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#mainmenulinklabelalllocales",
					type: "array",
					"default": [
					],
					items: {
						type: "object",
						properties: {
							locale: {
								type: "string",
								"enum": [
									"en",
									"de",
									"es",
									"fr-FR",
									"pt-BR",
									"zh-CN"
								]
							},
							value: {
								type: "string"
							}
						},
						additionalProperties: false,
						required: [
							"locale",
							"value"
						]
					}
				},
				permissions: {
					description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#mainmenulinkpermissions",
					type: "array",
					"default": [
					],
					items: {
						type: "string"
					}
				}
			},
			additionalProperties: true,
			required: [
				"defaultLabel",
				"labelAllLocales",
				"permissions"
			]
		},
		submenuLinks: {
			description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#submenulinks",
			"default": [
			],
			type: "array",
			items: {
				type: "object",
				properties: {
					uriPath: {
						description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#submenulinksuripath",
						type: "string"
					},
					defaultLabel: {
						description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#submenulinksdefaultlabel",
						type: "string"
					},
					labelAllLocales: {
						description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#submenulinkslabelalllocales",
						type: "array",
						"default": [
						],
						items: {
							type: "object",
							properties: {
								locale: {
									type: "string",
									"enum": [
										"en",
										"de",
										"es",
										"fr-FR",
										"pt-BR",
										"zh-CN"
									]
								},
								value: {
									type: "string"
								}
							},
							additionalProperties: false,
							required: [
								"locale",
								"value"
							]
						}
					},
					permissions: {
						description: "See https://docs.commercetools.com/custom-applications/api-reference/application-config#submenulinkspermissions",
						type: "array",
						"default": [
						],
						items: {
							type: "string"
						}
					}
				},
				additionalProperties: true,
				required: [
					"uriPath",
					"defaultLabel",
					"labelAllLocales",
					"permissions"
				]
			}
		}
	},
	additionalProperties: true,
	required: [
		"name",
		"entryPointUriPath",
		"cloudIdentifier",
		"env",
		"oAuthScopes",
		"icon",
		"mainMenuLink",
		"submenuLinks"
	]
};

var customViewSchemaJson = {
	$schema: "http://json-schema.org/draft-07/schema",
	$id: "https://docs.commercetools.com/custom-applications/custom-view.schema.json",
	title: "JSON schema for Custom View configuration files",
	type: "object",
	definitions: {
		cspDirective: {
			type: "array",
			items: {
				type: "string"
			},
			uniqueItems: true
		}
	},
	properties: {
		name: {
			description: "See https://docs.commercetools.com/TODO",
			type: "string"
		},
		description: {
			description: "See https://docs.commercetools.com/TODO",
			type: "string"
		},
		cloudIdentifier: {
			description: "See https://docs.commercetools.com/TODO",
			type: "string"
		},
		mcApiUrl: {
			description: "See https://docs.commercetools.com/TODO",
			type: "string"
		},
		oAuthScopes: {
			description: "See https://docs.commercetools.com/TODO",
			type: "object",
			properties: {
				view: {
					description: "See https://docs.commercetools.com/TODO",
					type: "array",
					"default": [
					],
					items: {
						type: "string",
						pattern: "view_(.*)"
					},
					uniqueItems: true
				},
				manage: {
					description: "See https://docs.commercetools.com/TODO",
					type: "array",
					"default": [
					],
					items: {
						type: "string",
						pattern: "manage_(.*)"
					},
					uniqueItems: true
				}
			},
			additionalProperties: false,
			required: [
				"view",
				"manage"
			]
		},
		additionalOAuthScopes: {
			description: "See https://docs.commercetools.com/TODO",
			type: "array",
			"default": [
			],
			uniqueItems: true,
			items: {
				type: "object",
				properties: {
					name: {
						description: "See https://docs.commercetools.com/TODO",
						type: "string"
					},
					view: {
						description: "See https://docs.commercetools.com/TODO",
						type: "array",
						"default": [
						],
						items: {
							type: "string",
							pattern: "view_(.*)"
						},
						uniqueItems: true
					},
					manage: {
						description: "See https://docs.commercetools.com/TODO",
						type: "array",
						"default": [
						],
						items: {
							type: "string",
							pattern: "manage_(.*)"
						},
						uniqueItems: true
					}
				},
				additionalProperties: false,
				required: [
					"name",
					"view",
					"manage"
				]
			}
		},
		env: {
			description: "See https://docs.commercetools.com/TODO",
			type: "object",
			properties: {
				development: {
					type: "object",
					properties: {
						initialProjectKey: {
							description: "See https://docs.commercetools.com/TODO",
							type: "string"
						},
						teamId: {
							type: "string"
						},
						hostUriPath: {
							description: "See https://docs.commercetools.com/TODO",
							type: "string"
						}
					},
					additionalProperties: false,
					required: [
						"initialProjectKey"
					]
				},
				production: {
					type: "object",
					properties: {
						customViewId: {
							description: "See https://docs.commercetools.com/TODO",
							type: "string"
						},
						url: {
							description: "See https://docs.commercetools.com/TODO",
							type: "string"
						},
						cdnUrl: {
							description: "See https://docs.commercetools.com/TODO",
							type: "string"
						}
					},
					additionalProperties: false,
					required: [
						"customViewId",
						"url"
					]
				}
			},
			additionalProperties: false,
			required: [
				"development",
				"production"
			]
		},
		additionalEnv: {
			description: "See https://docs.commercetools.com/TODO",
			type: "object"
		},
		headers: {
			description: "See https://docs.commercetools.com/TODO",
			type: "object",
			properties: {
				csp: {
					description: "See https://docs.commercetools.com/TODO",
					type: "object",
					properties: {
						"connect-src": {
							$ref: "#/definitions/cspDirective"
						},
						"font-src": {
							$ref: "#/definitions/cspDirective"
						},
						"img-src": {
							$ref: "#/definitions/cspDirective"
						},
						"script-src": {
							$ref: "#/definitions/cspDirective"
						},
						"style-src": {
							$ref: "#/definitions/cspDirective"
						},
						"frame-src": {
							$ref: "#/definitions/cspDirective"
						}
					},
					additionalProperties: false,
					required: [
						"connect-src"
					]
				},
				permissionsPolicies: {
					description: "See https://docs.commercetools.com/TODO",
					type: "object"
				},
				strictTransportSecurity: {
					description: "See https://docs.commercetools.com/TODO",
					type: "array",
					items: {
						"enum": [
							"includeSubDomains",
							"preload"
						]
					},
					uniqueItems: true
				}
			},
			additionalProperties: false
		},
		labelAllLocales: {
			description: "See https://docs.commercetools.com/TODO",
			type: "array",
			"default": [
			],
			items: {
				type: "object",
				properties: {
					locale: {
						type: "string",
						"enum": [
							"en",
							"de",
							"es",
							"fr-FR",
							"pt-BR",
							"zh-CN"
						]
					},
					value: {
						type: "string"
					}
				},
				additionalProperties: false,
				required: [
					"locale",
					"value"
				]
			}
		},
		type: {
			description: "See https://docs.commercetools.com/TODO",
			type: "string",
			"enum": [
				"CustomPanel"
			]
		},
		typeSettings: {
			description: "See https://docs.commercetools.com/TODO",
			type: "object",
			properties: {
				size: {
					description: "See https://docs.commercetools.com/TODO",
					type: "string",
					"enum": [
						"SMALL",
						"LARGE"
					]
				}
			}
		},
		locators: {
			description: "See https://docs.commercetools.com/TODO",
			type: "array",
			"default": [
			],
			items: {
				type: "string"
			}
		}
	},
	additionalProperties: true,
	required: [
		"name",
		"cloudIdentifier",
		"env",
		"oAuthScopes",
		"labelAllLocales",
		"type",
		"locators"
	]
};

const ajv = new Ajv__default["default"]({
  strict: true,
  useDefaults: true
});
const validateCustomApplicationConfig = ajv.compile(customApplicationSchemaJson);
const validateCustomViewConfig = ajv.compile(customViewSchemaJson);
const printErrors = errors => {
  if (!errors) {
    return 'No errors';
  }
  return _mapInstanceProperty__default["default"](errors).call(errors, error => {
    var _context, _context2, _context3;
    const baseMessage = _concatInstanceProperty__default["default"](_context = "".concat(error.instancePath, " ")).call(_context, error.message);
    switch (error.keyword) {
      case 'additionalProperties':
        return _concatInstanceProperty__default["default"](_context2 = "".concat(baseMessage, ": ")).call(_context2, error.params.additionalProperty);
      case 'enum':
        return _concatInstanceProperty__default["default"](_context3 = "".concat(baseMessage, ": ")).call(_context3, error.params.allowedValues.toString());
      default:
        return baseMessage;
    }
  }).join('\n');
};
const validateConfig = (configType, config) => {
  let validation;
  if (configType === LOADED_CONFIG_TYPES.CUSTOM_APPLICATION) {
    validation = validateCustomApplicationConfig;
  } else if (configType === LOADED_CONFIG_TYPES.CUSTOM_VIEW) {
    validation = validateCustomViewConfig;
  } else {
    var _context4;
    throw new Error(_concatInstanceProperty__default["default"](_context4 = "Invalid config type \"".concat(configType, "\", expected ")).call(_context4, _Object$keys__default["default"](LOADED_CONFIG_TYPES).toString()));
  }
  const isValid = validation(config);
  if (!isValid) {
    throw new Error(printErrors(validation.errors));
  }
};
const validateEntryPointUriPath = config => {
  if (!config.entryPointUriPath.match(ENTRY_POINT_URI_PATH_REGEX)) {
    throw new Error('Invalid "entryPointUriPath". The value may be between 2 and 64 characters and only contain alphanumeric lowercase characters, non-consecutive underscores and hyphens. Leading and trailing underscores and hyphens are also not allowed.');
  }
};
const validateSubmenuLinks = config => {
  var _context5;
  const uriPathSet = new _Set__default["default"]();
  _forEachInstanceProperty__default["default"](_context5 = config.submenuLinks).call(_context5, _ref => {
    let uriPath = _ref.uriPath;
    if (uriPathSet.has(uriPath)) {
      throw new Error('Duplicate URI path. Every submenu link must have a unique URI path value');
    }
    uriPathSet.add(uriPath);
  });
};
const validateAdditionalOAuthScopes = config => {
  var _config$additionalOAu;
  const additionalPermissionNames = new _Set__default["default"]();
  (_config$additionalOAu = config.additionalOAuthScopes) === null || _config$additionalOAu === void 0 || _forEachInstanceProperty__default["default"](_config$additionalOAu).call(_config$additionalOAu, _ref2 => {
    let name = _ref2.name,
      view = _ref2.view,
      manage = _ref2.manage;
    if ((_Array$isArray__default["default"](view) && view.length === 0 || !view) && (_Array$isArray__default["default"](manage) && manage.length === 0 || !manage)) {
      throw new Error("At least one OAuth Scope for permission group name \"".concat(name, "\" is required"));
    } else if (additionalPermissionNames.has(name)) {
      throw new Error("Duplicate additional permission group name \"".concat(name, "\". Every additional permission must have a unique name"));
    }
    if (!name.match(PERMISSION_GROUP_NAME_REGEX)) {
      throw new Error("Additional permission group name \"".concat(name, "\" is invalid. The value may be between 2 and 64 characters and only contain alphabetic lowercase characters and non-consecutive hyphens. Leading and trailing hyphens are also not allowed"));
    }
    additionalPermissionNames.add(name);
  });
};

function ownKeys$1(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var _context5, _context6; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context5 = ownKeys$1(Object(t), !0)).call(_context5, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context6 = ownKeys$1(Object(t))).call(_context6, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }

// The `uriPath` of each submenu link is supposed to be defined relative
// to the `entryPointUriPath`. Computing the full path is done internally to keep
// the configuration simple.
const computeUriPath = (uriPath, entryPointUriPath) => {
  var _context;
  // In case the `uriPath` is only `/`, it means that the link is supposed to be
  // treated the same as the main application path. In this case, the return value
  // should not contain any unnecessary trailing slash and therefore we use the `entryPointUriPath`.
  if (uriPath === '/') return entryPointUriPath;
  // In case the `uriPath` is already configured including the `entryPointUriPath`,
  // we return the `uriPath` as-is.
  if (_startsWithInstanceProperty__default["default"](uriPath).call(uriPath, "".concat(entryPointUriPath, "/"))) return uriPath;
  // Return the full path including the `entryPointUriPath` as a prefix.
  return _concatInstanceProperty__default["default"](_context = "".concat(entryPointUriPath, "/")).call(_context, uriPath);
};
const getPermissions = appConfig => {
  var _context2, _appConfig$additional, _context3;
  const additionalResourceAccessKeyToOauthScopeMap = _reduceInstanceProperty__default["default"](_context2 = appConfig.additionalOAuthScopes || []).call(_context2, (previousOauthScope, _ref) => {
    let name = _ref.name,
      view = _ref.view,
      manage = _ref.manage;
    const formattedResourceKey = formatters.formatEntryPointUriPathToResourceAccessKey(name);
    return _objectSpread$1(_objectSpread$1({}, previousOauthScope), {}, {
      ["view".concat(formattedResourceKey)]: view,
      ["manage".concat(formattedResourceKey)]: manage
    });
  }, {});
  const additionalPermissionNames = ((_appConfig$additional = appConfig.additionalOAuthScopes) === null || _appConfig$additional === void 0 ? void 0 : _mapInstanceProperty__default["default"](_appConfig$additional).call(_appConfig$additional, _ref2 => {
    let name = _ref2.name;
    return name;
  })) || [];
  const permissionKeys = formatters.entryPointUriPathToResourceAccesses(appConfig.entryPointUriPath ||
  // In case the `entryPointUriPath` is not defined it is because the
  // configuration is for a custom view. In this case we use the
  // default entry point uri path.
  constants.CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH, additionalPermissionNames);
  const additionalPermissions = _mapInstanceProperty__default["default"](_context3 = _Object$keys__default["default"](additionalResourceAccessKeyToOauthScopeMap)).call(_context3, additionalResourceAccessKey => ({
    name: permissionKeys[additionalResourceAccessKey],
    oAuthScopes: additionalResourceAccessKeyToOauthScopeMap[additionalResourceAccessKey]
  }));
  return [{
    name: permissionKeys.view,
    oAuthScopes: appConfig.oAuthScopes.view
  }, {
    name: permissionKeys.manage,
    oAuthScopes: appConfig.oAuthScopes.manage
  }, ...additionalPermissions];
};
function transformCustomApplicationConfigToData(appConfig) {
  var _context4;
  validateEntryPointUriPath(appConfig);
  validateSubmenuLinks(appConfig);
  validateAdditionalOAuthScopes(appConfig);
  return {
    id: appConfig.env.production.applicationId,
    name: appConfig.name,
    description: appConfig.description,
    entryPointUriPath: appConfig.entryPointUriPath,
    url: appConfig.env.production.url,
    permissions: getPermissions(appConfig),
    icon: appConfig.icon,
    mainMenuLink: appConfig.mainMenuLink,
    submenuLinks: _mapInstanceProperty__default["default"](_context4 = appConfig.submenuLinks).call(_context4, submenuLink => _objectSpread$1(_objectSpread$1({}, submenuLink), {}, {
      uriPath: computeUriPath(submenuLink.uriPath, appConfig.entryPointUriPath)
    }))
  };
}
function transformCustomViewConfigToData(customViewConfig) {
  validateAdditionalOAuthScopes(customViewConfig);
  return {
    id: customViewConfig.env.production.customViewId,
    defaultLabel: customViewConfig.name,
    labelAllLocales: customViewConfig.labelAllLocales,
    description: customViewConfig.description,
    url: customViewConfig.env.production.url,
    permissions: getPermissions(customViewConfig),
    locators: customViewConfig.locators,
    type: customViewConfig.type,
    typeSettings: customViewConfig.typeSettings
  };
}
function transformConfigurationToData(configType, configuration) {
  if (configType === LOADED_CONFIG_TYPES.CUSTOM_APPLICATION) {
    return transformCustomApplicationConfigToData(configuration);
  } else if (configType === LOADED_CONFIG_TYPES.CUSTOM_VIEW) {
    return transformCustomViewConfigToData(configuration);
  } else {
    throw new Error("Invalid config type: ".concat(configType));
  }
}

const mapCloudIdentifierToApiUrl = key => {
  var _context;
  switch (key) {
    case CLOUD_IDENTIFIERS.GCP_AU:
      return MC_API_URLS.GCP_AU;
    case CLOUD_IDENTIFIERS.GCP_EU:
      return MC_API_URLS.GCP_EU;
    case CLOUD_IDENTIFIERS.GCP_US:
      return MC_API_URLS.GCP_US;
    case CLOUD_IDENTIFIERS.AWS_FRA:
      return MC_API_URLS.AWS_FRA;
    case CLOUD_IDENTIFIERS.AWS_OHIO:
      return MC_API_URLS.AWS_OHIO;
    case CLOUD_IDENTIFIERS.AWS_CN:
      return MC_API_URLS.AWS_CN;
    default:
      // We would probably never get to this point, as the JSON schema validation
      // kicks in before.
      throw new Error(_concatInstanceProperty__default["default"](_context = "Unknown cloud identifier \"".concat(key, "\". Supported values: ")).call(_context, _Object$values__default["default"](CLOUD_IDENTIFIERS).toString()));
  }
};
const getUniqueValues = function () {
  let initialValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let additionalValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return uniq__default["default"]([...initialValues, ...additionalValues]);
};
const nonProductionEnvironment = ['development', 'test'];
const getIsProd = env =>
// TL;DR: in case the `MC_APP_ENV` is defined, we consider that it's
// a production environment unless it's one of `development` or `test`.
// This allows to use for example the `staging` value, which from the
// application perspective is still considered a production environment.
env.MC_APP_ENV ? !_includesInstanceProperty__default["default"](nonProductionEnvironment).call(nonProductionEnvironment, env.MC_APP_ENV) : env.NODE_ENV === 'production';
const getOrThrow = (fn, errorMessage) => {
  try {
    return fn();
  } catch (error) {
    throw new Error(errorMessage);
  }
};

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context4, _context5; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context4 = ownKeys(Object(t), !0)).call(_context4, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context5 = ownKeys(Object(t))).call(_context5, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
// TODO: make it configurable.
const developmentPort = 3001;
const developmentAppUrl = "http://localhost:".concat(developmentPort);
const getLoadedConfigurationType = configFileName => {
  if (_includesInstanceProperty__default["default"](configFileName).call(configFileName, 'custom-view-config')) {
    return LOADED_CONFIG_TYPES.CUSTOM_VIEW;
  }
  return LOADED_CONFIG_TYPES.CUSTOM_APPLICATION;
};
const trimTrailingSlash = value => value.replace(/\/$/, '');
const omitDevConfigIfEmpty = devConfig => {
  if (devConfig && (Object.hasOwn(devConfig, 'accountLinks') || Object.hasOwn(devConfig, 'menuLinks') || Object.hasOwn(devConfig, 'customViewHostUrl') || Object.hasOwn(devConfig, 'oidc'))) {
    return devConfig;
  }
  return undefined;
};
const isCustomViewData = data => data.entryPointUriPath === undefined;
const getRuntimeEnvironmentConfigForDevelopment = _ref => {
  var _appConfig$env$develo;
  let isProd = _ref.isProd,
    configurationData = _ref.configurationData,
    mcApiUrl = _ref.mcApiUrl,
    appConfig = _ref.appConfig,
    entryPointUriPath = _ref.entryPointUriPath;
  if (isProd) {
    return undefined;
  }
  const oidcConfig = omitEmpty__default["default"](_objectSpread(_objectSpread({
    authorizeUrl: [
    // In case the MC API url points to localhost, we need to point
    // to a local running dev login page to handle the workflow properly.
    mcApiUrl.hostname === 'localhost' ? mcApiUrl.origin.replace(mcApiUrl.port, String(developmentPort)) : mcApiUrl.origin.replace('mc-api', 'mc'), '/login/authorize'].join(''),
    initialProjectKey:
    // For the `account` application, we should unset the projectKey.
    entryPointUriPath === 'account' ? undefined : appConfig.env.development.initialProjectKey
  }, ((_appConfig$env$develo = appConfig.env.development) === null || _appConfig$env$develo === void 0 ? void 0 : _appConfig$env$develo.teamId) && _objectSpread({
    teamId: appConfig.env.development.teamId
  }, isCustomViewData(configurationData) ? {
    customViewId: configurationData.id
  } : {
    applicationId: configurationData.id
  })), {}, {
    oAuthScopes: appConfig.oAuthScopes,
    additionalOAuthScopes: appConfig === null || appConfig === void 0 ? void 0 : appConfig.additionalOAuthScopes
  }));
  if (isCustomViewData(configurationData)) {
    var _context;
    const hostUriPath = appConfig.env.development.hostUriPath;
    const defaultHostUriPath = oidcConfig.initialProjectKey ? _concatInstanceProperty__default["default"](_context = "/".concat(oidcConfig.initialProjectKey, "/")).call(_context, entryPointUriPath) : "/".concat(entryPointUriPath);
    const hostUrl = new _URL__default["default"](hostUriPath || defaultHostUriPath, developmentAppUrl);
    return omitDevConfigIfEmpty({
      oidc: oidcConfig,
      customViewConfig: configurationData,
      customViewHostUrl: hostUrl.href
    });
  }
  return omitDevConfigIfEmpty({
    oidc: oidcConfig,
    menuLinks: _objectSpread(_objectSpread({
      icon: configurationData.icon
    }, configurationData.mainMenuLink), {}, {
      submenuLinks: configurationData.submenuLinks
    }),
    // @ts-expect-error: the `accountLinks` is not explicitly typed as it's only used by the account app.
    accountLinks: appConfig.accountLinks
  });
};
const getRuntimeEnvironmentConfig = _ref2 => {
  var _context2;
  let isProd = _ref2.isProd,
    configurationData = _ref2.configurationData,
    additionalAppEnv = _ref2.additionalAppEnv,
    mcApiUrl = _ref2.mcApiUrl,
    cdnUrl = _ref2.cdnUrl,
    appUrl = _ref2.appUrl,
    appEnvKey = _ref2.appEnvKey,
    revision = _ref2.revision,
    appConfig = _ref2.appConfig;
  const entryPointUriPath = isCustomViewData(configurationData) ?
  // When the application acts as the host for Custom Views, there is no real
  // entry point to be used, therefore we use a special identifier.
  constants.CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH : configurationData.entryPointUriPath;

  // The real application ID is only used in production.
  // In development, we prefix the entry point with the "__local" prefix.
  // This is important to determine to which URL the MC should redirect to
  // after successful login.
  const applicationIdentifier = isProd ? _concatInstanceProperty__default["default"](_context2 = "".concat(configurationData.id, ":")).call(_context2, entryPointUriPath) : "__local:".concat(entryPointUriPath);
  const developmentConfig = getRuntimeEnvironmentConfigForDevelopment({
    isProd,
    configurationData,
    mcApiUrl,
    appConfig,
    entryPointUriPath
  });
  return _objectSpread(_objectSpread(_objectSpread({}, omitEmpty__default["default"](additionalAppEnv)), {}, {
    cdnUrl: cdnUrl.href,
    env: appEnvKey,
    frontendHost: appUrl.host,
    location: appConfig.cloudIdentifier,
    mcApiUrl: mcApiUrl.origin,
    revision,
    servedByProxy: isProd,
    // Application config
    applicationId: applicationIdentifier,
    applicationIdentifier,
    applicationName: isCustomViewData(configurationData) ? configurationData.defaultLabel : configurationData.name,
    entryPointUriPath
  }, isCustomViewData(configurationData) ? {
    customViewId: configurationData.id
  } : {}), developmentConfig ? {
    __DEVELOPMENT__: developmentConfig
  } : {});
};

// Keep a reference to the config so that requiring the module
// again will result in returning the cached value.
let cachedConfig;
const processConfig = function () {
  var _ref4, _processEnv$MC_APP_EN, _appConfig$additional, _ref5, _appConfig$headers, _appConfig$headers2, _context3, _appConfig$headers3, _appConfig$headers4;
  let _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref3$disableCache = _ref3.disableCache,
    disableCache = _ref3$disableCache === void 0 ? false : _ref3$disableCache,
    _ref3$processEnv = _ref3.processEnv,
    processEnv = _ref3$processEnv === void 0 ? process.env : _ref3$processEnv,
    _ref3$applicationPath = _ref3.applicationPath,
    applicationPath = _ref3$applicationPath === void 0 ? fs__default["default"].realpathSync(process.cwd()) : _ref3$applicationPath;
  if (cachedConfig && !disableCache) return cachedConfig;
  const _loadConfig = loadConfig(applicationPath),
    filepath = _loadConfig.filepath,
    rawConfig = _loadConfig.config;
  const configType = getLoadedConfigurationType(path.parse(filepath).name);
  validateConfig(configType, rawConfig);
  const appConfig = substituteVariablePlaceholders(rawConfig, {
    applicationPath,
    processEnv
  });
  const configurationData = transformConfigurationToData(configType, appConfig);
  const appEnvKey = (_ref4 = (_processEnv$MC_APP_EN = processEnv.MC_APP_ENV) !== null && _processEnv$MC_APP_EN !== void 0 ? _processEnv$MC_APP_EN : processEnv.NODE_ENV) !== null && _ref4 !== void 0 ? _ref4 : 'development';
  const isProd = getIsProd(processEnv);
  const additionalAppEnv = (_appConfig$additional = appConfig.additionalEnv) !== null && _appConfig$additional !== void 0 ? _appConfig$additional : {};
  const revision = (_ref5 = additionalAppEnv.revision) !== null && _ref5 !== void 0 ? _ref5 : '';

  // Parse all the supported URLs, which gets implicitly validated

  const envAppUrl = isProd ? configurationData.url : developmentAppUrl;
  const appUrl = getOrThrow(() => new _URL__default["default"](envAppUrl), "Invalid application URL: \"".concat(envAppUrl, "\""));

  // Use `||` instead of `??` to include empty string values.
  const envCdnUrl = isProd ? appConfig.env.production.cdnUrl || appUrl.href : developmentAppUrl;
  const cdnUrl = getOrThrow(() => new _URL__default["default"](envCdnUrl), "Invalid application CDN URL: \"".concat(envCdnUrl, "\""));
  const mcApiUrl = getOrThrow(() => new _URL__default["default"](
  // Use `||` instead of `??` to include empty string values.
  appConfig.mcApiUrl || mapCloudIdentifierToApiUrl(appConfig.cloudIdentifier)), "Invalid MC API URL: \"".concat(appConfig.mcApiUrl, "\""));
  cachedConfig = {
    data: configurationData,
    env: getRuntimeEnvironmentConfig({
      isProd,
      configurationData,
      additionalAppEnv,
      appConfig,
      appEnvKey,
      appUrl,
      cdnUrl,
      mcApiUrl,
      revision
    }),
    headers: _objectSpread(_objectSpread({}, appConfig.headers), {}, {
      csp: _objectSpread(_objectSpread({}, (_appConfig$headers = appConfig.headers) === null || _appConfig$headers === void 0 ? void 0 : _appConfig$headers.csp), {}, {
        // We need to make sure the URL we use in these CSP headers have a slash in the end,
        // otherwise it might create an invalid value when application/CDN URL points to a
        // non-root directory (ex: https://www.my-domain.com/app). This is a valid URL but from
        // the CSP point of view, it will say only the file `app` can be used as a source, so
        // any other file from that domain will be forbidden. Using the slash (ex: https://www.my-domain.com/app/)
        // at the end it's like using a wildcard so anything 'below' `app` will be allowed.
        'connect-src': getUniqueValues((_appConfig$headers2 = appConfig.headers) === null || _appConfig$headers2 === void 0 || (_appConfig$headers2 = _appConfig$headers2.csp) === null || _appConfig$headers2 === void 0 ? void 0 : _appConfig$headers2['connect-src'], _concatInstanceProperty__default["default"](_context3 = [mcApiUrl.origin]).call(_context3, isProd ? ["".concat(trimTrailingSlash(appUrl.href), "/")] : [])),
        'script-src': getUniqueValues((_appConfig$headers3 = appConfig.headers) === null || _appConfig$headers3 === void 0 || (_appConfig$headers3 = _appConfig$headers3.csp) === null || _appConfig$headers3 === void 0 ? void 0 : _appConfig$headers3['script-src'], isProd ? ["".concat(trimTrailingSlash(appUrl.href), "/"), "".concat(trimTrailingSlash(cdnUrl.href), "/")] : []),
        'style-src': getUniqueValues((_appConfig$headers4 = appConfig.headers) === null || _appConfig$headers4 === void 0 || (_appConfig$headers4 = _appConfig$headers4.csp) === null || _appConfig$headers4 === void 0 ? void 0 : _appConfig$headers4['style-src'], isProd ? ["".concat(trimTrailingSlash(appUrl.href), "/"), "".concat(trimTrailingSlash(cdnUrl.href), "/")] : [])
      })
    })
  };
  return cachedConfig;
};

const jsdom = new jsdom$1.JSDOM('');
// @ts-expect-error: jsdom returns DOMWindow, which doesn't match Window dompurify expects
const DOMPurify = createDOMPurify__default["default"](jsdom.window);
function sanitizeSvg(data) {
  return DOMPurify.sanitize(data, {
    USE_PROFILES: {
      svg: true
    },
    RETURN_DOM: true,
    FORBID_ATTR: [
    // To avoid injection by using `style="filter:url(\"data:image/svg+xml,<svg`
    'style']
  }).innerHTML;
}

exports.CLOUD_IDENTIFIERS = CLOUD_IDENTIFIERS;
exports.ENTRY_POINT_URI_PATH_REGEX = ENTRY_POINT_URI_PATH_REGEX;
exports.LOADED_CONFIG_TYPES = LOADED_CONFIG_TYPES;
exports.MC_API_URLS = MC_API_URLS;
exports.MissingOrInvalidConfigError = MissingOrInvalidConfigError;
exports.PERMISSION_GROUP_NAME_REGEX = PERMISSION_GROUP_NAME_REGEX;
exports.getConfigPath = getConfigPath;
exports.processConfig = processConfig;
exports.sanitizeSvg = sanitizeSvg;
