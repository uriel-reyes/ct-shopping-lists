'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _includesInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/includes');
var _Map = require('@babel/runtime-corejs3/core-js-stable/map');
var _setTimeout = require('@babel/runtime-corejs3/core-js-stable/set-timeout');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _includesInstanceProperty__default = /*#__PURE__*/_interopDefault(_includesInstanceProperty);
var _Map__default = /*#__PURE__*/_interopDefault(_Map);
var _setTimeout__default = /*#__PURE__*/_interopDefault(_setTimeout);

// NOTE: This string will be replaced on build time with the package version.
var version = "22.13.0";

const ADD_NOTIFICATION = 'ADD_NOTIFICATION';
const REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION';

function addNotification(notification, meta) {
  const action = {
    type: ADD_NOTIFICATION,
    payload: notification
  };
  if (meta) action.meta = meta;
  return action;
}
function removeNotification(id) {
  return {
    type: REMOVE_NOTIFICATION,
    payload: {
      id
    }
  };
}

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(t))).call(_context3, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
// Force TS cast of generic action to TNotificationAction
const isNotificationAction = action => {
  var _context;
  return _includesInstanceProperty__default["default"](_context = [ADD_NOTIFICATION, REMOVE_NOTIFICATION]).call(_context, action.type);
};
const dismissCallbacksMap = new _Map__default["default"]();
let id = 0;
const middleware = _ref => {
  let dispatch = _ref.dispatch;
  return next => action => {
    if (!isNotificationAction(action)) {
      return next(action);
    }
    switch (action.type) {
      case ADD_NOTIFICATION:
        {
          id += 1;
          const notification = _objectSpread(_objectSpread({}, action.payload), {}, {
            id
          });
          const dismissCallback = () => {
            dispatch(removeNotification(notification.id));
          };
          if (action.meta) {
            if (action.meta.dismissAfter) _setTimeout__default["default"](dismissCallback, action.meta.dismissAfter);
            if (typeof action.meta.onDismiss === 'function') dismissCallbacksMap.set(notification.id, action.meta.onDismiss);
          }
          const nextAction = _objectSpread(_objectSpread({}, action), {}, {
            payload: notification,
            dismiss: dismissCallback
          });
          return next(nextAction);
        }
      case REMOVE_NOTIFICATION:
        {
          const notificationId = action.payload.id;
          const callback = dismissCallbacksMap.get(notificationId);
          if (callback) callback(notificationId);
          dismissCallbacksMap.delete(notificationId);
          return next(action);
        }
      default:
        return next(action);
    }
  };
};

function notificationsReducer() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (!action || !action.type) return state;
  switch (action.type) {
    case ADD_NOTIFICATION:
      {
        return [action.payload, ...state];
      }
    case REMOVE_NOTIFICATION:
      return _filterInstanceProperty__default["default"](state).call(state, notification => action.payload.id !== notification.id);
    default:
      return state;
  }
}

exports.ADD_NOTIFICATION = ADD_NOTIFICATION;
exports.REMOVE_NOTIFICATION = REMOVE_NOTIFICATION;
exports.addNotification = addNotification;
exports.middleware = middleware;
exports.reducer = notificationsReducer;
exports.removeNotification = removeNotification;
exports.version = version;
