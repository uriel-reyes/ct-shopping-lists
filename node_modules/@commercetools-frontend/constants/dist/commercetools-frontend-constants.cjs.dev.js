'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// NOTE: This string will be replaced on build time with the package version.
var version = "22.13.0";

// DOM elements
const PORTALS_CONTAINER_ID = 'portals-container';

// Links
const SUPPORT_PORTAL_URL = 'https://support.commercetools.com';

// Notification actions
const SHOW_LOADING = 'SHOW_LOADING';
const HIDE_LOADING = 'HIDE_LOADING';
const HIDE_ALL_PAGE_NOTIFICATIONS = 'HIDE_ALL_PAGE_NOTIFICATIONS';

// Notifications
const NOTIFICATION_DOMAINS = {
  GLOBAL: 'global',
  PAGE: 'page',
  SIDE: 'side'
};
const NOTIFICATION_KINDS_SIDE = {
  error: 'error',
  warning: 'warning',
  info: 'info',
  success: 'success'
};
const NOTIFICATION_KINDS_GLOBAL = {
  error: 'error',
  warning: 'warning',
  info: 'info',
  success: 'success',
  'unexpected-error': 'unexpected-error'
};
const NOTIFICATION_KINDS_PAGE = {
  error: 'error',
  warning: 'warning',
  info: 'info',
  success: 'success',
  'unexpected-error': 'unexpected-error',
  'api-error': 'api-error'
};
// Alias to `NOTIFICATION_DOMAINS` for backwards compatibility
const DOMAINS = NOTIFICATION_DOMAINS;
// Fallback string when there is no localized value
const NO_VALUE_FALLBACK = '- -';

// HTTP requests and responses
const STATUS_CODES = {
  UNAUTHORIZED: 401,
  FORBIDDEN: 403,
  UNAUTHENTICATED: 299,
  NOT_FOUND: 404
};
const LOGOUT_REASONS = {
  USER: 'user',
  UNAUTHORIZED: 'unauthorized',
  INVALID: 'invalid',
  DELETED: 'deleted',
  NO_PROJECTS: 'no-projects'
};
const GRAPHQL_TARGETS = {
  MERCHANT_CENTER_BACKEND: 'mc',
  COMMERCETOOLS_PLATFORM: 'ctp',
  DASHBOARD_SERVICE: 'dashboard',
  CHANGE_HISTORY_SERVICE: 'change-history',
  PIM_INDEXER: 'pim-indexer',
  ORDER_INDEXER: 'order-indexer',
  SETTINGS_SERVICE: 'settings',
  ADMINISTRATION_SERVICE: 'administration'
};
const MC_API_PROXY_TARGETS = {
  COMMERCETOOLS_PLATFORM: 'ctp',
  MACHINE_LEARNING: 'ml',
  PIM_SEARCH: 'pim-search',
  ORDER_SEARCH: 'order-search',
  MC_METRICS: 'mc-metrics',
  IMPORT: 'import'
};

// Global application environment on window object

// Used for Custom Views, as we want to keep the `entryPointUriPath` value required in the runtime config.
const CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH = '@@custom-view-host@@';
const SUPPORTED_HEADERS = {
  ACCEPT: 'Accept',
  ACCEPT_VERSION: 'Accept-version',
  AUTHORIZATION: 'Authorization',
  CONTENT_TYPE: 'Content-Type',
  X_APPLICATION_ID: 'X-Application-Id',
  X_CUSTOM_VIEW_ID: 'X-Custom-View-Id',
  X_CORRELATION_ID: 'X-Correlation-Id',
  X_FEATURE_FLAG: 'X-Feature-Flag',
  X_FORWARD_TO: 'X-Forward-To',
  X_FORWARD_TO_AUDIENCE_POLICY: 'X-Forward-To-Audience-Policy',
  X_FORWARD_TO_CLAIMS: 'X-Forward-To-Claims',
  X_GRAPHQL_TARGET: 'X-Graphql-Target',
  X_GRAPHQL_OPERATION_NAME: 'X-Graphql-Operation-Name',
  X_PROJECT_KEY: 'X-Project-Key',
  X_TEAM_ID: 'X-Team-Id',
  X_TOKEN_RETRY: 'X-Force-Token',
  X_USER_AGENT: 'X-User-Agent'
};
const STORAGE_KEYS = {
  NONCE: 'nonce',
  IS_AUTHENTICATED: 'isAuthenticated',
  SESSION_TOKEN: 'sessionToken',
  SESSION_SCOPE: 'sessionScope',
  ACTIVE_PROJECT_KEY: 'activeProjectKey',
  ACTIVE_TEAM_ID: 'activeTeamId',
  SELECTED_DATA_LOCALE: 'selectedDataLocale',
  IS_FORCED_MENU_OPEN: 'isForcedMenuOpen',
  LOGIN_STRATEGY: 'loginStrategy'
};
const HTTP_SECURITY_HEADERS = {
  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',
  'X-XSS-Protection': '1; mode=block',
  'X-Content-Type-Options': 'nosniff',
  'X-Frame-Options': 'SAMEORIGIN',
  'Referrer-Policy': 'same-origin'
};

// Custom Views events (messages sent between the host application and the custom view)
const CUSTOM_VIEWS_EVENTS_NAMES = {
  CUSTOM_VIEW_BOOTSTRAP: 'custom-view-bootstrap',
  CUSTOM_VIEW_INITIALIZATION: 'custom-view-initialization'
};
const CUSTOM_VIEWS_EVENTS_META = {
  SOURCE: 'mc-host-application',
  DESTINATION_PREFIX: 'custom-view-'
};

// SSO
const ORGANIZATION_GENERAL_ERROR = 'organizationGeneralError';
const LOGIN_STRATEGY_DEFAULT = 'default';
const LOGIN_STRATEGY_OIDC = 'oidc';
const LOGIN_STRATEGY_SSO = 'sso';

/*
 * This file contains a list of all feature toggles used within
 * the app shell. Each feature toggle should be a constant.
 *
 * ```
 * export const FEATURE_TOGGLE_NAME = 'featureToggleName';
 * export const FLAGS = {
 *   [FEATURE_TOGGLE_NAME]: false,
 * };
 * ```
 *
 * NOTE:
 *   Default values are not yet passed to flopflip and it has to be decided
 *   how the integrate with the plugin API.
 *   The default values would be used whenever feature toggles have not been
 *   fetched from LaunchDarkly (without default values flopflip will default
 *   them to off until fetched).
 */

const CUSTOM_VIEWS = 'enableCustomViews';
const FLAGS = {
  [CUSTOM_VIEWS]: false
};

var featureToggles = /*#__PURE__*/Object.freeze({
  __proto__: null,
  CUSTOM_VIEWS: CUSTOM_VIEWS,
  FLAGS: FLAGS
});

exports.CUSTOM_VIEWS_EVENTS_META = CUSTOM_VIEWS_EVENTS_META;
exports.CUSTOM_VIEWS_EVENTS_NAMES = CUSTOM_VIEWS_EVENTS_NAMES;
exports.CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH = CUSTOM_VIEW_HOST_ENTRY_POINT_URI_PATH;
exports.DOMAINS = DOMAINS;
exports.GRAPHQL_TARGETS = GRAPHQL_TARGETS;
exports.HIDE_ALL_PAGE_NOTIFICATIONS = HIDE_ALL_PAGE_NOTIFICATIONS;
exports.HIDE_LOADING = HIDE_LOADING;
exports.HTTP_SECURITY_HEADERS = HTTP_SECURITY_HEADERS;
exports.LOGIN_STRATEGY_DEFAULT = LOGIN_STRATEGY_DEFAULT;
exports.LOGIN_STRATEGY_OIDC = LOGIN_STRATEGY_OIDC;
exports.LOGIN_STRATEGY_SSO = LOGIN_STRATEGY_SSO;
exports.LOGOUT_REASONS = LOGOUT_REASONS;
exports.MC_API_PROXY_TARGETS = MC_API_PROXY_TARGETS;
exports.NOTIFICATION_DOMAINS = NOTIFICATION_DOMAINS;
exports.NOTIFICATION_KINDS_GLOBAL = NOTIFICATION_KINDS_GLOBAL;
exports.NOTIFICATION_KINDS_PAGE = NOTIFICATION_KINDS_PAGE;
exports.NOTIFICATION_KINDS_SIDE = NOTIFICATION_KINDS_SIDE;
exports.NO_VALUE_FALLBACK = NO_VALUE_FALLBACK;
exports.ORGANIZATION_GENERAL_ERROR = ORGANIZATION_GENERAL_ERROR;
exports.PORTALS_CONTAINER_ID = PORTALS_CONTAINER_ID;
exports.SHOW_LOADING = SHOW_LOADING;
exports.STATUS_CODES = STATUS_CODES;
exports.STORAGE_KEYS = STORAGE_KEYS;
exports.SUPPORTED_HEADERS = SUPPORTED_HEADERS;
exports.SUPPORT_PORTAL_URL = SUPPORT_PORTAL_URL;
exports.featureFlags = featureToggles;
exports.version = version;
