import fs from 'fs';
import { processConfig } from '@commercetools-frontend/application-config';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _Array$isArray from '@babel/runtime-corejs3/core-js-stable/array/is-array';
import _reduceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import _Object$assign from '@babel/runtime-corejs3/core-js-stable/object/assign';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _Object$entries from '@babel/runtime-corejs3/core-js-stable/object/entries';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import { HTTP_SECURITY_HEADERS } from '@commercetools-frontend/constants';
import crypto from 'crypto';
import serialize from 'serialize-javascript';
export { g as generateTemplate } from './generate-template-90e274ba.esm.js';

function createAssetHash(content) {
  const sha256Hash = crypto.createHash('sha256').update(content).digest('base64');

  /**
   * NOTE:
   *   We prefix the hash function type as the browser
   *   needs it when validating the contents of a script against
   *   CSP headers sent.
   *   For more information head to: developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src#Sources
   */
  return "sha256-".concat(sha256Hash);
}

const sanitizeAppEnvironment = env => serialize(env, {
  isJSON: true
});

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context9, _context10; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context9 = ownKeys(Object(t), !0)).call(_context9, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context10 = ownKeys(Object(t))).call(_context10, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
// https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros
const htmlScripts$1 = {
  "loadingScreen": "window.onAppLoaded=function(){var e=document.querySelector(\"#app-loader\");e&&e.parentNode.removeChild(e)},setTimeout(function(){var e=document.querySelector(\".loading-screen\");e&&e.classList.remove(\"loading-screen--hidden\")},250),setTimeout(function(){var e=document.querySelector(\".long-loading-notice\");e&&e.classList.remove(\"long-loading-notice--hidden\")},2e3);",
  "publicPath": "window.__dynamicImportHandler__=function(n){return window.app.cdnUrl.replace(/\\/$/,\"\")+\"/\"+n.replace(/^(\\.\\/)?/,\"\")},window.__dynamicImportPreload__=function(n){return n.map(n=>window.app.cdnUrl.replace(/\\/$/,\"\")+\"/\"+n)};"
};
const toArray = value => _Array$isArray(value) ? value : [value];
const mergeCspDirectives = function () {
  for (var _len = arguments.length, directives = new Array(_len), _key = 0; _key < _len; _key++) {
    directives[_key] = arguments[_key];
  }
  return _reduceInstanceProperty(directives).call(directives, (mergedCsp, csp) => {
    var _context;
    return _Object$assign(mergedCsp, _reduceInstanceProperty(_context = _Object$keys(csp)).call(_context, (acc, directiveKey) => _Object$assign(acc, {
      [directiveKey]: [...toArray(mergedCsp[directiveKey] ? mergedCsp[directiveKey] : []), ...toArray(csp[directiveKey])]
    }), {}));
  }, {});
};
const toHeaderString = function () {
  var _context2;
  let directives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _mapInstanceProperty(_context2 = _Object$entries(directives)).call(_context2, _ref => {
    var _context3;
    let _ref2 = _slicedToArray(_ref, 2),
      directive = _ref2[0],
      value = _ref2[1];
    return _concatInstanceProperty(_context3 = "".concat(directive, " ")).call(_context3, _Array$isArray(value) ? value.join(' ') : value);
  }).join('; ');
};
const toStructuredHeaderString = function () {
  var _context4;
  let directives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _mapInstanceProperty(_context4 = _Object$entries(directives)).call(_context4, _ref3 => {
    var _context5;
    let _ref4 = _slicedToArray(_ref3, 2),
      directive = _ref4[0],
      value = _ref4[1];
    return _concatInstanceProperty(_context5 = "".concat(directive, "=")).call(_context5, _Array$isArray(value) ? value.join(' ') : value);
  }).join(', ');
};
const processHeaders = applicationConfig => {
  var _context6, _context7, _context8, _applicationConfig$he, _applicationConfig$he2, _applicationConfig$he3, _applicationConfig$he4;
  const isMcDevEnv = applicationConfig.env.env === 'development';

  // List hashes for injected inline scripts.
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src
  const htmlScriptsHashes = [createAssetHash(htmlScripts$1.loadingScreen), createAssetHash("window.app = ".concat(sanitizeAppEnvironment(applicationConfig.env), ";")), createAssetHash(htmlScripts$1.publicPath)];

  // // List hashes for injected inline styles.
  // // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src
  // const htmlStylesHashes = [createAssetHash(htmlStyles.loadingScreen)];

  /**
   * Content Security Policy (CSP)
   * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
   */
  const cspDirectives = _Object$assign({
    'default-src': "'none'",
    'script-src': _concatInstanceProperty(_context6 = ["'self'"]).call(_context6, isMcDevEnv ?
    // Allow webpack to load source maps on runtime when errors occur
    // using script tags
    ['localhost:*', "'unsafe-inline'"] : _mapInstanceProperty(htmlScriptsHashes).call(htmlScriptsHashes, assetHash => "'".concat(assetHash, "'"))),
    'connect-src': _concatInstanceProperty(_context7 = ["'self'", 'app.launchdarkly.com', 'clientstream.launchdarkly.com', 'events.launchdarkly.com', 'app.getsentry.com',
    // Match all attempts to load from any subdomain of `sentry.io`
    '*.sentry.io']).call(_context7, isMcDevEnv ? ['ws:', 'localhost:8080', 'webpack-internal:'] : []),
    'img-src': ['*', 'data:'],
    'style-src': _concatInstanceProperty(_context8 = ["'self'", 'fonts.googleapis.com', 'data:']).call(_context8,
    // TODO: investigate what needs to be done to avoid unsafe-inline styles
    // https://github.com/commercetools/merchant-center-frontend/pull/5223#discussion_r210367636
    ["'unsafe-inline'"]
    // TODO: enable this once we can avoid unsafe-inline
    // htmlStylesHashes.map(assetHash => `'${assetHash}'`)
    ),

    'font-src': ["'self'", 'fonts.gstatic.com', 'data:'],
    // Required for Custom Views
    'frame-src': ["'self'"]
  }, isMcDevEnv ? {
    // NOTE: use this instead of `upgrade-insecure-requests` for local
    // development to avoid `http://localhost` requests to be redirected
    // to https.
    'block-all-mixed-content': ''
  } : {
    // NOTE: prefer this over `block-all-mixed-content`.
    // https://youtu.be/j-0Bj40juMI?t=11m47s
    'upgrade-insecure-requests': ''
  }
  // NOTE: we might want to define further policies in the future, for example
  // - `require-sri-for style script` (at the moment not possible because
  //  Intercom scripts are apparently not meant for this)
  );

  // Recursively merge the directives
  const mergedCsp = mergeCspDirectives(cspDirectives, (_applicationConfig$he = (_applicationConfig$he2 = applicationConfig.headers) === null || _applicationConfig$he2 === void 0 ? void 0 : _applicationConfig$he2.csp) !== null && _applicationConfig$he !== void 0 ? _applicationConfig$he : {});
  return _objectSpread(_objectSpread(_objectSpread({}, HTTP_SECURITY_HEADERS), {}, {
    // The `Content-Security-Policy` header is always generated
    // based on the Custom Application config.
    'Content-Security-Policy': toHeaderString(mergedCsp)
  }, ((_applicationConfig$he3 = applicationConfig.headers) === null || _applicationConfig$he3 === void 0 ? void 0 : _applicationConfig$he3.strictTransportSecurity) && {
    'Strict-Transport-Security': [HTTP_SECURITY_HEADERS['Strict-Transport-Security'], ...applicationConfig.headers.strictTransportSecurity].join('; ')
  }), ((_applicationConfig$he4 = applicationConfig.headers) === null || _applicationConfig$he4 === void 0 ? void 0 : _applicationConfig$he4.permissionsPolicies) && {
    'Permissions-Policy': toStructuredHeaderString(applicationConfig.headers.permissionsPolicies)
  });
};

// https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros
const htmlScripts = {
  "loadingScreen": "window.onAppLoaded=function(){var e=document.querySelector(\"#app-loader\");e&&e.parentNode.removeChild(e)},setTimeout(function(){var e=document.querySelector(\".loading-screen\");e&&e.classList.remove(\"loading-screen--hidden\")},250),setTimeout(function(){var e=document.querySelector(\".long-loading-notice\");e&&e.classList.remove(\"long-loading-notice--hidden\")},2e3);",
  "publicPath": "window.__dynamicImportHandler__=function(n){return window.app.cdnUrl.replace(/\\/$/,\"\")+\"/\"+n.replace(/^(\\.\\/)?/,\"\")},window.__dynamicImportPreload__=function(n){return n.map(n=>window.app.cdnUrl.replace(/\\/$/,\"\")+\"/\"+n)};"
}; // https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros
const htmlStyles = {
  "loadingScreen": ".loading-screen{display:flex;flex-direction:column;align-items:center;justify-content:center;height:100vh;width:100vw}.loading-screen--hidden{display:none}.loading-screen>*+*{margin:24px 0 0}.loading-spinner{width:32px;height:32px}.long-loading-notice{color:#999;font-family:'Open Sans',sans-serif;font-size:12px}.long-loading-notice--hidden{visibility:hidden}.loading-spinner-circle{fill:#213c45;opacity:.2}@keyframes loading-spinner-animation{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}.loading-spinner-pointer{transform-origin:20px 20px 0;animation:loading-spinner-animation .5s infinite linear}"
};
const trimTrailingSlash = value => value.replace(/\/$/, '');
const replaceHtmlPlaceholders = (indexHtmlContent, options) => {
  var _options$headers$Cont, _options$headers;
  return indexHtmlContent.replace(new RegExp('__CSP__', 'g'), (_options$headers$Cont = (_options$headers = options.headers) === null || _options$headers === void 0 ? void 0 : _options$headers['Content-Security-Policy']) !== null && _options$headers$Cont !== void 0 ? _options$headers$Cont : '').replace(new RegExp('__CDN_URL__', 'g'), options.env.cdnUrl ? // Ensure there is a trailing slash
  "".concat(trimTrailingSlash(options.env.cdnUrl), "/") : '').replace(new RegExp('__MC_API_URL__', 'g'), trimTrailingSlash(options.env.mcApiUrl)).replace(new RegExp('__APPLICATION_ENVIRONMENT__', 'g'), sanitizeAppEnvironment(options.env)).replace(new RegExp('__LOADING_SCREEN_JS__', 'g'), "<script>".concat(htmlScripts.loadingScreen, "</script>")).replace(new RegExp('__LOADING_SCREEN_CSS__', 'g'), "<style>".concat(htmlStyles.loadingScreen, "</style>"));
};

async function compileHtml(indexHtmlTemplatePath) {
  const applicationConfig = processConfig();
  const compiledHeaders = processHeaders(applicationConfig);
  const indexHtmlTemplateContent = fs.readFileSync(indexHtmlTemplatePath, 'utf8');
  const indexHtmlContent = replaceHtmlPlaceholders(indexHtmlTemplateContent, {
    env: applicationConfig.env,
    headers: compiledHeaders
  });
  return {
    env: applicationConfig.env,
    headers: compiledHeaders,
    indexHtmlContent
  };
}

export { compileHtml, processHeaders, replaceHtmlPlaceholders };
