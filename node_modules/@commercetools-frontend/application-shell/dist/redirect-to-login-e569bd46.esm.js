import { useLocation } from 'react-router-dom';
import { v4 } from 'uuid';
import { oidcStorage } from '@commercetools-frontend/application-shell-connectors';
import { LOGOUT_REASONS } from '@commercetools-frontend/constants';
import { trimLeadingAndTrailingSlashes, joinPaths } from '@commercetools-frontend/url-utils';
import { b as buildOidcScope, a as OIDC_RESPONSE_TYPES } from './oidc-da8526e3.esm.js';
import { u as useIsServedByProxy } from './use-is-served-by-proxy-77984220.esm.js';
import { g as getMcOrigin } from './get-mc-origin-fecfee07.esm.js';
import { R as Redirector } from './redirector-db8b5cd2.esm.js';
import { jsx } from '@emotion/react/jsx-runtime';
import '@babel/runtime-corejs3/core-js-stable/instance/concat';
import '@babel/runtime-corejs3/core-js-stable/instance/map';
import '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import '@babel/runtime-corejs3/helpers/slicedToArray';
import '@babel/runtime-corejs3/core-js-stable/url';
import '@babel/runtime-corejs3/core-js-stable/instance/reverse';
import '@babel/runtime-corejs3/core-js-stable/object/keys';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import '@babel/runtime-corejs3/core-js-stable/instance/filter';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import '@babel/runtime-corejs3/core-js-stable/object/define-property';
import '@babel/runtime-corejs3/helpers/defineProperty';
import 'prop-types';
import 'react';
import 'qss';

const generateAndCacheNonceWithState = state => {
  const nonce = v4();
  // We store additional information within the given `nonce`
  // to then retrieve it later when the IdP redirects back
  // to our application. The URL will contain the `nonce` within
  // the id_token and, once validated, we can retrieve and use
  // the state object.
  // https://auth0.com/docs/protocols/oauth2/oauth-state#how-to-use-the-parameter-to-restore-application-state
  oidcStorage.setSessionState(nonce, state);
  return nonce;
};
const RedirectToLogin = () => {
  var _window$app$__DEVELOP;
  const location = useLocation();
  const servedByProxy = useIsServedByProxy();
  if ((_window$app$__DEVELOP = window.app.__DEVELOPMENT__) !== null && _window$app$__DEVELOP !== void 0 && (_window$app$__DEVELOP = _window$app$__DEVELOP.oidc) !== null && _window$app$__DEVELOP !== void 0 && _window$app$__DEVELOP.authorizeUrl) {
    var _window$app$__DEVELOP2, _window$app$__DEVELOP3, _window$app$__DEVELOP4, _window$app$__DEVELOP5, _window$app$__DEVELOP6;
    // We pick the project key from local storage. This assumes that the value
    // as been previously set when the application starts up.
    // This is necessary to allow switching projects and triggering a new login.
    const nextProjectKey = oidcStorage.getActiveProjectKey();

    // According to the OIDC spec, the `state` parameter is recommended to be sent
    // to the authorization server to help mitigating Cross-Site Request Forgery.
    // https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
    // Using `state` or `nonce` is very similar but with subtle differences.
    // Here we follow the approach described by Auth0 on how to use both, where
    // we generate a `nonce`, store it in session storage together with some state,
    // and send it to the authorization server as the `state` parameter.
    // https://auth0.com/docs/protocols/oauth2/redirect-users
    // Additionally, we still send the `nonce` parameter as well.
    const sessionId = generateAndCacheNonceWithState({
      applicationId: window.app.applicationId,
      // Store query parameters to be used after the callback redirect
      query: {
        redirectTo: nextProjectKey ? "/".concat(nextProjectKey) : '/'
      }
    });
    const requestedScope = buildOidcScope({
      projectKey: nextProjectKey !== null && nextProjectKey !== void 0 ? nextProjectKey : undefined,
      oAuthScopes: (_window$app$__DEVELOP2 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP2 === void 0 || (_window$app$__DEVELOP2 = _window$app$__DEVELOP2.oidc) === null || _window$app$__DEVELOP2 === void 0 ? void 0 : _window$app$__DEVELOP2.oAuthScopes,
      additionalOAuthScopes: (_window$app$__DEVELOP3 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP3 === void 0 || (_window$app$__DEVELOP3 = _window$app$__DEVELOP3.oidc) === null || _window$app$__DEVELOP3 === void 0 ? void 0 : _window$app$__DEVELOP3.additionalOAuthScopes,
      teamId: (_window$app$__DEVELOP4 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP4 === void 0 || (_window$app$__DEVELOP4 = _window$app$__DEVELOP4.oidc) === null || _window$app$__DEVELOP4 === void 0 ? void 0 : _window$app$__DEVELOP4.teamId,
      applicationId: (_window$app$__DEVELOP5 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP5 === void 0 || (_window$app$__DEVELOP5 = _window$app$__DEVELOP5.oidc) === null || _window$app$__DEVELOP5 === void 0 ? void 0 : _window$app$__DEVELOP5.applicationId
    });

    // Store session scopes, to be able to detect if requested scopes changed
    // in the application config and invalidate the session.
    // This is only valid for local development.
    oidcStorage.setSessionScope(requestedScope);
    return jsx(Redirector, {
      to: "",
      origin: (_window$app$__DEVELOP6 = window.app.__DEVELOPMENT__) === null || _window$app$__DEVELOP6 === void 0 || (_window$app$__DEVELOP6 = _window$app$__DEVELOP6.oidc) === null || _window$app$__DEVELOP6 === void 0 ? void 0 : _window$app$__DEVELOP6.authorizeUrl,
      location: location,
      queryParams: {
        reason: LOGOUT_REASONS.UNAUTHORIZED,
        // Query parameters for OIDC-lik workflow.
        client_id: window.app.applicationId,
        response_type: OIDC_RESPONSE_TYPES.ID_TOKEN,
        scope: requestedScope,
        state: sessionId,
        nonce: sessionId
      }
    });
  }
  const mcOrigin = servedByProxy ? getMcOrigin(window.app.mcApiUrl) : undefined;
  return jsx(Redirector, {
    to: "login",
    origin: mcOrigin,
    location: location,
    queryParams: {
      reason: LOGOUT_REASONS.UNAUTHORIZED,
      redirectTo: trimLeadingAndTrailingSlashes(joinPaths(window.location.origin, location.pathname))
    }
  });
};
RedirectToLogin.displayName = 'RedirectToLogin';

export { RedirectToLogin as default };
