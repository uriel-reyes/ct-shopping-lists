import _taggedTemplateLiteral from '@babel/runtime-corejs3/helpers/esm/taggedTemplateLiteral';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _pt from 'prop-types';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _Array$isArray from '@babel/runtime-corejs3/core-js-stable/array/is-array';
import _JSON$stringify from '@babel/runtime-corejs3/core-js-stable/json/stringify';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _trimInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/trim';
import _startsWithInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/starts-with';
import { useReducer, useRef, useCallback, useState, useEffect } from 'react';
import { useApolloClient } from '@apollo/client/react';
import { useFeatureToggles } from '@flopflip/react-broadcast';
import { oneLineTrim } from 'common-tags';
import debounce from 'debounce-async';
import { defineMessages, useIntl, FormattedMessage } from 'react-intl';
import { useHistory } from 'react-router-dom';
import { useApplicationContext } from '@commercetools-frontend/application-shell-connectors';
import { SUPPORT_PORTAL_URL, LOGOUT_REASONS, GRAPHQL_TARGETS, MC_API_PROXY_TARGETS } from '@commercetools-frontend/constants';
import { hasSomePermissions } from '@commercetools-frontend/permissions';
import { useAsyncDispatch, actions } from '@commercetools-frontend/sdk';
import { l as location } from './use-is-served-by-proxy-77984220.esm.js';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import _sliceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/slice';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _findIndexInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find-index';
import { css, keyframes, ClassNames } from '@emotion/react';
import Fuse from 'fuse.js';
import last from 'lodash/last';
import { customProperties } from '@commercetools-uikit/design-system';
import { AngleThinRightIcon, SearchIcon } from '@commercetools-uikit/icons';
import LoadingSpinner from '@commercetools-uikit/loading-spinner';
import { jsxs, jsx } from '@emotion/react/jsx-runtime';
import { B as ButlerContainer, p as pimIndexerStates } from './index-2b55a829.esm.js';
import _Promise from '@babel/runtime-corejs3/core-js-stable/promise';
import _reduceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import './index-89e5711a.esm.js';
import '@babel/runtime-corejs3/core-js-stable/object/entries';
import '@babel/runtime-corejs3/core-js-stable/reflect/has';
import '@reduxjs/toolkit';
import 'lodash/mapValues';
import 'omit-empty-es';
import 'redux-thunk';
import '@commercetools-frontend/notifications';
import '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import '@commercetools-frontend/sentry';
import '@commercetools-frontend/react-notifications';
import 'redux-logger';
import '@emotion/styled/base';
import '@commercetools-frontend/application-components';
import '@commercetools-frontend/i18n';
import './oidc-da8526e3.esm.js';
import '@babel/runtime-corejs3/core-js-stable/url';
import '@commercetools-uikit/spacings';
import '@commercetools-uikit/flat-button';
import '@babel/runtime-corejs3/helpers/objectDestructuringEmpty';
import '@babel/runtime-corejs3/helpers/extends';
import 'memoize-one';
import 'react-select';
import '@commercetools-uikit/accessible-hidden';
import '@commercetools-uikit/select-input';
import '@commercetools-frontend/assets/images/ct-logo.svg';
import '@commercetools-frontend/browser-history';
import '@commercetools-frontend/l10n';
import '@babel/runtime-corejs3/core-js-stable/reflect/construct';
import '@babel/runtime-corejs3/helpers/classCallCheck';
import '@babel/runtime-corejs3/helpers/createClass';
import '@babel/runtime-corejs3/helpers/inherits';
import '@babel/runtime-corejs3/helpers/possibleConstructorReturn';
import '@babel/runtime-corejs3/helpers/getPrototypeOf';
import '@babel/runtime-corejs3/core-js-stable/object/from-entries';
import '@babel/runtime-corejs3/core-js-stable/instance/flags';
import '@flopflip/combine-adapters';
import '@flopflip/http-adapter';
import '@flopflip/launchdarkly-adapter';
import 'react-redux';
import 'lodash/upperFirst';
import '@commercetools-uikit/design-system/materials/resets.css';
import '@commercetools-frontend/application-config/ssr';
import '@babel/runtime-corejs3/core-js-stable/instance/some';
import '@commercetools-frontend/actions-global';

function _EMOTION_STRINGIFIED_CSS_ERROR__$1() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
var _ref$1 = process.env.NODE_ENV === "production" ? {
  name: "13n9jnb",
  styles: "align-self:center;>*{display:block;}"
} : {
  name: "1qkkrpz-ButlerCommand",
  styles: "align-self:center;>*{display:block;};label:ButlerCommand;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dGxlci1jb21tYW5kLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRGdCIiwiZmlsZSI6ImJ1dGxlci1jb21tYW5kLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vdXNlRXZlbnRIYW5kbGVyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgY3VzdG9tUHJvcGVydGllcyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgQW5nbGVUaGluUmlnaHRJY29uIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvaWNvbnMnO1xuaW1wb3J0IHR5cGUgeyBDb21tYW5kIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG50eXBlIFByb3BzID0ge1xuICBjb21tYW5kOiBDb21tYW5kO1xuICBpc1NlbGVjdGVkPzogYm9vbGVhbjtcbiAgb25DbGljazogTW91c2VFdmVudEhhbmRsZXI8SFRNTERpdkVsZW1lbnQ+O1xuICBvbk1vdXNlRW50ZXI6IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50Pjtcbn07XG5cbmNvbnN0IEJ1dGxlckNvbW1hbmQgPSAocHJvcHM6IFByb3BzKSA9PiAoXG4gIDxkaXZcbiAgICBrZXk9e3Byb3BzLmNvbW1hbmQuaWR9XG4gICAgZGF0YS10ZXN0aWQ9e2BxdWljay1hY2Nlc3MtcmVzdWx0KCR7cHJvcHMuY29tbWFuZC5pZH0pYH1cbiAgICBhcmlhLWN1cnJlbnQ9e3Byb3BzLmlzU2VsZWN0ZWQgPT09IHRydWUgPyAndHJ1ZScgOiAnZmFsc2UnfVxuICAgIGNzcz17Y3NzYFxuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIHBhZGRpbmc6IDAgJHtjdXN0b21Qcm9wZXJ0aWVzLnNwYWNpbmdNfTtcbiAgICAgIGhlaWdodDogMzZweDtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiAyMDA7XG4gICAgICBsaW5lLWhlaWdodDogMzZweDtcbiAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICR7cHJvcHMuaXNTZWxlY3RlZCA9PT0gdHJ1ZVxuICAgICAgICA/IGBcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VzdG9tUHJvcGVydGllcy5jb2xvckFjY2VudH07XG4gICAgICAgICAgICBjb2xvcjogJHtjdXN0b21Qcm9wZXJ0aWVzLmNvbG9yU3VyZmFjZX07XG4gICAgICAgICAgYFxuICAgICAgICA6ICcnfVxuICAgIGB9XG4gICAgb25Nb3VzZUVudGVyPXtwcm9wcy5vbk1vdXNlRW50ZXJ9XG4gICAgb25DbGljaz17cHJvcHMub25DbGlja31cbiAgPlxuICAgIDxkaXZcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBmbGV4OiAxIGF1dG87XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY29tbWFuZC50ZXh0fVxuICAgIDwvZGl2PlxuICAgIHsoKEFycmF5LmlzQXJyYXkocHJvcHMuY29tbWFuZC5zdWJDb21tYW5kcykgJiZcbiAgICAgIHByb3BzLmNvbW1hbmQuc3ViQ29tbWFuZHMubGVuZ3RoID4gMCkgfHxcbiAgICAgIHR5cGVvZiBwcm9wcy5jb21tYW5kLnN1YkNvbW1hbmRzID09PSAnZnVuY3Rpb24nKSAmJiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgICA+ICoge1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgfVxuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8QW5nbGVUaGluUmlnaHRJY29uXG4gICAgICAgICAgc2l6ZT1cIm1lZGl1bVwiXG4gICAgICAgICAgY29sb3I9e3Byb3BzLmlzU2VsZWN0ZWQgPyAnc3VyZmFjZScgOiAnbmV1dHJhbDYwJ31cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICl9XG4gIDwvZGl2PlxuKTtcblxuQnV0bGVyQ29tbWFuZC5kaXNwbGF5TmFtZSA9ICdCdXRsZXJDb21tYW5kJztcblxuZXhwb3J0IGRlZmF1bHQgQnV0bGVyQ29tbWFuZDtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "lhzw0z",
  styles: "flex:1 auto;white-space:nowrap;overflow:hidden;text-overflow:ellipsis"
} : {
  name: "zq3ooq-ButlerCommand",
  styles: "flex:1 auto;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;label:ButlerCommand;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dGxlci1jb21tYW5kLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQ2MiLCJmaWxlIjoiYnV0bGVyLWNvbW1hbmQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW91c2VFdmVudEhhbmRsZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBjdXN0b21Qcm9wZXJ0aWVzIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBBbmdsZVRoaW5SaWdodEljb24gfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9pY29ucyc7XG5pbXBvcnQgdHlwZSB7IENvbW1hbmQgfSBmcm9tICcuLi90eXBlcyc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNvbW1hbmQ6IENvbW1hbmQ7XG4gIGlzU2VsZWN0ZWQ/OiBib29sZWFuO1xuICBvbkNsaWNrOiBNb3VzZUV2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD47XG4gIG9uTW91c2VFbnRlcjogTW91c2VFdmVudEhhbmRsZXI8SFRNTERpdkVsZW1lbnQ+O1xufTtcblxuY29uc3QgQnV0bGVyQ29tbWFuZCA9IChwcm9wczogUHJvcHMpID0+IChcbiAgPGRpdlxuICAgIGtleT17cHJvcHMuY29tbWFuZC5pZH1cbiAgICBkYXRhLXRlc3RpZD17YHF1aWNrLWFjY2Vzcy1yZXN1bHQoJHtwcm9wcy5jb21tYW5kLmlkfSlgfVxuICAgIGFyaWEtY3VycmVudD17cHJvcHMuaXNTZWxlY3RlZCA9PT0gdHJ1ZSA/ICd0cnVlJyA6ICdmYWxzZSd9XG4gICAgY3NzPXtjc3NgXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgcGFkZGluZzogMCAke2N1c3RvbVByb3BlcnRpZXMuc3BhY2luZ019O1xuICAgICAgaGVpZ2h0OiAzNnB4O1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDIwMDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAzNnB4O1xuICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgJHtwcm9wcy5pc1NlbGVjdGVkID09PSB0cnVlXG4gICAgICAgID8gYFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtjdXN0b21Qcm9wZXJ0aWVzLmNvbG9yQWNjZW50fTtcbiAgICAgICAgICAgIGNvbG9yOiAke2N1c3RvbVByb3BlcnRpZXMuY29sb3JTdXJmYWNlfTtcbiAgICAgICAgICBgXG4gICAgICAgIDogJyd9XG4gICAgYH1cbiAgICBvbk1vdXNlRW50ZXI9e3Byb3BzLm9uTW91c2VFbnRlcn1cbiAgICBvbkNsaWNrPXtwcm9wcy5vbkNsaWNrfVxuICA+XG4gICAgPGRpdlxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGZsZXg6IDEgYXV0bztcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICBgfVxuICAgID5cbiAgICAgIHtwcm9wcy5jb21tYW5kLnRleHR9XG4gICAgPC9kaXY+XG4gICAgeygoQXJyYXkuaXNBcnJheShwcm9wcy5jb21tYW5kLnN1YkNvbW1hbmRzKSAmJlxuICAgICAgcHJvcHMuY29tbWFuZC5zdWJDb21tYW5kcy5sZW5ndGggPiAwKSB8fFxuICAgICAgdHlwZW9mIHByb3BzLmNvbW1hbmQuc3ViQ29tbWFuZHMgPT09ICdmdW5jdGlvbicpICYmIChcbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAgICAgID4gKiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICB9XG4gICAgICAgIGB9XG4gICAgICA+XG4gICAgICAgIDxBbmdsZVRoaW5SaWdodEljb25cbiAgICAgICAgICBzaXplPVwibWVkaXVtXCJcbiAgICAgICAgICBjb2xvcj17cHJvcHMuaXNTZWxlY3RlZCA/ICdzdXJmYWNlJyA6ICduZXV0cmFsNjAnfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKX1cbiAgPC9kaXY+XG4pO1xuXG5CdXRsZXJDb21tYW5kLmRpc3BsYXlOYW1lID0gJ0J1dGxlckNvbW1hbmQnO1xuXG5leHBvcnQgZGVmYXVsdCBCdXRsZXJDb21tYW5kO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const ButlerCommand = props => {
  var _context;
  return jsxs("div", {
    "data-testid": "quick-access-result(".concat(props.command.id, ")"),
    "aria-current": props.isSelected === true ? 'true' : 'false',
    css: /*#__PURE__*/css("display:flex;padding:0 ", customProperties.spacingM, ";height:36px;font-size:16px;font-weight:200;line-height:36px;cursor:default;", props.isSelected === true ? _concatInstanceProperty(_context = "\n            background: ".concat(customProperties.colorAccent, ";\n            color: ")).call(_context, customProperties.colorSurface, ";\n          ") : '', ";" + (process.env.NODE_ENV === "production" ? "" : ";label:ButlerCommand;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dGxlci1jb21tYW5kLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQlkiLCJmaWxlIjoiYnV0bGVyLWNvbW1hbmQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW91c2VFdmVudEhhbmRsZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBjdXN0b21Qcm9wZXJ0aWVzIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBBbmdsZVRoaW5SaWdodEljb24gfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9pY29ucyc7XG5pbXBvcnQgdHlwZSB7IENvbW1hbmQgfSBmcm9tICcuLi90eXBlcyc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNvbW1hbmQ6IENvbW1hbmQ7XG4gIGlzU2VsZWN0ZWQ/OiBib29sZWFuO1xuICBvbkNsaWNrOiBNb3VzZUV2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD47XG4gIG9uTW91c2VFbnRlcjogTW91c2VFdmVudEhhbmRsZXI8SFRNTERpdkVsZW1lbnQ+O1xufTtcblxuY29uc3QgQnV0bGVyQ29tbWFuZCA9IChwcm9wczogUHJvcHMpID0+IChcbiAgPGRpdlxuICAgIGtleT17cHJvcHMuY29tbWFuZC5pZH1cbiAgICBkYXRhLXRlc3RpZD17YHF1aWNrLWFjY2Vzcy1yZXN1bHQoJHtwcm9wcy5jb21tYW5kLmlkfSlgfVxuICAgIGFyaWEtY3VycmVudD17cHJvcHMuaXNTZWxlY3RlZCA9PT0gdHJ1ZSA/ICd0cnVlJyA6ICdmYWxzZSd9XG4gICAgY3NzPXtjc3NgXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgcGFkZGluZzogMCAke2N1c3RvbVByb3BlcnRpZXMuc3BhY2luZ019O1xuICAgICAgaGVpZ2h0OiAzNnB4O1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDIwMDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAzNnB4O1xuICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgJHtwcm9wcy5pc1NlbGVjdGVkID09PSB0cnVlXG4gICAgICAgID8gYFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtjdXN0b21Qcm9wZXJ0aWVzLmNvbG9yQWNjZW50fTtcbiAgICAgICAgICAgIGNvbG9yOiAke2N1c3RvbVByb3BlcnRpZXMuY29sb3JTdXJmYWNlfTtcbiAgICAgICAgICBgXG4gICAgICAgIDogJyd9XG4gICAgYH1cbiAgICBvbk1vdXNlRW50ZXI9e3Byb3BzLm9uTW91c2VFbnRlcn1cbiAgICBvbkNsaWNrPXtwcm9wcy5vbkNsaWNrfVxuICA+XG4gICAgPGRpdlxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGZsZXg6IDEgYXV0bztcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICBgfVxuICAgID5cbiAgICAgIHtwcm9wcy5jb21tYW5kLnRleHR9XG4gICAgPC9kaXY+XG4gICAgeygoQXJyYXkuaXNBcnJheShwcm9wcy5jb21tYW5kLnN1YkNvbW1hbmRzKSAmJlxuICAgICAgcHJvcHMuY29tbWFuZC5zdWJDb21tYW5kcy5sZW5ndGggPiAwKSB8fFxuICAgICAgdHlwZW9mIHByb3BzLmNvbW1hbmQuc3ViQ29tbWFuZHMgPT09ICdmdW5jdGlvbicpICYmIChcbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAgICAgID4gKiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICB9XG4gICAgICAgIGB9XG4gICAgICA+XG4gICAgICAgIDxBbmdsZVRoaW5SaWdodEljb25cbiAgICAgICAgICBzaXplPVwibWVkaXVtXCJcbiAgICAgICAgICBjb2xvcj17cHJvcHMuaXNTZWxlY3RlZCA/ICdzdXJmYWNlJyA6ICduZXV0cmFsNjAnfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKX1cbiAgPC9kaXY+XG4pO1xuXG5CdXRsZXJDb21tYW5kLmRpc3BsYXlOYW1lID0gJ0J1dGxlckNvbW1hbmQnO1xuXG5leHBvcnQgZGVmYXVsdCBCdXRsZXJDb21tYW5kO1xuIl19 */"),
    onMouseEnter: props.onMouseEnter,
    onClick: props.onClick,
    children: [jsx("div", {
      css: _ref2,
      children: props.command.text
    }), (_Array$isArray(props.command.subCommands) && props.command.subCommands.length > 0 || typeof props.command.subCommands === 'function') && jsx("div", {
      css: _ref$1,
      children: jsx(AngleThinRightIcon, {
        size: "medium",
        color: props.isSelected ? 'surface' : 'neutral60'
      })
    })]
  }, props.command.id);
};
ButlerCommand.propTypes = process.env.NODE_ENV !== "production" ? {
  command: _pt.any.isRequired,
  isSelected: _pt.bool,
  onClick: _pt.func.isRequired,
  onMouseEnter: _pt.func.isRequired
} : {};
ButlerCommand.displayName = 'ButlerCommand';

var messages = defineMessages({
  inputPlacehoder: {
    id: 'QuickAccess.inputPlaceholder',
    defaultMessage: 'Go to...'
  },
  offline: {
    id: 'QuickAccess.offline',
    defaultMessage: 'Offline'
  },
  noResults: {
    id: 'QuickAccess.noResults',
    defaultMessage: 'No results found'
  },
  // create-commands
  setResourceLanguage: {
    id: 'QuickAccess.setResourceLanguage',
    defaultMessage: 'Set Resource Language'
  },
  openDashboard: {
    id: 'QuickAccess.openDashboard',
    defaultMessage: 'Open Dashboard'
  },
  openProducts: {
    id: 'QuickAccess.openProducts',
    defaultMessage: 'Open Products'
  },
  openProductList: {
    id: 'QuickAccess.openProductList',
    defaultMessage: 'Open Product List'
  },
  openProductVariantGeneral: {
    id: 'QuickAccess.openProductVariantGeneral',
    defaultMessage: 'General'
  },
  openProductVariantList: {
    id: 'QuickAccess.openProductVariantList',
    defaultMessage: 'Variants'
  },
  openProductVariantSearch: {
    id: 'QuickAccess.openProductVariantSearch',
    defaultMessage: 'Int. / Ext. Search'
  },
  openModifiedProducts: {
    id: 'QuickAccess.openModifiedProducts',
    defaultMessage: 'Open Review Modified Products'
  },
  openPimSearch: {
    id: 'QuickAccess.openPimSearch',
    defaultMessage: 'Open PIM Search'
  },
  openAddProducts: {
    id: 'QuickAccess.openAddProducts',
    defaultMessage: 'Open Add Products'
  },
  openCategories: {
    id: 'QuickAccess.openCategories',
    defaultMessage: 'Open Categories'
  },
  openCategoriesList: {
    id: 'QuickAccess.openCategoriesList',
    defaultMessage: 'Open Categories List'
  },
  openCategoriesSearch: {
    id: 'QuickAccess.openCategoriesSearch',
    defaultMessage: 'Open Categories Search'
  },
  openAddCategory: {
    id: 'QuickAccess.openAddCategory',
    defaultMessage: 'Open Add Category'
  },
  openCustomers: {
    id: 'QuickAccess.openCustomers',
    defaultMessage: 'Open Customers'
  },
  openCustomersList: {
    id: 'QuickAccess.openCustomersList',
    defaultMessage: 'Open Customers List'
  },
  openAddCustomer: {
    id: 'QuickAccess.openAddCustomer',
    defaultMessage: 'Open Add Customer'
  },
  openCustomerGroupsList: {
    id: 'QuickAccess.openCustomerGroupsList',
    defaultMessage: 'Open Customer Groups List'
  },
  openAddCustomerGroup: {
    id: 'QuickAccess.openAddCustomerGroup',
    defaultMessage: 'Open Add Customer Group'
  },
  openOrders: {
    id: 'QuickAccess.openOrders',
    defaultMessage: 'Open Orders'
  },
  openOrdersList: {
    id: 'QuickAccess.openOrdersList',
    defaultMessage: 'Open Orders List'
  },
  openAddOrder: {
    id: 'QuickAccess.openAddOrder',
    defaultMessage: 'Open Add Order'
  },
  openDiscounts: {
    id: 'QuickAccess.openDiscounts',
    defaultMessage: 'Open Discounts'
  },
  openProductDiscountsList: {
    id: 'QuickAccess.openProductDiscountsList',
    defaultMessage: 'Open Product Discounts List'
  },
  openCartDiscountsList: {
    id: 'QuickAccess.openCartDiscountsList',
    defaultMessage: 'Open Cart Discounts List'
  },
  openDiscountCodesList: {
    id: 'QuickAccess.openDiscountCodesList',
    defaultMessage: 'Open Discount Codes List'
  },
  openAddDiscount: {
    id: 'QuickAccess.openAddDiscount',
    defaultMessage: 'Open Add Discount'
  },
  openAddProductDiscount: {
    id: 'QuickAccess.openAddProductDiscount',
    defaultMessage: 'Open Add Product Discount'
  },
  openAddCartDiscount: {
    id: 'QuickAccess.openAddCartDiscount',
    defaultMessage: 'Open Add Cart Discount'
  },
  openAddDiscountCode: {
    id: 'QuickAccess.openAddDiscountCode',
    defaultMessage: 'Open Add Discount Code'
  },
  openSettings: {
    id: 'QuickAccess.openSettings',
    defaultMessage: 'Open Settings'
  },
  openProjectSettings: {
    id: 'QuickAccess.openProjectSettings',
    defaultMessage: 'Open Project Settings'
  },
  openProjectSettingsInternationalTab: {
    id: 'QuickAccess.openProjectSettingsInternationalTab',
    defaultMessage: 'Open Project Settings • International'
  },
  openProjectSettingsTaxesTab: {
    id: 'QuickAccess.openProjectSettingsTaxesTab',
    defaultMessage: 'Open Project Settings • Taxes'
  },
  openProjectSettingsShippingMethodsTab: {
    id: 'QuickAccess.openProjectSettingsShippingMethodsTab',
    defaultMessage: 'Open Project Settings • Shipping Methods'
  },
  openProjectSettingsChannelsTab: {
    id: 'QuickAccess.openProjectSettingsChannelsTab',
    defaultMessage: 'Open Project Settings • Channels'
  },
  openProjectSettingsStoresTab: {
    id: 'QuickAccess.openProjectSettingsStoresTab',
    defaultMessage: 'Open Project Settings • Stores'
  },
  openProductTypesSettings: {
    id: 'QuickAccess.openProductTypesSettings',
    defaultMessage: 'Open Product Types Settings'
  },
  openDeveloperSettings: {
    id: 'QuickAccess.openDeveloperSettings',
    defaultMessage: 'Open Developer Settings'
  },
  openCustomApplicationsSettings: {
    id: 'QuickAccess.openCustomApplicationsSettings',
    defaultMessage: 'Open Custom Applications Settings'
  },
  openApiClientsList: {
    id: 'QuickAccess.openApiClientsList',
    defaultMessage: 'Open API Clients'
  },
  openAddApiClient: {
    id: 'QuickAccess.openAddApiClient',
    defaultMessage: 'Open Add API Client'
  },
  openSupport: {
    id: 'QuickAccess.openSupport',
    defaultMessage: 'Open Support'
  },
  openMyProfile: {
    id: 'QuickAccess.openMyProfile',
    defaultMessage: 'Open My Profile'
  },
  showPrivacyPolicy: {
    id: 'QuickAccess.showPrivacyPolicy',
    defaultMessage: 'Show Privacy Policy'
  },
  logout: {
    id: 'QuickAccess.logout',
    defaultMessage: 'Logout'
  },
  useProject: {
    id: 'QuickAccess.useProject',
    defaultMessage: 'Switch to project "{projectName}"'
  },
  openManageProjects: {
    id: 'QuickAccess.openManageProject',
    defaultMessage: 'Open Manage Projects'
  },
  openManageOrganizations: {
    id: 'QuickAccess.openManageOrganizations',
    defaultMessage: 'Open Manage Organizations'
  },
  // subcommands
  openVariantById: {
    id: 'QuickAccess.openVariantById',
    defaultMessage: 'Open Variant "{id}" (id)'
  },
  openVariantByKey: {
    id: 'QuickAccess.openVariantByKey',
    defaultMessage: 'Open Variant "{key}" (key)'
  },
  openVariantBySku: {
    id: 'QuickAccess.openVariantBySku',
    defaultMessage: 'Open Variant "{sku}" (sku)'
  },
  showProduct: {
    id: 'QuickAccess.showProduct',
    defaultMessage: 'Show Product "{productName}"'
  },
  showProductVariant: {
    id: 'QuickAccess.showProductVariant',
    defaultMessage: 'Show Product Variant "{variantName}"'
  },
  showProductVariantAttributes: {
    id: 'QuickAccess.showProductVariantAttributes',
    defaultMessage: 'Show Attributes'
  },
  showProductVariantImages: {
    id: 'QuickAccess.showProductVariantImages',
    defaultMessage: 'Show Images'
  },
  showProductVariantPrices: {
    id: 'QuickAccess.showProductVariantPrices',
    defaultMessage: 'Show Prices'
  },
  showProductVariantInventory: {
    id: 'QuickAccess.showProductVariantInventory',
    defaultMessage: 'Show Inventory'
  }
});

var _templateObject$3, _templateObject2$2;
function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context12, _context13; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context12 = ownKeys(Object(t), !0)).call(_context12, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context13 = ownKeys(Object(t))).call(_context13, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const isSelectAllCombo = event => event.key === 'a' && event.metaKey && !event.ctrlKey && !event.altKey && !event.shiftKey;
const isCloseCombo = event => event.key === 'Escape' && !event.metaKey && !event.ctrlKey && !event.altKey && !event.shiftKey;
const getPlatform = () => {
  var _context, _context2, _context3, _context4;
  if (_includesInstanceProperty(_context = navigator.appVersion).call(_context, 'Win')) return 'windows';
  if (_includesInstanceProperty(_context2 = navigator.appVersion).call(_context2, 'Mac')) return 'macos';
  if (_includesInstanceProperty(_context3 = navigator.appVersion).call(_context3, 'X11')) return 'unix';
  if (_includesInstanceProperty(_context4 = navigator.appVersion).call(_context4, 'Linux')) return 'linux';
  return null;
};
const hasNewWindowModifier = event => {
  const platform = getPlatform();
  switch (platform) {
    case 'macos':
      return event.metaKey;
    default:
      return event.ctrlKey;
  }
};
const shakeAnimation = keyframes(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteral(["\n  from,\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n\n  14%,\n  42%,\n  70% {\n    transform: translate3d(-3px, 0, 0);\n  }\n\n  28%,\n  56%,\n  84% {\n    transform: translate3d(3px, 0, 0);\n  }\n"])));
const initialState = {
  hasNetworkError: false,
  isLoading: false,
  searchText: '',
  selectedResult: -1,
  // Used for UX when browsing through history
  enableHistory: true,
  results: [],
  stack: []
};
const reducer = function () {
  var _context5;
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  let action = arguments.length > 1 ? arguments[1] : undefined;
  switch (action.type) {
    case 'networkError':
      return _objectSpread(_objectSpread({}, state), {}, {
        hasNetworkError: action.payload
      });
    case 'loading':
      return _objectSpread(_objectSpread({}, state), {}, {
        isLoading: action.payload
      });
    case 'selectedResult':
      return _objectSpread(_objectSpread({}, state), {}, {
        selectedResult: action.payload
      });
    case 'incrementSelectedResult':
      return _objectSpread(_objectSpread({}, state), {}, {
        selectedResult: state.selectedResult === state.results.length - 1 ? 0 : state.selectedResult + 1,
        enableHistory: false
      });
    case 'decrementSelectedResult':
      return _objectSpread(_objectSpread({}, state), {}, {
        selectedResult: state.selectedResult < 1 ? state.results.length - 1 : state.selectedResult - 1,
        enableHistory: false
      });
    case 'pickCommandFromHistory':
      return _objectSpread(_objectSpread({}, state), {}, {
        selectedResult: 0,
        searchText: action.payload.searchText,
        results: action.payload.results,
        stack: []
        // The history does not get changed here, it will be changed along
        // with the regular flow.
      });

    case 'setNextCommands':
      return _objectSpread(_objectSpread({}, state), {}, {
        stack: [...state.stack, {
          searchText: state.searchText,
          results: state.results,
          selectedResult: state.selectedResult
        }],
        selectedResult: 0,
        enableHistory: false,
        results: action.payload.results
      });
    case 'setPrevCommands':
      return _objectSpread(_objectSpread({}, state), {}, {
        searchText: action.payload.searchText,
        results: action.payload.results,
        selectedResult: 0,
        enableHistory: false,
        // omit last item
        stack: _sliceInstanceProperty(_context5 = state.stack).call(_context5, 0, -1)
      });
    case 'searchText':
      return _objectSpread(_objectSpread({}, state), {}, {
        searchText: action.payload,
        // clear network error when search text is cleared, so that users
        // are tempted to retry
        hasNetworkError: action.payload.length > 0 && state.hasNetworkError
      });
    case 'setSearchTextResults':
      return _objectSpread(_objectSpread({}, state), {}, {
        results: action.payload,
        selectedResult: action.payload.length > 0 ? 0 : -1,
        enableHistory: true,
        stack: []
      });
    case 'resetSearchText':
      return _objectSpread(_objectSpread({}, state), {}, {
        searchText: '',
        results: [],
        selectedResult: -1
      });
    case 'resetResultsWhenClosing':
      return _objectSpread(_objectSpread({}, state), {}, {
        selectedResult: -1,
        enableHistory: true
      });
    case 'reset':
      return initialState;
    default:
      return state;
  }
};
var _ref = process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "vnvgom-Butler",
  styles: "display:flex;label:Butler;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const Butler = props => {
  const intl = useIntl();
  const _useReducer = useReducer(reducer, initialState),
    _useReducer2 = _slicedToArray(_useReducer, 2),
    state = _useReducer2[0],
    dispatch = _useReducer2[1];
  const shouldSelectFieldText = useRef(false);
  const isNewWindowCombo = useRef(false);
  const skipNextSelection = useRef(false);
  const searchContainerRef = useRef(null);
  const searchInputRef = useRef(null);
  const setHasNetworkError = useCallback(() => {
    dispatch({
      type: 'networkError',
      payload: true
    });
  }, []);
  const unsetHasNetworkError = useCallback(() => {
    dispatch({
      type: 'networkError',
      payload: false
    });
  }, []);
  const setIsLoading = useCallback(() => {
    dispatch({
      type: 'loading',
      payload: true
    });
  }, []);
  const unsetIsLoading = useCallback(() => {
    dispatch({
      type: 'loading',
      payload: false
    });
  }, []);

  // Destructure functions from props to reference them in the hook dependency list
  const searchFromParent = props.search,
    onCloseFromParent = props.onClose,
    executeCommandFromParent = props.executeCommand,
    onHistoryEntriesChangeFromParent = props.onHistoryEntriesChange,
    getNextCommandsFromParent = props.getNextCommands;
  const shake = useCallback(() => {
    if (searchContainerRef.current) {
      searchContainerRef.current.classList.remove(props.classNameShakeAnimation);
      // -> triggering reflow
      // eslint-disable-next-line no-void
      void searchContainerRef.current.offsetWidth;
      searchContainerRef.current.classList.add(props.classNameShakeAnimation);
    }
  }, [props.classNameShakeAnimation]);
  const execute = useCallback((command, meta) => {
    var _context6;
    // Only main entries get added to history, so when a subcommand is executed,
    // we add the main command of it to the history (the top-level command).
    //
    // The key to identify history entries by is always the searchText
    // There will never be two history entries with the same searchText
    const entry = state.stack.length === 0 ?
    // The stack is empty, so we are executing a top-level command
    {
      searchText: state.searchText,
      results: state.results
    } :
    // We are executing a subcommand, so we get the top-level command for it,
    // which is at the bottom of the stack.
    {
      searchText: state.stack[0].searchText,
      results: state.stack[0].results
    };

    // Add the entry to the history, while excluding any earlier history entry
    // with the same search text. This effectively "moves" that entry to the
    // top of the history (with the most recent results), or appends a new entry
    // when it didn't exist before.
    onHistoryEntriesChangeFromParent([..._filterInstanceProperty(_context6 = props.historyEntries).call(_context6, command => command.searchText !== entry.searchText), entry]);
    dispatch({
      type: 'resetSearchText'
    });
    onCloseFromParent();
    executeCommandFromParent(command, meta);
  }, [executeCommandFromParent, onCloseFromParent, onHistoryEntriesChangeFromParent, props.historyEntries, state.results, state.searchText, state.stack]);
  const handleKeyDown = useCallback(event => {
    // Preventing cursor jumps can only happen in onKeyDown, but not in onKeyUp
    event.persist();

    // We want to know when the user presses cmd+enter (cmd being a meta key).
    // We are only told about this in keyDown, but not in keyUp, so we need
    // to handle it here
    if (event.key === 'Enter' && hasNewWindowModifier(event)) {
      isNewWindowCombo.current = true;
      return;
    }

    // Avoid selecting the whole page when user selectes everything with
    // a keyboard shortcut. There is probably a better way to do this though.
    // This prevents the whole page from being selected in case the user
    // 1) opens the search box
    // 2) types into it
    // 3) selects all text using cmd+a
    // 4) closes the search box with esc
    // Without this handling, the whole page would now be selected
    if (isSelectAllCombo(event)) {
      // This stops the browser from selecting anything
      event.preventDefault();
      if (searchInputRef.current) {
        // This selects the text in the search input
        searchInputRef.current.setSelectionRange(0, state.searchText.length);
      }
      return;
    }

    // avoid interfering with other key combinations using modifier keys
    if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) return;
    if (isCloseCombo(event)) return;

    // skip next mouseEnter to avoid setting selectedResult when cursor just
    // happens to be where the results will pop up
    skipNextSelection.current = true;
    if (event.key === 'ArrowDown') {
      // prevent cursor from jumping to end of text input
      event.preventDefault();
      dispatch({
        type: 'incrementSelectedResult'
      });
      return;
    }
    if (event.key === 'ArrowUp') {
      // browse through history
      if (state.searchText.length === 0 || state.selectedResult < 1 && state.enableHistory) {
        var _context7;
        shouldSelectFieldText.current = true;
        const selectedIndex = state.searchText.length === 0 ?
        // When going back the first step
        -1 :
        // When going back more than one step
        _findIndexInstanceProperty(_context7 = props.historyEntries).call(_context7, command => command.searchText === state.searchText);
        // Pick the previous command from the history
        const prevCommand = selectedIndex === -1 ?
        // previous command on top of the history when going back on
        // first step
        last(props.historyEntries) :
        // previous command is deeper down
        // When the history does not exist (negative index), then
        // this implicitly returns undefined
        props.historyEntries[selectedIndex - 1];
        // Skip when no previous entry exists in the history
        if (!prevCommand) return;
        dispatch({
          type: 'pickCommandFromHistory',
          payload: {
            searchText: prevCommand.searchText,
            results: prevCommand.results
          }
        });
        return;
      }
      // prevent cursor from jumping to beginning of text input
      event.preventDefault();
      dispatch({
        type: 'decrementSelectedResult'
      });
      return;
    }
    if (state.selectedResult > -1) {
      if (event.key === 'ArrowRight') {
        const command = state.results[state.selectedResult];
        const searchText = state.searchText;
        const isCursorAtEnd = searchInputRef.current && state.searchText.length === searchInputRef.current.selectionStart;
        const isEverythingSelected = searchInputRef.current && searchInputRef.current.selectionStart === 0 && state.searchText.length === searchInputRef.current.selectionEnd;

        // only allow diving in when cursor is at end of input or when
        // the complete text is selected (when browsing through history)
        if (!isCursorAtEnd && !isEverythingSelected) return;
        unsetHasNetworkError();

        // NOTE: since we need to fetch the "next command", which is an async operation,
        // we use a IIFE to process that and eventually update the state.
        (async () => {
          if (command) {
            const nextCommands = await getNextCommandsFromParent(command);
            // avoid moving cursor when there are sub-options
            if (nextCommands.length > 0) {
              // Ensure the search text has not changed while we were loading
              // the next results, otherwise we'd interrupt the user.
              // Throw away the results in case the search text has changed.
              if (state.searchText === searchText) {
                dispatch({
                  type: 'setNextCommands',
                  payload: {
                    results: nextCommands
                  }
                });
              }
              return;
            }
          }
          shake();
        })();
        return;
      }
      if (event.key === 'ArrowLeft') {
        // go left in stack
        const prevCommand = last(state.stack);

        // do nothing when we can't go left anymore
        if (!prevCommand) return;

        // prevent cursor from jumping a char to the left in text input
        event.preventDefault();
        dispatch({
          type: 'setPrevCommands',
          payload: {
            searchText: prevCommand.searchText,
            results: prevCommand.results
          }
        });
        return;
      }
    }
  }, [getNextCommandsFromParent, props.historyEntries, shake, state, unsetHasNetworkError]);
  const handleKeyUp = useCallback(event => {
    // setting the selection can only happen in onKeyUp
    if (shouldSelectFieldText.current) {
      const input = event.target;
      input.focus();
      input.select();
      shouldSelectFieldText.current = false;
    }
    if (event.key !== 'Enter' && !isNewWindowCombo.current) return true;

    // User just triggered the search
    if (state.selectedResult === -1) return true;

    // User had something selected and wants to go there
    execute(state.results[state.selectedResult], {
      openInNewTab: isNewWindowCombo.current
    });
    isNewWindowCombo.current = false;
    return true;
  }, [execute, state.results, state.selectedResult]);
  const handleChange = useCallback(event => {
    const searchText = event.target.value;
    if (_trimInstanceProperty(searchText).call(searchText).length === 0) {
      dispatch({
        type: 'reset'
      });
      return;
    }
    dispatch({
      type: 'searchText',
      payload: searchText
    });

    // A search via network is only triggered when there
    // are more than three characters. So no false loading
    // indication is given.
    if (_trimInstanceProperty(searchText).call(searchText).length > 3) {
      setIsLoading();
    }
    searchFromParent(searchText).then(asyncResults => {
      var _context8, _context9;
      unsetHasNetworkError();
      unsetIsLoading();
      const fuse = new Fuse(asyncResults, {
        keys: [{
          name: 'text',
          weight: 0.6
        }, {
          name: 'keywords',
          weight: 0.4
        }],
        minMatchCharLength: 2,
        includeScore: true
      });
      const searchResults = _sliceInstanceProperty(_context8 = _filterInstanceProperty(_context9 = fuse.search(searchText)
      // Filter out results with a matching score over 0.75
      ).call(_context9, result => result.score ? result.score < 0.75 : false)
      // Keep a maximal of 9 results
      ).call(_context8, 0, 9);
      dispatch({
        type: 'setSearchTextResults',
        payload: _mapInstanceProperty(searchResults).call(searchResults, result => result.item)
      });
    }, error => {
      // eslint-disable-next-line no-console
      if (process.env.NODE_ENV !== 'production') console.error(error);
      unsetIsLoading();
      setHasNetworkError();
    });
  }, [searchFromParent, setHasNetworkError, setIsLoading, unsetHasNetworkError, unsetIsLoading]);
  const handleContainerClick = useCallback(() => {
    dispatch({
      type: 'resetResultsWhenClosing'
    });
    onCloseFromParent();
  }, [onCloseFromParent]);
  const createCommandMouseEnterHandler = useCallback(index => () => {
    // In case the cursor happened to be in a location where a
    // result would appear, it would trigger onMouseEnter and the
    // result would be selected immediately. This is not something
    // a user would expect, hence we prevent it from happening.
    // The user has to move the cursor to an option explicitly for
    // it to become active. However, the user can always click and
    // that action will be triggered.
    if (skipNextSelection.current) {
      skipNextSelection.current = false;
      return;
    }

    // sets the selected result, mainly for the hover effect
    dispatch({
      type: 'selectedResult',
      payload: index
    });
  }, []);
  const createCommandClickHandler = useCallback(command => event => {
    execute(command, {
      openInNewTab: hasNewWindowModifier(event)
    });
  }, [execute]);
  return jsx(ButlerContainer, {
    onClick: handleContainerClick,
    "data-testid": "quick-access",
    tabIndex: -1,
    children: jsxs("div", {
      ref: searchContainerRef,
      css: /*#__PURE__*/css("background-color:", customProperties.colorSurface, ";border:0;border-radius:", customProperties.borderRadius4, ";min-height:40px;z-index:20002;width:400px;margin:40px auto;overflow:hidden;-webkit-box-shadow:0 10px 30px -8px rgba(0, 0, 0, 0.75);-moz-box-shadow:0 10px 30px -8px rgba(0, 0, 0, 0.75);box-shadow:0 10px 30px -8px rgba(0, 0, 0, 0.75);padding-bottom:", state.hasNetworkError ? '0' : customProperties.spacingS, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Butler;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
      onClick: event => {
        // Avoid closing when the searchContainer itself is clicked
        // If we don't do this, then the overlay will close when e.g.
        // the search input is clicked.
        event.stopPropagation();
        event.preventDefault();
      },
      children: [jsxs("div", {
        css: _ref,
        children: [jsx("label", {
          htmlFor: "quick-access-search-input",
          css: /*#__PURE__*/css("align-self:center;padding-left:", customProperties.spacingM, ";margin-top:", customProperties.spacingS, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Butler;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
          children: jsx(SearchIcon, {
            color: "neutral60"
          })
        }), jsx("input", {
          id: "quick-access-search-input",
          ref: searchInputRef,
          placeholder: intl.formatMessage(messages.inputPlacehoder),
          type: "text",
          css: /*#__PURE__*/css("width:100%;border:0;outline:0;font-size:22px;font-weight:300;padding:", customProperties.spacingM, " ", customProperties.spacingM, " ", customProperties.spacingS, " ", customProperties.spacingS, ";&::placeholder{color:", customProperties.colorNeutral60, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:Butler;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
          value: state.searchText,
          onChange: handleChange,
          onKeyDown: handleKeyDown,
          onKeyUp: handleKeyUp,
          autoFocus: true,
          autoComplete: "off",
          "data-testid": "quick-access-search-input"
        }), state.isLoading && jsx("div", {
          css: /*#__PURE__*/css("align-self:center;margin-top:", customProperties.spacingS, ";margin-right:", customProperties.spacingS, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Butler;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
          children: jsx(LoadingSpinner, {})
        })]
      }), ((_context10, _context11) => {
        if (state.hasNetworkError) return jsx("div", {
          css: /*#__PURE__*/css("overflow:hidden;white-space:nowrap;cursor:default;background:", customProperties.colorError, ";text-align:center;text-transform:uppercase;color:", customProperties.colorSurface, ";font-size:", customProperties.fontSizeSmall, ";padding:", customProperties.spacingXs, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Butler;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
          children: jsx(FormattedMessage, _objectSpread({}, messages.offline))
        });
        if (state.results.length === 0 && _trimInstanceProperty(_context10 = state.searchText).call(_context10).length > 0) return jsx("div", {
          css: /*#__PURE__*/css("overflow:hidden;white-space:nowrap;cursor:default;background:", customProperties.colorNeutral, ";color:", customProperties.colorSolid, ";text-align:center;text-transform:uppercase;font-size:", customProperties.fontSizeSmall, ";padding:", customProperties.spacingXs, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Butler;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
          children: jsx(FormattedMessage, _objectSpread({}, messages.noResults))
        });
        return _mapInstanceProperty(_context11 = state.results).call(_context11, (command, index) => jsx(ButlerCommand, {
          command: command,
          isSelected: state.selectedResult === index,
          onMouseEnter: createCommandMouseEnterHandler(index),
          onClick: createCommandClickHandler(command)
        }, command.id));
      })()]
    })
  });
};
Butler.propTypes = process.env.NODE_ENV !== "production" ? {
  historyEntries: _pt.arrayOf(_pt.any).isRequired,
  onHistoryEntriesChange: _pt.func.isRequired,
  search: _pt.func.isRequired,
  getNextCommands: _pt.func.isRequired,
  executeCommand: _pt.func.isRequired,
  onClose: _pt.func.isRequired,
  classNameShakeAnimation: _pt.string.isRequired
} : {};
Butler.displayName = 'Butler';
const ButlerWithAnimation = props => jsx(ClassNames, {
  children: _ref2 => {
    let css = _ref2.css;
    return jsx(Butler, _objectSpread(_objectSpread({}, props), {}, {
      classNameShakeAnimation: css(_templateObject2$2 || (_templateObject2$2 = _taggedTemplateLiteral(["\n          animation-duration: 0.45s;\n          animation-fill-mode: both;\n          animation-name: ", ";\n        "])), shakeAnimation)
    }));
  }
});

// eslint-disable-next-line import/prefer-default-export

const permissions = {
  ViewOrders: 'ViewOrders',
  ManageOrders: 'ManageOrders',
  ViewProducts: 'ViewProducts',
  ManageProducts: 'ManageProducts',
  ViewCategories: 'ViewCategories',
  ManageCategories: 'ManageCategories',
  ViewCustomers: 'ViewCustomers',
  ManageCustomers: 'ManageCustomers',
  ViewCustomerGroups: 'ViewCustomerGroups',
  ManageCustomerGroups: 'ManageCustomerGroups',
  ViewProductDiscounts: 'ViewProductDiscounts',
  ManageProductDiscounts: 'ManageProductDiscounts',
  ViewDiscountCodes: 'ViewDiscountCodes',
  ManageDiscountCodes: 'ManageDiscountCodes',
  ViewCartDiscounts: 'ViewCartDiscounts',
  ManageCartDiscounts: 'ManageCartDiscounts',
  ViewProjectSettings: 'ViewProjectSettings',
  ManageProjectSettings: 'ManageProjectSettings',
  ViewDeveloperSettings: 'ViewDeveloperSettings',
  ManageDeveloperSettings: 'ManageDeveloperSettings',
  ViewProductTypes: 'ViewProductTypes',
  ManageProductTypes: 'ManageProductTypes'
};

const actionTypes = {
  go: 'go'
};

var _templateObject$2;
function nonNullable(value) {
  return value !== null && value !== undefined && typeof value !== 'boolean';
}
const createCommands = _ref => {
  var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context13;
  let intl = _ref.intl,
    applicationContext = _ref.applicationContext,
    featureToggles = _ref.featureToggles,
    changeProjectDataLocale = _ref.changeProjectDataLocale;
  return _filterInstanceProperty(_context = [applicationContext.project && applicationContext.permissions && featureToggles.canViewDashboard && hasSomePermissions([permissions.ViewOrders], applicationContext.permissions) && {
    id: 'go/dashboard',
    text: intl.formatMessage(messages.openDashboard),
    keywords: ['Go to Dashboard'],
    action: {
      type: actionTypes.go,
      to: "/".concat(applicationContext.project.key, "/dashboard")
    }
  }, applicationContext.project && applicationContext.permissions && hasSomePermissions([permissions.ViewProducts], applicationContext.permissions) && {
    id: 'go/products',
    text: intl.formatMessage(messages.openProducts),
    keywords: ['Go to Products'],
    action: {
      type: actionTypes.go,
      to: "/".concat(applicationContext.project.key, "/products")
    },
    subCommands: _filterInstanceProperty(_context2 = [hasSomePermissions([permissions.ViewProducts], applicationContext.permissions) && {
      id: 'go/products/list',
      text: intl.formatMessage(messages.openProductList),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/products")
      }
    }, hasSomePermissions([permissions.ViewProducts], applicationContext.permissions) && {
      id: 'go/products/modified',
      text: intl.formatMessage(messages.openModifiedProducts),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/products/modified")
      }
    }, hasSomePermissions([permissions.ViewProducts], applicationContext.permissions) && featureToggles.pimSearch && {
      id: 'go/products/pim-search',
      text: intl.formatMessage(messages.openPimSearch),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/products")
      }
    }, hasSomePermissions([permissions.ManageProducts], applicationContext.permissions) && {
      id: 'go/products/add',
      text: intl.formatMessage(messages.openAddProducts),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/products/new")
      }
    }]).call(_context2, nonNullable)
  }, applicationContext.project && applicationContext.permissions && hasSomePermissions([permissions.ViewCategories], applicationContext.permissions) && {
    id: 'go/categories',
    text: intl.formatMessage(messages.openCategories),
    keywords: ['Go to Categories'],
    action: {
      type: actionTypes.go,
      to: "/".concat(applicationContext.project.key, "/categories")
    },
    subCommands: _filterInstanceProperty(_context3 = [hasSomePermissions([permissions.ViewCategories], applicationContext.permissions) && {
      id: 'go/categories/list',
      text: intl.formatMessage(messages.openCategoriesList),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/categories?mode=list")
      }
    }, hasSomePermissions([permissions.ViewCategories], applicationContext.permissions) && {
      id: 'go/categories/search',
      text: intl.formatMessage(messages.openCategoriesSearch),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/categories?mode=search")
      }
    }, hasSomePermissions([permissions.ManageCategories], applicationContext.permissions) && {
      id: 'go/categories/add',
      text: intl.formatMessage(messages.openAddCategory),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/categories/new")
      }
    }]).call(_context3, nonNullable)
  }, applicationContext.project && applicationContext.permissions && hasSomePermissions([permissions.ViewCustomers, permissions.ViewCustomerGroups], applicationContext.permissions) && {
    id: 'go/customers',
    text: intl.formatMessage(messages.openCustomers),
    keywords: ['Go to Customers'],
    action: {
      type: actionTypes.go,
      to: "/".concat(applicationContext.project.key, "/customers")
    },
    subCommands: _filterInstanceProperty(_context4 = [hasSomePermissions([permissions.ViewCustomers], applicationContext.permissions) && {
      id: 'go/customers/list',
      text: intl.formatMessage(messages.openCustomersList),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/customers")
      }
    }, hasSomePermissions([permissions.ManageCustomers], applicationContext.permissions) && {
      id: 'go/customers/new',
      text: intl.formatMessage(messages.openAddCustomer),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/customers/new")
      }
    }, hasSomePermissions([permissions.ViewCustomerGroups], applicationContext.permissions) && {
      id: 'go/customer/customer-groups',
      text: intl.formatMessage(messages.openCustomerGroupsList),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/customers/customer-groups")
      }
    }, hasSomePermissions([permissions.ManageCustomerGroups], applicationContext.permissions) && {
      id: 'go/customers/customer-groups/add',
      text: intl.formatMessage(messages.openAddCustomerGroup),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/customers/customer-groups/new")
      }
    }]).call(_context4, nonNullable)
  }, applicationContext.project && applicationContext.permissions && hasSomePermissions([permissions.ViewOrders], applicationContext.permissions) && {
    id: 'go/orders',
    text: intl.formatMessage(messages.openOrders),
    keywords: ['Go to Orders'],
    action: {
      type: actionTypes.go,
      to: "/".concat(applicationContext.project.key, "/orders")
    },
    subCommands: _filterInstanceProperty(_context5 = [hasSomePermissions([permissions.ViewOrders], applicationContext.permissions) && {
      id: 'go/orders/list',
      text: intl.formatMessage(messages.openOrdersList),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/orders")
      }
    }, hasSomePermissions([permissions.ManageOrders], applicationContext.permissions) && {
      id: 'go/orders/add',
      text: intl.formatMessage(messages.openAddOrder),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/orders/new")
      }
    }]).call(_context5, nonNullable)
  }, applicationContext.project && applicationContext.permissions && hasSomePermissions([permissions.ViewDiscountCodes, permissions.ViewProductDiscounts, permissions.ViewCartDiscounts], applicationContext.permissions) && {
    id: 'go/discounts',
    text: intl.formatMessage(messages.openDiscounts),
    keywords: ['Go to Discounts'],
    action: {
      type: actionTypes.go,
      to: "/".concat(applicationContext.project.key, "/discounts")
    },
    subCommands: _filterInstanceProperty(_context6 = [hasSomePermissions([permissions.ViewProductDiscounts], applicationContext.permissions) && {
      id: 'go/discounts/products/list',
      text: intl.formatMessage(messages.openProductDiscountsList),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/discounts/products")
      }
    }, hasSomePermissions([permissions.ViewCartDiscounts], applicationContext.permissions) && {
      id: 'go/discounts/carts/list',
      text: intl.formatMessage(messages.openCartDiscountsList),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/discounts/carts")
      }
    }, hasSomePermissions([permissions.ViewDiscountCodes], applicationContext.permissions) && {
      id: 'go/discounts/codes/list',
      text: intl.formatMessage(messages.openDiscountCodesList),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/discounts/codes")
      }
    }, hasSomePermissions([permissions.ManageProductDiscounts, permissions.ManageDiscountCodes, permissions.ManageCartDiscounts], applicationContext.permissions) && {
      id: 'go/discounts/add',
      text: intl.formatMessage(messages.openAddDiscount),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/discounts/new")
      },
      subCommands: _filterInstanceProperty(_context7 = [hasSomePermissions([permissions.ManageProductDiscounts], applicationContext.permissions) && {
        id: 'go/discounts/product/add',
        text: intl.formatMessage(messages.openAddProductDiscount),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/discounts/products/new")
        }
      }, hasSomePermissions([permissions.ManageCartDiscounts], applicationContext.permissions) && {
        id: 'go/discounts/cart/add',
        text: intl.formatMessage(messages.openAddCartDiscount),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/discounts/carts/new")
        }
      }, hasSomePermissions([permissions.ManageDiscountCodes], applicationContext.permissions) && {
        id: 'go/discounts/code/add',
        text: intl.formatMessage(messages.openAddCartDiscount),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/discounts/codes/new")
        }
      }]).call(_context7, nonNullable)
    }]).call(_context6, nonNullable)
  }, applicationContext.project && applicationContext.permissions && hasSomePermissions([permissions.ViewProjectSettings, permissions.ViewDeveloperSettings, permissions.ViewProductTypes], applicationContext.permissions) && {
    id: 'go/settings',
    text: intl.formatMessage(messages.openSettings),
    keywords: ['Go to Settings'],
    action: {
      type: actionTypes.go,
      to: "/".concat(applicationContext.project.key, "/settings/project")
    },
    subCommands: _filterInstanceProperty(_context8 = [hasSomePermissions([permissions.ViewProjectSettings, permissions.ManageProjectSettings], applicationContext.permissions) && {
      id: 'go/settings/project',
      text: intl.formatMessage(messages.openProjectSettings),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/settings/project")
      },
      subCommands: _filterInstanceProperty(_context9 = [{
        id: 'go/settings/project/international',
        text: intl.formatMessage(messages.openProjectSettingsInternationalTab),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/settings/project/international")
        }
      }, {
        id: 'go/settings/project/taxes',
        text: intl.formatMessage(messages.openProjectSettingsTaxesTab),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/settings/project/taxes")
        }
      }, {
        id: 'go/settings/project/shipping-methods',
        text: intl.formatMessage(messages.openProjectSettingsShippingMethodsTab),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/settings/project/shipping-methods")
        }
      }, {
        id: 'go/settings/project/channels',
        text: intl.formatMessage(messages.openProjectSettingsChannelsTab),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/settings/project/channels")
        }
      }, {
        id: 'go/settings/project/stores',
        text: intl.formatMessage(messages.openProjectSettingsStoresTab),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/settings/project/stores")
        }
      }]).call(_context9, nonNullable)
    }, hasSomePermissions([permissions.ViewProductTypes], applicationContext.permissions) && {
      id: 'go/settings/product-types',
      text: intl.formatMessage(messages.openProductTypesSettings),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/settings/product-types")
      }
    }, hasSomePermissions([permissions.ViewDeveloperSettings], applicationContext.permissions) && {
      id: 'go/settings/developer',
      text: intl.formatMessage(messages.openDeveloperSettings),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/settings/developer")
      },
      subCommands: _filterInstanceProperty(_context10 = [hasSomePermissions([permissions.ViewDeveloperSettings], applicationContext.permissions) && {
        id: 'go/settings/developer/api-clients/list',
        text: intl.formatMessage(messages.openApiClientsList),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/settings/developer/api-clients")
        }
      }, hasSomePermissions([permissions.ManageDeveloperSettings], applicationContext.permissions) && {
        id: 'go/settings/developer/api-clients/add',
        text: intl.formatMessage(messages.openAddApiClient),
        action: {
          type: actionTypes.go,
          to: "/".concat(applicationContext.project.key, "/settings/developer/api-clients/new")
        }
      }]).call(_context10, nonNullable)
    }, featureToggles.customApplications && hasSomePermissions([permissions.ManageProjectSettings], applicationContext.permissions) && {
      id: 'go/settings/custom-applications',
      text: intl.formatMessage(messages.openCustomApplicationsSettings),
      action: {
        type: actionTypes.go,
        to: "/".concat(applicationContext.project.key, "/settings/custom-applications")
      }
    }]).call(_context8, nonNullable)
  }, applicationContext.project && applicationContext.project.languages && applicationContext.project.languages.length > 1 && {
    id: 'action/set-resource-language',
    text: intl.formatMessage(messages.setResourceLanguage),
    keywords: ['set resource locale', 'set project data language', 'set project data locale'],
    action: () => void 0,
    // We would know these statically, but we define them here as we don't
    // want to include them in the top-level search results
    subCommands: () => {
      var _context11, _context12;
      return _Promise.resolve(_filterInstanceProperty(_context11 = _mapInstanceProperty(_context12 = applicationContext.project ? applicationContext.project.languages : []).call(_context12, language => changeProjectDataLocale && {
        id: "action/set-resource-language/".concat(language),
        text: oneLineTrim(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral(["\n                      ", "\n                      ", "\n                    "])), language, language === applicationContext.dataLocale ? ' (active)' : ''),
        action: () => {
          changeProjectDataLocale(language);

          // We reload, since ProjectDataLocale is written in a way where
          // only the tree under the parent container reloads, but
          // not all of them reload.
          // So this action would seem like it had not effect, unless we
          // reload
          location.reload();
        }
      })).call(_context11, nonNullable));
    }
  }, {
    id: 'go/support',
    text: intl.formatMessage(messages.openSupport),
    keywords: ['Go to support'],
    action: {
      type: actionTypes.go,
      to: SUPPORT_PORTAL_URL
    }
  }, {
    id: 'go/account-profile',
    text: intl.formatMessage(messages.openMyProfile),
    keywords: ['Go to user account', 'Go to profile', 'Open profile'],
    action: {
      type: actionTypes.go,
      to: "/account/profile"
    }
  }, {
    id: 'go/privacy-policy',
    text: intl.formatMessage(messages.showPrivacyPolicy),
    keywords: ['Open Privacy Policy'],
    action: {
      type: actionTypes.go,
      to: 'https://commercetools.com/privacy#suppliers'
    }
  }, {
    id: 'go/logout',
    text: intl.formatMessage(messages.logout),
    keywords: ['Sign out'],
    action: {
      type: actionTypes.go,
      to: "/logout?reason=".concat(LOGOUT_REASONS.USER)
    }
  }, {
    id: 'go/manage-projects',
    text: intl.formatMessage(messages.openManageProjects),
    keywords: ['Go to manage projects', 'Go to projects', 'Open projects list'],
    action: {
      type: actionTypes.go,
      to: "/account/projects"
    }
  }, {
    id: 'go/manage-organizations',
    text: intl.formatMessage(messages.openManageOrganizations),
    keywords: ['Go to manage organizations', 'Go to organizations', 'Open organizations list'],
    action: {
      type: actionTypes.go,
      to: "/account/organizations"
    }
  }, ...(applicationContext.user ? _mapInstanceProperty(_context13 = applicationContext.user.projects.results).call(_context13, userProject => ({
    id: "go/project(".concat(userProject.key, ")"),
    text: intl.formatMessage(messages.useProject, {
      projectName: userProject.name
    }),
    keywords: [userProject.key],
    action: () => {
      // Switching projects needs a full redirect so that
      // the feature flags are reloaded (and things caches get destroyed)
      window.location.href = "/".concat(userProject.key);
    }
  })) : [])]).call(_context, nonNullable);
};

const STORAGE_KEY = 'quickAccessHistoryEntries';
const saveHistoryEntries = historyEntries => {
  try {
    window.sessionStorage.setItem(STORAGE_KEY, _JSON$stringify(historyEntries));
    return true;
  } catch (error) {
    return false;
  }
};
const loadHistoryEntries = () => {
  try {
    const value = sessionStorage.getItem(STORAGE_KEY);
    return value ? JSON.parse(value) : [];
  } catch (error) {
    return [];
  }
};

var _templateObject$1, _templateObject2$1, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
var QuickAccessProductQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "QuickAccessProduct" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "productId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "product" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "productId" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "masterData" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "staged" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "allVariants" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "sku" }, arguments: [], directives: [] }] } }] } }] } }] } }] } }], loc: { start: 0, end: 208, source: { body: "query QuickAccessProduct($productId: String!) {\n  product(id: $productId) {\n    id\n    masterData {\n      staged {\n        allVariants {\n          id\n          key\n          sku\n        }\n      }\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const createProductVariantSubCommands = _ref => {
  var _context, _context2, _context3, _context4;
  let intl = _ref.intl,
    applicationContext = _ref.applicationContext,
    productId = _ref.productId,
    variantId = _ref.variantId;
  const canViewProducts = hasSomePermissions([permissions.ViewProducts], applicationContext.permissions);
  if (!canViewProducts || !applicationContext.project) return [];
  return [{
    id: _concatInstanceProperty(_context = "go/product(".concat(productId, ")/variant(")).call(_context, variantId, ")/attributes"),
    text: intl.formatMessage(messages.showProductVariantAttributes),
    action: {
      type: actionTypes.go,
      to: oneLineTrim(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n          /", "\n          /products\n          /", "\n          /variants\n          /", "\n          /attributes\n        "])), applicationContext.project.key, productId, variantId)
    }
  }, {
    id: _concatInstanceProperty(_context2 = "go/product(".concat(productId, ")/variant")).call(_context2, variantId, "/images"),
    text: intl.formatMessage(messages.showProductVariantImages),
    action: {
      type: actionTypes.go,
      to: oneLineTrim(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\n          /", "\n          /products\n          /", "\n          /variants\n          /", "\n          /images\n        "])), applicationContext.project.key, productId, variantId)
    }
  }, {
    id: _concatInstanceProperty(_context3 = "go/product(".concat(productId, ")/variant(")).call(_context3, variantId, ")/prices"),
    text: intl.formatMessage(messages.showProductVariantPrices),
    action: {
      type: actionTypes.go,
      to: oneLineTrim(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n          /", "\n          /products\n          /", "\n          /variants\n          /", "\n          /prices\n        "])), applicationContext.project.key, productId, variantId)
    }
  }, {
    id: _concatInstanceProperty(_context4 = "go/product(".concat(productId, ")/variant(")).call(_context4, variantId, ")/inventory"),
    text: intl.formatMessage(messages.showProductVariantInventory),
    action: {
      type: actionTypes.go,
      to: oneLineTrim(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n          /", "\n          /products\n          /", "\n          /variants\n          /", "\n          /inventory\n        "])), applicationContext.project.key, productId, variantId)
    }
  }];
};
const formatVariantMessage = (variant, intl) => {
  if (variant.sku) return intl.formatMessage(messages.openVariantBySku, {
    sku: variant.sku
  });
  if (variant.key) return intl.formatMessage(messages.openVariantByKey, {
    key: variant.key
  });
  return intl.formatMessage(messages.openVariantById, {
    id: variant.id
  });
};
const createProductVariantListSubCommands = async _ref2 => {
  let intl = _ref2.intl,
    applicationContext = _ref2.applicationContext,
    productId = _ref2.productId,
    execQuery = _ref2.execQuery;
  const canViewProducts = hasSomePermissions([permissions.ViewProducts], applicationContext.permissions);
  if (!canViewProducts) return [];
  const data = await execQuery(QuickAccessProductQuery, {
    productId
  }, {
    target: GRAPHQL_TARGETS.COMMERCETOOLS_PLATFORM
  });
  if (data && data.product && data.product.masterData && data.product.masterData.staged && applicationContext.project) {
    var _context5;
    const projectKey = applicationContext.project.key;
    return _mapInstanceProperty(_context5 = data.product.masterData.staged.allVariants).call(_context5, variant => {
      var _context6;
      return {
        id: _concatInstanceProperty(_context6 = "go/product(".concat(productId, ")/variant(")).call(_context6, variant.id, ")"),
        text: formatVariantMessage(variant, intl),
        subCommands: createProductVariantSubCommands({
          intl,
          applicationContext,
          productId,
          variantId: variant.id
        }),
        action: {
          type: actionTypes.go,
          to: oneLineTrim(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n          /", "\n          /products\n          /", "\n          /variants\n          /", "\n        "])), projectKey, productId, variant.id)
        }
      };
    });
  }
  return [];
};
const createProductTabsSubCommands = _ref3 => {
  let intl = _ref3.intl,
    applicationContext = _ref3.applicationContext,
    productId = _ref3.productId;
  const canViewProducts = hasSomePermissions([permissions.ViewProducts], applicationContext.permissions);
  if (!canViewProducts || !applicationContext.project) return [];
  return [{
    id: "go/product(".concat(productId, ")/general"),
    text: intl.formatMessage(messages.openProductVariantGeneral),
    action: {
      type: actionTypes.go,
      to: oneLineTrim(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n          /", "\n          /products\n          /", "\n          /general\n        "])), applicationContext.project.key, productId)
    }
  }, {
    id: "go/product(".concat(productId, ")/variants"),
    text: intl.formatMessage(messages.openProductVariantList),
    action: {
      type: actionTypes.go,
      to: oneLineTrim(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n          /", "\n          /products\n          /", "\n          /variants\n        "])), applicationContext.project.key, productId)
    },
    subCommands: execQuery => createProductVariantListSubCommands({
      intl,
      applicationContext,
      productId,
      execQuery
    })
  }, {
    id: "go/product(".concat(productId, ")/search"),
    text: intl.formatMessage(messages.openProductVariantSearch),
    action: {
      type: actionTypes.go,
      to: oneLineTrim(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n          /", "\n          /products\n          /", "\n          /search\n        "])), applicationContext.project.key, productId)
    }
  }];
};

const sanitize = param => param
// Replace all \ with \\ (to prevent generate escape characters)
.replace(/\\/g, '\\\\')
// Replace all " with \"
.replace(/"/g, '\\"');
const flattenCommands = async (results, execQuery) => {
  async function flatten(commands) {
    return _reduceInstanceProperty(commands).call(commands, async (prevPromise, command) => {
      const prevResults = await prevPromise;
      if (command.subCommands) {
        if (typeof command.subCommands === 'function') {
          const subCommands = await command.subCommands(execQuery);
          const flattenSubCommands = await flatten(subCommands);
          return [...prevResults, command, ...flattenSubCommands];
        }
        const flattenSubCommands = await flatten(command.subCommands);
        return [...prevResults, command, ...flattenSubCommands];
      }
      return [...prevResults, command];
    }, _Promise.resolve([]));
  }
  return await flatten(results);
};

// Once ui-kit exposes its fallback mechanism, we can use the same one here
const translate = (nameAllLocales, projectDataLocale) => {
  const matchedTranslation = _findInstanceProperty(nameAllLocales).call(nameAllLocales, translation => translation.locale === projectDataLocale && translation.value);
  if (matchedTranslation) return matchedTranslation.value;

  // Fall back to the first available locale
  if (nameAllLocales.length > 0) return nameAllLocales[0].value;
  return '';
};

var _templateObject, _templateObject2;
var QuickAccessQuery = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "QuickAccess" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "searchText" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "canViewProducts" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "productsWhereClause" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeProductsByIds" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", alias: { kind: "Name", value: "productsByIds" }, name: { kind: "Name", value: "products" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "where" }, value: { kind: "Variable", name: { kind: "Name", value: "productsWhereClause" } } }], directives: [{ kind: "Directive", name: { kind: "Name", value: "include" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "if" }, value: { kind: "Variable", name: { kind: "Name", value: "includeProductsByIds" } } }] }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "results" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "masterData" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "staged" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "nameAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }] } }] } }] } }] } }, { kind: "Field", alias: { kind: "Name", value: "productById" }, name: { kind: "Name", value: "product" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "searchText" } } }], directives: [{ kind: "Directive", name: { kind: "Name", value: "include" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "if" }, value: { kind: "Variable", name: { kind: "Name", value: "canViewProducts" } } }] }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "masterData" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "staged" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "nameAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }] } }] } }] } }, { kind: "Field", alias: { kind: "Name", value: "productByKey" }, name: { kind: "Name", value: "product" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "key" }, value: { kind: "Variable", name: { kind: "Name", value: "searchText" } } }], directives: [{ kind: "Directive", name: { kind: "Name", value: "include" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "if" }, value: { kind: "Variable", name: { kind: "Name", value: "canViewProducts" } } }] }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "masterData" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "staged" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "nameAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }] } }] } }] } }, { kind: "Field", alias: { kind: "Name", value: "productByVariantSku" }, name: { kind: "Name", value: "product" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sku" }, value: { kind: "Variable", name: { kind: "Name", value: "searchText" } } }], directives: [{ kind: "Directive", name: { kind: "Name", value: "include" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "if" }, value: { kind: "Variable", name: { kind: "Name", value: "canViewProducts" } } }] }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "masterData" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "staged" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "nameAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "variant" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sku" }, value: { kind: "Variable", name: { kind: "Name", value: "searchText" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sku" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }] } }] } }] } }, { kind: "Field", alias: { kind: "Name", value: "productByVariantKey" }, name: { kind: "Name", value: "product" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "variantKey" }, value: { kind: "Variable", name: { kind: "Name", value: "searchText" } } }], directives: [{ kind: "Directive", name: { kind: "Name", value: "include" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "if" }, value: { kind: "Variable", name: { kind: "Name", value: "canViewProducts" } } }] }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "masterData" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "staged" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "nameAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "variant" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "key" }, value: { kind: "Variable", name: { kind: "Name", value: "searchText" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sku" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }] } }] } }] } }] } }], loc: { start: 0, end: 1407, source: { body: "query QuickAccess(\n  $searchText: String!\n  $canViewProducts: Boolean!\n  $productsWhereClause: String\n  $includeProductsByIds: Boolean!\n) {\n  productsByIds: products(where: $productsWhereClause)\n    @include(if: $includeProductsByIds) {\n    results {\n      id\n      masterData {\n        staged {\n          nameAllLocales {\n            locale\n            value\n          }\n        }\n      }\n    }\n  }\n\n  productById: product(id: $searchText) @include(if: $canViewProducts) {\n    id\n    masterData {\n      staged {\n        nameAllLocales {\n          locale\n          value\n        }\n      }\n    }\n  }\n\n  productByKey: product(key: $searchText) @include(if: $canViewProducts) {\n    id\n    masterData {\n      staged {\n        nameAllLocales {\n          locale\n          value\n        }\n      }\n    }\n  }\n\n  productByVariantSku: product(sku: $searchText)\n    @include(if: $canViewProducts) {\n    id\n    masterData {\n      staged {\n        nameAllLocales {\n          locale\n          value\n        }\n        variant(sku: $searchText) {\n          sku\n          key\n          id\n        }\n      }\n    }\n  }\n\n  productByVariantKey: product(variantKey: $searchText)\n    @include(if: $canViewProducts) {\n    id\n    masterData {\n      staged {\n        nameAllLocales {\n          locale\n          value\n        }\n        variant(key: $searchText) {\n          sku\n          key\n          id\n        }\n      }\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const searchProductIdsAction = (searchText, projectKey, dataLocale) => actions.post({
  uri: "/".concat(projectKey, "/search/products"),
  mcApiProxyTarget: MC_API_PROXY_TARGETS.PIM_SEARCH,
  payload: {
    query: {
      fullText: {
        field: 'name',
        language: dataLocale,
        value: searchText
      }
    },
    sort: [{
      field: 'name',
      language: dataLocale,
      order: 'desc'
    }],
    limit: 9,
    offset: 0
  }
});
const pimIndexerStatusAction = (projectKey, dataLocale) =>
// TODO this should be sdkActions.head()
// and then we should check whether the response code is
// - 200 meaning the project is indexed
// - 404 meaning the project is not indexed
//
// But there is a problem in tne node-sdk client as it tries to
// .json()-parse the response to HEAD requests which results in an
// error, so we send a regular request for now and limit to no results
// instead to keep the payload minimal
actions.post({
  uri: "/".concat(projectKey, "/search/products"),
  mcApiProxyTarget: MC_API_PROXY_TARGETS.PIM_SEARCH,
  payload: {
    query: {
      fullText: {
        field: 'name',
        language: dataLocale,
        value: 'availability-check'
      }
    },
    limit: 0,
    offset: 0
  }
});
const QuickAccess = props => {
  const _useState = useState(loadHistoryEntries()),
    _useState2 = _slicedToArray(_useState, 2),
    historyEntries = _useState2[0],
    setHistoryEntries = _useState2[1];
  const handleHistoryEntriesChange = useCallback(entries => {
    // Keep the history in sync with the session storage
    saveHistoryEntries(entries);
    setHistoryEntries(entries);
  }, []);
  const history = useHistory();
  const apolloClient = useApolloClient();
  const intl = useIntl();
  const _useFeatureToggles = useFeatureToggles({
      pimSearch: true,
      customApplications: true,
      canViewDashboard: true
    }),
    _useFeatureToggles2 = _slicedToArray(_useFeatureToggles, 3),
    isPimSearchEnabled = _useFeatureToggles2[0],
    isCustomApplicationsEnabled = _useFeatureToggles2[1],
    isCanViewDashboardEnabled = _useFeatureToggles2[2];
  const applicationContext = useApplicationContext();

  // Destructure functions from props to reference them in the hook dependency list
  const onPimIndexerStateChangeFromParent = props.onPimIndexerStateChange;
  const dispatchFetchProductIds = useAsyncDispatch();
  const fetchPimSearchProductIds = useCallback(async searchText => {
    if (applicationContext.project && applicationContext.dataLocale) {
      var _context;
      const result = await dispatchFetchProductIds(searchProductIdsAction(searchText, applicationContext.project.key, applicationContext.dataLocale));
      return result && result.hits ? _mapInstanceProperty(_context = result.hits).call(_context, hit => hit.id) : [];
    }
    return [];
  }, [applicationContext.dataLocale, applicationContext.project, dispatchFetchProductIds]);
  const dispatchFetchPimIndexerStatus = useAsyncDispatch();
  const fetchPimIndexerStatus = useCallback(async () => {
    if (applicationContext.project && applicationContext.dataLocale) {
      try {
        dispatchFetchPimIndexerStatus(pimIndexerStatusAction(applicationContext.project.key, applicationContext.dataLocale));
        return pimIndexerStates.INDEXED;
      } catch (error) {
        // eslint-disable-next-line no-console
        if (process.env.NODE_ENV !== 'production') console.error(error);
        // project is not using pim-indexer when response error code is 404,
        // but we treat all errors as non-indexed as a safe guard, so we're
        // not checking the response error code at all
        return pimIndexerStates.NOT_INDEXED;
      }
    }
    return pimIndexerStates.NOT_INDEXED;
  }, [applicationContext.dataLocale, applicationContext.project, dispatchFetchPimIndexerStatus]);
  const getProjectIndexStatus = useCallback(async () => {
    // skip when there is no project
    if (!applicationContext.project) return pimIndexerStates.NOT_INDEXED;
    const canViewProducts = hasSomePermissions([permissions.ViewProducts], applicationContext.permissions);

    // skip checking when user can't view products anyways
    if (!canViewProducts) return pimIndexerStates.NOT_INDEXED;
    return await fetchPimIndexerStatus();
  }, [applicationContext.permissions, applicationContext.project, fetchPimIndexerStatus]);
  useEffect(() => {
    if (props.pimIndexerState === pimIndexerStates.UNCHECKED) {
      getProjectIndexStatus().then(status => {
        onPimIndexerStateChangeFromParent(status);
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // <-- run only once, when component mounts

  const execQuery = useCallback((Query, variables, context) => apolloClient.query({
    query: Query,
    errorPolicy: 'ignore',
    variables,
    context
  }).then(response => response.data), [apolloClient]);
  const getNextCommands = useCallback(async command => {
    if (!command.subCommands) return [];
    if (_Array$isArray(command.subCommands)) return command.subCommands;
    return await command.subCommands(execQuery);
  }, [execQuery]);
  const getProjectCommands = useCallback(async searchText => {
    const idsOfProductsMatchingSearchText = props.pimIndexerState === pimIndexerStates.INDEXED ? await fetchPimSearchProductIds(searchText) : [];
    const canViewProducts = hasSomePermissions([permissions.ViewProducts], applicationContext.permissions);
    const data = await execQuery(QuickAccessQuery, {
      searchText: sanitize(searchText),
      // Pass conditional arguments to disable some of the queries
      canViewProducts,
      productsWhereClause: "id in (".concat(_mapInstanceProperty(idsOfProductsMatchingSearchText).call(idsOfProductsMatchingSearchText, id => _JSON$stringify(id)).join(', '), ")"),
      includeProductsByIds: Boolean(canViewProducts && idsOfProductsMatchingSearchText.length > 0)
    }, {
      target: GRAPHQL_TARGETS.COMMERCETOOLS_PLATFORM
    });
    const commands = [];
    if (data && data.productByVariantKey && data.productByVariantKey.masterData && data.productByVariantKey.masterData.staged && data.productByVariantKey.masterData.staged.variant && applicationContext.project && applicationContext.dataLocale) {
      var _context2;
      const productId = data.productByVariantKey.id;
      const variantId = data.productByVariantKey.masterData.staged.variant.id;
      const variantKey = data.productByVariantKey.masterData.staged.variant.key;
      commands.push({
        id: _concatInstanceProperty(_context2 = "go/product-variant-by-key/product(".concat(productId, "/variant(")).call(_context2, variantId, ")"),
        text: intl.formatMessage(messages.showProductVariant, {
          variantName: translate(data.productByVariantKey.masterData.staged.nameAllLocales, applicationContext.dataLocale)
        }),
        keywords: variantKey ? [variantKey] : undefined,
        action: {
          type: actionTypes.go,
          to: oneLineTrim(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n            /", "\n            /products\n            /", "\n            /variants\n            /", "\n          "])), applicationContext.project.key, productId, variantId)
        },
        subCommands: createProductVariantSubCommands({
          intl,
          applicationContext,
          productId,
          variantId
        })
      });
    }
    if (data && data.productByVariantSku && data.productByVariantSku.masterData && data.productByVariantSku.masterData.staged && data.productByVariantSku.masterData.staged.variant && applicationContext.project && applicationContext.dataLocale) {
      var _context3;
      const productId = data.productByVariantSku.id;
      const variantId = data.productByVariantSku.masterData.staged.variant.id;
      commands.push({
        id: _concatInstanceProperty(_context3 = "go/product-variant-by-sku/product(".concat(productId, ")/variant(")).call(_context3, variantId, ")"),
        text: intl.formatMessage(messages.showProductVariant, {
          variantName: data.productByVariantSku.masterData.staged.variant.sku
        }),
        action: {
          type: actionTypes.go,
          to: oneLineTrim(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n            /", "\n            /products\n            /", "\n            /variants\n            /", "\n          "])), applicationContext.project.key, productId, variantId)
        },
        subCommands: createProductVariantSubCommands({
          intl,
          applicationContext,
          productId,
          variantId
        })
      });
    }
    if (data && data.productById && data.productById.masterData && data.productById.masterData.staged && data.productById.masterData.staged.nameAllLocales && applicationContext.project && applicationContext.dataLocale) {
      var _context4;
      const productId = data.productById.id;
      commands.push({
        id: "go/product-by-id/product(".concat(productId, ")"),
        text: intl.formatMessage(messages.showProduct, {
          productName: translate(data.productById.masterData.staged.nameAllLocales, applicationContext.dataLocale)
        }),
        keywords: [productId],
        action: {
          type: actionTypes.go,
          to: _concatInstanceProperty(_context4 = "/".concat(applicationContext.project.key, "/products/")).call(_context4, productId)
        },
        subCommands: createProductTabsSubCommands({
          intl,
          applicationContext,
          productId
        })
      });
    }
    if (data && data.productsByIds && data.productsByIds.results) {
      var _context5;
      _forEachInstanceProperty(_context5 = data.productsByIds.results).call(_context5, product => {
        if (product.masterData.staged && applicationContext.project && applicationContext.dataLocale) {
          var _context6;
          commands.push({
            id: "go/product-by-search-text/product(".concat(product.id, ")"),
            text: intl.formatMessage(messages.showProduct, {
              productName: translate(product.masterData.staged.nameAllLocales, applicationContext.dataLocale)
            }),
            keywords: [product.id],
            action: {
              type: actionTypes.go,
              to: _concatInstanceProperty(_context6 = "/".concat(applicationContext.project.key, "/products/")).call(_context6, product.id)
            },
            subCommands: createProductTabsSubCommands({
              intl,
              applicationContext,
              productId: product.id
            })
          });
        }
      });
    }
    if (data && data.productByKey && applicationContext.project && applicationContext.dataLocale) {
      var _context7;
      const productId = data.productByKey.id;
      commands.push({
        id: "go/product-by-key/product(".concat(productId, ")"),
        text: intl.formatMessage(messages.showProduct, {
          productName: searchText
        }),
        action: {
          type: actionTypes.go,
          to: _concatInstanceProperty(_context7 = "/".concat(applicationContext.project.key, "/products/")).call(_context7, productId)
        },
        subCommands: createProductTabsSubCommands({
          intl,
          applicationContext,
          productId
        })
      });
    }
    return commands;
  }, [applicationContext, execQuery, fetchPimSearchProductIds, intl, props.pimIndexerState]);
  const debouncedGetProjectCommands = debounce(getProjectCommands, 200, {
    cancelObj: 'canceled'
  });
  const search = useCallback(async searchText => {
    const generalCommands = createCommands({
      applicationContext,
      changeProjectDataLocale: props.onChangeProjectDataLocale,
      intl,
      featureToggles: {
        pimSearch: isPimSearchEnabled,
        customApplications: isCustomApplicationsEnabled,
        canViewDashboard: isCanViewDashboardEnabled
      }
    });
    if (!applicationContext.project) return generalCommands;

    // Avoid searching for short texts, as we won't get any good results
    // anyways. This results in commands popping up immediately when the user
    // starts typing, which gives the whole search a much more repsonsive
    // feeling.
    if (_trimInstanceProperty(searchText).call(searchText).length < 3) return generalCommands;
    try {
      const projectCommands = await debouncedGetProjectCommands(searchText);
      const allCommands = [...generalCommands, ...projectCommands];
      return await flattenCommands(allCommands, execQuery);
    } catch (error) {
      // When the debounced search is canceled, it throws with "canceled"
      // In that case we know that another search is going to happen
      // and we just resolve with the general commands.
      if (error === 'canceled') return generalCommands;
      throw error;
    }
  }, [applicationContext, debouncedGetProjectCommands, execQuery, intl, isCanViewDashboardEnabled, isCustomApplicationsEnabled, isPimSearchEnabled, props.onChangeProjectDataLocale]);
  const executeCommand = useCallback((command, meta) => {
    var _context8;
    if (typeof command.action === 'function') {
      // Idea: We could handle these errors and set them on status bar of Butler
      // We can also handle sync/async commands by checking command.action.then
      command.action();
      return;
    }
    // open in new window
    // and always open other pages in a new window
    if (meta.openInNewTab || !_startsWithInstanceProperty(_context8 = command.action.to).call(_context8, '/')) {
      // eslint-disable-next-line no-restricted-globals
      open(command.action.to, '_blank');
    } else if (applicationContext.environment.useFullRedirectsForLinks) {
      location.replace(command.action.to);
    } else {
      history.push(command.action.to);
    }
  }, [applicationContext.environment.useFullRedirectsForLinks, history]);
  return jsx(ButlerWithAnimation, {
    historyEntries: historyEntries,
    onHistoryEntriesChange: handleHistoryEntriesChange,
    search: search,
    executeCommand: executeCommand,
    onClose: props.onClose,
    getNextCommands: getNextCommands
  });
};
QuickAccess.propTypes = process.env.NODE_ENV !== "production" ? {
  pimIndexerState: _pt.any.isRequired,
  onPimIndexerStateChange: _pt.func.isRequired,
  onClose: _pt.func.isRequired,
  onChangeProjectDataLocale: _pt.func
} : {};
QuickAccess.displayName = 'QuickAccess';

export { QuickAccess as default };
