'use strict';

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _pt = require('prop-types');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var _Array$isArray = require('@babel/runtime-corejs3/core-js-stable/array/is-array');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var react = require('react');
var react$1 = require('@emotion/react');
var classnames = require('classnames');
var snakeCase = require('lodash/snakeCase');
var reactIntl = require('react-intl');
var reactRouterDom = require('react-router-dom');
var applicationShellConnectors = require('@commercetools-frontend/application-shell-connectors');
var LogoSVG = require('@commercetools-frontend/assets/logos/commercetools_small-logo.svg');
var constants = require('@commercetools-frontend/constants');
var icons = require('@commercetools-uikit/icons');
var oidc = require('./oidc-7c48215c.cjs.dev.js');
var _objectWithoutProperties = require('@babel/runtime-corejs3/helpers/objectWithoutProperties');
var _styled = require('@emotion/styled/base');
var _includesInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/includes');
var _everyInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/every');
var _findInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/find');
var _startsWithInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/starts-with');
var reactBroadcast = require('@flopflip/react-broadcast');
var MissingImageSvg = require('@commercetools-frontend/assets/images/diagonal-line.svg');
var permissions = require('@commercetools-frontend/permissions');
var InlineSvg = require('@commercetools-uikit/icons/inline-svg');
var useIsServedByProxy = require('./use-is-served-by-proxy-ed411f45.cjs.dev.js');
var jsxRuntime = require('@emotion/react/jsx-runtime');
var _keysInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/keys');
var designSystem = require('@commercetools-uikit/design-system');
var isNil = require('lodash/isNil');
var throttle = require('lodash/throttle');
var sentry = require('@commercetools-frontend/sentry');
var useApplicationsMenu = require('./use-applications-menu-c03f484f.cjs.dev.js');
require('@apollo/client');
require('@commercetools-frontend/l10n');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var _Array$isArray__default = /*#__PURE__*/_interopDefault(_Array$isArray);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var classnames__default = /*#__PURE__*/_interopDefault(classnames);
var snakeCase__default = /*#__PURE__*/_interopDefault(snakeCase);
var LogoSVG__default = /*#__PURE__*/_interopDefault(LogoSVG);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _includesInstanceProperty__default = /*#__PURE__*/_interopDefault(_includesInstanceProperty);
var _everyInstanceProperty__default = /*#__PURE__*/_interopDefault(_everyInstanceProperty);
var _findInstanceProperty__default = /*#__PURE__*/_interopDefault(_findInstanceProperty);
var _startsWithInstanceProperty__default = /*#__PURE__*/_interopDefault(_startsWithInstanceProperty);
var MissingImageSvg__default = /*#__PURE__*/_interopDefault(MissingImageSvg);
var InlineSvg__default = /*#__PURE__*/_interopDefault(InlineSvg);
var _keysInstanceProperty__default = /*#__PURE__*/_interopDefault(_keysInstanceProperty);
var isNil__default = /*#__PURE__*/_interopDefault(isNil);
var throttle__default = /*#__PURE__*/_interopDefault(throttle);

const _excluded = ["icon"];
function ownKeys$2(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var _context3, _context4; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys$2(Object(t), !0)).call(_context3, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys$2(Object(t))).call(_context4, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
function _EMOTION_STRINGIFIED_CSS_ERROR__$1() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const compiledStyles$1 = {
  "global": ":root {\n\n  /* Left navigation */\n}\n\n@keyframes navbar-mod__visible___AKV1b {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n/* Left Nav */\n\n.navbar-mod__left-navigation___n7yUt {\n  display: grid;\n  width: 80px;\n  background: var(--color-primary);\n  height: 100%;\n  grid-template-rows: 56px 1fr;\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.navbar-mod__navigation-header___Z6fOr {\n  background-color: var(--color-accent-10);\n  color: var(--color-surface);\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  align-items: center;\n  padding: var(--spacing-30);\n}\n\n.navbar-mod__navigation-header___Z6fOr .navbar-mod__icon-container___w3FtA {\n  width: auto;\n  display: flex;\n  justify-content: center;\n}\n\n.navbar-mod__navigation-header___Z6fOr .navbar-mod__title___eRWUj {\n  font-weight: 600;\n  margin-left: var(--spacing-20);\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n  animation: navbar-mod__visible___AKV1b 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.navbar-mod__navigation-header___Z6fOr .navbar-mod__icon___bLsep {\n  width: 24px;\n  height: 24px;\n}\n\n.navbar-mod__list___RCV3J {\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  flex: 1 1 0;\n}\n\n.navbar-mod__list-item___MjK6t {\n  min-height: 48px;\n  background: var(--color-primary);\n  margin: 0;\n  list-style: none;\n  cursor: pointer;\n}\n\n.navbar-mod__item-link___X2Ina {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link);\n  width: 48px;\n  position: relative;\n  display: block;\n}\n\n.body__menu-open .navbar-mod__item-link___X2Ina {\n  width: 100%;\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__item-icon-text___a-8JY {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__icon___bLsep {\n  width: 24px;\n  height: 24px;\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.navbar-mod__list-item___MjK6t:hover .navbar-mod__icon___bLsep {\n  /* 1.16 is roughly the ratio of icon-size-hover to --icon-size */\n  transform: scale(1.2);\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__icon___bLsep > svg *:not([fill='none']) {\n  fill: var(--color-surface);\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__title___eRWUj {\n  flex: 1;\n  font-weight: 600;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-size: var(--font-size-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  line-height: var(--line-height-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link);\n  opacity: 0;\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n  text-align: left;\n  text-decoration: none;\n  z-index: 1;\n}\n\n.navbar-mod__expander___jyAUi {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  background: linear-gradient(\n    180deg,\n    var(--color-primary) 0%,\n    var(--color-primary-25) 100%\n  );\n  padding: var(--spacing-30) var(--spacing-25);\n}\n\n.navbar-mod__expander___jyAUi:hover {\n  background-color: var(--color-primary-40);\n}\n\n/* divider */\n\n.navbar-mod__expander___jyAUi::before {\n  content: '';\n  position: absolute;\n  top: 56px;\n  height: 1px;\n  background: rgba(255, 255, 255, 0.5);\n  width: calc(100% - 2 * var(--spacing-30));\n}\n\n.navbar-mod__expand-icon___BtmRa {\n  height: 40px;\n  width: 40px;\n  border-radius: var(--border-radius-4);\n  padding: var(--spacing-20);\n  background: rgba(255, 255, 255, 0.2);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.navbar-mod__expand-icon___BtmRa:hover {\n  background: rgba(255, 255, 255, 0.3);\n  cursor: pointer;\n}\n\n.navbar-mod__item--bottom___eW7nh {\n  position: absolute;\n  bottom: 50px;\n}\n\n.navbar-mod__list-item___MjK6t:not(.navbar-mod__item_menu__active___5xFRw):hover {\n  background-color: var(--color-primary-40);\n  border-radius: var(--border-radius-8);\n}\n\n.navbar-mod__item_menu-open___zk0zh {\n  height: auto !important;\n}\n\n.navbar-mod__item_menu-collapsed___cluyY .navbar-mod__item-link___X2Ina {\n  text-align: center;\n}\n\n.body__menu-open .navbar-mod__left-navigation___n7yUt {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  box-shadow: var(--shadow-for-navbar);\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.body__menu-open .navbar-mod__list-item___MjK6t {\n  height: auto;\n  min-height: 48px;\n  overflow: hidden;\n  width: 100%;\n}\n\n.body__menu-open .navbar-mod__left-navigation___n7yUt {\n  width: 256px;\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.body__menu-open .navbar-mod__list-item___MjK6t .navbar-mod__title___eRWUj {\n  opacity: 1;\n  margin-left: var(--spacing-25);\n  color: var(--color-surface);\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n  animation: navbar-mod__visible___AKV1b 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.navbar-mod__list-item___MjK6t:hover .navbar-mod__title___eRWUj {\n  margin-left: calc(var(--spacing-25) + 2px);\n}\n\n.navbar-mod__list-item___MjK6t:not(.navbar-mod__item__active___lo1sr):hover .navbar-mod__icon___bLsep > svg *:not([fill='none']) {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  fill: var(--color-for-navbar-icon-when-active);\n}\n\n.navbar-mod__list-item___MjK6t:not(.navbar-mod__item__active___lo1sr):hover .navbar-mod__title___eRWUj {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link-when-hovered);\n}\n\n.body__menu-open .navbar-mod__item__active___lo1sr {\n  max-height: 500px;\n  transition: max-height 0.25s ease-in;\n}\n\n/*  Second level menu */\n\n.navbar-mod__sublist___os1s7 {\n  padding: var(--spacing-30);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-size: var(--font-size-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  background-color: var(--background-color-for-navbar);\n  left: 72px;\n  z-index: -1;\n  list-style: none;\n  position: fixed;\n  display: none;\n}\n\n/* This pseudo-element is required to enable smooth coursor movement from the main menu item to submenu items with the gap in between */\n\n.navbar-mod__sublist-expanded__active___240JK::before,\n.navbar-mod__sublist-collapsed__active___-9vYh::before,\n.navbar-mod__sublist-collapsed__active__above___BXCeM::before {\n  content: '';\n  position: absolute;\n  display: block;\n  width: calc(253px + var(--spacing-20));\n  height: 48px;\n  left: calc(-1 * var(--spacing-20));\n}\n\n.navbar-mod__sublist__inactive___kJvf- {\n  /* empty block */\n}\n\n.navbar-mod__sublist-item___gafkS {\n  display: flex;\n  align-items: center;\n  align-self: stretch;\n  transition: padding-left 150ms ease-out;\n}\n\n.navbar-mod__sublist-item__active___QC6pa {\n  border-radius: var(--border-radius-4);\n  background: var(--color-accent-30);\n}\n\n.navbar-mod__sublist-item___gafkS:not(.navbar-mod__sublist-item__active___QC6pa):hover {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link-when-hovered);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link-when-hovered);\n  border-radius: var(--border-radius-4);\n  background: var(--color-primary-95);\n  padding-left: var(--spacing-20);\n}\n\n.navbar-mod__text___ccHEu {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-size: var(--font-size-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  line-height: var(--line-height-for-navbar-link);\n  width: 100%;\n  height: 100%;\n}\n\n.navbar-mod__text-link___dhtj6 {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link);\n  text-decoration: none;\n  display: flex;\n  padding: var(--spacing-25);\n  align-items: center;\n  justify-content: center;\n}\n\n.body__menu-open .navbar-mod__text-link___dhtj6 {\n  justify-content: start;\n}\n\n.navbar-mod__text-link-sublist-wrapper___1JN4x {\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  min-height: 0;\n}\n\n.navbar-mod__text-link-sublist___AoIpU {\n  /* stylelint-disable-next-line value-no-vendor-prefix */\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  color: var(--color-solid);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link-when-hovered);\n  text-decoration: none;\n  flex: 1;\n  padding: var(--spacing-25) var(--spacing-25) var(--spacing-25)\n    var(--spacing-30);\n}\n\n.navbar-mod__navlink-clickable-content___bzddC {\n  height: 100%;\n  width: 100%;\n}\n\n/* Item active */\n\n.navbar-mod__item__active___lo1sr,\n.navbar-mod__item_menu__active___5xFRw {\n  background: var(--color-accent-30);\n  border-radius: var(--border-radius-8);\n}\n\n.navbar-mod__list-item___MjK6t.navbar-mod__item__active___lo1sr .navbar-mod__item-icon-text___a-8JY {\n  justify-content: flex-start;\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__icon-container___w3FtA {\n  width: auto;\n  display: flex;\n  justify-content: center;\n  align-self: flex-start;\n}\n\n.navbar-mod__fixed-menu___42tD9 .navbar-mod__list-item___MjK6t .navbar-mod__item-icon-text___a-8JY {\n  justify-content: center;\n  display: flex;\n  width: 100%;\n}\n\n.navbar-mod__support-menu___fi5Ka {\n  padding: 0 var(--spacing-30) var(--spacing-20) var(--spacing-30);\n  height: calc(48px + var(--spacing-20));\n}\n\n.body__menu-open .navbar-mod__list-item___MjK6t.navbar-mod__item__active___lo1sr .navbar-mod__item-icon-text___a-8JY {\n  position: relative;\n  width: auto;\n}\n\n.body__menu-open .navbar-mod__list-item___MjK6t.navbar-mod__item__active___lo1sr .navbar-mod__item-icon-text___a-8JY {\n  margin-left: 0;\n}\n\n.navbar-mod__tooltip-container___iJYyi {\n  position: absolute;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  height: 48px;\n  visibility: visible;\n}\n\n.navbar-mod__tooltip___1ID3j {\n  padding: var(--spacing-10) calc(var(--spacing-20) + var(--spacing-10));\n  /* stylelint-disable-next-line value-no-vendor-prefix */\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  border-radius: var(--border-radius-4);\n  background: var(--color-accent-10);\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.25);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-size: var(--font-size-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  line-height: var(--line-height-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link);\n  color: var(--color-surface);\n  max-height: 48px;\n  visibility: inherit;\n}\n\n.navbar-mod__sublist-expanded__active___240JK,\n.navbar-mod__sublist-collapsed__active___-9vYh,\n.navbar-mod__sublist-collapsed__active__above___BXCeM {\n  opacity: 1;\n  display: none;\n  text-align: left;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  background-color: var(--background-color-for-navbar-when-active);\n}\n\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-collapsed__active___-9vYh,\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-collapsed__active__above___BXCeM,\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-expanded__active___240JK {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  background-color: var(--color-surface);\n  /* TODO: add design tokens instead hard-coded values */\n  min-height: 50px;\n  width: 253px;\n  border-radius: var(--border-radius-8);\n  /* z-index value must be higher than AppBar's z-index */\n  z-index: 20001;\n  box-shadow: -2px 4px 25px 0 rgba(89, 89, 89, 0.5);\n}\n\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-collapsed__active___-9vYh.navbar-mod__sublist-collapsed__empty___FBUli,\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-collapsed__active__above___BXCeM.navbar-mod__sublist-collapsed__empty___FBUli {\n  visibility: hidden;\n}\n\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-expanded__active___240JK {\n  left: 248px;\n}\n\n.navbar-mod__highlighted___oJWkA,\n.navbar-mod__highlighted___oJWkA .navbar-mod__title___eRWUj {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link-when-active) !important;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link-when-active);\n}\n\n.navbar-mod__hidden___TQLSs {\n  display: none;\n}\n\n.navbar-mod__divider___TpVzu {\n  border-top: 1px solid var(--color-neutral-40);\n}\n\n.navbar-mod__loading-dot-container___G2LVb {\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.navbar-mod__scrollable-menu___64pxJ {\n  flex: 1 1 0;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  padding: var(--spacing-30) var(--spacing-30) 48px;\n  width: 80px;\n  box-sizing: border-box;\n  /* For Firefox */\n  scrollbar-width: thin;\n  scrollbar-color: var(--color-primary-40) transparent;\n}\n\n.body__menu-open .navbar-mod__scrollable-menu___64pxJ {\n  width: 256px;\n}\n\n.navbar-mod__scrollable-menu___64pxJ:hover {\n  overflow-y: scroll;\n  padding-right: 8px;\n}\n\n.navbar-mod__scrollable-menu___64pxJ::-webkit-scrollbar {\n  width: 8px;\n}\n\n.navbar-mod__scrollable-menu___64pxJ::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.navbar-mod__scrollable-menu___64pxJ::-webkit-scrollbar-thumb {\n  background-color: var(--color-primary-40);\n  border-radius: var(--border-radius-8);\n}\n\n.navbar-mod__fixed-menu___42tD9 {\n  position: relative;\n  width: 80px;\n}\n\n.body__menu-open .navbar-mod__fixed-menu___42tD9 {\n  width: 256px;\n}\n",
  "jsonMap": {
    "left-navigation": "navbar-mod__left-navigation___n7yUt",
    "navigation-header": "navbar-mod__navigation-header___Z6fOr",
    "icon-container": "navbar-mod__icon-container___w3FtA",
    "title": "navbar-mod__title___eRWUj",
    "visible": "navbar-mod__visible___AKV1b",
    "icon": "navbar-mod__icon___bLsep",
    "list": "navbar-mod__list___RCV3J",
    "list-item": "navbar-mod__list-item___MjK6t",
    "item-link": "navbar-mod__item-link___X2Ina",
    "item-icon-text": "navbar-mod__item-icon-text___a-8JY",
    "expander": "navbar-mod__expander___jyAUi",
    "expand-icon": "navbar-mod__expand-icon___BtmRa",
    "item--bottom": "navbar-mod__item--bottom___eW7nh",
    "item_menu__active": "navbar-mod__item_menu__active___5xFRw",
    "item_menu-open": "navbar-mod__item_menu-open___zk0zh",
    "item_menu-collapsed": "navbar-mod__item_menu-collapsed___cluyY",
    "item__active": "navbar-mod__item__active___lo1sr",
    "sublist": "navbar-mod__sublist___os1s7",
    "sublist-expanded__active": "navbar-mod__sublist-expanded__active___240JK",
    "sublist-collapsed__active": "navbar-mod__sublist-collapsed__active___-9vYh",
    "sublist-collapsed__active__above": "navbar-mod__sublist-collapsed__active__above___BXCeM",
    "sublist__inactive": "navbar-mod__sublist__inactive___kJvf-",
    "sublist-item": "navbar-mod__sublist-item___gafkS",
    "sublist-item__active": "navbar-mod__sublist-item__active___QC6pa",
    "text": "navbar-mod__text___ccHEu",
    "text-link": "navbar-mod__text-link___dhtj6",
    "text-link-sublist-wrapper": "navbar-mod__text-link-sublist-wrapper___1JN4x",
    "text-link-sublist": "navbar-mod__text-link-sublist___AoIpU",
    "navlink-clickable-content": "navbar-mod__navlink-clickable-content___bzddC",
    "fixed-menu": "navbar-mod__fixed-menu___42tD9",
    "support-menu": "navbar-mod__support-menu___fi5Ka",
    "tooltip-container": "navbar-mod__tooltip-container___iJYyi",
    "tooltip": "navbar-mod__tooltip___1ID3j",
    "sublist-collapsed__empty": "navbar-mod__sublist-collapsed__empty___FBUli",
    "highlighted": "navbar-mod__highlighted___oJWkA",
    "hidden": "navbar-mod__hidden___TQLSs",
    "divider": "navbar-mod__divider___TpVzu",
    "loading-dot-container": "navbar-mod__loading-dot-container___G2LVb",
    "scrollable-menu": "navbar-mod__scrollable-menu___64pxJ"
  }
};
const styles$1 = compiledStyles$1.jsonMap;
const HeartIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./heart-e49dd92a.cjs.dev.js'); }));
const PaperclipIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./paperclip-005ec544.cjs.dev.js'); }));
const PluginIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./plugin-feb22442.cjs.dev.js'); }));
const RocketIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./rocket-3372731a.cjs.dev.js'); }));
const StarIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./star-6b9a91d2.cjs.dev.js'); }));
const ConnectedSquareIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./connected-square-a2fea344.cjs.dev.js'); }));
const WorldIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./world-500baeb2.cjs.dev.js'); }));
const TreeStructureIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./tree-structure-96ab0b7e.cjs.dev.js'); }));
const UserFilledIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./user-filled-34aeebcc.cjs.dev.js'); }));
const SpeedometerIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./speedometer-c1ec5a1d.cjs.dev.js'); }));
const TagMultiIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./tag-multi-abef3e15.cjs.dev.js'); }));
const CartIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./cart-b0044279.cjs.dev.js'); }));
const BoxIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./box-4857aa65.cjs.dev.js'); }));
const GearIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./gear-f2668579.cjs.dev.js'); }));
const ListWithSearchIcon = /*#__PURE__*/react.lazy(() => Promise.resolve().then(function () { return require('./list-with-search-027ab8eb.cjs.dev.js'); }));
// The icon is expected to be the `svg` document as a string.
// For backwards compatibility purposes, we still support the legacy "icon name",
// which we then map to one of the pre-defined icons.
// Eventually, we want to get rid of this "switch" logic.
const IconSwitcher = _ref4 => {
  let icon = _ref4.icon,
    iconProps = _objectWithoutProperties(_ref4, _excluded);
  if (_includesInstanceProperty__default["default"](icon).call(icon, '<svg')) {
    return jsxRuntime.jsx(InlineSvg__default["default"], _objectSpread$2({
      data: icon
    }, iconProps));
  }
  // Backwards compatibility for apps using the "icon name".
  switch (icon) {
    // Legacy application icons
    // TODO: To be removed once MC applications icons updates are published
    case 'TreeStructureIcon':
      return jsxRuntime.jsx(TreeStructureIcon, _objectSpread$2({}, iconProps));
    case 'UserFilledIcon':
      return jsxRuntime.jsx(UserFilledIcon, _objectSpread$2({}, iconProps));
    case 'SpeedometerIcon':
      return jsxRuntime.jsx(SpeedometerIcon, _objectSpread$2({}, iconProps));
    case 'TagMultiIcon':
      return jsxRuntime.jsx(TagMultiIcon, _objectSpread$2({}, iconProps));
    case 'CartIcon':
      return jsxRuntime.jsx(CartIcon, _objectSpread$2({}, iconProps));
    case 'BoxIcon':
      return jsxRuntime.jsx(BoxIcon, _objectSpread$2({}, iconProps));
    case 'GearIcon':
      return jsxRuntime.jsx(GearIcon, _objectSpread$2({}, iconProps));
    case 'ListWithSearchIcon':
      return jsxRuntime.jsx(ListWithSearchIcon, _objectSpread$2({}, iconProps));

    // Custom application icons set
    case 'HeartIcon':
      return jsxRuntime.jsx(HeartIcon, _objectSpread$2({}, iconProps));
    case 'PaperclipIcon':
      return jsxRuntime.jsx(PaperclipIcon, _objectSpread$2({}, iconProps));
    case 'PluginIcon':
      return jsxRuntime.jsx(PluginIcon, _objectSpread$2({}, iconProps));
    case 'RocketIcon':
      return jsxRuntime.jsx(RocketIcon, _objectSpread$2({}, iconProps));
    case 'StarIcon':
      return jsxRuntime.jsx(StarIcon, _objectSpread$2({}, iconProps));
    case 'ConnectedSquareIcon':
      return jsxRuntime.jsx(ConnectedSquareIcon, _objectSpread$2({}, iconProps));
    // For backwards compatibility
    case 'WorldIcon':
      return jsxRuntime.jsx(WorldIcon, _objectSpread$2({}, iconProps));
    default:
      return jsxRuntime.jsx("img", {
        src: MissingImageSvg__default["default"],
        alt: "missing icon"
      });
  }
};
IconSwitcher.propTypes = process.env.NODE_ENV !== "production" ? {
  icon: _pt__default["default"].string.isRequired
} : {};
IconSwitcher.displayName = 'IconSwitcher';
const getIcon = _ref5 => {
  let isMenuOpen = _ref5.isMenuOpen;
  const Icon = isMenuOpen ? icons.SidebarCollapseIcon : icons.SidebarExpandIcon;
  return jsxRuntime.jsx(Icon, {
    color: "surface",
    size: "big"
  });
};
const MenuExpander = props => {
  return jsxRuntime.jsx("li", {
    className: classnames__default["default"](styles$1.expander, {
      [styles$1.hidden]: !props.isVisible
    }),
    children: jsxRuntime.jsx("div", {
      onClick: props.onClick,
      className: styles$1['expand-icon'],
      "data-testid": "menu-expander",
      children: getIcon(props)
    })
  }, "expander");
};
MenuExpander.propTypes = process.env.NODE_ENV !== "production" ? {
  isVisible: _pt__default["default"].bool.isRequired,
  onClick: _pt__default["default"].func.isRequired,
  isMenuOpen: _pt__default["default"].bool.isRequired
} : {};
MenuExpander.displayName = 'MenuExpander';
const Faded = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "ekdrmmp0"
} : {
  target: "ekdrmmp0",
  label: "Faded"
})(process.env.NODE_ENV === "production" ? {
  name: "16qr508",
  styles: "position:absolute;top:-32px;height:32px;width:100%;background:linear-gradient(180deg, rgba(0, 153, 135, 0) 0%, #00b39e 100%);z-index:1"
} : {
  name: "16qr508",
  styles: "position:absolute;top:-32px;height:32px;width:100%;background:linear-gradient(180deg, rgba(0, 153, 135, 0) 0%, #00b39e 100%);z-index:1",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
});
const getSubmenuPositionBasedOnMenuItemPosition = (isSubmenuAboveMenuItem, submenuVerticalPosition) => /*#__PURE__*/react$1.css(isSubmenuAboveMenuItem ? 'bottom' : 'top', ":", submenuVerticalPosition, "px;" + (process.env.NODE_ENV === "production" ? "" : ";label:getSubmenuPositionBasedOnMenuItemPosition;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "abcix4",
  styles: "top:0"
} : {
  name: "4uw94j-getContainerPositionBasedOnMenuItemPosition",
  styles: "top:0;label:getContainerPositionBasedOnMenuItemPosition;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "8tapst",
  styles: "bottom:0"
} : {
  name: "11ucmnx-getContainerPositionBasedOnMenuItemPosition",
  styles: "bottom:0;label:getContainerPositionBasedOnMenuItemPosition;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const getContainerPositionBasedOnMenuItemPosition = (isSubmenuAboveMenuItem, isSublistActiveWhileIsMenuExpanded, isSublistActiveWhileIsMenuCollapsed) => [isSublistActiveWhileIsMenuCollapsed && /*#__PURE__*/react$1.css(isSubmenuAboveMenuItem ? 'bottom' : 'top', ":-", oidc.DIMENSIONS.navMenuItemHeight, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getContainerPositionBasedOnMenuItemPosition;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), isSublistActiveWhileIsMenuExpanded && isSubmenuAboveMenuItem && _ref3, isSublistActiveWhileIsMenuExpanded && !isSubmenuAboveMenuItem && _ref2];
var _ref = process.env.NODE_ENV === "production" ? {
  name: "6dhm9o",
  styles: "visibility:hidden"
} : {
  name: "1nk9wny-MenuGroup",
  styles: "visibility:hidden;label:MenuGroup;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const MenuGroup = /*#__PURE__*/react.forwardRef((props, ref) => {
  if (props.isExpanded && (props.level === 2 && !props.hasSubmenu || props.level === 2 && !props.isActive)) {
    return null;
  }
  const isSublistActiveWhileIsMenuExpanded = props.level === 2 && props.isActive && props.isExpanded;
  const isSublistActiveWhileIsMenuCollapsed = props.level === 2 && props.isActive && !props.isExpanded;
  return jsxRuntime.jsx("ul", {
    ref: ref && props.level === 2 ? ref : null,
    css: /*#__PURE__*/react$1.css(getSubmenuPositionBasedOnMenuItemPosition(props.isSubmenuAboveMenuItem, props.submenuVerticalPosition), ";", props.submenuVerticalPosition === 0 && _ref, "::before{", getContainerPositionBasedOnMenuItemPosition(props.isSubmenuAboveMenuItem, isSublistActiveWhileIsMenuExpanded, isSublistActiveWhileIsMenuCollapsed), ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuGroup;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
    id: "group-".concat(props.id),
    "data-testid": "group-".concat(props.id),
    role: "menu",
    "aria-expanded": isSublistActiveWhileIsMenuExpanded || isSublistActiveWhileIsMenuCollapsed,
    className: classnames__default["default"]({
      [styles$1.list]: props.level === 1
    }, {
      [styles$1['sublist']]: props.level === 2
    }, {
      [styles$1['sublist-expanded__active']]: isSublistActiveWhileIsMenuExpanded
    }, {
      [styles$1['sublist-collapsed__empty']]: isSublistActiveWhileIsMenuCollapsed && !props.hasSubmenu
    }, {
      [styles$1['sublist-collapsed__active']]: isSublistActiveWhileIsMenuCollapsed && !props.isSubmenuAboveMenuItem
    }, {
      [styles$1['sublist-collapsed__active__above']]: isSublistActiveWhileIsMenuCollapsed && props.isSubmenuAboveMenuItem
    }, {
      [styles$1.sublist__inactive]: !isSublistActiveWhileIsMenuCollapsed
    }),
    children: props.children
  });
});
MenuGroup.displayName = 'MenuGroup';
const MenuItem$1 = props => {
  var _props$isMainMenuRout;
  return jsxRuntime.jsx("li", {
    role: "menuitem",
    className: classnames__default["default"](styles$1['list-item'], {
      [styles$1.item__active]: props.isActive,
      [styles$1['item_menu__active']]: (_props$isMainMenuRout = props.isMainMenuRouteActive) !== null && _props$isMainMenuRout !== void 0 ? _props$isMainMenuRout : false,
      [styles$1['item_menu-collapsed']]: !props.isMenuOpen
    }),
    onClick: props.onClick,
    onMouseEnter: props.onMouseEnter,
    onMouseLeave: props.onMouseLeave,
    "data-menuitem": props.identifier,
    children: jsxRuntime.jsx("div", {
      className: styles$1['item-link'],
      children: props.children
    })
  });
};
MenuItem$1.propTypes = process.env.NODE_ENV !== "production" ? {
  hasSubmenu: _pt__default["default"].bool.isRequired,
  isActive: _pt__default["default"].bool.isRequired,
  isMainMenuRouteActive: _pt__default["default"].bool,
  isMenuOpen: _pt__default["default"].bool.isRequired,
  onClick: _pt__default["default"].func.isRequired,
  onMouseEnter: _pt__default["default"].func,
  onMouseLeave: _pt__default["default"].func,
  children: _pt__default["default"].node.isRequired,
  identifier: _pt__default["default"].string
} : {};
MenuItem$1.displayName = 'MenuItem';
const menuItemLinkDefaultProps = {
  exactMatch: false
};
const NavLinkWrapper = props => {
  if (props.isSubmenuLink) {
    return jsxRuntime.jsx("div", {
      className: styles$1['text-link-sublist-wrapper'],
      children: props.children
    });
  }
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: props.children
  });
};
NavLinkWrapper.propTypes = process.env.NODE_ENV !== "production" ? {
  linkTo: _pt__default["default"].string,
  exactMatch: _pt__default["default"].bool.isRequired,
  children: _pt__default["default"].node.isRequired,
  onClick: _pt__default["default"].func,
  useFullRedirectsForLinks: _pt__default["default"].bool,
  isSubmenuLink: _pt__default["default"].bool
} : {};
const NavLinkClickableContentWrapper = props => {
  if (props.isSubmenuLink) {
    return jsxRuntime.jsx("div", {
      className: styles$1['navlink-clickable-content'],
      children: props.children
    });
  }
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: props.children
  });
};
NavLinkClickableContentWrapper.propTypes = process.env.NODE_ENV !== "production" ? {
  linkTo: _pt__default["default"].string,
  exactMatch: _pt__default["default"].bool.isRequired,
  children: _pt__default["default"].node.isRequired,
  onClick: _pt__default["default"].func,
  useFullRedirectsForLinks: _pt__default["default"].bool,
  isSubmenuLink: _pt__default["default"].bool
} : {};
const MenuItemLink = props => {
  const redirectTo = targetUrl => useIsServedByProxy.location.replace(targetUrl);
  if (props.linkTo) {
    return jsxRuntime.jsx(NavLinkWrapper, _objectSpread$2(_objectSpread$2({}, props), {}, {
      children: jsxRuntime.jsx(reactRouterDom.NavLink, {
        to: props.linkTo,
        exact: props.exactMatch,
        activeClassName: styles$1.highlighted,
        className: props.isSubmenuLink ? styles$1['text-link-sublist'] : styles$1['text-link'],
        onClick: event => {
          if (props.linkTo && props.useFullRedirectsForLinks) {
            event.preventDefault();
            redirectTo(props.linkTo);
          } else if (props.onClick) {
            event.persist();
            props.onClick(event);
          }
        },
        children: jsxRuntime.jsx(NavLinkClickableContentWrapper, _objectSpread$2(_objectSpread$2({}, props), {}, {
          children: props.children
        }))
      })
    }));
  }
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: props.children
  });
};
MenuItemLink.propTypes = process.env.NODE_ENV !== "production" ? {
  linkTo: _pt__default["default"].string,
  exactMatch: _pt__default["default"].bool.isRequired,
  children: _pt__default["default"].node.isRequired,
  onClick: _pt__default["default"].func,
  useFullRedirectsForLinks: _pt__default["default"].bool,
  isSubmenuLink: _pt__default["default"].bool
} : {};
MenuItemLink.displayName = 'MenuItemLink';
MenuItemLink.defaultProps = menuItemLinkDefaultProps;
const isEveryMenuVisibilitySetToHidden = (menuVisibilities, namesOfMenuVisibilities) => _Array$isArray__default["default"](namesOfMenuVisibilities) && namesOfMenuVisibilities.length > 0 && _everyInstanceProperty__default["default"](namesOfMenuVisibilities).call(namesOfMenuVisibilities, nameOfMenuVisibility => menuVisibilities && menuVisibilities[nameOfMenuVisibility] === true);
const restrictedMenuItemDefaultProps = {
  permissions: []
};
function isLongLivedFlag(flag) {
  return typeof (flag === null || flag === void 0 ? void 0 : flag.value) === 'boolean';
}
const RestrictedMenuItem = props => {
  // NOTE: Custom application are activated/deactivated while their
  // visibility is not controlled via a visibiility overwrite.
  const flagVariation = reactBroadcast.useFlagVariation(props.featureToggle);
  if (isEveryMenuVisibilitySetToHidden(props.menuVisibilities, props.namesOfMenuVisibilities)) return null;
  const permissionsWrapper = _Array$isArray__default["default"](props.permissions) && props.permissions.length > 0 || _Array$isArray__default["default"](props.dataFences) && props.dataFences.length > 0 ? jsxRuntime.jsx(permissions.RestrictedByPermissions, {
    permissions: props.permissions,
    actionRights: props.actionRights,
    dataFences: props.dataFences,
    selectDataFenceData: demandedDataFence => {
      switch (demandedDataFence.type) {
        case 'store':
          return demandedDataFence.actualDataFenceValues;
        default:
          return null;
      }
    }
    // Always check that some of the given permissions match.
    ,
    shouldMatchSomePermissions: true,
    projectPermissions: props.projectPermissions,
    children: props.children
  }) : jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: props.children
  });
  if (props.featureToggle) {
    // A regular short-lived feature toggle
    if (flagVariation === true) return permissionsWrapper;
    // A long-lived feature toggle with `{ value: boolean, string: reason }`
    if (isLongLivedFlag(flagVariation) && flagVariation.value === true) return permissionsWrapper;
    return null;
  }
  return permissionsWrapper;
};
RestrictedMenuItem.propTypes = process.env.NODE_ENV !== "production" ? {
  featureToggle: _pt__default["default"].string,
  namesOfMenuVisibilities: _pt__default["default"].arrayOf(_pt__default["default"].string),
  projectPermissions: _pt__default["default"].shape({
    permissions: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].oneOf([null])]),
    actionRights: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].oneOf([null])]),
    dataFences: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].oneOf([null])])
  }).isRequired,
  menuVisibilities: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].oneOf([null])]),
  keyOfMenuItem: _pt__default["default"].string.isRequired,
  permissions: _pt__default["default"].arrayOf(_pt__default["default"].string).isRequired,
  actionRights: _pt__default["default"].arrayOf(_pt__default["default"].any),
  dataFences: _pt__default["default"].arrayOf(_pt__default["default"].any),
  children: _pt__default["default"].node.isRequired
} : {};
RestrictedMenuItem.displayName = 'RestrictedMenuItem';
RestrictedMenuItem.defaultProps = restrictedMenuItemDefaultProps;
const MenuLabel = props => {
  var _context;
  const localizedLabel = _findInstanceProperty__default["default"](_context = props.labelAllLocales).call(_context, loc => {
    var _context2;
    return _startsWithInstanceProperty__default["default"](_context2 = props.applicationLocale).call(_context2, loc.locale);
  });
  if (localizedLabel) return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: localizedLabel.value
  });
  if (props.defaultLabel) return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: props.defaultLabel
  });
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: constants.NO_VALUE_FALLBACK
  });
};
MenuLabel.propTypes = {
  labelAllLocales: _pt__default["default"].arrayOf(_pt__default["default"].any).isRequired,
  defaultLabel: _pt__default["default"].string,
  applicationLocale: _pt__default["default"].string.isRequired
};
const NavBarLayout$1 = /*#__PURE__*/react.forwardRef((props, ref) => jsxRuntime.jsxs(jsxRuntime.Fragment, {
  children: [jsxRuntime.jsx(react$1.Global, {
    styles: /*#__PURE__*/react$1.css(compiledStyles$1.global, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:NavBarLayout;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }), jsxRuntime.jsx("nav", {
    ref: ref,
    className: styles$1['left-navigation'],
    "data-test": "left-navigation",
    "data-testid": "left-navigation",
    children: props.children
  })]
}));
NavBarLayout$1.displayName = 'NavBarLayout';
const ItemContainer = props => {
  return jsxRuntime.jsxs("div", {
    className: styles$1['item-icon-text'],
    children: [jsxRuntime.jsx("div", {
      className: styles$1['icon-container'],
      children: jsxRuntime.jsx("div", {
        className: styles$1.icon,
        children: jsxRuntime.jsx(IconSwitcher, {
          icon: props.icon,
          size: "scale"
        })
      })
    }), props.isMenuOpen ? jsxRuntime.jsx("div", {
      className: styles$1.title,
      children: jsxRuntime.jsx(MenuLabel, {
        labelAllLocales: props.labelAllLocales,
        defaultLabel: props.defaultLabel,
        applicationLocale: props.applicationLocale
      })
    }) : null]
  });
};
ItemContainer.propTypes = process.env.NODE_ENV !== "production" ? {
  labelAllLocales: _pt__default["default"].arrayOf(_pt__default["default"].any).isRequired,
  defaultLabel: _pt__default["default"].string,
  applicationLocale: _pt__default["default"].string.isRequired,
  icon: _pt__default["default"].string.isRequired,
  isMenuOpen: _pt__default["default"].bool
} : {};
ItemContainer.displayName = 'ItemContainer';

var messages = reactIntl.defineMessages({
  'NavBar.MCSupport.title': {
    id: 'NavBar.MCSupport.title',
    defaultMessage: 'Support'
  }
});

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const NavBarLayout = props => {
  return jsxRuntime.jsx("nav", {
    "aria-busy": true,
    css: /*#__PURE__*/react$1.css("display:flex;flex-direction:column;height:100%;width:", props.isExpanded ? '256px' : '80px', ";" + (process.env.NODE_ENV === "production" ? "" : ";label:NavBarLayout;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9CYyIsImZpbGUiOiJuYXZiYXItc2tlbGV0b24uc3R5bGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBESU1FTlNJT05TIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcblxudHlwZSBUTmF2QmFyU2tlbGV0b25Qcm9wcyA9IHtcbiAgaXNFeHBhbmRlZDogYm9vbGVhbjtcbn07XG5cbnR5cGUgVE1lbnVJdGVtUHJvcHMgPSB7XG4gIGNvbnRlbnRXaWR0aDogJ3dpZGUnIHwgJ25hcnJvdyc7XG59O1xuXG5jb25zdCBOYXZCYXJMYXlvdXQgPSAoXG4gIHByb3BzOiBUTmF2QmFyU2tlbGV0b25Qcm9wcyAmIHsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9XG4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8bmF2XG4gICAgICBhcmlhLWJ1c3k9e3RydWV9XG4gICAgICBjc3M9e2Nzc2BcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogJHtwcm9wcy5pc0V4cGFuZGVkID8gJzI1NnB4JyA6ICc4MHB4J307XG4gICAgICBgfVxuICAgID5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L25hdj5cbiAgKTtcbn07XG5cbmNvbnN0IE5hdkJhckhlYWRlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICBiYWNrZ3JvdW5kOiAke2Rlc2lnblRva2Vucy5jb2xvckFjY2VudDEwfTtcbmA7XG5cbmNvbnN0IE5hdkJhckJvZHkgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4OiAxO1xuICBwYWRkaW5nOiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgZ2FwOiAke2Rlc2lnblRva2Vucy5zcGFjaW5nNDB9O1xuICBmbGV4LXNocmluazogMDtcbiAgYmFja2dyb3VuZDogIzAwOTk4NzsgLy8gVE9ETzogdXNlIG5ldyBkZXNpZ24gdG9rZW4gY29sb3ItcHJpbWFyeS0zMFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgLy8gYm90dG9tIGdyYWRpZW50XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwgMTUzLCAxMzUsIDApIDAlLCAjMDA5OTg3IDEwMCUpO1xuICB9XG5gO1xuXG5jb25zdCBOYXZCYXJGb290ZXIgPSBzdHlsZWQuZGl2PFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBmbGV4O1xuICB3aWR0aDogMTAwJTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzAwOTk4NyAwJSwgIzAwNGQ0NCAxMDAlKTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfVxuICAgICR7KHByb3BzKSA9PiAocHJvcHMuaXNFeHBhbmRlZCA/ICc1OHB4JyA6ICcwcHgnKX07XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gIC8vIGRpdmlkZXJcbiAgJjo6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGhlaWdodDogMXB4O1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyICogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xuICB9XG5gO1xuXG5jb25zdCBFeHBhbmRJY29uID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDQwcHg7XG4gIGhlaWdodDogNDBweDtcbiAgYm9yZGVyLXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdjxUTWVudUl0ZW1Qcm9wcyAmIFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTJweDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuY29udGVudFdpZHRoID09PSAnd2lkZScgfHwgIXByb3BzLmlzRXhwYW5kZWQgPyAnMTJweCcgOiAnMTJweCAyOHB4J307XG4gIGhlaWdodDogNDhweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG5gO1xuXG5jb25zdCBNZW51SXRlbVRpdGxlID0gc3R5bGVkLmRpdmBcbiAgYm9yZGVyLXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbiAgZmxleDogMTtcbiAgaGVpZ2h0OiAxOHB4O1xuYDtcblxuY29uc3QgTWVudUl0ZW1Hcm91cCA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuZXhwb3J0IHtcbiAgTmF2QmFyTGF5b3V0LFxuICBOYXZCYXJIZWFkZXIsXG4gIE5hdkJhckJvZHksXG4gIE5hdkJhckZvb3RlcixcbiAgRXhwYW5kSWNvbixcbiAgTWVudUl0ZW1Db250YWluZXIsXG4gIE1lbnVJdGVtSWNvbixcbiAgTWVudUl0ZW1UaXRsZSxcbiAgTWVudUl0ZW1Hcm91cCxcbiAgdHlwZSBUTmF2QmFyU2tlbGV0b25Qcm9wcyxcbiAgdHlwZSBUTWVudUl0ZW1Qcm9wcyxcbn07XG4iXX0= */"),
    children: props.children
  });
};
NavBarLayout.propTypes = process.env.NODE_ENV !== "production" ? {
  isExpanded: _pt__default["default"].bool.isRequired
} : {};
const NavBarHeader = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz37"
} : {
  target: "epfjvz37",
  label: "NavBarHeader"
})("display:flex;justify-content:center;align-items:center;padding:", designSystem.designTokens.spacing30, ";height:", oidc.DIMENSIONS.header, ";background:", designSystem.designTokens.colorAccent10, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdDK0IiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgaGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgYmFja2dyb3VuZDogJHtkZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQxMH07XG5gO1xuXG5jb25zdCBOYXZCYXJCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleDogMTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzQwfTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJhY2tncm91bmQ6ICMwMDk5ODc7IC8vIFRPRE86IHVzZSBuZXcgZGVzaWduIHRva2VuIGNvbG9yLXByaW1hcnktMzBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIC8vIGJvdHRvbSBncmFkaWVudFxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwOTk4NyAxMDAlKTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICMwMDk5ODcgMCUsICMwMDRkNDQgMTAwJSk7XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAkeyhwcm9wcykgPT4gKHByb3BzLmlzRXhwYW5kZWQgPyAnNThweCcgOiAnMHB4Jyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAvLyBkaXZpZGVyXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG5gO1xuXG5jb25zdCBNZW51SXRlbUNvbnRhaW5lciA9IHN0eWxlZC5kaXY8VE1lbnVJdGVtUHJvcHMgJiBUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDEycHg7XG4gIHBhZGRpbmc6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmNvbnRlbnRXaWR0aCA9PT0gJ3dpZGUnIHx8ICFwcm9wcy5pc0V4cGFuZGVkID8gJzEycHgnIDogJzEycHggMjhweCd9O1xuICBoZWlnaHQ6IDQ4cHg7XG5gO1xuXG5jb25zdCBNZW51SXRlbUljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1UaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const NavBarBody = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz36"
} : {
  target: "epfjvz36",
  label: "NavBarBody"
})("display:flex;flex:1;padding:", designSystem.designTokens.spacing30, ";flex-direction:column;align-items:flex-start;gap:", designSystem.designTokens.spacing40, ";flex-shrink:0;background:#009987;position:relative;&::after{content:'';position:absolute;bottom:0;height:36px;width:calc(100% - 2 * ", designSystem.designTokens.spacing30, ");background:linear-gradient(180deg, rgba(0, 153, 135, 0) 0%, #009987 100%);}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlDNkIiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgaGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgYmFja2dyb3VuZDogJHtkZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQxMH07XG5gO1xuXG5jb25zdCBOYXZCYXJCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleDogMTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzQwfTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJhY2tncm91bmQ6ICMwMDk5ODc7IC8vIFRPRE86IHVzZSBuZXcgZGVzaWduIHRva2VuIGNvbG9yLXByaW1hcnktMzBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIC8vIGJvdHRvbSBncmFkaWVudFxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwOTk4NyAxMDAlKTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICMwMDk5ODcgMCUsICMwMDRkNDQgMTAwJSk7XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAkeyhwcm9wcykgPT4gKHByb3BzLmlzRXhwYW5kZWQgPyAnNThweCcgOiAnMHB4Jyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAvLyBkaXZpZGVyXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG5gO1xuXG5jb25zdCBNZW51SXRlbUNvbnRhaW5lciA9IHN0eWxlZC5kaXY8VE1lbnVJdGVtUHJvcHMgJiBUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDEycHg7XG4gIHBhZGRpbmc6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmNvbnRlbnRXaWR0aCA9PT0gJ3dpZGUnIHx8ICFwcm9wcy5pc0V4cGFuZGVkID8gJzEycHgnIDogJzEycHggMjhweCd9O1xuICBoZWlnaHQ6IDQ4cHg7XG5gO1xuXG5jb25zdCBNZW51SXRlbUljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1UaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const NavBarFooter = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz35"
} : {
  target: "epfjvz35",
  label: "NavBarFooter"
})("position:relative;display:flex;width:100%;flex-direction:column;background:linear-gradient(180deg, #009987 0%, #004d44 100%);padding:", designSystem.designTokens.spacing30, " ", props => props.isExpanded ? '58px' : '0px', ";justify-content:center;align-items:center;&::before{content:'';position:absolute;top:0;height:1px;width:calc(100% - 2 * ", designSystem.designTokens.spacing30, ");background:rgba(255, 255, 255, 0.5);}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStEcUQiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgaGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgYmFja2dyb3VuZDogJHtkZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQxMH07XG5gO1xuXG5jb25zdCBOYXZCYXJCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleDogMTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzQwfTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJhY2tncm91bmQ6ICMwMDk5ODc7IC8vIFRPRE86IHVzZSBuZXcgZGVzaWduIHRva2VuIGNvbG9yLXByaW1hcnktMzBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIC8vIGJvdHRvbSBncmFkaWVudFxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwOTk4NyAxMDAlKTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICMwMDk5ODcgMCUsICMwMDRkNDQgMTAwJSk7XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAkeyhwcm9wcykgPT4gKHByb3BzLmlzRXhwYW5kZWQgPyAnNThweCcgOiAnMHB4Jyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAvLyBkaXZpZGVyXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG5gO1xuXG5jb25zdCBNZW51SXRlbUNvbnRhaW5lciA9IHN0eWxlZC5kaXY8VE1lbnVJdGVtUHJvcHMgJiBUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDEycHg7XG4gIHBhZGRpbmc6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmNvbnRlbnRXaWR0aCA9PT0gJ3dpZGUnIHx8ICFwcm9wcy5pc0V4cGFuZGVkID8gJzEycHgnIDogJzEycHggMjhweCd9O1xuICBoZWlnaHQ6IDQ4cHg7XG5gO1xuXG5jb25zdCBNZW51SXRlbUljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1UaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const ExpandIcon = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz34"
} : {
  target: "epfjvz34",
  label: "ExpandIcon"
})("width:40px;height:40px;border-radius:", designSystem.designTokens.borderRadius4, ";background:rgba(255, 255, 255, 0.2);" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFGNkIiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgaGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgYmFja2dyb3VuZDogJHtkZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQxMH07XG5gO1xuXG5jb25zdCBOYXZCYXJCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleDogMTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzQwfTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJhY2tncm91bmQ6ICMwMDk5ODc7IC8vIFRPRE86IHVzZSBuZXcgZGVzaWduIHRva2VuIGNvbG9yLXByaW1hcnktMzBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIC8vIGJvdHRvbSBncmFkaWVudFxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwOTk4NyAxMDAlKTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICMwMDk5ODcgMCUsICMwMDRkNDQgMTAwJSk7XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAkeyhwcm9wcykgPT4gKHByb3BzLmlzRXhwYW5kZWQgPyAnNThweCcgOiAnMHB4Jyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAvLyBkaXZpZGVyXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG5gO1xuXG5jb25zdCBNZW51SXRlbUNvbnRhaW5lciA9IHN0eWxlZC5kaXY8VE1lbnVJdGVtUHJvcHMgJiBUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDEycHg7XG4gIHBhZGRpbmc6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmNvbnRlbnRXaWR0aCA9PT0gJ3dpZGUnIHx8ICFwcm9wcy5pc0V4cGFuZGVkID8gJzEycHgnIDogJzEycHggMjhweCd9O1xuICBoZWlnaHQ6IDQ4cHg7XG5gO1xuXG5jb25zdCBNZW51SXRlbUljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1UaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const MenuItemContainer = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz33"
} : {
  target: "epfjvz33",
  label: "MenuItemContainer"
})("display:flex;align-items:center;justify-content:center;gap:12px;padding:", props => props.contentWidth === 'wide' || !props.isExpanded ? '12px' : '12px 28px', ";height:48px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRGMkUiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgaGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgYmFja2dyb3VuZDogJHtkZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQxMH07XG5gO1xuXG5jb25zdCBOYXZCYXJCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleDogMTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzQwfTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJhY2tncm91bmQ6ICMwMDk5ODc7IC8vIFRPRE86IHVzZSBuZXcgZGVzaWduIHRva2VuIGNvbG9yLXByaW1hcnktMzBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIC8vIGJvdHRvbSBncmFkaWVudFxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwOTk4NyAxMDAlKTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICMwMDk5ODcgMCUsICMwMDRkNDQgMTAwJSk7XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAkeyhwcm9wcykgPT4gKHByb3BzLmlzRXhwYW5kZWQgPyAnNThweCcgOiAnMHB4Jyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAvLyBkaXZpZGVyXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG5gO1xuXG5jb25zdCBNZW51SXRlbUNvbnRhaW5lciA9IHN0eWxlZC5kaXY8VE1lbnVJdGVtUHJvcHMgJiBUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDEycHg7XG4gIHBhZGRpbmc6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmNvbnRlbnRXaWR0aCA9PT0gJ3dpZGUnIHx8ICFwcm9wcy5pc0V4cGFuZGVkID8gJzEycHgnIDogJzEycHggMjhweCd9O1xuICBoZWlnaHQ6IDQ4cHg7XG5gO1xuXG5jb25zdCBNZW51SXRlbUljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1UaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const MenuItemIcon = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz32"
} : {
  target: "epfjvz32",
  label: "MenuItemIcon"
})("width:24px;height:24px;border-radius:", designSystem.designTokens.borderRadius4, ";background:rgba(255, 255, 255, 0.2);" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNHK0IiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgaGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgYmFja2dyb3VuZDogJHtkZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQxMH07XG5gO1xuXG5jb25zdCBOYXZCYXJCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleDogMTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzQwfTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJhY2tncm91bmQ6ICMwMDk5ODc7IC8vIFRPRE86IHVzZSBuZXcgZGVzaWduIHRva2VuIGNvbG9yLXByaW1hcnktMzBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIC8vIGJvdHRvbSBncmFkaWVudFxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwOTk4NyAxMDAlKTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICMwMDk5ODcgMCUsICMwMDRkNDQgMTAwJSk7XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAkeyhwcm9wcykgPT4gKHByb3BzLmlzRXhwYW5kZWQgPyAnNThweCcgOiAnMHB4Jyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAvLyBkaXZpZGVyXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG5gO1xuXG5jb25zdCBNZW51SXRlbUNvbnRhaW5lciA9IHN0eWxlZC5kaXY8VE1lbnVJdGVtUHJvcHMgJiBUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDEycHg7XG4gIHBhZGRpbmc6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmNvbnRlbnRXaWR0aCA9PT0gJ3dpZGUnIHx8ICFwcm9wcy5pc0V4cGFuZGVkID8gJzEycHgnIDogJzEycHggMjhweCd9O1xuICBoZWlnaHQ6IDQ4cHg7XG5gO1xuXG5jb25zdCBNZW51SXRlbUljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1UaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const MenuItemTitle = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz31"
} : {
  target: "epfjvz31",
  label: "MenuItemTitle"
})("border-radius:", designSystem.designTokens.borderRadius4, ";background:rgba(255, 255, 255, 0.2);flex:1;height:18px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZHZ0MiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgaGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgYmFja2dyb3VuZDogJHtkZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQxMH07XG5gO1xuXG5jb25zdCBOYXZCYXJCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleDogMTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzQwfTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJhY2tncm91bmQ6ICMwMDk5ODc7IC8vIFRPRE86IHVzZSBuZXcgZGVzaWduIHRva2VuIGNvbG9yLXByaW1hcnktMzBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIC8vIGJvdHRvbSBncmFkaWVudFxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwOTk4NyAxMDAlKTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICMwMDk5ODcgMCUsICMwMDRkNDQgMTAwJSk7XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAkeyhwcm9wcykgPT4gKHByb3BzLmlzRXhwYW5kZWQgPyAnNThweCcgOiAnMHB4Jyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAvLyBkaXZpZGVyXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG5gO1xuXG5jb25zdCBNZW51SXRlbUNvbnRhaW5lciA9IHN0eWxlZC5kaXY8VE1lbnVJdGVtUHJvcHMgJiBUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDEycHg7XG4gIHBhZGRpbmc6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmNvbnRlbnRXaWR0aCA9PT0gJ3dpZGUnIHx8ICFwcm9wcy5pc0V4cGFuZGVkID8gJzEycHgnIDogJzEycHggMjhweCd9O1xuICBoZWlnaHQ6IDQ4cHg7XG5gO1xuXG5jb25zdCBNZW51SXRlbUljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1UaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const MenuItemGroup = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz30"
} : {
  target: "epfjvz30",
  label: "MenuItemGroup"
})(process.env.NODE_ENV === "production" ? {
  name: "1d3w5wq",
  styles: "width:100%"
} : {
  name: "1d3w5wq",
  styles: "width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9IZ0MiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgaGVpZ2h0OiAke0RJTUVOU0lPTlMuaGVhZGVyfTtcbiAgYmFja2dyb3VuZDogJHtkZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQxMH07XG5gO1xuXG5jb25zdCBOYXZCYXJCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleDogMTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzQwfTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJhY2tncm91bmQ6ICMwMDk5ODc7IC8vIFRPRE86IHVzZSBuZXcgZGVzaWduIHRva2VuIGNvbG9yLXByaW1hcnktMzBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIC8vIGJvdHRvbSBncmFkaWVudFxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwOTk4NyAxMDAlKTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICMwMDk5ODcgMCUsICMwMDRkNDQgMTAwJSk7XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAkeyhwcm9wcykgPT4gKHByb3BzLmlzRXhwYW5kZWQgPyAnNThweCcgOiAnMHB4Jyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAvLyBkaXZpZGVyXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7ZGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG5gO1xuXG5jb25zdCBNZW51SXRlbUNvbnRhaW5lciA9IHN0eWxlZC5kaXY8VE1lbnVJdGVtUHJvcHMgJiBUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDEycHg7XG4gIHBhZGRpbmc6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmNvbnRlbnRXaWR0aCA9PT0gJ3dpZGUnIHx8ICFwcm9wcy5pc0V4cGFuZGVkID8gJzEycHgnIDogJzEycHggMjhweCd9O1xuICBoZWlnaHQ6IDQ4cHg7XG5gO1xuXG5jb25zdCBNZW51SXRlbUljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1UaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const MenuItem = props => {
  return jsxRuntime.jsxs(MenuItemContainer, {
    isExpanded: props.isExpanded,
    contentWidth: props.contentWidth,
    children: [jsxRuntime.jsx(MenuItemIcon, {}), props.isExpanded && jsxRuntime.jsx(MenuItemTitle, {})]
  });
};
MenuItem.defaultProps = {
  contentWidth: 'wide'
};
const NavBarSkeleton = props => {
  var _context, _context2, _context3, _context4;
  return jsxRuntime.jsxs(NavBarLayout, {
    isExpanded: props.isExpanded,
    children: [jsxRuntime.jsx(NavBarHeader, {
      children: jsxRuntime.jsx(MenuItemGroup, {
        children: jsxRuntime.jsx(MenuItem, {
          contentWidth: "narrow",
          isExpanded: props.isExpanded
        })
      })
    }), jsxRuntime.jsxs(NavBarBody, {
      children: [jsxRuntime.jsx(MenuItemGroup, {
        children: _mapInstanceProperty__default["default"](_context = [..._keysInstanceProperty__default["default"](_context2 = Array(2)).call(_context2)]).call(_context, index => jsxRuntime.jsx(MenuItem, {
          isExpanded: props.isExpanded
        }, index))
      }), jsxRuntime.jsx(MenuItemGroup, {
        children: _mapInstanceProperty__default["default"](_context3 = [..._keysInstanceProperty__default["default"](_context4 = Array(10)).call(_context4)]).call(_context3, index => jsxRuntime.jsx(MenuItem, {
          isExpanded: props.isExpanded
        }, index))
      }), jsxRuntime.jsx(MenuItemGroup, {
        children: jsxRuntime.jsx(MenuItem, {
          isExpanded: props.isExpanded
        })
      })]
    }), jsxRuntime.jsx(NavBarFooter, {
      isExpanded: props.isExpanded,
      children: jsxRuntime.jsx(ExpandIcon, {})
    })]
  });
};
NavBarSkeleton.displayName = 'NavBarSkeleton';

// Type guard to help with filtering arrays for nullish elements.
function nonNullable(value) {
  return value !== null && value !== undefined;
}

function ownKeys$1(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var _context4, _context5; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context4 = ownKeys$1(Object(t), !0)).call(_context4, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context5 = ownKeys$1(Object(t))).call(_context5, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
var FetchProjectExtensionsNavbar = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchProjectExtensionsNavbar" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectExtension" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "installedApplications" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "application" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "entryPointUriPath" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "icon" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "mainMenuLink" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "defaultLabel" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }] } }, { kind: "Field", name: { kind: "Name", value: "submenuLinks" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "uriPath" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "defaultLabel" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }] } }] } }] } }] } }] } }], loc: { start: 0, end: 537, source: { body: "query FetchProjectExtensionsNavbar {\n  projectExtension {\n    id\n    installedApplications {\n      application {\n        id\n        entryPointUriPath\n        icon\n        mainMenuLink {\n          id\n          permissions\n          defaultLabel\n          labelAllLocales {\n            locale\n            value\n          }\n        }\n        submenuLinks {\n          id\n          uriPath\n          permissions\n          defaultLabel\n          labelAllLocales {\n            locale\n            value\n          }\n        }\n      }\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const getInitialState = isForcedMenuOpen => ({
  isExpanderVisible: true,
  isMenuOpen: isNil__default["default"](isForcedMenuOpen) ? false : isForcedMenuOpen
});
const isForcedMenuOpenDefaultValue = false;
const reducer = (state, action) => {
  switch (action.type) {
    case 'setActiveItemIndex':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        activeItemIndex: action.payload
      });
    case 'unsetActiveItemIndex':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        activeItemIndex: undefined
      });
    case 'setIsExpanderVisible':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        isExpanderVisible: true
      });
    case 'toggleIsMenuOpen':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        isMenuOpen: !state.isMenuOpen
      });
    case 'setIsMenuOpenAndMakeExpanderVisible':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        isExpanderVisible: true,
        isMenuOpen: action.payload
      });
    case 'reset':
      return {
        isExpanderVisible: false,
        isMenuOpen: false
      };
    default:
      return state;
  }
};
const useNavbarStateManager = props => {
  var _context, _context2;
  const navBarNode = react.useRef(null);
  const applicationsNavBarMenu = useApplicationsMenu.useApplicationsMenu('navBar', {
    queryOptions: {
      onError: sentry.reportErrorToSentry
    },
    environment: props.environment
  });
  const _useMcQuery = applicationShellConnectors.useMcQuery(FetchProjectExtensionsNavbar, {
      skip: !props.environment.servedByProxy,
      context: {
        target: constants.GRAPHQL_TARGETS.SETTINGS_SERVICE
      },
      fetchPolicy: 'cache-and-network',
      onError: sentry.reportErrorToSentry
    }),
    projectExtensionsQuery = _useMcQuery.data;
  const allCustomApplicationsNavbarMenu = projectExtensionsQuery && projectExtensionsQuery.projectExtension && projectExtensionsQuery.projectExtension.installedApplications ? _filterInstanceProperty__default["default"](_context = _mapInstanceProperty__default["default"](_context2 = projectExtensionsQuery.projectExtension.installedApplications).call(_context2, installedApplication => {
    var _context3;
    const application = installedApplication.application;
    // Map the menu properties to match the one from the proxy schema.
    // This is to ensure that the menu object is the same from the proxy
    // config and the custom apps config, thus allowing them to be
    // concatenated and rendered the same way.
    return {
      key: application.id,
      uriPath: application.entryPointUriPath,
      labelAllLocales: application.mainMenuLink.labelAllLocales || [],
      icon: application.icon,
      permissions: application.mainMenuLink.permissions,
      defaultLabel: application.mainMenuLink.defaultLabel,
      featureToggle: undefined,
      menuVisibility: undefined,
      actionRights: undefined,
      dataFences: undefined,
      submenu: _mapInstanceProperty__default["default"](_context3 = application.submenuLinks || []).call(_context3, submenuLink => ({
        key: submenuLink.id,
        uriPath: submenuLink.uriPath,
        labelAllLocales: submenuLink.labelAllLocales || [],
        permissions: submenuLink.permissions,
        defaultLabel: submenuLink.defaultLabel,
        featureToggle: undefined,
        menuVisibility: undefined,
        actionRights: undefined,
        dataFences: undefined
      }))
    };
  })).call(_context, nonNullable) : [];
  const cachedIsForcedMenuOpen = window.localStorage.getItem(constants.STORAGE_KEYS.IS_FORCED_MENU_OPEN);
  const isForcedMenuOpen = isNil__default["default"](cachedIsForcedMenuOpen) ? isForcedMenuOpenDefaultValue : JSON.parse(cachedIsForcedMenuOpen);
  if (isNil__default["default"](cachedIsForcedMenuOpen)) {
    window.localStorage.setItem(constants.STORAGE_KEYS.IS_FORCED_MENU_OPEN, String(isForcedMenuOpen));
  }
  const _useReducer = react.useReducer(reducer, getInitialState(isForcedMenuOpen)),
    _useReducer2 = _slicedToArray(_useReducer, 2),
    state = _useReducer2[0],
    dispatch = _useReducer2[1];
  const checkSize = react.useCallback(throttle__default["default"](() => {
    const shouldOpen = window.innerWidth > oidc.WINDOW_SIZES.STANDARD;
    const canExpandMenu = window.innerWidth > oidc.WINDOW_SIZES.WIDE;

    // If the screen is small, we should always keep the menu closed,
    // no matter the settings.
    if (!canExpandMenu) {
      if (state.isMenuOpen || state.isExpanderVisible) {
        // and resets the state to avoid conflicts
        dispatch({
          type: 'reset'
        });
      }
    } else if (isForcedMenuOpen) {
      dispatch({
        type: 'setIsMenuOpenAndMakeExpanderVisible',
        payload: true
      });
    } else if (canExpandMenu && state.isExpanderVisible !== true) {
      dispatch({
        type: 'setIsExpanderVisible'
      });
    } else if (isNil__default["default"](isForcedMenuOpen) && state.isMenuOpen !== shouldOpen) {
      // User has no settings yet (this.props.isForcedMenuOpen === null)
      // We check the viewport size and:
      // - if screen is big, we open the menu
      // - if screen is small we close it
      dispatch({
        type: 'setIsMenuOpenAndMakeExpanderVisible',
        payload: shouldOpen
      });
    } else if (!isNil__default["default"](isForcedMenuOpen) && state.isMenuOpen !== isForcedMenuOpen) {
      // User has setting, we should use that and ignore the screen size.
      // Note: if viewport size is small, we should ignore the user settings.
      dispatch({
        type: 'setIsMenuOpenAndMakeExpanderVisible',
        payload: isForcedMenuOpen
      });
    }
  }, 100), [isForcedMenuOpen, state.isExpanderVisible, state.isMenuOpen]);
  const shouldCloseMenuFly = react.useCallback(event => {
    if (navBarNode && navBarNode.current && !navBarNode.current.contains(event.target) && !state.isMenuOpen) dispatch({
      type: 'unsetActiveItemIndex'
    });else if (event.type === 'mouseleave') dispatch({
      type: 'unsetActiveItemIndex'
    });
  }, [state.isMenuOpen]);
  react.useEffect(() => {
    window.addEventListener('resize', checkSize);
    window.addEventListener('click', shouldCloseMenuFly, true);
    return () => {
      window.removeEventListener('resize', checkSize);
      window.removeEventListener('click', shouldCloseMenuFly, true);
    };
  }, [checkSize, shouldCloseMenuFly]);
  react.useEffect(() => {
    checkSize();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // <-- run this only once!!

  react.useLayoutEffect(() => {
    if (state.isMenuOpen) document.body.classList.add('body__menu-open');
    if (!state.isMenuOpen) document.body.classList.remove('body__menu-open');
  }, [state.isMenuOpen]);
  const handleToggleItem = react.useCallback(nextActiveItemIndex => {
    if (state.activeItemIndex !== nextActiveItemIndex) dispatch({
      type: 'setActiveItemIndex',
      payload: nextActiveItemIndex
    });
  }, [state.activeItemIndex]);
  const handleToggleMenu = react.useCallback(() => {
    if (state.isMenuOpen && state.activeItemIndex) {
      dispatch({
        type: 'unsetActiveItemIndex'
      });
    }
    dispatch({
      type: 'toggleIsMenuOpen'
    });
    // Synchronize the menu state with local storage.
    window.localStorage.setItem(constants.STORAGE_KEYS.IS_FORCED_MENU_OPEN, String(!state.isMenuOpen));
  }, [state.activeItemIndex, state.isMenuOpen]);
  const allInternalApplicationsNavbarMenu = applicationsNavBarMenu || [];
  return _objectSpread$1(_objectSpread$1({}, state), {}, {
    navBarNode,
    handleToggleItem,
    handleToggleMenu,
    shouldCloseMenuFly,
    allInternalApplicationsNavbarMenu,
    allCustomApplicationsNavbarMenu
  });
};

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context9, _context10; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context9 = ownKeys(Object(t), !0)).call(_context9, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context10 = ownKeys(Object(t))).call(_context10, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const compiledStyles = {
  "global": ":root {\n\n  /* Left navigation */\n}\n\n@keyframes navbar-mod__visible___AKV1b {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n/* Left Nav */\n\n.navbar-mod__left-navigation___n7yUt {\n  display: grid;\n  width: 80px;\n  background: var(--color-primary);\n  height: 100%;\n  grid-template-rows: 56px 1fr;\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.navbar-mod__navigation-header___Z6fOr {\n  background-color: var(--color-accent-10);\n  color: var(--color-surface);\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  align-items: center;\n  padding: var(--spacing-30);\n}\n\n.navbar-mod__navigation-header___Z6fOr .navbar-mod__icon-container___w3FtA {\n  width: auto;\n  display: flex;\n  justify-content: center;\n}\n\n.navbar-mod__navigation-header___Z6fOr .navbar-mod__title___eRWUj {\n  font-weight: 600;\n  margin-left: var(--spacing-20);\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n  animation: navbar-mod__visible___AKV1b 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.navbar-mod__navigation-header___Z6fOr .navbar-mod__icon___bLsep {\n  width: 24px;\n  height: 24px;\n}\n\n.navbar-mod__list___RCV3J {\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  flex: 1 1 0;\n}\n\n.navbar-mod__list-item___MjK6t {\n  min-height: 48px;\n  background: var(--color-primary);\n  margin: 0;\n  list-style: none;\n  cursor: pointer;\n}\n\n.navbar-mod__item-link___X2Ina {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link);\n  width: 48px;\n  position: relative;\n  display: block;\n}\n\n.body__menu-open .navbar-mod__item-link___X2Ina {\n  width: 100%;\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__item-icon-text___a-8JY {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__icon___bLsep {\n  width: 24px;\n  height: 24px;\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.navbar-mod__list-item___MjK6t:hover .navbar-mod__icon___bLsep {\n  /* 1.16 is roughly the ratio of icon-size-hover to --icon-size */\n  transform: scale(1.2);\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__icon___bLsep > svg *:not([fill='none']) {\n  fill: var(--color-surface);\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__title___eRWUj {\n  flex: 1;\n  font-weight: 600;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-size: var(--font-size-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  line-height: var(--line-height-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link);\n  opacity: 0;\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n  text-align: left;\n  text-decoration: none;\n  z-index: 1;\n}\n\n.navbar-mod__expander___jyAUi {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  background: linear-gradient(\n    180deg,\n    var(--color-primary) 0%,\n    var(--color-primary-25) 100%\n  );\n  padding: var(--spacing-30) var(--spacing-25);\n}\n\n.navbar-mod__expander___jyAUi:hover {\n  background-color: var(--color-primary-40);\n}\n\n/* divider */\n\n.navbar-mod__expander___jyAUi::before {\n  content: '';\n  position: absolute;\n  top: 56px;\n  height: 1px;\n  background: rgba(255, 255, 255, 0.5);\n  width: calc(100% - 2 * var(--spacing-30));\n}\n\n.navbar-mod__expand-icon___BtmRa {\n  height: 40px;\n  width: 40px;\n  border-radius: var(--border-radius-4);\n  padding: var(--spacing-20);\n  background: rgba(255, 255, 255, 0.2);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.navbar-mod__expand-icon___BtmRa:hover {\n  background: rgba(255, 255, 255, 0.3);\n  cursor: pointer;\n}\n\n.navbar-mod__item--bottom___eW7nh {\n  position: absolute;\n  bottom: 50px;\n}\n\n.navbar-mod__list-item___MjK6t:not(.navbar-mod__item_menu__active___5xFRw):hover {\n  background-color: var(--color-primary-40);\n  border-radius: var(--border-radius-8);\n}\n\n.navbar-mod__item_menu-open___zk0zh {\n  height: auto !important;\n}\n\n.navbar-mod__item_menu-collapsed___cluyY .navbar-mod__item-link___X2Ina {\n  text-align: center;\n}\n\n.body__menu-open .navbar-mod__left-navigation___n7yUt {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  box-shadow: var(--shadow-for-navbar);\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.body__menu-open .navbar-mod__list-item___MjK6t {\n  height: auto;\n  min-height: 48px;\n  overflow: hidden;\n  width: 100%;\n}\n\n.body__menu-open .navbar-mod__left-navigation___n7yUt {\n  width: 256px;\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.body__menu-open .navbar-mod__list-item___MjK6t .navbar-mod__title___eRWUj {\n  opacity: 1;\n  margin-left: var(--spacing-25);\n  color: var(--color-surface);\n  transition: all 150ms cubic-bezier(1, 0, 0.58, 1);\n  animation: navbar-mod__visible___AKV1b 150ms cubic-bezier(1, 0, 0.58, 1);\n}\n\n.navbar-mod__list-item___MjK6t:hover .navbar-mod__title___eRWUj {\n  margin-left: calc(var(--spacing-25) + 2px);\n}\n\n.navbar-mod__list-item___MjK6t:not(.navbar-mod__item__active___lo1sr):hover .navbar-mod__icon___bLsep > svg *:not([fill='none']) {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  fill: var(--color-for-navbar-icon-when-active);\n}\n\n.navbar-mod__list-item___MjK6t:not(.navbar-mod__item__active___lo1sr):hover .navbar-mod__title___eRWUj {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link-when-hovered);\n}\n\n.body__menu-open .navbar-mod__item__active___lo1sr {\n  max-height: 500px;\n  transition: max-height 0.25s ease-in;\n}\n\n/*  Second level menu */\n\n.navbar-mod__sublist___os1s7 {\n  padding: var(--spacing-30);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-size: var(--font-size-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  background-color: var(--background-color-for-navbar);\n  left: 72px;\n  z-index: -1;\n  list-style: none;\n  position: fixed;\n  display: none;\n}\n\n/* This pseudo-element is required to enable smooth coursor movement from the main menu item to submenu items with the gap in between */\n\n.navbar-mod__sublist-expanded__active___240JK::before,\n.navbar-mod__sublist-collapsed__active___-9vYh::before,\n.navbar-mod__sublist-collapsed__active__above___BXCeM::before {\n  content: '';\n  position: absolute;\n  display: block;\n  width: calc(253px + var(--spacing-20));\n  height: 48px;\n  left: calc(-1 * var(--spacing-20));\n}\n\n.navbar-mod__sublist__inactive___kJvf- {\n  /* empty block */\n}\n\n.navbar-mod__sublist-item___gafkS {\n  display: flex;\n  align-items: center;\n  align-self: stretch;\n  transition: padding-left 150ms ease-out;\n}\n\n.navbar-mod__sublist-item__active___QC6pa {\n  border-radius: var(--border-radius-4);\n  background: var(--color-accent-30);\n}\n\n.navbar-mod__sublist-item___gafkS:not(.navbar-mod__sublist-item__active___QC6pa):hover {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link-when-hovered);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link-when-hovered);\n  border-radius: var(--border-radius-4);\n  background: var(--color-primary-95);\n  padding-left: var(--spacing-20);\n}\n\n.navbar-mod__text___ccHEu {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-size: var(--font-size-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  line-height: var(--line-height-for-navbar-link);\n  width: 100%;\n  height: 100%;\n}\n\n.navbar-mod__text-link___dhtj6 {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link);\n  text-decoration: none;\n  display: flex;\n  padding: var(--spacing-25);\n  align-items: center;\n  justify-content: center;\n}\n\n.body__menu-open .navbar-mod__text-link___dhtj6 {\n  justify-content: start;\n}\n\n.navbar-mod__text-link-sublist-wrapper___1JN4x {\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  min-height: 0;\n}\n\n.navbar-mod__text-link-sublist___AoIpU {\n  /* stylelint-disable-next-line value-no-vendor-prefix */\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  color: var(--color-solid);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link-when-hovered);\n  text-decoration: none;\n  flex: 1;\n  padding: var(--spacing-25) var(--spacing-25) var(--spacing-25)\n    var(--spacing-30);\n}\n\n.navbar-mod__navlink-clickable-content___bzddC {\n  height: 100%;\n  width: 100%;\n}\n\n/* Item active */\n\n.navbar-mod__item__active___lo1sr,\n.navbar-mod__item_menu__active___5xFRw {\n  background: var(--color-accent-30);\n  border-radius: var(--border-radius-8);\n}\n\n.navbar-mod__list-item___MjK6t.navbar-mod__item__active___lo1sr .navbar-mod__item-icon-text___a-8JY {\n  justify-content: flex-start;\n}\n\n.navbar-mod__list-item___MjK6t .navbar-mod__icon-container___w3FtA {\n  width: auto;\n  display: flex;\n  justify-content: center;\n  align-self: flex-start;\n}\n\n.navbar-mod__fixed-menu___42tD9 .navbar-mod__list-item___MjK6t .navbar-mod__item-icon-text___a-8JY {\n  justify-content: center;\n  display: flex;\n  width: 100%;\n}\n\n.navbar-mod__support-menu___fi5Ka {\n  padding: 0 var(--spacing-30) var(--spacing-20) var(--spacing-30);\n  height: calc(48px + var(--spacing-20));\n}\n\n.body__menu-open .navbar-mod__list-item___MjK6t.navbar-mod__item__active___lo1sr .navbar-mod__item-icon-text___a-8JY {\n  position: relative;\n  width: auto;\n}\n\n.body__menu-open .navbar-mod__list-item___MjK6t.navbar-mod__item__active___lo1sr .navbar-mod__item-icon-text___a-8JY {\n  margin-left: 0;\n}\n\n.navbar-mod__tooltip-container___iJYyi {\n  position: absolute;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  height: 48px;\n  visibility: visible;\n}\n\n.navbar-mod__tooltip___1ID3j {\n  padding: var(--spacing-10) calc(var(--spacing-20) + var(--spacing-10));\n  /* stylelint-disable-next-line value-no-vendor-prefix */\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  border-radius: var(--border-radius-4);\n  background: var(--color-accent-10);\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.25);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-size: var(--font-size-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  line-height: var(--line-height-for-navbar-link);\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link);\n  color: var(--color-surface);\n  max-height: 48px;\n  visibility: inherit;\n}\n\n.navbar-mod__sublist-expanded__active___240JK,\n.navbar-mod__sublist-collapsed__active___-9vYh,\n.navbar-mod__sublist-collapsed__active__above___BXCeM {\n  opacity: 1;\n  display: none;\n  text-align: left;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  background-color: var(--background-color-for-navbar-when-active);\n}\n\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-collapsed__active___-9vYh,\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-collapsed__active__above___BXCeM,\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-expanded__active___240JK {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  background-color: var(--color-surface);\n  /* TODO: add design tokens instead hard-coded values */\n  min-height: 50px;\n  width: 253px;\n  border-radius: var(--border-radius-8);\n  /* z-index value must be higher than AppBar's z-index */\n  z-index: 20001;\n  box-shadow: -2px 4px 25px 0 rgba(89, 89, 89, 0.5);\n}\n\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-collapsed__active___-9vYh.navbar-mod__sublist-collapsed__empty___FBUli,\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-collapsed__active__above___BXCeM.navbar-mod__sublist-collapsed__empty___FBUli {\n  visibility: hidden;\n}\n\n.navbar-mod__item-link___X2Ina:hover .navbar-mod__sublist-expanded__active___240JK {\n  left: 248px;\n}\n\n.navbar-mod__highlighted___oJWkA,\n.navbar-mod__highlighted___oJWkA .navbar-mod__title___eRWUj {\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  color: var(--color-for-navbar-link-when-active) !important;\n  /* stylelint-disable-next-line csstools/value-no-unknown-custom-properties */\n  font-weight: var(--font-weight-for-navbar-link-when-active);\n}\n\n.navbar-mod__hidden___TQLSs {\n  display: none;\n}\n\n.navbar-mod__divider___TpVzu {\n  border-top: 1px solid var(--color-neutral-40);\n}\n\n.navbar-mod__loading-dot-container___G2LVb {\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.navbar-mod__scrollable-menu___64pxJ {\n  flex: 1 1 0;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  padding: var(--spacing-30) var(--spacing-30) 48px;\n  width: 80px;\n  box-sizing: border-box;\n  /* For Firefox */\n  scrollbar-width: thin;\n  scrollbar-color: var(--color-primary-40) transparent;\n}\n\n.body__menu-open .navbar-mod__scrollable-menu___64pxJ {\n  width: 256px;\n}\n\n.navbar-mod__scrollable-menu___64pxJ:hover {\n  overflow-y: scroll;\n  padding-right: 8px;\n}\n\n.navbar-mod__scrollable-menu___64pxJ::-webkit-scrollbar {\n  width: 8px;\n}\n\n.navbar-mod__scrollable-menu___64pxJ::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.navbar-mod__scrollable-menu___64pxJ::-webkit-scrollbar-thumb {\n  background-color: var(--color-primary-40);\n  border-radius: var(--border-radius-8);\n}\n\n.navbar-mod__fixed-menu___42tD9 {\n  position: relative;\n  width: 80px;\n}\n\n.body__menu-open .navbar-mod__fixed-menu___42tD9 {\n  width: 256px;\n}\n",
  "jsonMap": {
    "left-navigation": "navbar-mod__left-navigation___n7yUt",
    "navigation-header": "navbar-mod__navigation-header___Z6fOr",
    "icon-container": "navbar-mod__icon-container___w3FtA",
    "title": "navbar-mod__title___eRWUj",
    "visible": "navbar-mod__visible___AKV1b",
    "icon": "navbar-mod__icon___bLsep",
    "list": "navbar-mod__list___RCV3J",
    "list-item": "navbar-mod__list-item___MjK6t",
    "item-link": "navbar-mod__item-link___X2Ina",
    "item-icon-text": "navbar-mod__item-icon-text___a-8JY",
    "expander": "navbar-mod__expander___jyAUi",
    "expand-icon": "navbar-mod__expand-icon___BtmRa",
    "item--bottom": "navbar-mod__item--bottom___eW7nh",
    "item_menu__active": "navbar-mod__item_menu__active___5xFRw",
    "item_menu-open": "navbar-mod__item_menu-open___zk0zh",
    "item_menu-collapsed": "navbar-mod__item_menu-collapsed___cluyY",
    "item__active": "navbar-mod__item__active___lo1sr",
    "sublist": "navbar-mod__sublist___os1s7",
    "sublist-expanded__active": "navbar-mod__sublist-expanded__active___240JK",
    "sublist-collapsed__active": "navbar-mod__sublist-collapsed__active___-9vYh",
    "sublist-collapsed__active__above": "navbar-mod__sublist-collapsed__active__above___BXCeM",
    "sublist__inactive": "navbar-mod__sublist__inactive___kJvf-",
    "sublist-item": "navbar-mod__sublist-item___gafkS",
    "sublist-item__active": "navbar-mod__sublist-item__active___QC6pa",
    "text": "navbar-mod__text___ccHEu",
    "text-link": "navbar-mod__text-link___dhtj6",
    "text-link-sublist-wrapper": "navbar-mod__text-link-sublist-wrapper___1JN4x",
    "text-link-sublist": "navbar-mod__text-link-sublist___AoIpU",
    "navlink-clickable-content": "navbar-mod__navlink-clickable-content___bzddC",
    "fixed-menu": "navbar-mod__fixed-menu___42tD9",
    "support-menu": "navbar-mod__support-menu___fi5Ka",
    "tooltip-container": "navbar-mod__tooltip-container___iJYyi",
    "tooltip": "navbar-mod__tooltip___1ID3j",
    "sublist-collapsed__empty": "navbar-mod__sublist-collapsed__empty___FBUli",
    "highlighted": "navbar-mod__highlighted___oJWkA",
    "hidden": "navbar-mod__hidden___TQLSs",
    "divider": "navbar-mod__divider___TpVzu",
    "loading-dot-container": "navbar-mod__loading-dot-container___G2LVb",
    "scrollable-menu": "navbar-mod__scrollable-menu___64pxJ"
  }
}; // https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros
const styles = compiledStyles.jsonMap;
const getMenuVisibilitiesOfSubmenus = menu => {
  var _context, _context2;
  return _filterInstanceProperty__default["default"](_context = _mapInstanceProperty__default["default"](_context2 = menu.submenu).call(_context2, submenu => submenu.menuVisibility)).call(_context, nonNullable);
};
const getMenuVisibilityOfMainmenu = menu => menu.menuVisibility ? [menu.menuVisibility] : [];
const getIsSubmenuRouteActive = (uriPath, props) => {
  var _context3;
  return Boolean(reactRouterDom.matchPath(props.location.pathname, {
    path: _concatInstanceProperty__default["default"](_context3 = "/".concat(props.projectKey, "/")).call(_context3, uriPath),
    exact: true,
    strict: false
  }));
};
const ApplicationMenu = props => {
  var _context4, _props$menu$featureTo, _props$menu$actionRig, _props$menu$dataFence, _context5, _context6;
  const _useState = react.useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    submenuVerticalPosition = _useState2[0],
    setSubmenuVerticalPosition = _useState2[1];
  const _useState3 = react.useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isSubmenuAboveMenuItem = _useState4[0],
    setIsSubmenuAboveMenuItem = _useState4[1];
  const submenuRef = react.useRef(null);
  const hasSubmenu = _Array$isArray__default["default"](props.menu.submenu) && props.menu.submenu.length > 0;
  const menuItemIdentifier = snakeCase__default["default"](props.menu.key);
  const callbackFn = react.useCallback(entries => {
    var _document$querySelect;
    const menuItemBoundingClientRect = (_document$querySelect = document.querySelector("[data-menuitem=\"".concat(menuItemIdentifier, "\"]"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getBoundingClientRect();
    const menuItemTop = (menuItemBoundingClientRect === null || menuItemBoundingClientRect === void 0 ? void 0 : menuItemBoundingClientRect.top) || 0;
    const menuItemBottom = (menuItemBoundingClientRect === null || menuItemBoundingClientRect === void 0 ? void 0 : menuItemBoundingClientRect.bottom) || 0;
    const _entries = _slicedToArray(entries, 1),
      entry = _entries[0];
    const doesSubmenuFitWithinViewportBelowMenuItem = entry.boundingClientRect.height + (props.isMenuOpen ? menuItemTop : menuItemBottom) > window.innerHeight;
    // if the submenu does not fit at the bottom of the viewport (below the menu item)
    if (doesSubmenuFitWithinViewportBelowMenuItem) {
      setIsSubmenuAboveMenuItem(true);
      setSubmenuVerticalPosition(window.innerHeight - (props.isMenuOpen ? menuItemBottom : menuItemTop));
      // show the submenu above the menu item
    } else {
      setIsSubmenuAboveMenuItem(false);
      setSubmenuVerticalPosition(props.isMenuOpen ? menuItemTop : menuItemBottom);
    }
  }, [menuItemIdentifier, props.isMenuOpen]);
  const observerRef = react.useRef(null);
  react.useLayoutEffect(() => {
    observerRef.current = new IntersectionObserver(callbackFn, {
      rootMargin: '-100% 0px 0px 0px' // we want to observe if the submenu crosses the bottom line of the viewport - therefore we set the root element top margin to -100% of the viewport height
    });

    return () => {
      var _observerRef$current;
      return (_observerRef$current = observerRef.current) === null || _observerRef$current === void 0 ? void 0 : _observerRef$current.disconnect();
    };
  }, [callbackFn, props.isMenuOpen]);
  react.useLayoutEffect(() => {
    const currentSubmenuRef = submenuRef.current;
    const observer = observerRef.current;
    if (!currentSubmenuRef) return;
    if (observer && currentSubmenuRef) {
      observer.observe(currentSubmenuRef);
    }
    return () => observer === null || observer === void 0 ? void 0 : observer.disconnect();
  }, [menuItemIdentifier, props.isMenuOpen, props.handleToggleItem, callbackFn]);
  const isMainMenuRouteActive = Boolean(reactRouterDom.matchPath(props.location.pathname, {
    path: _concatInstanceProperty__default["default"](_context4 = "/".concat(props.projectKey, "/")).call(_context4, props.menu.uriPath),
    exact: false,
    strict: false
  }));
  react.useEffect(() => {
    // On first render, check which menu is active for the current application and expand
    // the submenu automatically unless the all navbar is collapsed or there are no submenu links.
    if (props.isMenuOpen && isMainMenuRouteActive && hasSubmenu) {
      props.handleToggleItem();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [props.isMenuOpen]); // <-- (re)run this only when the all menu expands

  const namesOfMenuVisibilitiesOfAllSubmenus = hasSubmenu ? getMenuVisibilitiesOfSubmenus(props.menu) : getMenuVisibilityOfMainmenu(props.menu);
  return jsxRuntime.jsx(RestrictedMenuItem, {
    keyOfMenuItem: props.menu.key,
    featureToggle: (_props$menu$featureTo = props.menu.featureToggle) !== null && _props$menu$featureTo !== void 0 ? _props$menu$featureTo : undefined,
    permissions: props.menu.permissions,
    actionRights: (_props$menu$actionRig = props.menu.actionRights) !== null && _props$menu$actionRig !== void 0 ? _props$menu$actionRig : undefined,
    dataFences: (_props$menu$dataFence = props.menu.dataFences) !== null && _props$menu$dataFence !== void 0 ? _props$menu$dataFence : undefined,
    projectPermissions: props.projectPermissions,
    menuVisibilities: props.menuVisibilities,
    namesOfMenuVisibilities: namesOfMenuVisibilitiesOfAllSubmenus,
    children: jsxRuntime.jsxs(MenuItem$1, {
      hasSubmenu: hasSubmenu,
      isActive: props.isActive,
      isMainMenuRouteActive: isMainMenuRouteActive,
      isMenuOpen: props.isMenuOpen,
      onClick: props.handleToggleItem,
      onMouseEnter: props.handleToggleItem,
      onMouseLeave: props.shouldCloseMenuFly,
      identifier: menuItemIdentifier,
      children: [jsxRuntime.jsx(MenuItemLink, {
        linkTo: _concatInstanceProperty__default["default"](_context5 = "/".concat(props.projectKey, "/")).call(_context5, props.menu.uriPath),
        useFullRedirectsForLinks: props.useFullRedirectsForLinks,
        onClick: props.onMenuItemClick,
        children: jsxRuntime.jsx(ItemContainer, {
          labelAllLocales: props.menu.labelAllLocales,
          defaultLabel: props.menu.defaultLabel,
          applicationLocale: props.applicationLocale,
          icon: props.menu.icon,
          isMenuOpen: props.isMenuOpen
        })
      }), jsxRuntime.jsxs(MenuGroup, {
        id: "group-".concat(props.menu.key),
        level: 2,
        isActive: props.isActive,
        isExpanded: props.isMenuOpen,
        hasSubmenu: hasSubmenu,
        submenuVerticalPosition: submenuVerticalPosition,
        isSubmenuAboveMenuItem: isSubmenuAboveMenuItem,
        ref: submenuRef,
        children: [!props.isMenuOpen && jsxRuntime.jsx("div", {
          className: styles['tooltip-container'],
          css: /*#__PURE__*/react$1.css(isSubmenuAboveMenuItem ? 'bottom' : 'top', ":-", oidc.DIMENSIONS.navMenuItemHeight, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:ApplicationMenu;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
          children: jsxRuntime.jsx("div", {
            className: styles['tooltip'],
            "aria-owns": "group-".concat(props.menu.key),
            children: jsxRuntime.jsx(MenuLabel, {
              labelAllLocales: props.menu.labelAllLocales,
              defaultLabel: props.menu.defaultLabel,
              applicationLocale: props.applicationLocale
            })
          })
        }), hasSubmenu ? _mapInstanceProperty__default["default"](_context6 = props.menu.submenu).call(_context6, submenu => {
          var _context7, _submenu$featureToggl, _submenu$actionRights, _submenu$dataFences, _context8;
          return jsxRuntime.jsx(RestrictedMenuItem, {
            keyOfMenuItem: submenu.key,
            featureToggle: (_submenu$featureToggl = submenu.featureToggle) !== null && _submenu$featureToggl !== void 0 ? _submenu$featureToggl : undefined,
            permissions: submenu.permissions,
            actionRights: (_submenu$actionRights = submenu.actionRights) !== null && _submenu$actionRights !== void 0 ? _submenu$actionRights : undefined,
            dataFences: (_submenu$dataFences = submenu.dataFences) !== null && _submenu$dataFences !== void 0 ? _submenu$dataFences : undefined,
            projectPermissions: props.projectPermissions,
            menuVisibilities: props.menuVisibilities,
            namesOfMenuVisibilities: submenu.menuVisibility ? [submenu.menuVisibility] : undefined,
            children: jsxRuntime.jsx("li", {
              className: classnames__default["default"](styles['sublist-item'], {
                [styles['sublist-item__active']]: getIsSubmenuRouteActive(submenu.uriPath, props)
              }),
              children: jsxRuntime.jsx("div", {
                className: styles.text,
                children: jsxRuntime.jsx(MenuItemLink, {
                  linkTo: _concatInstanceProperty__default["default"](_context8 = "/".concat(props.projectKey, "/")).call(_context8, submenu.uriPath)
                  // We want to use an exact matching strategy to avoid multiple
                  // links matching sub-routes.
                  ,
                  exactMatch: true,
                  useFullRedirectsForLinks: props.useFullRedirectsForLinks,
                  onClick: props.onMenuItemClick,
                  isSubmenuLink: true,
                  children: jsxRuntime.jsx(MenuLabel, {
                    labelAllLocales: submenu.labelAllLocales,
                    defaultLabel: submenu.defaultLabel,
                    applicationLocale: props.applicationLocale
                  })
                })
              })
            })
          }, _concatInstanceProperty__default["default"](_context7 = "".concat(props.menu.key, "-submenu-")).call(_context7, submenu.key));
        }) : null]
      })]
    })
  }, props.menu.key);
};
ApplicationMenu.propTypes = process.env.NODE_ENV !== "production" ? {
  menu: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].shape({
    defaultLabel: _pt__default["default"].string
  })]).isRequired,
  isActive: _pt__default["default"].bool.isRequired,
  isMenuOpen: _pt__default["default"].bool.isRequired,
  shouldCloseMenuFly: _pt__default["default"].func.isRequired,
  projectPermissions: _pt__default["default"].shape({
    permissions: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].oneOf([null])]),
    actionRights: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].oneOf([null])]),
    dataFences: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].oneOf([null])])
  }).isRequired,
  menuVisibilities: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].oneOf([null])]),
  handleToggleItem: _pt__default["default"].func.isRequired,
  applicationLocale: _pt__default["default"].string.isRequired,
  projectKey: _pt__default["default"].string.isRequired,
  useFullRedirectsForLinks: _pt__default["default"].bool.isRequired
} : {};
ApplicationMenu.displayName = 'ApplicationMenu';
const NavBar = props => {
  const _useNavbarStateManage = useNavbarStateManager({
      environment: props.environment
    }),
    navBarNode = _useNavbarStateManage.navBarNode,
    isMenuOpen = _useNavbarStateManage.isMenuOpen,
    isExpanderVisible = _useNavbarStateManage.isExpanderVisible,
    activeItemIndex = _useNavbarStateManage.activeItemIndex,
    handleToggleItem = _useNavbarStateManage.handleToggleItem,
    handleToggleMenu = _useNavbarStateManage.handleToggleMenu,
    shouldCloseMenuFly = _useNavbarStateManage.shouldCloseMenuFly,
    allInternalApplicationsNavbarMenu = _useNavbarStateManage.allInternalApplicationsNavbarMenu,
    allCustomApplicationsNavbarMenu = _useNavbarStateManage.allCustomApplicationsNavbarMenu;
  const useFullRedirectsForLinks = Boolean(props.environment.useFullRedirectsForLinks);
  const location = reactRouterDom.useLocation();
  const projectPermissions = react.useMemo(() => {
    var _props$project, _props$project2, _props$project3;
    return {
      permissions: applicationShellConnectors.normalizeAllAppliedPermissions((_props$project = props.project) === null || _props$project === void 0 ? void 0 : _props$project.allPermissionsForAllApplications.allAppliedPermissions),
      actionRights: applicationShellConnectors.normalizeAllAppliedActionRights((_props$project2 = props.project) === null || _props$project2 === void 0 ? void 0 : _props$project2.allPermissionsForAllApplications.allAppliedActionRights),
      dataFences: applicationShellConnectors.normalizeAllAppliedDataFences((_props$project3 = props.project) === null || _props$project3 === void 0 ? void 0 : _props$project3.allPermissionsForAllApplications.allAppliedDataFences)
    };
  }, [props.project]);
  const menuVisibilities = react.useMemo(() => {
    var _props$project4;
    return applicationShellConnectors.normalizeAllAppliedMenuVisibilities((_props$project4 = props.project) === null || _props$project4 === void 0 ? void 0 : _props$project4.allPermissionsForAllApplications.allAppliedMenuVisibilities);
  }, [props.project]);
  const applicationLocale = props.applicationLocale;

  // Render the loading navbar as long as all the data
  // hasn't been loaded, or if the project does not exist.
  if (props.isLoading || typeof applicationLocale === 'undefined') {
    return jsxRuntime.jsx(NavBarSkeleton, {
      isExpanded: isMenuOpen
    });
  }
  return jsxRuntime.jsxs(NavBarLayout$1, {
    ref: navBarNode,
    children: [jsxRuntime.jsxs("div", {
      className: styles['navigation-header'],
      children: [jsxRuntime.jsx("div", {
        className: styles['icon-container'],
        children: jsxRuntime.jsx("div", {
          className: styles['icon'],
          children: jsxRuntime.jsx("img", {
            src: LogoSVG__default["default"],
            width: "100%",
            alt: "Logo"
          })
        })
      }), isMenuOpen ? jsxRuntime.jsx("div", {
        className: styles['title'],
        children: "Merchant Center"
      }) : null]
    }), jsxRuntime.jsxs(MenuGroup, {
      id: "main",
      level: 1,
      children: [jsxRuntime.jsxs("div", {
        className: styles['scrollable-menu'],
        children: [_mapInstanceProperty__default["default"](allInternalApplicationsNavbarMenu).call(allInternalApplicationsNavbarMenu, menu => {
          const menuType = 'scrollable';
          const itemIndex = "".concat(menuType, "-").concat(menu.key);
          return jsxRuntime.jsx(ApplicationMenu, {
            location: location,
            menu: menu,
            isActive: activeItemIndex === itemIndex,
            handleToggleItem: () => handleToggleItem(itemIndex),
            isMenuOpen: isMenuOpen,
            shouldCloseMenuFly: shouldCloseMenuFly,
            projectPermissions: projectPermissions,
            menuVisibilities: menuVisibilities,
            applicationLocale: applicationLocale,
            projectKey: props.projectKey,
            useFullRedirectsForLinks: useFullRedirectsForLinks,
            onMenuItemClick: props.onMenuItemClick
          }, menu.key);
        }), _mapInstanceProperty__default["default"](allCustomApplicationsNavbarMenu).call(allCustomApplicationsNavbarMenu, menu => {
          const menuType = 'scrollable';
          const itemIndex = "".concat(menuType, "-").concat(menu.key);
          return jsxRuntime.jsx(ApplicationMenu, {
            location: location,
            menu: menu,
            isActive: activeItemIndex === itemIndex,
            handleToggleItem: () => handleToggleItem(itemIndex),
            isMenuOpen: isMenuOpen,
            shouldCloseMenuFly: shouldCloseMenuFly,
            projectPermissions: projectPermissions,
            menuVisibilities: menuVisibilities,
            applicationLocale: applicationLocale,
            projectKey: props.projectKey,
            useFullRedirectsForLinks: useFullRedirectsForLinks,
            onMenuItemClick: props.onMenuItemClick
          }, menu.key);
        })]
      }), jsxRuntime.jsxs("div", {
        className: styles['fixed-menu'],
        children: [jsxRuntime.jsx(Faded, {}), jsxRuntime.jsx("div", {
          className: styles['support-menu'],
          children: jsxRuntime.jsx(MenuItem$1, {
            hasSubmenu: false,
            isActive: false,
            isMenuOpen: isMenuOpen,
            onClick: () => {
              handleToggleItem('fixed-support');
            },
            onMouseEnter: isMenuOpen ? undefined : () => handleToggleItem('fixed-support'),
            onMouseLeave: isMenuOpen ? undefined : shouldCloseMenuFly,
            children: jsxRuntime.jsx("a", {
              href: constants.SUPPORT_PORTAL_URL,
              rel: "noopener noreferrer",
              target: "_blank",
              className: styles['text-link'],
              children: jsxRuntime.jsxs("div", {
                className: styles['item-icon-text'],
                children: [jsxRuntime.jsx("div", {
                  className: styles['icon-container'],
                  children: jsxRuntime.jsx("div", {
                    className: styles['icon'],
                    children: jsxRuntime.jsx(icons.SupportIcon, {
                      size: "scale"
                    })
                  })
                }), isMenuOpen ? jsxRuntime.jsx("div", {
                  className: styles.title,
                  children: jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, messages['NavBar.MCSupport.title']))
                }) : null]
              })
            })
          })
        }), jsxRuntime.jsx(MenuExpander, {
          isVisible: isExpanderVisible,
          onClick: handleToggleMenu,
          isMenuOpen: isMenuOpen
        })]
      })]
    })]
  });
};
NavBar.propTypes = process.env.NODE_ENV !== "production" ? {
  applicationLocale: _pt__default["default"].string,
  projectKey: _pt__default["default"].string.isRequired,
  isLoading: _pt__default["default"].bool.isRequired
} : {};
NavBar.displayName = 'NavBar';

exports.ApplicationMenu = ApplicationMenu;
exports["default"] = NavBar;
