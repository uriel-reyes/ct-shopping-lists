import { MouseEventHandler, type ReactNode, type SyntheticEvent } from 'react';
import type { TNormalizedMenuVisibilities, TNormalizedPermissions, TNormalizedActionRights, TNormalizedDataFences } from '@commercetools-frontend/application-shell-connectors';
import { BackIcon } from '@commercetools-uikit/icons';
import type { TDataFence, TActionRight, TLocalizedField } from '../../types/generated/proxy';
type TProjectPermissions = {
    permissions: TNormalizedPermissions | null;
    actionRights: TNormalizedActionRights | null;
    dataFences: TNormalizedDataFences | null;
};
type IconProps = Parameters<typeof BackIcon>[0];
type IconSwitcherProps = {
    icon: string;
} & IconProps;
declare const IconSwitcher: {
    ({ icon, ...iconProps }: IconSwitcherProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
};
type MenuExpanderProps = {
    isVisible: boolean;
    onClick: MouseEventHandler<HTMLDivElement>;
    isMenuOpen: boolean;
};
declare const MenuExpander: {
    (props: MenuExpanderProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
};
declare const Faded: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
type MenuGroupProps = {
    id: string;
    level: 1 | 2;
    isActive?: boolean;
    isExpanded?: boolean;
    hasSubmenu?: boolean;
    children?: ReactNode;
    submenuVerticalPosition?: number;
    isSubmenuAboveMenuItem?: boolean;
};
declare const MenuGroup: import("react").ForwardRefExoticComponent<MenuGroupProps & import("react").RefAttributes<HTMLUListElement>>;
type MenuItemProps = {
    hasSubmenu: boolean;
    isActive: boolean;
    isMainMenuRouteActive?: boolean;
    isMenuOpen: boolean;
    onClick: MouseEventHandler<HTMLElement>;
    onMouseEnter?: MouseEventHandler<HTMLElement>;
    onMouseLeave?: MouseEventHandler<HTMLElement>;
    children: ReactNode;
    identifier?: string;
};
declare const MenuItem: {
    (props: MenuItemProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
};
export type MenuItemLinkProps = {
    linkTo?: string;
    exactMatch: boolean;
    children: ReactNode;
    onClick?: (event: SyntheticEvent<HTMLAnchorElement>) => void;
    useFullRedirectsForLinks?: boolean;
    isSubmenuLink?: boolean;
};
declare const MenuItemLink: {
    (props: MenuItemLinkProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
    defaultProps: Pick<MenuItemLinkProps, "exactMatch">;
};
type RestrictedMenuItemProps = {
    featureToggle?: string;
    namesOfMenuVisibilities?: string[];
    projectPermissions: TProjectPermissions;
    menuVisibilities: TNormalizedMenuVisibilities | null;
    keyOfMenuItem: string;
    permissions: string[];
    actionRights?: TActionRight[];
    dataFences?: TDataFence[];
    children: ReactNode;
};
declare const RestrictedMenuItem: {
    (props: RestrictedMenuItemProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element | null;
    displayName: string;
    defaultProps: Pick<RestrictedMenuItemProps, "permissions">;
};
type MenuLabelProps = {
    labelAllLocales: TLocalizedField[];
    defaultLabel?: string;
    applicationLocale: string;
};
declare const MenuLabel: (props: MenuLabelProps) => import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
type TNavBarLayoutProps = {
    children: ReactNode;
};
declare const NavBarLayout: import("react").ForwardRefExoticComponent<TNavBarLayoutProps & import("react").RefAttributes<HTMLElement>>;
type ItemContainerProps = {
    labelAllLocales: TLocalizedField[];
    defaultLabel?: string;
    applicationLocale: string;
    icon: string;
    isMenuOpen?: boolean;
};
declare const ItemContainer: {
    (props: ItemContainerProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
};
export { RestrictedMenuItem, MenuItem, MenuItemLink, IconSwitcher, MenuGroup, MenuLabel, MenuExpander, Faded, NavBarLayout, ItemContainer, };
