import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _reduceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import _Object$entries from '@babel/runtime-corejs3/core-js-stable/object/entries';
import _Reflect$has from '@babel/runtime-corejs3/core-js-stable/reflect/has';
import { applyMiddleware, configureStore, combineReducers } from '@reduxjs/toolkit';
import mapValues from 'lodash/mapValues';
import omitEmpty from 'omit-empty-es';
import thunk from 'redux-thunk';
import { logger, selectProjectKeyFromUrl, getCorrelationId, selectUserId, oidcStorage, selectTeamIdFromStorage } from '@commercetools-frontend/application-shell-connectors';
import { SHOW_LOADING, HIDE_LOADING, NOTIFICATION_KINDS_PAGE, HIDE_ALL_PAGE_NOTIFICATIONS, SUPPORTED_HEADERS } from '@commercetools-frontend/constants';
import { removeNotification, ADD_NOTIFICATION, REMOVE_NOTIFICATION, middleware, reducer } from '@commercetools-frontend/notifications';
import { createMiddleware } from '@commercetools-frontend/sdk';
import { lazy } from 'react';
import _indexOfInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import _sliceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/slice';
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import { reportErrorToSentry } from '@commercetools-frontend/sentry';
import { selectPageNotifications } from '@commercetools-frontend/react-notifications';
import _startsWithInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/starts-with';
import { createLogger } from 'redux-logger';

const isShowRequestInFlightAction = action => action.type === SHOW_LOADING;
const isHideRequestInFlightAction = action => action.type === HIDE_LOADING;
const excludeFirstOccurrence = (list, item) => {
  const index = _indexOfInstanceProperty(list).call(list, item);
  return [..._sliceInstanceProperty(list).call(list, 0, index), ..._sliceInstanceProperty(list).call(list, index + 1)];
};
var requestsInFlightReducer = ((requestsInFlight, action) => {
  if (!requestsInFlight || !action) return [];
  if (isShowRequestInFlightAction(action)) return [...requestsInFlight, action.payload];
  if (isHideRequestInFlightAction(action)) {
    // may only remove first occurence
    if (!_includesInstanceProperty(requestsInFlight).call(requestsInFlight, action.payload)) {
      reportErrorToSentry(new Error("Tried to hide \"".concat(action.payload, "\", but it was not progressing!")));
      return requestsInFlight;
    }
    return excludeFirstOccurrence(requestsInFlight, action.payload);
  }
  return requestsInFlight;
});

const isAddNotificationErrorAction = action => {
  const errorAction = action;
  return errorAction.type === ADD_NOTIFICATION && errorAction.payload && (errorAction.payload.kind === NOTIFICATION_KINDS_PAGE['api-error'] || errorAction.payload.kind === NOTIFICATION_KINDS_PAGE['unexpected-error']);
};
const isHideAllNotificationsAction = action => action.type === HIDE_ALL_PAGE_NOTIFICATIONS;
const hideNotificationsMiddleware = _ref => {
  let getState = _ref.getState;
  return next => action => {
    if (isHideAllNotificationsAction(action) || isAddNotificationErrorAction(action)) {
      var _context;
      const state = getState();
      _forEachInstanceProperty(_context = selectPageNotifications(state)).call(_context, notification => {
        next(removeNotification(notification.id));
      });
    }
    return next(action);
  };
};

const loggerMiddleware = createLogger({
  logger,
  collapsed: true,
  colors: {
    title: () => '#000000',
    prevState: () => '#9E9E9E',
    action: () => '#03A9F4',
    nextState: () => '#4CAF50',
    error: () => '#F20404'
  },
  // WARNING: Enabling this option causes huge performance degradation.
  // Only enable if you want detailed debugging.
  diff: false,
  predicate: (_getState, action) => {
    if (!action) return false;
    const type = action.type,
      payload = action.payload;
    if (!type) return false;
    if (_startsWithInstanceProperty(type).call(type, 'SHOW_') || _startsWithInstanceProperty(type).call(type, 'HIDE_') || _startsWithInstanceProperty(type).call(type, 'APOLLO_')) return false;
    switch (type) {
      case REMOVE_NOTIFICATION:
        return false;
      case ADD_NOTIFICATION:
        {
          const ignoredKinds = ['api-error', 'unexpected-error'];
          return !_includesInstanceProperty(ignoredKinds).call(ignoredKinds, payload.kind);
        }
      default:
        return true;
    }
  }
});

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys(Object(t))).call(_context3, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const mergeObjectValues = object => {
  var _context;
  return _reduceInstanceProperty(_context = _Object$entries(object)).call(_context, (acc, _ref) => {
    let _ref2 = _slicedToArray(_ref, 2),
      value = _ref2[1];
    return _objectSpread(_objectSpread({}, acc), value);
  }, {});
};
const patchedGetCorrelationId = () => getCorrelationId({
  userId: selectUserId()
});
const getAdditionalHeaders = () => {
  const sessionToken = oidcStorage.getSessionToken();
  return omitEmpty({
    [SUPPORTED_HEADERS.AUTHORIZATION]: sessionToken ? "Bearer ".concat(sessionToken) : undefined,
    [SUPPORTED_HEADERS.X_APPLICATION_ID]: window.app.applicationIdentifier,
    [SUPPORTED_HEADERS.X_CUSTOM_VIEW_ID]: window.app.customViewId,
    [SUPPORTED_HEADERS.X_TEAM_ID]: selectTeamIdFromStorage()
  });
};
const sdkMiddleware = createMiddleware({
  getCorrelationId: patchedGetCorrelationId,
  getProjectKey: selectProjectKeyFromUrl,
  getAdditionalHeaders
});

/**
 * @deprecated: This function should not be used directly anymore.
 */
const applyDefaultMiddlewares = function () {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }
  return applyMiddleware(...middlewares, thunk, loggerMiddleware);
};
const createInternalReducer = function () {
  let injectedReducers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let preloadedState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // not providing preloadedStateReducers to combineReducers will cause an error
  // when preloadedState contains keys other than requestsInFlight and
  // notifications:
  // Unexpected key "new Key" found in preloadedState argument passed to createStore. Expected to find one of the known reducer keys instead: "requestsInFlight", "notifications". Unexpected keys will be ignored.
  // https://redux.js.org/api/createstore#createstorereducer-preloadedstate-enhancer
  const preloadedStateReducers = mapValues(preloadedState, value => () => value);

  // NOTE: since we don't know in advance which reducers will be injected,
  // we pass an `unknown` type to express this uncertainty and make the compiler happy.
  return combineReducers(_objectSpread(_objectSpread({
    requestsInFlight: requestsInFlightReducer,
    notifications: reducer
  }, injectedReducers), preloadedStateReducers));
};

// We use a factory as it's more practicable for tests
// The application can import the configured store (the default export)
const createReduxStore = function () {
  let preloadedState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let additionalMiddlewares = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  const store = configureStore({
    preloadedState,
    reducer: createInternalReducer(undefined, preloadedState),
    devTools: {
      actionsDenylist: [SHOW_LOADING, HIDE_LOADING]
    },
    middleware: getDefaultMiddleware => [...additionalMiddlewares, hideNotificationsMiddleware, middleware, sdkMiddleware, ...getDefaultMiddleware({
      // https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data
      serializableCheck: false,
      // This default check is logging warnings to console for some MC FE tests, probably
      // due to lower resources when running tests on CI.
      // We don't consider this check to be very valuable in this context so we decided
      // to turn it off.
      // https://redux-toolkit.js.org/api/immutabilityMiddleware
      immutableCheck: false
    }), loggerMiddleware]
  });
  const enhancedStore = store;

  // Enable reducers to be injected on runtime (see `<InjectReducer>`)
  enhancedStore.injectedReducers = {};
  enhancedStore.injectReducers = _ref3 => {
    let id = _ref3.id,
      reducers = _ref3.reducers;
    const hasReducerBeenInjected = _Reflect$has(enhancedStore.injectedReducers, id) && enhancedStore.injectedReducers[id] === reducers;
    if (!hasReducerBeenInjected) {
      // Keep track of the reducer by id, so we can check if it's been injected aleady
      enhancedStore.injectedReducers[id] = reducers;
      // ...when we create the new reducer though, we spread the reducers from each namespace
      enhancedStore.replaceReducer(createInternalReducer(mergeObjectValues(enhancedStore.injectedReducers)));
    }
  };
  enhancedStore.removeReducers = _ref4 => {
    let id = _ref4.id;
    delete enhancedStore.injectedReducers[id];
    enhancedStore.replaceReducer(createInternalReducer(mergeObjectValues(enhancedStore.injectedReducers)));
  };
  return enhancedStore;
};
var internalReduxStore = createReduxStore();

const RouteCatchAll = /*#__PURE__*/lazy(() => import('./route-catch-all-4af77675.esm.js' /* webpackChunkName: "route-catch-all" */));

export { RouteCatchAll as R, applyDefaultMiddlewares as a, createReduxStore as c, internalReduxStore as i };
