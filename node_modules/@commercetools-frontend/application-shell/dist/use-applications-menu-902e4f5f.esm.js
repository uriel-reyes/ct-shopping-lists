import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import { useState, useEffect } from 'react';
import { useApolloClient } from '@apollo/client';
import { useApplicationContext, useMcQuery } from '@commercetools-frontend/application-shell-connectors';
import { getSupportedLocales } from '@commercetools-frontend/l10n';

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context4, _context5; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context4 = ownKeys(Object(t), !0)).call(_context4, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context5 = ownKeys(Object(t))).call(_context5, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
var FetchApplicationsMenu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchApplicationsMenu" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "applicationsMenu" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "navBar" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "uriPath" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "icon" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "featureToggle" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "menuVisibility" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "dataFences" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "actionRights" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "submenu" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "uriPath" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "featureToggle" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "menuVisibility" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "actionRights" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "dataFences" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "group" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }] } }] } }] } }, { kind: "Field", name: { kind: "Name", value: "appBar" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "key" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "uriPath" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "featureToggle" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [] }] } }] } }] } }], loc: { start: 0, end: 823, source: { body: "query FetchApplicationsMenu {\n  applicationsMenu {\n    navBar {\n      key\n      uriPath\n      icon\n      labelAllLocales {\n        locale\n        value\n      }\n      featureToggle\n      menuVisibility\n      permissions\n      dataFences {\n        group\n        name\n        type\n      }\n      actionRights {\n        group\n        name\n      }\n      submenu {\n        key\n        uriPath\n        labelAllLocales {\n          locale\n          value\n        }\n        featureToggle\n        menuVisibility\n        permissions\n        actionRights {\n          group\n          name\n        }\n        dataFences {\n          group\n          name\n          type\n        }\n      }\n    }\n    appBar {\n      key\n      uriPath\n      labelAllLocales {\n        locale\n        value\n      }\n      featureToggle\n      permissions\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const defaultApiUrl = window.location.origin;
const mapLabelAllLocalesWithDefaults = (labelAllLocales, defaultLabel) => {
  let mappedLabelAllLocales = labelAllLocales;
  if (defaultLabel) {
    var _context;
    // Map all supported locales with the given localized labels.
    // If a locale is not defined in the config, we use the `default` label as the value.
    // This is only needed for development as we're trying to map two different schemas.
    mappedLabelAllLocales = _mapInstanceProperty(_context = getSupportedLocales()).call(_context, supportedLocale => {
      const existingField = _findInstanceProperty(labelAllLocales).call(labelAllLocales, field => field.locale === supportedLocale);
      if (existingField) return existingField;
      return {
        locale: supportedLocale,
        value: defaultLabel
      };
    });
  }

  // Add the `__typename`.
  return _mapInstanceProperty(mappedLabelAllLocales).call(mappedLabelAllLocales, field => _objectSpread({
    __typename: 'LocalizedField'
  }, field));
};
/**
 * Transform menu links defined in the `custom-application-config.json` to the `FetchApplicationsMenu` schema.
 * This is only needed for development.
 */
const mapApplicationMenuConfigToGraqhQLQueryResult = applicationConfig => {
  var _applicationConfig$__, _ref, _applicationConfig$__2, _menuLinks$featureTog, _menuLinks$menuVisibi, _menuLinks$actionRigh, _menuLinks$dataFences, _context2;
  const entryPointUriPath = applicationConfig.entryPointUriPath;
  const menuLinks = (_applicationConfig$__ = applicationConfig.__DEVELOPMENT__) === null || _applicationConfig$__ === void 0 ? void 0 : _applicationConfig$__.menuLinks;
  // @ts-expect-error: the `accountLinks` is not explicitly typed as it's only used by the account app.
  const accountLinks = (_ref = (_applicationConfig$__2 = applicationConfig.__DEVELOPMENT__) === null || _applicationConfig$__2 === void 0 ? void 0 : _applicationConfig$__2.accountLinks) !== null && _ref !== void 0 ? _ref : [];
  return {
    applicationsMenu: {
      __typename: 'ApplicationsMenu',
      navBar: menuLinks ? [{
        __typename: 'NavbarMenu',
        key: entryPointUriPath,
        uriPath: entryPointUriPath,
        icon: menuLinks.icon,
        labelAllLocales: mapLabelAllLocalesWithDefaults(menuLinks.labelAllLocales, menuLinks.defaultLabel),
        permissions: menuLinks.permissions,
        // @ts-ignore: not defined in schema, as it's only used internally.
        featureToggle: (_menuLinks$featureTog = menuLinks.featureToggle) !== null && _menuLinks$featureTog !== void 0 ? _menuLinks$featureTog : null,
        // @ts-ignore: not defined in schema, as it's only used internally.
        menuVisibility: (_menuLinks$menuVisibi = menuLinks.menuVisibility) !== null && _menuLinks$menuVisibi !== void 0 ? _menuLinks$menuVisibi : null,
        // @ts-ignore: not defined in schema, as it's only used internally.
        actionRights: (_menuLinks$actionRigh = menuLinks.actionRights) !== null && _menuLinks$actionRigh !== void 0 ? _menuLinks$actionRigh : null,
        // @ts-ignore: not defined in schema, as it's only used internally.
        dataFences: (_menuLinks$dataFences = menuLinks.dataFences) !== null && _menuLinks$dataFences !== void 0 ? _menuLinks$dataFences : null,
        submenu: _mapInstanceProperty(_context2 = menuLinks.submenuLinks).call(_context2, submenuLink => {
          var _context3, _submenuLink$featureT, _submenuLink$menuVisi, _submenuLink$actionRi, _submenuLink$dataFenc;
          return {
            __typename: 'BaseMenu',
            key: _concatInstanceProperty(_context3 = "".concat(entryPointUriPath, "-")).call(_context3, submenuLink.uriPath),
            uriPath: submenuLink.uriPath,
            labelAllLocales: mapLabelAllLocalesWithDefaults(submenuLink.labelAllLocales, submenuLink.defaultLabel),
            permissions: submenuLink.permissions,
            // @ts-ignore: not defined in schema, as it's only used internally.
            featureToggle: (_submenuLink$featureT = submenuLink.featureToggle) !== null && _submenuLink$featureT !== void 0 ? _submenuLink$featureT : null,
            // @ts-ignore: not defined in schema, as it's only used internally.
            menuVisibility: (_submenuLink$menuVisi = submenuLink.menuVisibility) !== null && _submenuLink$menuVisi !== void 0 ? _submenuLink$menuVisi : null,
            // @ts-ignore: not defined in schema, as it's only used internally.
            actionRights: (_submenuLink$actionRi = submenuLink.actionRights) !== null && _submenuLink$actionRi !== void 0 ? _submenuLink$actionRi : null,
            // @ts-ignore: not defined in schema, as it's only used internally.
            dataFences: (_submenuLink$dataFenc = submenuLink.dataFences) !== null && _submenuLink$dataFenc !== void 0 ? _submenuLink$dataFenc : null
          };
        })
      }] : [],
      appBar: _mapInstanceProperty(accountLinks).call(accountLinks, menuLink => {
        var _menuLink$featureTogg;
        return {
          __typename: 'BaseMenu',
          key: menuLink.uriPath,
          uriPath: menuLink.uriPath,
          labelAllLocales: mapLabelAllLocalesWithDefaults(menuLink.labelAllLocales, menuLink.defaultLabel),
          permissions: menuLink.permissions,
          // @ts-ignore: not defined in schema, as it's only used internally.
          featureToggle: (_menuLink$featureTogg = menuLink.featureToggle) !== null && _menuLink$featureTogg !== void 0 ? _menuLink$featureTogg : null
        };
      })
    }
  };
};
function useApplicationsMenu(menuKey, config) {
  var _config$queryOptions;
  const apolloClient = useApolloClient();
  const mcProxyApiUrl = useApplicationContext(context => context.environment.mcProxyApiUrl);
  const _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    hasWrittenToCache = _useState2[0],
    setHasWrittenToCache = _useState2[1];

  // Fetch all menu links from the GraphQL API in the Merchant Center Proxy.
  // For local development, we don't fetch data from the remote server but use
  // only the configuration for the menu links defined for the application.
  // To do so, we manually write the data in the Apollo cache and use the
  // `fetchPolicy: cache-only` to instruct Apollo to read the data from the cache.
  // NOTE: In development, we skip the query as long as the data hasn't been written
  // into the cache. If not, Apollo throws an error like
  // `Can't find field 'applicationMenu' on ROOT_QUERY object`.
  const _useMcQuery = useMcQuery(FetchApplicationsMenu, {
      skip: config.environment.servedByProxy ?
      // Production environment
      false :
      // Development environment
      !hasWrittenToCache,
      onError: (_config$queryOptions = config.queryOptions) === null || _config$queryOptions === void 0 ? void 0 : _config$queryOptions.onError,
      fetchPolicy: config.environment.servedByProxy ? 'cache-first' : 'cache-only',
      context: {
        // Allow to overwrite the API url from application config
        uri: "".concat(mcProxyApiUrl || defaultApiUrl, "/api/graphql"),
        skipGraphQlTargetCheck: true
      }
    }),
    menuQueryResult = _useMcQuery.data;

  // For development, we read the menu data from the configuration file and
  // write it into the Apollo cache.
  useEffect(() => {
    if (config.environment.__DEVELOPMENT__ && (config.environment.__DEVELOPMENT__.menuLinks ||
    // @ts-expect-error: the `accountLinks` is not explicitly typed as it's only used by the account app.
    config.environment.__DEVELOPMENT__.accountLinks) && !hasWrittenToCache) {
      const applicationMenu = mapApplicationMenuConfigToGraqhQLQueryResult(config.environment);
      apolloClient.writeQuery({
        query: FetchApplicationsMenu,
        data: applicationMenu
      });
      setHasWrittenToCache(true);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [hasWrittenToCache]); // Only subscribe to state changes.

  if (menuQueryResult && menuQueryResult.applicationsMenu) {
    return menuQueryResult.applicationsMenu[menuKey];
  }
  return;
}

export { useApplicationsMenu as u };
