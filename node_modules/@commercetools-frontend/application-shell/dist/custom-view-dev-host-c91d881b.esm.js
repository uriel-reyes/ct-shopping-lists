import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _pt from 'prop-types';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import { useState } from 'react';
import { Router, Switch, Route, useRouteMatch } from 'react-router-dom';
import { CustomViewLoader } from '@commercetools-frontend/application-components';
import history from '@commercetools-frontend/browser-history';
import Constraints from '@commercetools-uikit/constraints';
import PrimaryButton from '@commercetools-uikit/primary-button';
import Spacings from '@commercetools-uikit/spacings';
import Text from '@commercetools-uikit/text';
import { A as ApplicationShell } from './index-2b55a829.esm.js';
import { jsx, jsxs, Fragment } from '@emotion/react/jsx-runtime';
import './index-89e5711a.esm.js';
import '@babel/runtime-corejs3/core-js-stable/object/keys';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import '@babel/runtime-corejs3/core-js-stable/instance/filter';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import '@babel/runtime-corejs3/core-js-stable/object/define-property';
import '@babel/runtime-corejs3/helpers/defineProperty';
import '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import '@babel/runtime-corejs3/core-js-stable/object/entries';
import '@babel/runtime-corejs3/core-js-stable/reflect/has';
import '@reduxjs/toolkit';
import 'lodash/mapValues';
import 'omit-empty-es';
import 'redux-thunk';
import '@commercetools-frontend/application-shell-connectors';
import '@commercetools-frontend/constants';
import '@commercetools-frontend/notifications';
import '@commercetools-frontend/sdk';
import '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import '@babel/runtime-corejs3/core-js-stable/instance/slice';
import '@babel/runtime-corejs3/core-js-stable/instance/includes';
import '@commercetools-frontend/sentry';
import '@commercetools-frontend/react-notifications';
import '@babel/runtime-corejs3/core-js-stable/instance/starts-with';
import 'redux-logger';
import '@emotion/styled/base';
import '@babel/runtime-corejs3/core-js-stable/instance/find';
import '@babel/runtime-corejs3/core-js-stable/array/is-array';
import '@emotion/react';
import '@commercetools-frontend/i18n';
import './oidc-da8526e3.esm.js';
import '@babel/runtime-corejs3/core-js-stable/url';
import '@commercetools-uikit/design-system';
import 'react-intl';
import '@commercetools-uikit/flat-button';
import '@commercetools-uikit/icons';
import './use-is-served-by-proxy-77984220.esm.js';
import '@babel/runtime-corejs3/helpers/taggedTemplateLiteral';
import '@babel/runtime-corejs3/helpers/objectDestructuringEmpty';
import '@babel/runtime-corejs3/helpers/extends';
import 'memoize-one';
import 'react-select';
import '@commercetools-uikit/accessible-hidden';
import '@commercetools-uikit/select-input';
import '@commercetools-frontend/assets/images/ct-logo.svg';
import '@commercetools-uikit/loading-spinner';
import '@commercetools-frontend/l10n';
import '@babel/runtime-corejs3/core-js-stable/reflect/construct';
import '@babel/runtime-corejs3/helpers/classCallCheck';
import '@babel/runtime-corejs3/helpers/createClass';
import '@babel/runtime-corejs3/helpers/inherits';
import '@babel/runtime-corejs3/helpers/possibleConstructorReturn';
import '@babel/runtime-corejs3/helpers/getPrototypeOf';
import '@babel/runtime-corejs3/core-js-stable/object/from-entries';
import '@babel/runtime-corejs3/core-js-stable/instance/flags';
import '@apollo/client/react';
import '@flopflip/combine-adapters';
import '@flopflip/http-adapter';
import '@flopflip/launchdarkly-adapter';
import '@flopflip/react-broadcast';
import 'react-redux';
import 'lodash/upperFirst';
import '@commercetools-uikit/design-system/materials/resets.css';
import '@commercetools-frontend/application-config/ssr';
import '@commercetools-frontend/permissions';
import '@babel/runtime-corejs3/core-js-stable/json/stringify';
import '@babel/runtime-corejs3/core-js-stable/instance/some';
import '@commercetools-frontend/actions-global';

const LocalCustomViewLauncher = props => {
  var _props$environment$__, _context, _customViewConfig$typ, _props$environment$__2;
  const _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    shouldRenderCustomView = _useState2[0],
    setShouldRenderCustomView = _useState2[1];
  // We expect this in development to be defined.
  const customViewConfig = (_props$environment$__ = props.environment.__DEVELOPMENT__) === null || _props$environment$__ === void 0 ? void 0 : _props$environment$__.customViewConfig;
  return jsx("main", {
    children: jsx(Constraints.Horizontal, {
      max: "scale",
      children: jsxs(Spacings.Inset, {
        scale: "xl",
        children: [jsxs(Spacings.Stack, {
          scale: "xl",
          children: [jsx(Text.Headline, {
            as: "h1",
            children: "Custom View loader"
          }), jsxs(Spacings.Stack, {
            scale: "l",
            children: [jsxs(Spacings.Stack, {
              scale: "m",
              children: [jsxs(Text.Body, {
                children: ["This page simulates the rendering of your Custom View as if it was within a page in the Merchant Center:", jsx("br", {}), "Based on your ", jsx("i", {
                  children: "custom-view-config"
                }), " file, these are the settings that will be used:"]
              }), jsx("ul", {
                children: jsxs(Spacings.Stack, {
                  scale: "s",
                  children: [jsxs("li", {
                    children: ["Custom View ID: ", jsx("b", {
                      children: customViewConfig.id
                    })]
                  }), jsxs("li", {
                    children: ["Custom View permissions:", ' ', jsx("b", {
                      children: _mapInstanceProperty(_context = customViewConfig.permissions).call(_context, permission => {
                        var _context2;
                        return _concatInstanceProperty(_context2 = "(".concat(permission.name, ": ")).call(_context2, permission.oAuthScopes.join(', '), ")");
                      }).join(', ')
                    })]
                  }), jsxs("li", {
                    children: ["Custom View locators:", ' ', jsx("b", {
                      children: customViewConfig.locators.join(', ')
                    })]
                  }), jsxs("li", {
                    children: ["Custom View type: ", jsx("b", {
                      children: customViewConfig.type
                    })]
                  }), jsxs("li", {
                    children: ["Custom View size:", ' ', jsx("b", {
                      children: (_customViewConfig$typ = customViewConfig.typeSettings) === null || _customViewConfig$typ === void 0 ? void 0 : _customViewConfig$typ.size
                    })]
                  })]
                })
              })]
            }), jsx(Constraints.Horizontal, {
              max: 10,
              children: jsx(PrimaryButton, {
                label: "Open the Custom View",
                onClick: () => setShouldRenderCustomView(true)
              })
            })]
          })]
        }), shouldRenderCustomView && jsx(CustomViewLoader, {
          customView: customViewConfig,
          hostUrl: (_props$environment$__2 = props.environment.__DEVELOPMENT__) === null || _props$environment$__2 === void 0 ? void 0 : _props$environment$__2.customViewHostUrl,
          onClose: () => setShouldRenderCustomView(false)
        })]
      })
    })
  });
};
const SimulatedIframeRoute = props => {
  const routeMatch = useRouteMatch();
  console.info("\u2139\uFE0F Rendering a Custom View as it would be rendered within an iframe", routeMatch.url);
  return jsx(Fragment, {
    children: props.children
  });
};
const CustomViewDevHost = props => {
  return jsx(Router, {
    history: history,
    children: jsxs(Switch, {
      children: [jsx(Route, {
        path: "/custom-views/:customViewId/projects/:projectKey",
        children: jsx(SimulatedIframeRoute, {
          children: props.children
        })
      }), jsx(Route, {
        children: jsx(ApplicationShell, {
          environment: window.app,
          applicationMessages: props.applicationMessages,
          disableRoutePermissionCheck: true,
          children: jsx(LocalCustomViewLauncher, {
            environment: window.app
          })
        })
      })]
    })
  });
};
CustomViewDevHost.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _pt.node.isRequired
} : {};
CustomViewDevHost.displayName = 'CustomViewDevHost';

export { CustomViewDevHost as default };
