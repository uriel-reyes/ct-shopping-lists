import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _styled from '@emotion/styled/base';
import _pt from 'prop-types';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _startsWithInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/starts-with';
import _trimInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/trim';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import { useState, useCallback, useRef, useEffect } from 'react';
import { css } from '@emotion/react';
import { ToggleFeature } from '@flopflip/react-broadcast';
import Downshift from 'downshift';
import { defineMessages, useIntl, FormattedMessage } from 'react-intl';
import { Link } from 'react-router-dom';
import { designTokens as designTokens$1 } from '@commercetools-frontend/application-components';
import { useApplicationContext } from '@commercetools-frontend/application-shell-connectors';
import { SUPPORT_PORTAL_URL, LOGOUT_REASONS, NO_VALUE_FALLBACK } from '@commercetools-frontend/constants';
import { reportErrorToSentry } from '@commercetools-frontend/sentry';
import AccessibleHidden from '@commercetools-uikit/accessible-hidden';
import Avatar from '@commercetools-uikit/avatar';
import { designTokens } from '@commercetools-uikit/design-system';
import Spacings from '@commercetools-uikit/spacings';
import Text from '@commercetools-uikit/text';
import { D as DIMENSIONS } from './oidc-da8526e3.esm.js';
import { u as useApplicationsMenu } from './use-applications-menu-902e4f5f.esm.js';
import { jsx, jsxs, Fragment } from '@emotion/react/jsx-runtime';
import '@babel/runtime-corejs3/core-js-stable/instance/concat';
import '@apollo/client';
import '@commercetools-frontend/l10n';

var messages = defineMessages({
  support: {
    id: 'UserSettingsMenu.support',
    description: 'The label for Support',
    defaultMessage: 'Support'
  },
  logout: {
    id: 'UserSettingsMenu.logout',
    description: 'The label for logout option',
    defaultMessage: 'Logout'
  },
  privacyPolicy: {
    id: 'UserSettingsMenu.privacyPolicy',
    description: 'The label for privacy policy option',
    defaultMessage: 'Privacy Policy'
  },
  menuLabel: {
    id: 'UserSettingsMenu.menuLabel',
    description: 'The label describing the menu',
    defaultMessage: 'User settings menu'
  },
  openMenuLabel: {
    id: 'UserSettingsMenu.openMenuLabel',
    description: 'The label when menu is closed and would be opened by a click',
    defaultMessage: 'Open user settings menu'
  },
  closeMenuLabel: {
    id: 'UserSettingsMenu.closeMenuLabel',
    description: 'The label when menu is open and would be closed by a click',
    defaultMessage: 'Close user settings menu'
  }
});

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context3, _context4; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context3 = ownKeys(Object(t), !0)).call(_context3, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context4 = ownKeys(Object(t))).call(_context4, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const MENU_LABEL_ID = 'user-menu-setting-menu-label';
const UserAvatar = props => {
  const _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isMouseOver = _useState2[0],
    setIsMouseOver = _useState2[1];
  const handleMouseOver = useCallback(() => {
    setIsMouseOver(true);
  }, []);
  const handleMouseOut = useCallback(() => {
    setIsMouseOver(false);
  }, []);
  return jsx("div", {
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    children: jsx(Spacings.Inline, {
      alignItems: "center",
      children: jsx(Avatar, {
        size: "m",
        gravatarHash: props.gravatarHash,
        firstName: props.firstName,
        lastName: props.lastName,
        isHighlighted: isMouseOver
      })
    })
  });
};
UserAvatar.displayName = 'UserAvatar';
function getIsFocusedElementInMenu() {
  var _document$activeEleme;
  return Boolean((_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.getAttribute('data-user-settings-menu'));
}
const stateReducer = (state, changes) => {
  var _ref3;
  switch (changes.type) {
    // So in case the user wants to navigate with the tab button
    // we need to make sure that the menu does not close
    case Downshift.stateChangeTypes.blurButton:
      return _objectSpread(_objectSpread({}, changes), {}, {
        isOpen: (_ref3 = state.isOpen && getIsFocusedElementInMenu()) !== null && _ref3 !== void 0 ? _ref3 : false
      });
    default:
      return changes;
  }
};
const OptionalFeatureToggle = props => {
  if (props.featureToggle) {
    return jsx(ToggleFeature, {
      flag: props.featureToggle,
      children: props.children
    });
  }
  return jsx(Fragment, {
    children: props.children
  });
};
OptionalFeatureToggle.propTypes = process.env.NODE_ENV !== "production" ? {
  featureToggle: _pt.string,
  children: _pt.node.isRequired
} : {};
const renderLabel = (menu, applicationLanguage) => {
  var _context;
  const localizedLabel = _findInstanceProperty(_context = menu.labelAllLocales).call(_context, loc => _startsWithInstanceProperty(applicationLanguage).call(applicationLanguage, loc.locale));
  if (localizedLabel) return localizedLabel.value;
  return NO_VALUE_FALLBACK;
};
const MenuItem = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1al5ftg0"
} : {
  target: "e1al5ftg0",
  label: "MenuItem"
})("width:100%;cursor:pointer;color:", designTokens.colorSolid, ";:hover{background-color:", designTokens$1.backgroundColorForUserMenuItemWhenHovered, ";}", props => props.hasDivider === true ? /*#__PURE__*/css("border-bottom:1px solid ", designTokens.colorNeutral, ";margin:", designTokens$1.marginForUserMenuItem, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */") : '', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXItc2V0dGluZ3MtbWVudS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUgwQyIsImZpbGUiOiJ1c2VyLXNldHRpbmdzLW1lbnUudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3ROb2RlLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgVG9nZ2xlRmVhdHVyZSB9IGZyb20gJ0BmbG9wZmxpcC9yZWFjdC1icm9hZGNhc3QnO1xuaW1wb3J0IERvd25zaGlmdCwge1xuICB0eXBlIENvbnRyb2xsZXJTdGF0ZUFuZEhlbHBlcnMsXG4gIHR5cGUgRG93bnNoaWZ0UHJvcHMsXG59IGZyb20gJ2Rvd25zaGlmdCc7XG5pbXBvcnQgeyB1c2VJbnRsLCBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgYXBwa2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtZnJvbnRlbmQvYXBwbGljYXRpb24tY29tcG9uZW50cyc7XG5pbXBvcnQgeyB1c2VBcHBsaWNhdGlvbkNvbnRleHQgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1zaGVsbC1jb25uZWN0b3JzJztcbmltcG9ydCB7XG4gIExPR09VVF9SRUFTT05TLFxuICBOT19WQUxVRV9GQUxMQkFDSyxcbiAgU1VQUE9SVF9QT1JUQUxfVVJMLFxufSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9jb25zdGFudHMnO1xuaW1wb3J0IHsgcmVwb3J0RXJyb3JUb1NlbnRyeSB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLWZyb250ZW5kL3NlbnRyeSc7XG5pbXBvcnQgQWNjZXNzaWJsZUhpZGRlbiBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9hY2Nlc3NpYmxlLWhpZGRlbic7XG5pbXBvcnQgQXZhdGFyIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2F2YXRhcic7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgdWlraXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBTcGFjaW5ncyBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncyc7XG5pbXBvcnQgVGV4dCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90ZXh0JztcbmltcG9ydCB7IERJTUVOU0lPTlMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuaW1wb3J0IHVzZUFwcGxpY2F0aW9uc01lbnUgZnJvbSAnLi4vLi4vaG9va3MvdXNlLWFwcGxpY2F0aW9ucy1tZW51JztcbmltcG9ydCB0eXBlIHsgVFVzZXIgfSBmcm9tICcuLi8uLi90eXBlcy9nZW5lcmF0ZWQvbWMnO1xuaW1wb3J0IHR5cGUgeyBURmV0Y2hBcHBsaWNhdGlvbnNNZW51UXVlcnkgfSBmcm9tICcuLi8uLi90eXBlcy9nZW5lcmF0ZWQvcHJveHknO1xuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJy4vbWVzc2FnZXMnO1xuXG50eXBlIFByb3BzID0gUGljazxcbiAgVFVzZXIsXG4gICdsYW5ndWFnZScgfCAnZmlyc3ROYW1lJyB8ICdsYXN0TmFtZScgfCAnZW1haWwnIHwgJ2dyYXZhdGFySGFzaCdcbj47XG50eXBlIE1lbnVCb2R5UHJvcHMgPSBQcm9wcyAmIHtcbiAgZG93bnNoaWZ0UHJvcHM6IENvbnRyb2xsZXJTdGF0ZUFuZEhlbHBlcnM8e30+O1xufTtcbnR5cGUgT3B0aW9uYWxGZWF0dXJlVG9nZ2xlUHJvcHMgPSB7XG4gIGZlYXR1cmVUb2dnbGU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59O1xudHlwZSBNZW51SXRlbVByb3BzID0ge1xuICBoYXNEaXZpZGVyPzogYm9vbGVhbjtcbn07XG50eXBlIE1lbnVJdGVtTGFiZWxQcm9wcyA9IHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbn07XG50eXBlIFVzZXJTZXR0aW5nc0F2YXRhckNvbnRhaW5lclByb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbnR5cGUgTWVudUNvbmZpZyA9IFRGZXRjaEFwcGxpY2F0aW9uc01lbnVRdWVyeVsnYXBwbGljYXRpb25zTWVudSddWydhcHBCYXInXVswXTtcblxuY29uc3QgTUVOVV9MQUJFTF9JRCA9ICd1c2VyLW1lbnUtc2V0dGluZy1tZW51LWxhYmVsJztcblxuY29uc3QgVXNlckF2YXRhciA9IChcbiAgcHJvcHM6IFBpY2s8UHJvcHMsICdmaXJzdE5hbWUnIHwgJ2xhc3ROYW1lJyB8ICdncmF2YXRhckhhc2gnPlxuKSA9PiB7XG4gIGNvbnN0IFtpc01vdXNlT3Zlciwgc2V0SXNNb3VzZU92ZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBoYW5kbGVNb3VzZU92ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNNb3VzZU92ZXIodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgY29uc3QgaGFuZGxlTW91c2VPdXQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNNb3VzZU92ZXIoZmFsc2UpO1xuICB9LCBbXSk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBvbk1vdXNlT3Zlcj17aGFuZGxlTW91c2VPdmVyfSBvbk1vdXNlT3V0PXtoYW5kbGVNb3VzZU91dH0+XG4gICAgICA8U3BhY2luZ3MuSW5saW5lIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgPEF2YXRhclxuICAgICAgICAgIHNpemU9XCJtXCJcbiAgICAgICAgICBncmF2YXRhckhhc2g9e3Byb3BzLmdyYXZhdGFySGFzaH1cbiAgICAgICAgICBmaXJzdE5hbWU9e3Byb3BzLmZpcnN0TmFtZX1cbiAgICAgICAgICBsYXN0TmFtZT17cHJvcHMubGFzdE5hbWV9XG4gICAgICAgICAgaXNIaWdobGlnaHRlZD17aXNNb3VzZU92ZXJ9XG4gICAgICAgIC8+XG4gICAgICA8L1NwYWNpbmdzLklubGluZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5Vc2VyQXZhdGFyLmRpc3BsYXlOYW1lID0gJ1VzZXJBdmF0YXInO1xuXG5mdW5jdGlvbiBnZXRJc0ZvY3VzZWRFbGVtZW50SW5NZW51KCkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50Py5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlci1zZXR0aW5ncy1tZW51JylcbiAgKTtcbn1cblxuY29uc3Qgc3RhdGVSZWR1Y2VyOiBEb3duc2hpZnRQcm9wczx7fT5bJ3N0YXRlUmVkdWNlciddID0gKHN0YXRlLCBjaGFuZ2VzKSA9PiB7XG4gIHN3aXRjaCAoY2hhbmdlcy50eXBlKSB7XG4gICAgLy8gU28gaW4gY2FzZSB0aGUgdXNlciB3YW50cyB0byBuYXZpZ2F0ZSB3aXRoIHRoZSB0YWIgYnV0dG9uXG4gICAgLy8gd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgbWVudSBkb2VzIG5vdCBjbG9zZVxuICAgIGNhc2UgRG93bnNoaWZ0LnN0YXRlQ2hhbmdlVHlwZXMuYmx1ckJ1dHRvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNoYW5nZXMsXG4gICAgICAgIGlzT3BlbjogKHN0YXRlLmlzT3BlbiAmJiBnZXRJc0ZvY3VzZWRFbGVtZW50SW5NZW51KCkpID8/IGZhbHNlLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNoYW5nZXM7XG4gIH1cbn07XG5cbmNvbnN0IE9wdGlvbmFsRmVhdHVyZVRvZ2dsZSA9IChwcm9wczogT3B0aW9uYWxGZWF0dXJlVG9nZ2xlUHJvcHMpID0+IHtcbiAgaWYgKHByb3BzLmZlYXR1cmVUb2dnbGUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFRvZ2dsZUZlYXR1cmUgZmxhZz17cHJvcHMuZmVhdHVyZVRvZ2dsZX0+e3Byb3BzLmNoaWxkcmVufTwvVG9nZ2xlRmVhdHVyZT5cbiAgICApO1xuICB9XG4gIHJldHVybiA8Pntwcm9wcy5jaGlsZHJlbn08Lz47XG59O1xuXG5jb25zdCByZW5kZXJMYWJlbCA9IChcbiAgbWVudTogTWVudUNvbmZpZyxcbiAgYXBwbGljYXRpb25MYW5ndWFnZTogUHJvcHNbJ2xhbmd1YWdlJ11cbikgPT4ge1xuICBjb25zdCBsb2NhbGl6ZWRMYWJlbCA9IG1lbnUubGFiZWxBbGxMb2NhbGVzLmZpbmQoKGxvYykgPT5cbiAgICBhcHBsaWNhdGlvbkxhbmd1YWdlLnN0YXJ0c1dpdGgobG9jLmxvY2FsZSlcbiAgKTtcbiAgaWYgKGxvY2FsaXplZExhYmVsKSByZXR1cm4gbG9jYWxpemVkTGFiZWwudmFsdWU7XG4gIHJldHVybiBOT19WQUxVRV9GQUxMQkFDSztcbn07XG5cbmNvbnN0IE1lbnVJdGVtID0gc3R5bGVkLmRpdjxNZW51SXRlbVByb3BzPmBcbiAgd2lkdGg6IDEwMCU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6ICR7dWlraXREZXNpZ25Ub2tlbnMuY29sb3JTb2xpZH07XG5cbiAgOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2FwcGtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JVc2VyTWVudUl0ZW1XaGVuSG92ZXJlZH07XG4gIH1cblxuICAkeyhwcm9wcykgPT5cbiAgICBwcm9wcy5oYXNEaXZpZGVyID09PSB0cnVlXG4gICAgICA/IGNzc2BcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHt1aWtpdERlc2lnblRva2Vucy5jb2xvck5ldXRyYWx9O1xuICAgICAgICAgIG1hcmdpbjogJHthcHBraXREZXNpZ25Ub2tlbnMubWFyZ2luRm9yVXNlck1lbnVJdGVtfTtcbiAgICAgICAgYFxuICAgICAgOiAnJ307XG5gO1xuXG5jb25zdCBNZW51SXRlbUxhYmVsID0gKHByb3BzOiBNZW51SXRlbUxhYmVsUHJvcHMpID0+IChcbiAgPGRpdlxuICAgIGNzcz17Y3NzYFxuICAgICAgcGFkZGluZzogJHt1aWtpdERlc2lnblRva2Vucy5zcGFjaW5nMjB9ICR7dWlraXREZXNpZ25Ub2tlbnMuc3BhY2luZzUwfTtcbiAgICBgfVxuICA+XG4gICAge3Byb3BzLmNoaWxkcmVufVxuICA8L2Rpdj5cbik7XG5cbmNvbnN0IFVzZXJTZXR0aW5nc0F2YXRhckNvbnRhaW5lciA9IChcbiAgcHJvcHM6IFVzZXJTZXR0aW5nc0F2YXRhckNvbnRhaW5lclByb3BzXG4pID0+IChcbiAgPGRpdlxuICAgIGNzcz17Y3NzYFxuICAgICAgcGFkZGluZzogJHt1aWtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9ICR7dWlraXREZXNpZ25Ub2tlbnMuc3BhY2luZzUwfTtcbiAgICBgfVxuICA+XG4gICAge3Byb3BzLmNoaWxkcmVufVxuICA8L2Rpdj5cbik7XG5cbmNvbnN0IGdldFVzZXJTZXR0aW5nc01lbnVTdHlsZXMgPSAoKSA9PiB7XG4gIHJldHVybiBjc3NgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJhY2tncm91bmQ6ICR7dWlraXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgICBib3JkZXItcmFkaXVzOiAke3Vpa2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czJ9O1xuICAgIGJveC1zaGFkb3c6IDBweCAycHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xuICAgIHdpZHRoOiAke3Vpa2l0RGVzaWduVG9rZW5zLmNvbnN0cmFpbnQ5fTtcbiAgICByaWdodDogNDBweDtcbiAgICB0b3A6IGNhbGMoJHtESU1FTlNJT05TLmhlYWRlcn0gKyAke3Vpa2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH0pO1xuICAgIHBhZGRpbmc6IDAgMCAke3Vpa2l0RGVzaWduVG9rZW5zLnNwYWNpbmcxMH0gMDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICBgO1xufTtcblxuY29uc3QgZ2V0VXNlclNldHRpbmdzTWVudUl0ZW1MaW5rU3R5bGVzID0gKCkgPT4gY3NzYFxuICBkaXNwbGF5OiBibG9jaztcbmA7XG5cbmNvbnN0IFVzZXJTZXR0aW5nc01lbnVCb2R5ID0gKHByb3BzOiBNZW51Qm9keVByb3BzKSA9PiB7XG4gIC8vIEZvY3VzIG9uIGEgbWVudSBpdGVtIHdoZW4gaXQncyBvcGVuZWQgdGhyb3VnaCBrZXlib2FyZFxuICBjb25zdCBtZW51RWxlbWVudFJlZiA9IHVzZVJlZjxIVE1MQW5jaG9yRWxlbWVudD4obnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbWVudUVsZW1lbnRSZWYuY3VycmVudD8uZm9jdXMoKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGVudmlyb25tZW50ID0gdXNlQXBwbGljYXRpb25Db250ZXh0KChjb250ZXh0KSA9PiBjb250ZXh0LmVudmlyb25tZW50KTtcblxuICBjb25zdCBhcHBsaWNhdGlvbnNBcHBCYXJNZW51ID0gdXNlQXBwbGljYXRpb25zTWVudTwnYXBwQmFyJz4oJ2FwcEJhcicsIHtcbiAgICBxdWVyeU9wdGlvbnM6IHtcbiAgICAgIG9uRXJyb3I6IHJlcG9ydEVycm9yVG9TZW50cnksXG4gICAgfSxcbiAgICBlbnZpcm9ubWVudCxcbiAgfSk7XG4gIGNvbnN0IGFjY291bnRNZW51SXRlbXMgPSBhcHBsaWNhdGlvbnNBcHBCYXJNZW51ID8/IFtdO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgb25LZXlEb3duPXsoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGV2ZW50LmtleSA9PT0gJ0VzYycgfHxcbiAgICAgICAgICAoZXZlbnQua2V5ID09PSAnVGFiJyAmJiAhZ2V0SXNGb2N1c2VkRWxlbWVudEluTWVudSgpKVxuICAgICAgICApIHtcbiAgICAgICAgICBwcm9wcy5kb3duc2hpZnRQcm9wcy5jbG9zZU1lbnUoKTtcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgIGNzcz17Z2V0VXNlclNldHRpbmdzTWVudVN0eWxlcygpfVxuICAgID5cbiAgICAgIDxkaXYgey4uLnByb3BzLmRvd25zaGlmdFByb3BzLmdldE1lbnVQcm9wcygpfT5cbiAgICAgICAgPFVzZXJTZXR0aW5nc0F2YXRhckNvbnRhaW5lcj5cbiAgICAgICAgICA8U3BhY2luZ3MuSW5saW5lIHNjYWxlPVwibVwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgIDxBdmF0YXJcbiAgICAgICAgICAgICAgc2l6ZT1cIm1cIlxuICAgICAgICAgICAgICBmaXJzdE5hbWU9e3Byb3BzLmZpcnN0TmFtZX1cbiAgICAgICAgICAgICAgbGFzdE5hbWU9e3Byb3BzLmxhc3ROYW1lfVxuICAgICAgICAgICAgICBncmF2YXRhckhhc2g9e3Byb3BzLmdyYXZhdGFySGFzaH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8VGV4dC5TdWJoZWFkbGluZSBhcz1cImg0XCI+XG4gICAgICAgICAgICAgICAge1twcm9wcy5maXJzdE5hbWUsIHByb3BzLmxhc3ROYW1lXS5qb2luKCcgJykudHJpbSgpfVxuICAgICAgICAgICAgICA8L1RleHQuU3ViaGVhZGxpbmU+XG4gICAgICAgICAgICAgIDxUZXh0LkRldGFpbCB0cnVuY2F0ZSB0b25lPVwic2Vjb25kYXJ5XCI+XG4gICAgICAgICAgICAgICAge3Byb3BzLmVtYWlsfVxuICAgICAgICAgICAgICA8L1RleHQuRGV0YWlsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9TcGFjaW5ncy5JbmxpbmU+XG4gICAgICAgIDwvVXNlclNldHRpbmdzQXZhdGFyQ29udGFpbmVyPlxuICAgICAgICB7YWNjb3VudE1lbnVJdGVtcy5sZW5ndGggPiAwID8gPE1lbnVJdGVtIGhhc0RpdmlkZXI9e3RydWV9IC8+IDogbnVsbH1cbiAgICAgICAge2FjY291bnRNZW51SXRlbXMubWFwKChtZW51KSA9PiAoXG4gICAgICAgICAgPE9wdGlvbmFsRmVhdHVyZVRvZ2dsZVxuICAgICAgICAgICAga2V5PXttZW51LmtleX1cbiAgICAgICAgICAgIGZlYXR1cmVUb2dnbGU9e21lbnUuZmVhdHVyZVRvZ2dsZSA/PyB1bmRlZmluZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPExpbmtcbiAgICAgICAgICAgICAgY3NzPXtnZXRVc2VyU2V0dGluZ3NNZW51SXRlbUxpbmtTdHlsZXMoKX1cbiAgICAgICAgICAgICAgdG89e2AvYWNjb3VudC8ke21lbnUudXJpUGF0aH1gfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwcm9wcy5kb3duc2hpZnRQcm9wcy50b2dnbGVNZW51KCl9XG4gICAgICAgICAgICAgIGRhdGEtdXNlci1zZXR0aW5ncy1tZW51XG4gICAgICAgICAgICAgIHJlZj17bWVudUVsZW1lbnRSZWZ9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxNZW51SXRlbT5cbiAgICAgICAgICAgICAgICA8TWVudUl0ZW1MYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxUZXh0LkJvZHk+e3JlbmRlckxhYmVsKG1lbnUsIHByb3BzLmxhbmd1YWdlKX08L1RleHQuQm9keT5cbiAgICAgICAgICAgICAgICA8L01lbnVJdGVtTGFiZWw+XG4gICAgICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgPC9PcHRpb25hbEZlYXR1cmVUb2dnbGU+XG4gICAgICAgICkpfVxuICAgICAgICA8TWVudUl0ZW0gaGFzRGl2aWRlcj17dHJ1ZX0gLz5cbiAgICAgICAgPGFcbiAgICAgICAgICBjc3M9e2dldFVzZXJTZXR0aW5nc01lbnVJdGVtTGlua1N0eWxlcygpfVxuICAgICAgICAgIGhyZWY9e2BodHRwczovL2NvbW1lcmNldG9vbHMuY29tL3ByaXZhY3kjc3VwcGxpZXJzYH1cbiAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHByb3BzLmRvd25zaGlmdFByb3BzLnRvZ2dsZU1lbnUoKX1cbiAgICAgICAgICBkYXRhLXVzZXItc2V0dGluZ3MtbWVudVxuICAgICAgICAgIHJlZj17IWFwcGxpY2F0aW9uc0FwcEJhck1lbnUgPyBtZW51RWxlbWVudFJlZiA6IHVuZGVmaW5lZH1cbiAgICAgICAgPlxuICAgICAgICAgIDxNZW51SXRlbT5cbiAgICAgICAgICAgIDxNZW51SXRlbUxhYmVsPlxuICAgICAgICAgICAgICA8VGV4dC5Cb2R5IGludGxNZXNzYWdlPXttZXNzYWdlcy5wcml2YWN5UG9saWN5fSAvPlxuICAgICAgICAgICAgPC9NZW51SXRlbUxhYmVsPlxuICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgIDwvYT5cbiAgICAgICAgPGFcbiAgICAgICAgICBjc3M9e2dldFVzZXJTZXR0aW5nc01lbnVJdGVtTGlua1N0eWxlcygpfVxuICAgICAgICAgIGhyZWY9e1NVUFBPUlRfUE9SVEFMX1VSTH1cbiAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHByb3BzLmRvd25zaGlmdFByb3BzLnRvZ2dsZU1lbnUoKX1cbiAgICAgICAgICBkYXRhLXVzZXItc2V0dGluZ3MtbWVudVxuICAgICAgICA+XG4gICAgICAgICAgPE1lbnVJdGVtPlxuICAgICAgICAgICAgPE1lbnVJdGVtTGFiZWw+XG4gICAgICAgICAgICAgIDxUZXh0LkJvZHkgaW50bE1lc3NhZ2U9e21lc3NhZ2VzLnN1cHBvcnR9IC8+XG4gICAgICAgICAgICA8L01lbnVJdGVtTGFiZWw+XG4gICAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgICAgPC9hPlxuICAgICAgICA8TWVudUl0ZW0gaGFzRGl2aWRlcj17dHJ1ZX0gLz5cbiAgICAgICAgPGFcbiAgICAgICAgICBjc3M9e2dldFVzZXJTZXR0aW5nc01lbnVJdGVtTGlua1N0eWxlcygpfVxuICAgICAgICAgIC8vIE5PVEU6IHdlIHdhbnQgdG8gcmVkaXJlY3QgdG8gYSBuZXcgcGFnZSBzbyB0aGF0IHRoZVxuICAgICAgICAgIC8vIHNlcnZlciBjYW4gcmVtb3ZlIHRoaW5ncyBsaWtlIGNvb2tpZSBmb3IgYWNjZXNzIHRva2VuLlxuICAgICAgICAgIGhyZWY9e2AvbG9nb3V0P3JlYXNvbj0ke0xPR09VVF9SRUFTT05TLlVTRVJ9YH1cbiAgICAgICAgICBkYXRhLXRlc3Q9XCJsb2dvdXQtYnV0dG9uXCJcbiAgICAgICAgICBkYXRhLXVzZXItc2V0dGluZ3MtbWVudVxuICAgICAgICA+XG4gICAgICAgICAgPE1lbnVJdGVtPlxuICAgICAgICAgICAgPE1lbnVJdGVtTGFiZWw+XG4gICAgICAgICAgICAgIDxUZXh0LkJvZHkgaW50bE1lc3NhZ2U9e21lc3NhZ2VzLmxvZ291dH0gLz5cbiAgICAgICAgICAgIDwvTWVudUl0ZW1MYWJlbD5cbiAgICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgICAgIDxkaXYgdGFiSW5kZXg9ezB9IG9uRm9jdXM9eygpID0+IHByb3BzLmRvd25zaGlmdFByb3BzLmNsb3NlTWVudSgpfSAvPlxuICAgICAgICA8L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5Vc2VyU2V0dGluZ3NNZW51Qm9keS5kaXNwbGF5TmFtZSA9ICdVc2VyU2V0dGluZ3NNZW51Qm9keSc7XG5cbmNvbnN0IFVzZXJTZXR0aW5nc01lbnUgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGRhdGEtdGVzdD1cInVzZXItc2V0dGluZ3MtbWVudVwiPlxuICAgICAgPEFjY2Vzc2libGVIaWRkZW4+XG4gICAgICAgIDxzcGFuIGlkPXtNRU5VX0xBQkVMX0lEfT5cbiAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSB7Li4ubWVzc2FnZXMubWVudUxhYmVsfSAvPlxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L0FjY2Vzc2libGVIaWRkZW4+XG4gICAgICA8RG93bnNoaWZ0IHN0YXRlUmVkdWNlcj17c3RhdGVSZWR1Y2VyfSBsYWJlbElkPXtNRU5VX0xBQkVMX0lEfT5cbiAgICAgICAgeyhkb3duc2hpZnRQcm9wcykgPT4gKFxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICB7Li4uZG93bnNoaWZ0UHJvcHMuZ2V0VG9nZ2xlQnV0dG9uUHJvcHMoe1xuICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogaW50bC5mb3JtYXRNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgZG93bnNoaWZ0UHJvcHMuaXNPcGVuXG4gICAgICAgICAgICAgICAgICAgID8gbWVzc2FnZXMuY2xvc2VNZW51TGFiZWxcbiAgICAgICAgICAgICAgICAgICAgOiBtZXNzYWdlcy5vcGVuTWVudUxhYmVsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxVc2VyQXZhdGFyXG4gICAgICAgICAgICAgICAgZmlyc3ROYW1lPXtwcm9wcy5maXJzdE5hbWV9XG4gICAgICAgICAgICAgICAgbGFzdE5hbWU9e3Byb3BzLmxhc3ROYW1lfVxuICAgICAgICAgICAgICAgIGdyYXZhdGFySGFzaD17cHJvcHMuZ3JhdmF0YXJIYXNofVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICB7ZG93bnNoaWZ0UHJvcHMuaXNPcGVuICYmIChcbiAgICAgICAgICAgICAgPFVzZXJTZXR0aW5nc01lbnVCb2R5XG4gICAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgICAgIGRvd25zaGlmdFByb3BzPXtkb3duc2hpZnRQcm9wc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L0Rvd25zaGlmdD5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5Vc2VyU2V0dGluZ3NNZW51LmRpc3BsYXlOYW1lID0gJ1VzZXJTZXR0aW5nc01lbnUnO1xuXG5leHBvcnQgZGVmYXVsdCBVc2VyU2V0dGluZ3NNZW51O1xuXG4vLyBGb3IgdGVzdGluZ1xuZXhwb3J0IHsgVXNlckF2YXRhciwgVXNlclNldHRpbmdzTWVudUJvZHkgfTtcbiJdfQ== */"));
const MenuItemLabel = props => jsx("div", {
  css: /*#__PURE__*/css("padding:", designTokens.spacing20, " ", designTokens.spacing50, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuItemLabel;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXItc2V0dGluZ3MtbWVudS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMklZIiwiZmlsZSI6InVzZXItc2V0dGluZ3MtbWVudS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdE5vZGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBUb2dnbGVGZWF0dXJlIH0gZnJvbSAnQGZsb3BmbGlwL3JlYWN0LWJyb2FkY2FzdCc7XG5pbXBvcnQgRG93bnNoaWZ0LCB7XG4gIHR5cGUgQ29udHJvbGxlclN0YXRlQW5kSGVscGVycyxcbiAgdHlwZSBEb3duc2hpZnRQcm9wcyxcbn0gZnJvbSAnZG93bnNoaWZ0JztcbmltcG9ydCB7IHVzZUludGwsIEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBraXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IHVzZUFwcGxpY2F0aW9uQ29udGV4dCB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLWZyb250ZW5kL2FwcGxpY2F0aW9uLXNoZWxsLWNvbm5lY3RvcnMnO1xuaW1wb3J0IHtcbiAgTE9HT1VUX1JFQVNPTlMsXG4gIE5PX1ZBTFVFX0ZBTExCQUNLLFxuICBTVVBQT1JUX1BPUlRBTF9VUkwsXG59IGZyb20gJ0Bjb21tZXJjZXRvb2xzLWZyb250ZW5kL2NvbnN0YW50cyc7XG5pbXBvcnQgeyByZXBvcnRFcnJvclRvU2VudHJ5IH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtZnJvbnRlbmQvc2VudHJ5JztcbmltcG9ydCBBY2Nlc3NpYmxlSGlkZGVuIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2FjY2Vzc2libGUtaGlkZGVuJztcbmltcG9ydCBBdmF0YXIgZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvYXZhdGFyJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aWtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IFNwYWNpbmdzIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgdXNlQXBwbGljYXRpb25zTWVudSBmcm9tICcuLi8uLi9ob29rcy91c2UtYXBwbGljYXRpb25zLW1lbnUnO1xuaW1wb3J0IHR5cGUgeyBUVXNlciB9IGZyb20gJy4uLy4uL3R5cGVzL2dlbmVyYXRlZC9tYyc7XG5pbXBvcnQgdHlwZSB7IFRGZXRjaEFwcGxpY2F0aW9uc01lbnVRdWVyeSB9IGZyb20gJy4uLy4uL3R5cGVzL2dlbmVyYXRlZC9wcm94eSc7XG5pbXBvcnQgbWVzc2FnZXMgZnJvbSAnLi9tZXNzYWdlcyc7XG5cbnR5cGUgUHJvcHMgPSBQaWNrPFxuICBUVXNlcixcbiAgJ2xhbmd1YWdlJyB8ICdmaXJzdE5hbWUnIHwgJ2xhc3ROYW1lJyB8ICdlbWFpbCcgfCAnZ3JhdmF0YXJIYXNoJ1xuPjtcbnR5cGUgTWVudUJvZHlQcm9wcyA9IFByb3BzICYge1xuICBkb3duc2hpZnRQcm9wczogQ29udHJvbGxlclN0YXRlQW5kSGVscGVyczx7fT47XG59O1xudHlwZSBPcHRpb25hbEZlYXR1cmVUb2dnbGVQcm9wcyA9IHtcbiAgZmVhdHVyZVRvZ2dsZT86IHN0cmluZztcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbn07XG50eXBlIE1lbnVJdGVtUHJvcHMgPSB7XG4gIGhhc0RpdmlkZXI/OiBib29sZWFuO1xufTtcbnR5cGUgTWVudUl0ZW1MYWJlbFByb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbnR5cGUgVXNlclNldHRpbmdzQXZhdGFyQ29udGFpbmVyUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59O1xudHlwZSBNZW51Q29uZmlnID0gVEZldGNoQXBwbGljYXRpb25zTWVudVF1ZXJ5WydhcHBsaWNhdGlvbnNNZW51J11bJ2FwcEJhciddWzBdO1xuXG5jb25zdCBNRU5VX0xBQkVMX0lEID0gJ3VzZXItbWVudS1zZXR0aW5nLW1lbnUtbGFiZWwnO1xuXG5jb25zdCBVc2VyQXZhdGFyID0gKFxuICBwcm9wczogUGljazxQcm9wcywgJ2ZpcnN0TmFtZScgfCAnbGFzdE5hbWUnIHwgJ2dyYXZhdGFySGFzaCc+XG4pID0+IHtcbiAgY29uc3QgW2lzTW91c2VPdmVyLCBzZXRJc01vdXNlT3Zlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlT3ZlciA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRJc01vdXNlT3Zlcih0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVNb3VzZU91dCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRJc01vdXNlT3ZlcihmYWxzZSk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IG9uTW91c2VPdmVyPXtoYW5kbGVNb3VzZU92ZXJ9IG9uTW91c2VPdXQ9e2hhbmRsZU1vdXNlT3V0fT5cbiAgICAgIDxTcGFjaW5ncy5JbmxpbmUgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICA8QXZhdGFyXG4gICAgICAgICAgc2l6ZT1cIm1cIlxuICAgICAgICAgIGdyYXZhdGFySGFzaD17cHJvcHMuZ3JhdmF0YXJIYXNofVxuICAgICAgICAgIGZpcnN0TmFtZT17cHJvcHMuZmlyc3ROYW1lfVxuICAgICAgICAgIGxhc3ROYW1lPXtwcm9wcy5sYXN0TmFtZX1cbiAgICAgICAgICBpc0hpZ2hsaWdodGVkPXtpc01vdXNlT3Zlcn1cbiAgICAgICAgLz5cbiAgICAgIDwvU3BhY2luZ3MuSW5saW5lPlxuICAgIDwvZGl2PlxuICApO1xufTtcblVzZXJBdmF0YXIuZGlzcGxheU5hbWUgPSAnVXNlckF2YXRhcic7XG5cbmZ1bmN0aW9uIGdldElzRm9jdXNlZEVsZW1lbnRJbk1lbnUoKSB7XG4gIHJldHVybiBCb29sZWFuKFxuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ/LmdldEF0dHJpYnV0ZSgnZGF0YS11c2VyLXNldHRpbmdzLW1lbnUnKVxuICApO1xufVxuXG5jb25zdCBzdGF0ZVJlZHVjZXI6IERvd25zaGlmdFByb3BzPHt9Plsnc3RhdGVSZWR1Y2VyJ10gPSAoc3RhdGUsIGNoYW5nZXMpID0+IHtcbiAgc3dpdGNoIChjaGFuZ2VzLnR5cGUpIHtcbiAgICAvLyBTbyBpbiBjYXNlIHRoZSB1c2VyIHdhbnRzIHRvIG5hdmlnYXRlIHdpdGggdGhlIHRhYiBidXR0b25cbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBtZW51IGRvZXMgbm90IGNsb3NlXG4gICAgY2FzZSBEb3duc2hpZnQuc3RhdGVDaGFuZ2VUeXBlcy5ibHVyQnV0dG9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY2hhbmdlcyxcbiAgICAgICAgaXNPcGVuOiAoc3RhdGUuaXNPcGVuICYmIGdldElzRm9jdXNlZEVsZW1lbnRJbk1lbnUoKSkgPz8gZmFsc2UsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY2hhbmdlcztcbiAgfVxufTtcblxuY29uc3QgT3B0aW9uYWxGZWF0dXJlVG9nZ2xlID0gKHByb3BzOiBPcHRpb25hbEZlYXR1cmVUb2dnbGVQcm9wcykgPT4ge1xuICBpZiAocHJvcHMuZmVhdHVyZVRvZ2dsZSkge1xuICAgIHJldHVybiAoXG4gICAgICA8VG9nZ2xlRmVhdHVyZSBmbGFnPXtwcm9wcy5mZWF0dXJlVG9nZ2xlfT57cHJvcHMuY2hpbGRyZW59PC9Ub2dnbGVGZWF0dXJlPlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIDw+e3Byb3BzLmNoaWxkcmVufTwvPjtcbn07XG5cbmNvbnN0IHJlbmRlckxhYmVsID0gKFxuICBtZW51OiBNZW51Q29uZmlnLFxuICBhcHBsaWNhdGlvbkxhbmd1YWdlOiBQcm9wc1snbGFuZ3VhZ2UnXVxuKSA9PiB7XG4gIGNvbnN0IGxvY2FsaXplZExhYmVsID0gbWVudS5sYWJlbEFsbExvY2FsZXMuZmluZCgobG9jKSA9PlxuICAgIGFwcGxpY2F0aW9uTGFuZ3VhZ2Uuc3RhcnRzV2l0aChsb2MubG9jYWxlKVxuICApO1xuICBpZiAobG9jYWxpemVkTGFiZWwpIHJldHVybiBsb2NhbGl6ZWRMYWJlbC52YWx1ZTtcbiAgcmV0dXJuIE5PX1ZBTFVFX0ZBTExCQUNLO1xufTtcblxuY29uc3QgTWVudUl0ZW0gPSBzdHlsZWQuZGl2PE1lbnVJdGVtUHJvcHM+YFxuICB3aWR0aDogMTAwJTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogJHt1aWtpdERlc2lnblRva2Vucy5jb2xvclNvbGlkfTtcblxuICA6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7YXBwa2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvclVzZXJNZW51SXRlbVdoZW5Ib3ZlcmVkfTtcbiAgfVxuXG4gICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmhhc0RpdmlkZXIgPT09IHRydWVcbiAgICAgID8gY3NzYFxuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAke3Vpa2l0RGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbH07XG4gICAgICAgICAgbWFyZ2luOiAke2FwcGtpdERlc2lnblRva2Vucy5tYXJnaW5Gb3JVc2VyTWVudUl0ZW19O1xuICAgICAgICBgXG4gICAgICA6ICcnfTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtTGFiZWwgPSAocHJvcHM6IE1lbnVJdGVtTGFiZWxQcm9wcykgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXtjc3NgXG4gICAgICBwYWRkaW5nOiAke3Vpa2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH0gJHt1aWtpdERlc2lnblRva2Vucy5zcGFjaW5nNTB9O1xuICAgIGB9XG4gID5cbiAgICB7cHJvcHMuY2hpbGRyZW59XG4gIDwvZGl2PlxuKTtcblxuY29uc3QgVXNlclNldHRpbmdzQXZhdGFyQ29udGFpbmVyID0gKFxuICBwcm9wczogVXNlclNldHRpbmdzQXZhdGFyQ29udGFpbmVyUHJvcHNcbikgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXtjc3NgXG4gICAgICBwYWRkaW5nOiAke3Vpa2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0gJHt1aWtpdERlc2lnblRva2Vucy5zcGFjaW5nNTB9O1xuICAgIGB9XG4gID5cbiAgICB7cHJvcHMuY2hpbGRyZW59XG4gIDwvZGl2PlxuKTtcblxuY29uc3QgZ2V0VXNlclNldHRpbmdzTWVudVN0eWxlcyA9ICgpID0+IHtcbiAgcmV0dXJuIGNzc2BcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYmFja2dyb3VuZDogJHt1aWtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7dWlraXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMn07XG4gICAgYm94LXNoYWRvdzogMHB4IDJweCA1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7XG4gICAgd2lkdGg6ICR7dWlraXREZXNpZ25Ub2tlbnMuY29uc3RyYWludDl9O1xuICAgIHJpZ2h0OiA0MHB4O1xuICAgIHRvcDogY2FsYygke0RJTUVOU0lPTlMuaGVhZGVyfSArICR7dWlraXREZXNpZ25Ub2tlbnMuc3BhY2luZzIwfSk7XG4gICAgcGFkZGluZzogMCAwICR7dWlraXREZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIGA7XG59O1xuXG5jb25zdCBnZXRVc2VyU2V0dGluZ3NNZW51SXRlbUxpbmtTdHlsZXMgPSAoKSA9PiBjc3NgXG4gIGRpc3BsYXk6IGJsb2NrO1xuYDtcblxuY29uc3QgVXNlclNldHRpbmdzTWVudUJvZHkgPSAocHJvcHM6IE1lbnVCb2R5UHJvcHMpID0+IHtcbiAgLy8gRm9jdXMgb24gYSBtZW51IGl0ZW0gd2hlbiBpdCdzIG9wZW5lZCB0aHJvdWdoIGtleWJvYXJkXG4gIGNvbnN0IG1lbnVFbGVtZW50UmVmID0gdXNlUmVmPEhUTUxBbmNob3JFbGVtZW50PihudWxsKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBtZW51RWxlbWVudFJlZi5jdXJyZW50Py5mb2N1cygpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgZW52aXJvbm1lbnQgPSB1c2VBcHBsaWNhdGlvbkNvbnRleHQoKGNvbnRleHQpID0+IGNvbnRleHQuZW52aXJvbm1lbnQpO1xuXG4gIGNvbnN0IGFwcGxpY2F0aW9uc0FwcEJhck1lbnUgPSB1c2VBcHBsaWNhdGlvbnNNZW51PCdhcHBCYXInPignYXBwQmFyJywge1xuICAgIHF1ZXJ5T3B0aW9uczoge1xuICAgICAgb25FcnJvcjogcmVwb3J0RXJyb3JUb1NlbnRyeSxcbiAgICB9LFxuICAgIGVudmlyb25tZW50LFxuICB9KTtcbiAgY29uc3QgYWNjb3VudE1lbnVJdGVtcyA9IGFwcGxpY2F0aW9uc0FwcEJhck1lbnUgPz8gW107XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBvbktleURvd249eyhldmVudCkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZXZlbnQua2V5ID09PSAnRXNjJyB8fFxuICAgICAgICAgIChldmVudC5rZXkgPT09ICdUYWInICYmICFnZXRJc0ZvY3VzZWRFbGVtZW50SW5NZW51KCkpXG4gICAgICAgICkge1xuICAgICAgICAgIHByb3BzLmRvd25zaGlmdFByb3BzLmNsb3NlTWVudSgpO1xuICAgICAgICB9XG4gICAgICB9fVxuICAgICAgY3NzPXtnZXRVc2VyU2V0dGluZ3NNZW51U3R5bGVzKCl9XG4gICAgPlxuICAgICAgPGRpdiB7Li4ucHJvcHMuZG93bnNoaWZ0UHJvcHMuZ2V0TWVudVByb3BzKCl9PlxuICAgICAgICA8VXNlclNldHRpbmdzQXZhdGFyQ29udGFpbmVyPlxuICAgICAgICAgIDxTcGFjaW5ncy5JbmxpbmUgc2NhbGU9XCJtXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgPEF2YXRhclxuICAgICAgICAgICAgICBzaXplPVwibVwiXG4gICAgICAgICAgICAgIGZpcnN0TmFtZT17cHJvcHMuZmlyc3ROYW1lfVxuICAgICAgICAgICAgICBsYXN0TmFtZT17cHJvcHMubGFzdE5hbWV9XG4gICAgICAgICAgICAgIGdyYXZhdGFySGFzaD17cHJvcHMuZ3JhdmF0YXJIYXNofVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxUZXh0LlN1YmhlYWRsaW5lIGFzPVwiaDRcIj5cbiAgICAgICAgICAgICAgICB7W3Byb3BzLmZpcnN0TmFtZSwgcHJvcHMubGFzdE5hbWVdLmpvaW4oJyAnKS50cmltKCl9XG4gICAgICAgICAgICAgIDwvVGV4dC5TdWJoZWFkbGluZT5cbiAgICAgICAgICAgICAgPFRleHQuRGV0YWlsIHRydW5jYXRlIHRvbmU9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICAgICAgICB7cHJvcHMuZW1haWx9XG4gICAgICAgICAgICAgIDwvVGV4dC5EZXRhaWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L1NwYWNpbmdzLklubGluZT5cbiAgICAgICAgPC9Vc2VyU2V0dGluZ3NBdmF0YXJDb250YWluZXI+XG4gICAgICAgIHthY2NvdW50TWVudUl0ZW1zLmxlbmd0aCA+IDAgPyA8TWVudUl0ZW0gaGFzRGl2aWRlcj17dHJ1ZX0gLz4gOiBudWxsfVxuICAgICAgICB7YWNjb3VudE1lbnVJdGVtcy5tYXAoKG1lbnUpID0+IChcbiAgICAgICAgICA8T3B0aW9uYWxGZWF0dXJlVG9nZ2xlXG4gICAgICAgICAgICBrZXk9e21lbnUua2V5fVxuICAgICAgICAgICAgZmVhdHVyZVRvZ2dsZT17bWVudS5mZWF0dXJlVG9nZ2xlID8/IHVuZGVmaW5lZH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8TGlua1xuICAgICAgICAgICAgICBjc3M9e2dldFVzZXJTZXR0aW5nc01lbnVJdGVtTGlua1N0eWxlcygpfVxuICAgICAgICAgICAgICB0bz17YC9hY2NvdW50LyR7bWVudS51cmlQYXRofWB9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHByb3BzLmRvd25zaGlmdFByb3BzLnRvZ2dsZU1lbnUoKX1cbiAgICAgICAgICAgICAgZGF0YS11c2VyLXNldHRpbmdzLW1lbnVcbiAgICAgICAgICAgICAgcmVmPXttZW51RWxlbWVudFJlZn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPE1lbnVJdGVtPlxuICAgICAgICAgICAgICAgIDxNZW51SXRlbUxhYmVsPlxuICAgICAgICAgICAgICAgICAgPFRleHQuQm9keT57cmVuZGVyTGFiZWwobWVudSwgcHJvcHMubGFuZ3VhZ2UpfTwvVGV4dC5Cb2R5PlxuICAgICAgICAgICAgICAgIDwvTWVudUl0ZW1MYWJlbD5cbiAgICAgICAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICA8L09wdGlvbmFsRmVhdHVyZVRvZ2dsZT5cbiAgICAgICAgKSl9XG4gICAgICAgIDxNZW51SXRlbSBoYXNEaXZpZGVyPXt0cnVlfSAvPlxuICAgICAgICA8YVxuICAgICAgICAgIGNzcz17Z2V0VXNlclNldHRpbmdzTWVudUl0ZW1MaW5rU3R5bGVzKCl9XG4gICAgICAgICAgaHJlZj17YGh0dHBzOi8vY29tbWVyY2V0b29scy5jb20vcHJpdmFjeSNzdXBwbGllcnNgfVxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gcHJvcHMuZG93bnNoaWZ0UHJvcHMudG9nZ2xlTWVudSgpfVxuICAgICAgICAgIGRhdGEtdXNlci1zZXR0aW5ncy1tZW51XG4gICAgICAgICAgcmVmPXshYXBwbGljYXRpb25zQXBwQmFyTWVudSA/IG1lbnVFbGVtZW50UmVmIDogdW5kZWZpbmVkfVxuICAgICAgICA+XG4gICAgICAgICAgPE1lbnVJdGVtPlxuICAgICAgICAgICAgPE1lbnVJdGVtTGFiZWw+XG4gICAgICAgICAgICAgIDxUZXh0LkJvZHkgaW50bE1lc3NhZ2U9e21lc3NhZ2VzLnByaXZhY3lQb2xpY3l9IC8+XG4gICAgICAgICAgICA8L01lbnVJdGVtTGFiZWw+XG4gICAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgICAgPC9hPlxuICAgICAgICA8YVxuICAgICAgICAgIGNzcz17Z2V0VXNlclNldHRpbmdzTWVudUl0ZW1MaW5rU3R5bGVzKCl9XG4gICAgICAgICAgaHJlZj17U1VQUE9SVF9QT1JUQUxfVVJMfVxuICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gcHJvcHMuZG93bnNoaWZ0UHJvcHMudG9nZ2xlTWVudSgpfVxuICAgICAgICAgIGRhdGEtdXNlci1zZXR0aW5ncy1tZW51XG4gICAgICAgID5cbiAgICAgICAgICA8TWVudUl0ZW0+XG4gICAgICAgICAgICA8TWVudUl0ZW1MYWJlbD5cbiAgICAgICAgICAgICAgPFRleHQuQm9keSBpbnRsTWVzc2FnZT17bWVzc2FnZXMuc3VwcG9ydH0gLz5cbiAgICAgICAgICAgIDwvTWVudUl0ZW1MYWJlbD5cbiAgICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxNZW51SXRlbSBoYXNEaXZpZGVyPXt0cnVlfSAvPlxuICAgICAgICA8YVxuICAgICAgICAgIGNzcz17Z2V0VXNlclNldHRpbmdzTWVudUl0ZW1MaW5rU3R5bGVzKCl9XG4gICAgICAgICAgLy8gTk9URTogd2Ugd2FudCB0byByZWRpcmVjdCB0byBhIG5ldyBwYWdlIHNvIHRoYXQgdGhlXG4gICAgICAgICAgLy8gc2VydmVyIGNhbiByZW1vdmUgdGhpbmdzIGxpa2UgY29va2llIGZvciBhY2Nlc3MgdG9rZW4uXG4gICAgICAgICAgaHJlZj17YC9sb2dvdXQ/cmVhc29uPSR7TE9HT1VUX1JFQVNPTlMuVVNFUn1gfVxuICAgICAgICAgIGRhdGEtdGVzdD1cImxvZ291dC1idXR0b25cIlxuICAgICAgICAgIGRhdGEtdXNlci1zZXR0aW5ncy1tZW51XG4gICAgICAgID5cbiAgICAgICAgICA8TWVudUl0ZW0+XG4gICAgICAgICAgICA8TWVudUl0ZW1MYWJlbD5cbiAgICAgICAgICAgICAgPFRleHQuQm9keSBpbnRsTWVzc2FnZT17bWVzc2FnZXMubG9nb3V0fSAvPlxuICAgICAgICAgICAgPC9NZW51SXRlbUxhYmVsPlxuICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICAgPGRpdiB0YWJJbmRleD17MH0gb25Gb2N1cz17KCkgPT4gcHJvcHMuZG93bnNoaWZ0UHJvcHMuY2xvc2VNZW51KCl9IC8+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblVzZXJTZXR0aW5nc01lbnVCb2R5LmRpc3BsYXlOYW1lID0gJ1VzZXJTZXR0aW5nc01lbnVCb2R5JztcblxuY29uc3QgVXNlclNldHRpbmdzTWVudSA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgZGF0YS10ZXN0PVwidXNlci1zZXR0aW5ncy1tZW51XCI+XG4gICAgICA8QWNjZXNzaWJsZUhpZGRlbj5cbiAgICAgICAgPHNwYW4gaWQ9e01FTlVfTEFCRUxfSUR9PlxuICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIHsuLi5tZXNzYWdlcy5tZW51TGFiZWx9IC8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvQWNjZXNzaWJsZUhpZGRlbj5cbiAgICAgIDxEb3duc2hpZnQgc3RhdGVSZWR1Y2VyPXtzdGF0ZVJlZHVjZXJ9IGxhYmVsSWQ9e01FTlVfTEFCRUxfSUR9PlxuICAgICAgICB7KGRvd25zaGlmdFByb3BzKSA9PiAoXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICAgIHsuLi5kb3duc2hpZnRQcm9wcy5nZXRUb2dnbGVCdXR0b25Qcm9wcyh7XG4gICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiBpbnRsLmZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICBkb3duc2hpZnRQcm9wcy5pc09wZW5cbiAgICAgICAgICAgICAgICAgICAgPyBtZXNzYWdlcy5jbG9zZU1lbnVMYWJlbFxuICAgICAgICAgICAgICAgICAgICA6IG1lc3NhZ2VzLm9wZW5NZW51TGFiZWxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFVzZXJBdmF0YXJcbiAgICAgICAgICAgICAgICBmaXJzdE5hbWU9e3Byb3BzLmZpcnN0TmFtZX1cbiAgICAgICAgICAgICAgICBsYXN0TmFtZT17cHJvcHMubGFzdE5hbWV9XG4gICAgICAgICAgICAgICAgZ3JhdmF0YXJIYXNoPXtwcm9wcy5ncmF2YXRhckhhc2h9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIHtkb3duc2hpZnRQcm9wcy5pc09wZW4gJiYgKFxuICAgICAgICAgICAgICA8VXNlclNldHRpbmdzTWVudUJvZHlcbiAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgZG93bnNoaWZ0UHJvcHM9e2Rvd25zaGlmdFByb3BzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvRG93bnNoaWZ0PlxuICAgIDwvZGl2PlxuICApO1xufTtcblVzZXJTZXR0aW5nc01lbnUuZGlzcGxheU5hbWUgPSAnVXNlclNldHRpbmdzTWVudSc7XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJTZXR0aW5nc01lbnU7XG5cbi8vIEZvciB0ZXN0aW5nXG5leHBvcnQgeyBVc2VyQXZhdGFyLCBVc2VyU2V0dGluZ3NNZW51Qm9keSB9O1xuIl19 */"),
  children: props.children
});
MenuItemLabel.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _pt.node.isRequired
} : {};
const UserSettingsAvatarContainer = props => jsx("div", {
  css: /*#__PURE__*/css("padding:", designTokens.spacing30, " ", designTokens.spacing50, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:UserSettingsAvatarContainer;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
  children: props.children
});
UserSettingsAvatarContainer.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _pt.node.isRequired
} : {};
const getUserSettingsMenuStyles = () => {
  return /*#__PURE__*/css("position:absolute;background:", designTokens.colorSurface, ";border-radius:", designTokens.borderRadius2, ";box-shadow:0px 2px 5px 0px rgba(0, 0, 0, 0.15);width:", designTokens.constraint9, ";right:40px;top:calc(", DIMENSIONS.header, " + ", designTokens.spacing20, ");padding:0 0 ", designTokens.spacing10, " 0;overflow:hidden;" + (process.env.NODE_ENV === "production" ? "" : ";label:getUserSettingsMenuStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "4zleql",
  styles: "display:block"
} : {
  name: "1h437nn-getUserSettingsMenuItemLinkStyles",
  styles: "display:block;label:getUserSettingsMenuItemLinkStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const getUserSettingsMenuItemLinkStyles = () => _ref2;
const UserSettingsMenuBody = props => {
  var _context2;
  // Focus on a menu item when it's opened through keyboard
  const menuElementRef = useRef(null);
  useEffect(() => {
    var _menuElementRef$curre;
    (_menuElementRef$curre = menuElementRef.current) === null || _menuElementRef$curre === void 0 || _menuElementRef$curre.focus();
  }, []);
  const environment = useApplicationContext(context => context.environment);
  const applicationsAppBarMenu = useApplicationsMenu('appBar', {
    queryOptions: {
      onError: reportErrorToSentry
    },
    environment
  });
  const accountMenuItems = applicationsAppBarMenu !== null && applicationsAppBarMenu !== void 0 ? applicationsAppBarMenu : [];
  return jsx("div", {
    onKeyDown: event => {
      if (event.key === 'Esc' || event.key === 'Tab' && !getIsFocusedElementInMenu()) {
        props.downshiftProps.closeMenu();
      }
    },
    css: getUserSettingsMenuStyles(),
    children: jsxs("div", _objectSpread(_objectSpread({}, props.downshiftProps.getMenuProps()), {}, {
      children: [jsx(UserSettingsAvatarContainer, {
        children: jsxs(Spacings.Inline, {
          scale: "m",
          alignItems: "center",
          children: [jsx(Avatar, {
            size: "m",
            firstName: props.firstName,
            lastName: props.lastName,
            gravatarHash: props.gravatarHash
          }), jsxs("div", {
            children: [jsx(Text.Subheadline, {
              as: "h4",
              children: _trimInstanceProperty(_context2 = [props.firstName, props.lastName].join(' ')).call(_context2)
            }), jsx(Text.Detail, {
              truncate: true,
              tone: "secondary",
              children: props.email
            })]
          })]
        })
      }), accountMenuItems.length > 0 ? jsx(MenuItem, {
        hasDivider: true
      }) : null, _mapInstanceProperty(accountMenuItems).call(accountMenuItems, menu => {
        var _menu$featureToggle;
        return jsx(OptionalFeatureToggle, {
          featureToggle: (_menu$featureToggle = menu.featureToggle) !== null && _menu$featureToggle !== void 0 ? _menu$featureToggle : undefined,
          children: jsx(Link, {
            css: getUserSettingsMenuItemLinkStyles(),
            to: "/account/".concat(menu.uriPath),
            onClick: () => props.downshiftProps.toggleMenu(),
            "data-user-settings-menu": true,
            ref: menuElementRef,
            children: jsx(MenuItem, {
              children: jsx(MenuItemLabel, {
                children: jsx(Text.Body, {
                  children: renderLabel(menu, props.language)
                })
              })
            })
          })
        }, menu.key);
      }), jsx(MenuItem, {
        hasDivider: true
      }), jsx("a", {
        css: getUserSettingsMenuItemLinkStyles(),
        href: "https://commercetools.com/privacy#suppliers",
        target: "_blank",
        rel: "noopener noreferrer",
        onClick: () => props.downshiftProps.toggleMenu(),
        "data-user-settings-menu": true,
        ref: !applicationsAppBarMenu ? menuElementRef : undefined,
        children: jsx(MenuItem, {
          children: jsx(MenuItemLabel, {
            children: jsx(Text.Body, {
              intlMessage: messages.privacyPolicy
            })
          })
        })
      }), jsx("a", {
        css: getUserSettingsMenuItemLinkStyles(),
        href: SUPPORT_PORTAL_URL,
        rel: "noopener noreferrer",
        target: "_blank",
        onClick: () => props.downshiftProps.toggleMenu(),
        "data-user-settings-menu": true,
        children: jsx(MenuItem, {
          children: jsx(MenuItemLabel, {
            children: jsx(Text.Body, {
              intlMessage: messages.support
            })
          })
        })
      }), jsx(MenuItem, {
        hasDivider: true
      }), jsxs("a", {
        css: getUserSettingsMenuItemLinkStyles()
        // NOTE: we want to redirect to a new page so that the
        // server can remove things like cookie for access token.
        ,
        href: "/logout?reason=".concat(LOGOUT_REASONS.USER),
        "data-test": "logout-button",
        "data-user-settings-menu": true,
        children: [jsx(MenuItem, {
          children: jsx(MenuItemLabel, {
            children: jsx(Text.Body, {
              intlMessage: messages.logout
            })
          })
        }), jsx("div", {
          tabIndex: 0,
          onFocus: () => props.downshiftProps.closeMenu()
        })]
      })]
    }))
  });
};
UserSettingsMenuBody.propTypes = process.env.NODE_ENV !== "production" ? {
  downshiftProps: _pt.any.isRequired
} : {};
UserSettingsMenuBody.displayName = 'UserSettingsMenuBody';
var _ref = process.env.NODE_ENV === "production" ? {
  name: "18rc9yp",
  styles: "cursor:pointer;border:none;padding:0;display:flex;background:transparent"
} : {
  name: "pod1xb-UserSettingsMenu",
  styles: "cursor:pointer;border:none;padding:0;display:flex;background:transparent;label:UserSettingsMenu;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const UserSettingsMenu = props => {
  const intl = useIntl();
  return jsxs("div", {
    "data-test": "user-settings-menu",
    children: [jsx(AccessibleHidden, {
      children: jsx("span", {
        id: MENU_LABEL_ID,
        children: jsx(FormattedMessage, _objectSpread({}, messages.menuLabel))
      })
    }), jsx(Downshift, {
      stateReducer: stateReducer,
      labelId: MENU_LABEL_ID,
      children: downshiftProps => jsxs("div", {
        children: [jsx("button", _objectSpread(_objectSpread({
          css: _ref
        }, downshiftProps.getToggleButtonProps({
          'aria-label': intl.formatMessage(downshiftProps.isOpen ? messages.closeMenuLabel : messages.openMenuLabel)
        })), {}, {
          children: jsx(UserAvatar, {
            firstName: props.firstName,
            lastName: props.lastName,
            gravatarHash: props.gravatarHash
          })
        })), downshiftProps.isOpen && jsx(UserSettingsMenuBody, _objectSpread(_objectSpread({}, props), {}, {
          downshiftProps: downshiftProps
        }))]
      })
    })]
  });
};
UserSettingsMenu.displayName = 'UserSettingsMenu';

export { UserAvatar, UserSettingsMenuBody, UserSettingsMenu as default };
