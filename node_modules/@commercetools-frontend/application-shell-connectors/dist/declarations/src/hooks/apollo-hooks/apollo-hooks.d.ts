import type { OperationVariables, QueryResult, QueryHookOptions, QueryTuple, MutationTuple, MutationHookOptions, TypedDocumentNode, DocumentNode } from '@apollo/client';
import type { TApolloContext } from '../../utils/apollo-context';
type TQueryOptionsWithContext<TData = unknown, TVariables extends OperationVariables = OperationVariables> = QueryHookOptions<TData, TVariables> & {
    context: TApolloContext;
};
type TMutationOptionsWithContext<TData = unknown, TVariables = OperationVariables> = MutationHookOptions<TData, TVariables, TApolloContext> & {
    context: TApolloContext;
};
declare function useMcQuery<TData = unknown, TVariables extends OperationVariables = OperationVariables>(query: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: TQueryOptionsWithContext<TData, TVariables>): QueryResult<TData, TVariables>;
declare function useMcLazyQuery<TData = unknown, TVariables extends OperationVariables = OperationVariables>(query: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: TQueryOptionsWithContext<TData, TVariables>): QueryTuple<TData, TVariables>;
declare function useMcMutation<TData = unknown, TVariables extends OperationVariables = OperationVariables>(mutation: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: TMutationOptionsWithContext<TData, TVariables>): MutationTuple<TData, TVariables, TApolloContext>;
export { useMcQuery, useMcLazyQuery, useMcMutation };
