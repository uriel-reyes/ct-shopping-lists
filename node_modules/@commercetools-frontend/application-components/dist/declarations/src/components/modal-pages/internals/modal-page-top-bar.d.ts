import { type SyntheticEvent, type ReactElement } from 'react';
import { type TSecondaryButtonIconProps } from '@commercetools-uikit/secondary-icon-button';
type TLargeIconWrapperProps = {
    children: ReactElement;
    size?: TSecondaryButtonIconProps['size'];
};
export declare const LargeIconWrapper: (props: TLargeIconWrapperProps) => import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
type MessageDescriptor = {
    id: string;
    description?: string | object;
    defaultMessage?: string;
};
type Label = string | MessageDescriptor;
type Props = {
    color: 'surface' | 'neutral';
    currentPathLabel?: string;
    previousPathLabel: Label;
    hidePathLabel?: boolean;
    onClose: (event: SyntheticEvent) => void;
    children?: never;
};
declare const ModalPageTopBar: {
    (props: Props): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
    defaultProps: Pick<Props, "color" | "previousPathLabel" | "hidePathLabel">;
};
export default ModalPageTopBar;
