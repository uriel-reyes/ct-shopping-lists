import { ReactNode, SyntheticEvent } from 'react';
type MessageDescriptor = {
    id: string;
    description?: string | object;
    defaultMessage?: string;
};
type Label = string | MessageDescriptor;
type Props = {
    isOpen: boolean;
    onClose?: (event: SyntheticEvent) => void;
    title: string;
    size?: 'm' | 'l' | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 16 | 'scale';
    zIndex?: number;
    children: ReactNode;
    labelSecondary: Label;
    labelPrimary: Label;
    isPrimaryButtonDisabled?: boolean;
    onCancel: (event: SyntheticEvent) => void;
    onConfirm: (event: SyntheticEvent) => void;
    dataAttributesSecondaryButton?: {
        [key: string]: string;
    };
    dataAttributesPrimaryButton?: {
        [key: string]: string;
    };
    getParentSelector?: () => HTMLElement;
};
declare const ConfirmationDialog: {
    (props: Props): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
    defaultProps: Pick<Props, "labelSecondary" | "labelPrimary">;
    Intl: {
        cancel: {
            id: string;
            defaultMessage: string;
        };
        revert: {
            id: string;
            defaultMessage: string;
        };
        confirm: {
            id: string;
            defaultMessage: string;
        };
        save: {
            id: string;
            defaultMessage: string;
        };
        update: {
            id: string;
            defaultMessage: string;
        };
        create: {
            id: string;
            defaultMessage: string;
        };
        delete: {
            id: string;
            defaultMessage: string;
        };
        add: {
            id: string;
            defaultMessage: string;
        };
        remove: {
            id: string;
            defaultMessage: string;
        };
        close: {
            id: string;
            defaultMessage: string;
        };
        edit: {
            id: string;
            defaultMessage: string;
        };
        open: {
            id: string;
            defaultMessage: string;
        };
        activate: {
            id: string;
            defaultMessage: string;
        };
        deactivate: {
            id: string;
            defaultMessage: string;
        };
        active: {
            id: string;
            defaultMessage: string;
        };
        inactive: {
            id: string;
            defaultMessage: string;
        };
        enable: {
            id: string;
            defaultMessage: string;
        };
        disable: {
            id: string;
            defaultMessage: string;
        };
    };
};
export default ConfirmationDialog;
