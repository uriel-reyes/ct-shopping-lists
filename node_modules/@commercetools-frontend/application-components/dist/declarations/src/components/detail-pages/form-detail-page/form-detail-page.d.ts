import type { ReactElement, ReactNode, MouseEvent, KeyboardEvent, SyntheticEvent } from 'react';
type MessageDescriptor = {
    id: string;
    description?: string | object;
    defaultMessage?: string;
};
type Label = string | MessageDescriptor;
type FormDetailPageProps = {
    title?: string;
    subtitle?: string | ReactElement;
    customTitleRow?: ReactNode;
    customViewLocatorCode?: string;
    children: ReactNode;
    previousPathLabel?: string | MessageDescriptor;
    onPreviousPathClick: (event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>) => void;
    isPrimaryButtonDisabled?: boolean;
    isSecondaryButtonDisabled?: boolean;
    dataAttributesPrimaryButton?: {
        [key: string]: string;
    };
    dataAttributesSecondaryButton?: {
        [key: string]: string;
    };
    labelPrimaryButton?: Label;
    labelSecondaryButton?: Label;
    onPrimaryButtonClick: (event: SyntheticEvent) => void;
    onSecondaryButtonClick: (event: SyntheticEvent) => void;
    hideControls: boolean;
    iconLeftSecondaryButton?: ReactElement;
};
declare const FormDetailPage: {
    (props: FormDetailPageProps): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
    displayName: string;
    defaultProps: Pick<FormDetailPageProps, "hideControls">;
    PageHeaderTitle: {
        (props: {
            title: string;
            titleSize: "big" | "small" | "medium";
            truncate: boolean;
            subtitle?: string | ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
            children?: undefined;
        }): import("@emotion/react/types/jsx-namespace").EmotionJSX.Element;
        displayName: string;
        defaultProps: Pick<{
            title: string;
            titleSize: "big" | "small" | "medium";
            truncate: boolean;
            subtitle?: string | ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
            children?: undefined;
        }, "truncate" | "titleSize">;
    };
    Intl: {
        cancel: {
            id: string;
            defaultMessage: string;
        };
        revert: {
            id: string;
            defaultMessage: string;
        };
        confirm: {
            id: string;
            defaultMessage: string;
        };
        save: {
            id: string;
            defaultMessage: string;
        };
        update: {
            id: string;
            defaultMessage: string;
        };
        create: {
            id: string;
            defaultMessage: string;
        };
        delete: {
            id: string;
            defaultMessage: string;
        };
        add: {
            id: string;
            defaultMessage: string;
        };
        remove: {
            id: string;
            defaultMessage: string;
        };
        close: {
            id: string;
            defaultMessage: string;
        };
        edit: {
            id: string;
            defaultMessage: string;
        };
        open: {
            id: string;
            defaultMessage: string;
        };
        activate: {
            id: string;
            defaultMessage: string;
        };
        deactivate: {
            id: string;
            defaultMessage: string;
        };
        active: {
            id: string;
            defaultMessage: string;
        };
        inactive: {
            id: string;
            defaultMessage: string;
        };
        enable: {
            id: string;
            defaultMessage: string;
        };
        disable: {
            id: string;
            defaultMessage: string;
        };
    };
};
export default FormDetailPage;
