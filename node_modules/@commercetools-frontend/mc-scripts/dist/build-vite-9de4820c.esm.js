import _parseInt from '@babel/runtime-corejs3/core-js-stable/parse-int';
import _JSON$stringify from '@babel/runtime-corejs3/core-js-stable/json/stringify';
import path from 'path';
import pluginGraphql from '@rollup/plugin-graphql';
import pluginReact from '@vitejs/plugin-react';
import fs from 'fs-extra';
import { build } from 'vite';
import { packageLocation } from '@commercetools-frontend/assets';
import { generateTemplate } from '@commercetools-frontend/mc-html-template';
import { p as paths } from './paths-ded20ae1.esm.js';
import { v as vitePluginSvgr } from './vite-plugin-svgr-5c953fe7.esm.js';
import '@babel/runtime-corejs3/core-js-stable/instance/find';
import '@babel/runtime-corejs3/core-js-stable/instance/concat';
import 'fs';
import '@rollup/pluginutils';

// This script/function is injected into the `index.html` and used by Vite
// on runtime to build the assets URL (for example when using a separate CDN for the assets).
// Inspired by https://github.com/vitejs/vite/blob/main/playground/assets/vite.config-runtime-base.js
const dynamicBaseAssetsCode = "globalThis.__toCdnUrl = filePath => window.app.cdnUrl.replace(/\\/$/, '') + '/' + filePath;";
function vitePluginDynamicBaseAssetsGlobals() {
  return {
    name: 'dynamic-base-assets-globals',
    transformIndexHtml(html, ctx) {
      if (ctx.bundle) {
        // Only inject during build
        return [{
          tag: 'script',
          attrs: {
            type: 'module'
          },
          children: dynamicBaseAssetsCode
        }];
      }
      return html;
    }
  };
}

async function run() {
  const DEFAULT_PORT = _parseInt(String(process.env.HTTP_PORT), 10) || 3001;

  // Ensure the `/public` folder exists.
  fs.mkdirSync(paths.appBuild, {
    recursive: true
  });

  // Generate `index.html` (template).
  const appEntryPoint = path.relative(paths.appRoot, paths.entryPoint);
  const html = generateTemplate({
    // Define the module entry point (path relative from the `/public` folder).
    // NOTE: that this is different from the development configuration.
    scriptImports: ["<script type=\"module\" src=\"/".concat(appEntryPoint, "\"></script>")]
  });
  // Write `index.html` (template) into the `/public` folder.
  fs.writeFileSync(paths.appIndexHtml, html, {
    encoding: 'utf8'
  });
  await build({
    root: paths.appRoot,
    base: './',
    // <-- Important to allow configuring the runtime base path.
    define: {
      'process.env.DEBUG': _JSON$stringify(false),
      'process.env.NODE_ENV': _JSON$stringify('production')
    },
    build: {
      outDir: 'public',
      rollupOptions: {
        // This is necessary to instruct Vite that the `index.html` (template)
        // is located in the `/public` folder.
        // NOTE that after the build, Vite will write the `index.html` (template)
        // at the `/public/public/index.html` location. See `fs.renameSync` below.
        input: paths.appIndexHtml,
        // Reduce the memory footpring when building sourcemaps.
        // https://github.com/vitejs/vite/issues/2433#issuecomment-1361094727
        cache: false
      },
      sourcemap:
      // Generating sourcemaps can increase the memory footprint of the build process,
      // therefore it's an opt-in option.
      // TODO: make it a CLI option when Vite support becomes stable.
      process.env.ENABLE_EXPERIMENTAL_VITE_BUNDLER_SOURCEMAP === 'true'
    },
    server: {
      port: DEFAULT_PORT
    },
    experimental: {
      // https://vitejs.dev/guide/build.html#advanced-base-options
      renderBuiltUrl(filename, _ref) {
        let hostType = _ref.hostType;
        if (hostType === 'html') {
          return "__CDN_URL__".concat(filename);
        }
        return {
          runtime: "window.__toCdnUrl(".concat(_JSON$stringify(filename), ")")
        };
      }
    },
    plugins: [pluginGraphql(), pluginReact({
      jsxImportSource: '@emotion/react',
      babel: {
        plugins: ['@emotion/babel-plugin', '@babel/plugin-proposal-do-expressions']
      }
    }), vitePluginSvgr(), vitePluginDynamicBaseAssetsGlobals()]
  });

  // Rename `/public/public/index.html` to `/public/index.html.template`
  fs.renameSync(
  // Because of our custom entry point path (`/public/index.html`),
  // Vite will write the `index.html` to `/public/public/index.html`.
  // We need to move this file to the `/public` folder and rename it
  // to `index.html.template` (as expected by the `compile-html` command).
  path.join(paths.appBuild, 'public/index.html'), paths.appIndexHtmlTemplate);
  // Clean up nested folder
  fs.rmdirSync(path.join(paths.appBuild, 'public'));

  // Copy public assets
  fs.copySync(path.join(packageLocation, 'html-page'), paths.appBuild, {
    dereference: true
  });
}

export { run as default };
