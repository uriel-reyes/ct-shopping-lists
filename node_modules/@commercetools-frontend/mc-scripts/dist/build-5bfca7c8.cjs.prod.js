'use strict';

var _Promise = require('@babel/runtime-corejs3/core-js-stable/promise');
var path = require('path');
var chalk = require('chalk');
var fs = require('fs-extra');
var checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
var FileSizeReporter = require('react-dev-utils/FileSizeReporter');
var formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
var printBuildError = require('react-dev-utils/printBuildError');
var webpack = require('webpack');
var assets = require('@commercetools-frontend/assets');
var createWebpackConfigForProduction = require('./create-webpack-config-for-production-2716c37e.cjs.prod.js');
var paths = require('./paths-854af5ef.cjs.prod.js');
require('@babel/runtime-corejs3/core-js-stable/object/keys');
require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
require('@babel/runtime-corejs3/core-js-stable/object/define-property');
require('@babel/runtime-corejs3/helpers/defineProperty');
require('@babel/runtime-corejs3/core-js-stable/instance/filter');
require('@babel/runtime-corejs3/core-js-stable/instance/map');
require('@babel/runtime-corejs3/core-js-stable/json/stringify');
require('@babel/runtime-corejs3/core-js-stable/instance/ends-with');
require('@babel/runtime-corejs3/core-js-stable/number/is-integer');
require('@babel/runtime-corejs3/core-js-stable/instance/concat');
require('css-minimizer-webpack-plugin');
require('html-webpack-plugin');
require('mini-css-extract-plugin');
require('moment-locales-webpack-plugin');
require('terser-webpack-plugin');
require('webpack-bundle-analyzer');
require('@babel/runtime-corejs3/helpers/classCallCheck');
require('@babel/runtime-corejs3/helpers/createClass');
require('@babel/runtime-corejs3/core-js-stable/instance/bind');
require('@babel/runtime-corejs3/core-js-stable/instance/reduce');
require('@babel/runtime-corejs3/core-js-stable/object/assign');
require('fs');
require('./create-postcss-config-1fd98922.cjs.prod.js');
require('@babel/runtime-corejs3/helpers/slicedToArray');
require('./package-db6d1141.cjs.prod.js');
require('./has-jsx-runtime-c3202df5.cjs.prod.js');
require('./vendors-to-transpile-04a49d40.cjs.prod.js');
require('@babel/runtime-corejs3/core-js-stable/instance/find');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Promise__default = /*#__PURE__*/_interopDefault(_Promise);
var path__default = /*#__PURE__*/_interopDefault(path);
var chalk__default = /*#__PURE__*/_interopDefault(chalk);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var checkRequiredFiles__default = /*#__PURE__*/_interopDefault(checkRequiredFiles);
var FileSizeReporter__default = /*#__PURE__*/_interopDefault(FileSizeReporter);
var formatWebpackMessages__default = /*#__PURE__*/_interopDefault(formatWebpackMessages);
var printBuildError__default = /*#__PURE__*/_interopDefault(printBuildError);
var webpack__default = /*#__PURE__*/_interopDefault(webpack);

const measureFileSizesBeforeBuild = FileSizeReporter__default["default"].measureFileSizesBeforeBuild;
const printFileSizesAfterBuild = FileSizeReporter__default["default"].printFileSizesAfterBuild;

// These sizes are pretty large. We'll warn for bundles exceeding them.
const WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;
const WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;
async function run() {
  const hasWebpackConfig = fs__default["default"].existsSync(paths.paths.appWebpackConfig);

  // Warn and crash if required files are missing
  if (!checkRequiredFiles__default["default"]([])) {
    process.exit(1);
  }

  // First, read the current file sizes in build directory.
  // This lets us display how much they changed later.
  const previousFileSizes = await measureFileSizesBeforeBuild(paths.paths.appBuild);

  // Remove all content but keep the directory so that
  // if you're in it, you don't end up in Trash
  fs__default["default"].emptyDirSync(paths.paths.appBuild);
  // Copy default files
  copyDefaultFiles();
  try {
    // Start the webpack build
    const result = await build();
    if (result.warnings.length) {
      console.log(chalk__default["default"].yellow('Compiled with warnings.\n'));
      console.log(result.warnings.join('\n\n'));
      console.log("\nSearch for the ".concat(chalk__default["default"].underline(chalk__default["default"].yellow('keywords')), " to learn more about each warning."));
      console.log("To ignore, add ".concat(chalk__default["default"].cyan('// eslint-disable-next-line'), " to the line before.\n"));
    } else {
      console.log(chalk__default["default"].green('Compiled successfully.\n'));
    }
    console.log('File sizes after gzip:\n');
    printFileSizesAfterBuild(result.stats, previousFileSizes, paths.paths.appBuild, WARN_AFTER_BUNDLE_GZIP_SIZE, WARN_AFTER_CHUNK_GZIP_SIZE);
    console.log();
  } catch (error) {
    if (error instanceof Error) {
      printBuildError__default["default"](error);
    }
    throw new Error("Failed to compile");
  }

  // Create the production build and print the deployment instructions.
  async function build() {
    console.log('Creating an optimized production build...');
    const config = hasWebpackConfig ? require(paths.paths.appWebpackConfig) : createWebpackConfigForProduction.createWebpackConfigForProduction();
    const compiler = webpack__default["default"](config);
    return new _Promise__default["default"]((resolve, reject) => {
      compiler.run((err, stats) => {
        let messages;
        if (err) {
          if (!err.message) {
            return reject(err);
          }
          let errMessage = err.message;
          // Add additional information for postcss errors
          if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {
            errMessage += '\nCompileError: Begins at CSS selector ' +
            // @ts-ignore
            err['postcssNode'].selector;
          }
          messages = formatWebpackMessages__default["default"]({
            // @ts-ignore
            errors: [errMessage],
            warnings: []
          });
        } else {
          messages = formatWebpackMessages__default["default"](stats === null || stats === void 0 ? void 0 : stats.toJson({
            all: false,
            warnings: true,
            errors: true
          }));
        }
        if (messages.errors.length) {
          // Only keep the first error. Others are often indicative
          // of the same problem, but confuse the reader with noise.
          if (messages.errors.length > 1) {
            messages.errors.length = 1;
          }
          return reject(new Error(messages.errors.join('\n\n')));
        }
        if (process.env.CI && (typeof process.env.CI !== 'string' || process.env.CI.toLowerCase() !== 'false') && messages.warnings.length) {
          console.log(chalk__default["default"].yellow('\nTreating warnings as errors because process.env.CI = true.\n' + 'Most CI servers set it automatically.\n'));
          return reject(new Error(messages.warnings.join('\n\n')));
        }
        return resolve({
          stats: stats,
          warnings: messages.warnings
        });
      });
    });
  }
  function copyDefaultFiles() {
    fs__default["default"].copySync(path__default["default"].join(assets.packageLocation, 'html-page'), paths.paths.appBuild, {
      dereference: true
    });
  }
}

exports["default"] = run;
