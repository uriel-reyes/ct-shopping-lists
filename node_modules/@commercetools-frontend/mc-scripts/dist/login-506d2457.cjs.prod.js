'use strict';

var chalk = require('chalk');
var prompts = require('prompts');
var applicationConfig = require('@commercetools-frontend/application-config');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _JSON$stringify = require('@babel/runtime-corejs3/core-js-stable/json/stringify');
var fetch = require('node-fetch');
var credentialsStorage$1 = require('./credentials-storage-252b2ead.cjs.prod.js');
require('@commercetools/http-user-agent');
require('./package-db6d1141.cjs.prod.js');
require('@babel/runtime-corejs3/helpers/classCallCheck');
require('@babel/runtime-corejs3/helpers/createClass');
require('@babel/runtime-corejs3/core-js-stable/date/now');
require('fs');
require('os');
require('path');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var chalk__default = /*#__PURE__*/_interopDefault(chalk);
var prompts__default = /*#__PURE__*/_interopDefault(prompts);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _JSON$stringify__default = /*#__PURE__*/_interopDefault(_JSON$stringify);
var fetch__default = /*#__PURE__*/_interopDefault(fetch);

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const getAuthToken = async (mcApiUrl, payload, headers) => {
  const response = await fetch__default["default"]("".concat(mcApiUrl, "/tokens/cli"), {
    method: 'POST',
    headers: _objectSpread({
      Accept: 'application/json',
      'Content-Type': 'application/json',
      'x-user-agent': credentialsStorage$1.userAgent
    }, headers),
    body: _JSON$stringify__default["default"](payload)
  });
  if (!response.ok) {
    const text = await response.text();
    let parsed;
    try {
      parsed = JSON.parse(text);
    } catch (error) {}
    const errorMessage = parsed ? parsed.message : text;
    throw new Error(errorMessage);
  }
  const authToken = await response.json();
  return authToken;
};

const credentialsStorage = new credentialsStorage$1.CredentialsStorage();
async function run() {
  const applicationConfig$1 = applicationConfig.processConfig();
  const mcApiUrl = applicationConfig$1.env.mcApiUrl;
  console.log("Using Merchant Center environment \"".concat(chalk__default["default"].green(mcApiUrl), "\"."));
  console.log();
  if (credentialsStorage.isSessionValid(mcApiUrl)) {
    console.log("You already have a valid session.");
    return;
  }
  console.log("Enter the login credentials:");
  const _await$prompts = await prompts__default["default"]({
      type: 'text',
      name: 'email',
      message: 'Email'
    }),
    email = _await$prompts.email;
  const _await$prompts2 = await prompts__default["default"]({
      type: 'invisible',
      name: 'password',
      message: 'Password (hidden)'
    }),
    password = _await$prompts2.password;
  if (!email || !password) {
    throw new Error("Missing email or password values. Aborting.");
  }
  const credentials = await getAuthToken(mcApiUrl, {
    email,
    password
  });
  credentialsStorage.setToken(mcApiUrl, credentials);
  console.log(chalk__default["default"].green("Login successful.\n"));
}

exports["default"] = run;
