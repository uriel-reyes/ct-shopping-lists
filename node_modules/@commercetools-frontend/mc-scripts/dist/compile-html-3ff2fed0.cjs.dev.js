'use strict';

var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var _JSON$stringify = require('@babel/runtime-corejs3/core-js-stable/json/stringify');
var fs = require('fs');
var chalk = require('chalk');
var mcHtmlTemplate = require('@commercetools-frontend/mc-html-template');
var paths = require('./paths-d1febc82.cjs.dev.js');
require('@babel/runtime-corejs3/core-js-stable/instance/find');
require('path');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var _JSON$stringify__default = /*#__PURE__*/_interopDefault(_JSON$stringify);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var chalk__default = /*#__PURE__*/_interopDefault(chalk);

const appDirectory = fs__default["default"].realpathSync(process.cwd());
async function run(options) {
  console.log('Compiling index.html...');
  const compiled = await mcHtmlTemplate.compileHtml(paths.paths.appIndexHtmlTemplate);
  fs__default["default"].writeFileSync(paths.paths.appIndexHtml, compiled.indexHtmlContent, {
    encoding: 'utf8'
  });
  if (options.transformer) {
    try {
      const transformerPath = require.resolve(options.transformer, {
        paths: [appDirectory]
      });
      const transformerFn = require(transformerPath);
      transformerFn(compiled);
    } catch (error) {
      var _context;
      throw new Error(_concatInstanceProperty__default["default"](_context = "Could not load transformer module \"".concat(options.transformer, "\"\n")).call(_context, error instanceof Error ? error.stack : ''));
    }
  } else if (options.printSecurityHeaders) {
    console.log(_JSON$stringify__default["default"](compiled.headers));
  }
  console.log(chalk__default["default"].green('Compiled successfully.\n'));
}

exports["default"] = run;
