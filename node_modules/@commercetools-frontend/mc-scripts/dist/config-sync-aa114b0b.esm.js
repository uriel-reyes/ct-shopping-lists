import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _JSON$stringify from '@babel/runtime-corejs3/core-js-stable/json/stringify';
import chalk from 'chalk';
import omit from 'lodash/omit';
import prompts from 'prompts';
import { sanitizeSvg, processConfig } from '@commercetools-frontend/application-config';
import { C as CredentialsStorage, u as userAgent } from './credentials-storage-001c09fb.esm.js';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _repeatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/repeat';
import _Set from '@babel/runtime-corejs3/core-js-stable/set';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _reduceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _someInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/some';
import { print } from 'graphql';
import { GraphQLClient, ClientError } from 'graphql-request';
import { GRAPHQL_TARGETS } from '@commercetools-frontend/constants';
import '@commercetools/http-user-agent';
import './package-53e602ff.esm.js';
import '@babel/runtime-corejs3/helpers/classCallCheck';
import '@babel/runtime-corejs3/helpers/createClass';
import '@babel/runtime-corejs3/core-js-stable/date/now';
import 'fs';
import 'os';
import 'path';

function ownKeys$1(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var _context21, _context22; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context21 = ownKeys$1(Object(t), !0)).call(_context21, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context22 = ownKeys$1(Object(t))).call(_context22, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }

// Since not all terminal supports colors, to make things more consistent for testing purposes,
// during tests the color used is appended before the string instead of coloring it.
const isTest = process.env.NODE_ENV === 'test';
const red = str => {
  if (isTest) return "<color-red>".concat(str, "</color-red>");
  return chalk.red(str);
};
const green = str => {
  if (isTest) return "<color-green>".concat(str, "</color-green>");
  return chalk.green(str);
};

// Two spaces are used for indentation.
const indent = indentLevel => {
  var _context;
  return _repeatInstanceProperty(_context = '  ').call(_context, indentLevel);
};
const getStringDiff = _ref => {
  let previousValue = _ref.previousValue,
    nextValue = _ref.nextValue,
    label = _ref.label,
    _ref$indentLevel = _ref.indentLevel,
    indentLevel = _ref$indentLevel === void 0 ? 0 : _ref$indentLevel;
  if (!previousValue && nextValue) {
    var _context2, _context3;
    return _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = "".concat(indent(indentLevel))).call(_context3, label, " added: ")).call(_context2, green(nextValue));
  }
  if (previousValue && !nextValue) {
    var _context4, _context5;
    return _concatInstanceProperty(_context4 = _concatInstanceProperty(_context5 = "".concat(indent(indentLevel))).call(_context5, label, " removed: ")).call(_context4, red(previousValue));
  }
  if (previousValue && nextValue && previousValue !== nextValue) {
    var _context6, _context7, _context8;
    return _concatInstanceProperty(_context6 = _concatInstanceProperty(_context7 = _concatInstanceProperty(_context8 = "".concat(indent(indentLevel))).call(_context8, label, " changed: ")).call(_context7, red(previousValue), " => ")).call(_context6, green(nextValue));
  }
  return null;
};
// NOTE: this assumes that the array values are scalar values (not objects).
const getArrayDiff = _ref2 => {
  let previousValue = _ref2.previousValue,
    nextValue = _ref2.nextValue,
    label = _ref2.label,
    _ref2$indentLevel = _ref2.indentLevel,
    indentLevel = _ref2$indentLevel === void 0 ? 0 : _ref2$indentLevel;
  const oldArraySet = new _Set(previousValue);
  const arrayDiff = [];
  nextValue === null || nextValue === void 0 || _forEachInstanceProperty(nextValue).call(nextValue, item => {
    if (oldArraySet.has(item)) {
      oldArraySet.delete(item);
    } else {
      arrayDiff.push(getStringDiff({
        nextValue: item,
        label,
        indentLevel
      }));
    }
  });
  _forEachInstanceProperty(oldArraySet).call(oldArraySet, item => {
    arrayDiff.push(getStringDiff({
      previousValue: item,
      label,
      indentLevel
    }));
  });
  return arrayDiff.join('\n');
};
const getPermissionsDiff = _ref3 => {
  var _context11;
  let previousValue = _ref3.previousValue,
    nextValue = _ref3.nextValue;
  const permissionDiff = ['permissions changed'];
  const mappedOldPermissions = _reduceInstanceProperty(previousValue).call(previousValue, (previousPermission, _ref4) => {
    let name = _ref4.name,
      oAuthScopes = _ref4.oAuthScopes;
    return _objectSpread$1(_objectSpread$1({}, previousPermission), {}, {
      [name]: oAuthScopes
    });
  }, {});
  const indentLevel = 1;
  _forEachInstanceProperty(nextValue).call(nextValue, newPermission => {
    var _context9;
    const currentDiff = [_concatInstanceProperty(_context9 = "".concat(indent(indentLevel), "\"")).call(_context9, newPermission.name, "\" changed")];
    // if the permission name is not in the old config, it means it is a new addition.
    if (!mappedOldPermissions[newPermission.name]) {
      var _context10;
      permissionDiff.push(_concatInstanceProperty(_context10 = "".concat(indent(indentLevel), "\"")).call(_context10, green(newPermission.name), "\" was added"));
    }

    // if permission name is in the old config, now we check if there was a change
    else {
      currentDiff.push(getArrayDiff({
        previousValue: mappedOldPermissions[newPermission.name],
        nextValue: newPermission.oAuthScopes,
        label: 'oauth scope',
        indentLevel: 2
      }));
      delete mappedOldPermissions[newPermission.name];
    }
    _filterInstanceProperty(currentDiff).call(currentDiff, Boolean).length > 1 && permissionDiff.push(currentDiff.join('\n'));
  });

  // if there are old permissions left, it means they were deleted in the new Permissions.
  _forEachInstanceProperty(_context11 = _Object$keys(mappedOldPermissions)).call(_context11, oldPermissionName => {
    var _context12;
    permissionDiff.push(_concatInstanceProperty(_context12 = "".concat(indent(indentLevel), "\"")).call(_context12, red(oldPermissionName), "\" was removed"));
  });
  if (permissionDiff.length > 1) return permissionDiff.join('\n');
  return null;
};
const getLabelAllLocalesDiff = _ref5 => {
  var _context16;
  let _ref5$previousValue = _ref5.previousValue,
    previousValue = _ref5$previousValue === void 0 ? [] : _ref5$previousValue,
    _ref5$nextValue = _ref5.nextValue,
    nextValue = _ref5$nextValue === void 0 ? [] : _ref5$nextValue,
    _ref5$indentLevel = _ref5.indentLevel,
    indentLevel = _ref5$indentLevel === void 0 ? 0 : _ref5$indentLevel;
  const labelAllLocalesDiff = ["".concat(indent(indentLevel - 1), "labelAllLocales changed")];
  const mappedOldLabelAllLocales = _reduceInstanceProperty(previousValue).call(previousValue, (previousLabelAllLocale, _ref6) => {
    let locale = _ref6.locale,
      value = _ref6.value;
    return _objectSpread$1(_objectSpread$1({}, previousLabelAllLocale), {}, {
      [locale]: value
    });
  }, {});
  _forEachInstanceProperty(nextValue).call(nextValue, newLabelAllLocale => {
    if (newLabelAllLocale.locale in mappedOldLabelAllLocales) {
      const oldLocaleValue = mappedOldLabelAllLocales[newLabelAllLocale.locale];
      if (oldLocaleValue !== newLabelAllLocale.value) {
        var _context13, _context14, _context15;
        labelAllLocalesDiff.push(_concatInstanceProperty(_context13 = _concatInstanceProperty(_context14 = _concatInstanceProperty(_context15 = "".concat(indent(indentLevel), "locale \"")).call(_context15, newLabelAllLocale.locale, "\" changed: ")).call(_context14, red(oldLocaleValue), " => ")).call(_context13, green(newLabelAllLocale.value)));
      }
      delete mappedOldLabelAllLocales[newLabelAllLocale.locale];
    } else {
      const localeDiff = getStringDiff({
        nextValue: newLabelAllLocale.locale,
        label: 'locale',
        indentLevel
      });
      if (localeDiff) {
        labelAllLocalesDiff.push(localeDiff);
      }
    }
  });
  _forEachInstanceProperty(_context16 = _Object$keys(mappedOldLabelAllLocales)).call(_context16, key => {
    const localeDiff = getStringDiff({
      previousValue: key,
      label: 'locale',
      indentLevel
    });
    if (localeDiff) {
      labelAllLocalesDiff.push(localeDiff);
    }
  });
  if (labelAllLocalesDiff.length > 1) return labelAllLocalesDiff.join('\n');
  return null;
};
const getTypeSettingsDiff = _ref7 => {
  var _context17;
  let previousValue = _ref7.previousValue,
    nextValue = _ref7.nextValue;
  const nonNullablePreviousValue = previousValue || {};
  const nonNullableNextValue = nextValue || {};
  const indentLevel = 1;
  const typeSettingsDiff = ["".concat(indent(indentLevel - 1), "type settings changed")];
  _forEachInstanceProperty(_context17 = _Object$keys(nonNullablePreviousValue)).call(_context17, key => {
    const typeSettingDiff = getStringDiff({
      previousValue: nonNullablePreviousValue[key],
      nextValue: nonNullableNextValue[key],
      label: key,
      indentLevel
    });
    if (typeSettingDiff) {
      typeSettingsDiff.push(typeSettingDiff);
    }
  });
  if (typeSettingsDiff.length > 1) return typeSettingsDiff.join('\n');
  return null;
};
const getLocatorsDiff = _ref8 => {
  let previousValue = _ref8.previousValue,
    nextValue = _ref8.nextValue;
  const diff = [];
  const locatorsDiff = getArrayDiff({
    previousValue: previousValue,
    nextValue: nextValue,
    label: 'locators',
    indentLevel: 1
  });
  if (locatorsDiff) {
    diff.push('locators changed');
    diff.push(locatorsDiff);
  }
  return diff.join('\n');
};
const getMainMenuLinkDiff = _ref9 => {
  let previousValue = _ref9.previousValue,
    nextValue = _ref9.nextValue;
  const mainMenuLinkDiff = ['mainMenuLink changed'];
  const menuDiff = getStringDiff({
    previousValue: previousValue.defaultLabel,
    nextValue: nextValue.defaultLabel,
    label: 'defaultLabel',
    indentLevel: 1
  });
  if (menuDiff) {
    mainMenuLinkDiff.push(menuDiff);
  }
  const mainMenuLinkPermissionsDiff = getArrayDiff({
    previousValue: previousValue.permissions,
    nextValue: nextValue.permissions,
    label: 'applied permission',
    indentLevel: 2
  });
  if (mainMenuLinkPermissionsDiff.length > 0) {
    mainMenuLinkDiff.push("".concat(indent(1), "permissions changed"));
    mainMenuLinkDiff.push(mainMenuLinkPermissionsDiff);
  }
  const menuLabelsDiff = getLabelAllLocalesDiff({
    previousValue: previousValue.labelAllLocales,
    nextValue: nextValue.labelAllLocales,
    indentLevel: 2
  });
  if (menuLabelsDiff) {
    mainMenuLinkDiff.push(menuLabelsDiff);
  }
  const filteredMainMenuLinkDiff = _filterInstanceProperty(mainMenuLinkDiff).call(mainMenuLinkDiff, Boolean);
  if (filteredMainMenuLinkDiff.length > 1) return filteredMainMenuLinkDiff.join('\n');
  return null;
};
const getSubmenuLinksDiff = _ref10 => {
  var _context20;
  let previousValue = _ref10.previousValue,
    nextValue = _ref10.nextValue;
  const submenuLinksDiff = ['submenuLink changed'];
  const mappedSubmenuLinks = _reduceInstanceProperty(previousValue).call(previousValue, (previousSubmenuLink, currentSubmenuLink) => _objectSpread$1(_objectSpread$1({}, previousSubmenuLink), {}, {
    [currentSubmenuLink.uriPath]: currentSubmenuLink
  }), {});
  _forEachInstanceProperty(nextValue).call(nextValue, newSubmenuLink => {
    const oldSubMenuLink = mappedSubmenuLinks[newSubmenuLink.uriPath];
    if (newSubmenuLink.uriPath in mappedSubmenuLinks) {
      var _context18, _context19;
      const submenuLinkDiff = [_concatInstanceProperty(_context18 = "".concat(indent(1), "menu link \"")).call(_context18, newSubmenuLink.uriPath, "\" changed")];
      _forEachInstanceProperty(_context19 = _Object$keys(mappedSubmenuLinks[newSubmenuLink.uriPath])).call(_context19, key => {
        switch (key) {
          case 'defaultLabel':
            {
              const labelDiff = getStringDiff({
                previousValue: oldSubMenuLink.defaultLabel,
                nextValue: newSubmenuLink.defaultLabel,
                label: 'defaultLabel',
                indentLevel: 2
              });
              if (labelDiff) {
                submenuLinkDiff.push(labelDiff);
              }
              break;
            }
          case 'permissions':
            {
              const submenuLinkPermissionsDiff = getArrayDiff({
                previousValue: oldSubMenuLink.permissions,
                nextValue: newSubmenuLink.permissions,
                label: 'applied permission',
                indentLevel: 3
              });
              if (submenuLinkPermissionsDiff.length > 0) {
                submenuLinkDiff.push("".concat(indent(2), "permissions changed"));
                submenuLinkDiff.push(submenuLinkPermissionsDiff);
              }
              break;
            }
          case 'labelAllLocales':
            {
              const labelsDiff = getLabelAllLocalesDiff({
                previousValue: oldSubMenuLink.labelAllLocales,
                nextValue: newSubmenuLink.labelAllLocales,
                indentLevel: 3
              });
              if (labelsDiff) {
                submenuLinkDiff.push(labelsDiff);
              }
              break;
            }
        }
      });
      delete mappedSubmenuLinks[newSubmenuLink.uriPath];
      const filteredSubmenuLinksDiff = _filterInstanceProperty(submenuLinkDiff).call(submenuLinkDiff, Boolean);
      if (filteredSubmenuLinksDiff.length > 1) {
        submenuLinksDiff.push(filteredSubmenuLinksDiff.join('\n'));
      }
    } else {
      const linksDiff = getStringDiff({
        nextValue: newSubmenuLink.uriPath,
        label: 'menu link',
        indentLevel: 1
      });
      if (linksDiff) {
        submenuLinksDiff.push(linksDiff);
      }
    }
  });
  _forEachInstanceProperty(_context20 = _Object$keys(mappedSubmenuLinks)).call(_context20, key => {
    const linksDiff = getStringDiff({
      previousValue: key,
      label: 'menu link',
      indentLevel: 1
    });
    if (linksDiff) submenuLinksDiff.push(linksDiff);
  });
  if (submenuLinksDiff.length > 1) return submenuLinksDiff.join('\n');
  return null;
};

// Compute diff changes of the Custom Application config.
// NOTE: Only known keys are evaluated.
const getCustomApplicationConfigDiff = (oldConfig, newConfig) => {
  const diff = [];

  // Name
  const nameDiff = getStringDiff({
    previousValue: oldConfig.name,
    nextValue: newConfig.name,
    label: 'name'
  });
  if (nameDiff) {
    diff.push(nameDiff);
  }

  // Description
  const descriptionDiff = getStringDiff({
    previousValue: oldConfig.description,
    nextValue: newConfig.description,
    label: 'description'
  });
  if (descriptionDiff) {
    diff.push(descriptionDiff);
  }

  // URL
  const urlDiff = getStringDiff({
    previousValue: oldConfig.url,
    nextValue: newConfig.url,
    label: 'url'
  });
  if (urlDiff) {
    diff.push(urlDiff);
  }

  // Icon
  const iconDiff = getStringDiff({
    // This icon stored in the database has already been sanitized.
    previousValue: oldConfig.icon,
    // Sanitize the raw icon as-if it was stored in the database,
    // to ensure the data can be safely compared.
    nextValue: sanitizeSvg(newConfig.icon),
    label: 'icon'
  });
  if (iconDiff) {
    diff.push(iconDiff);
  }

  // Permissions
  const permissionsDiff = getPermissionsDiff({
    previousValue: oldConfig.permissions,
    nextValue: newConfig.permissions
  });
  if (permissionsDiff) {
    diff.push(permissionsDiff);
  }

  // Main menu link
  const mainMenuDiff = getMainMenuLinkDiff({
    previousValue: oldConfig.mainMenuLink,
    nextValue: newConfig.mainMenuLink
  });
  if (mainMenuDiff) {
    diff.push(mainMenuDiff);
  }

  // Submenu links
  const submenuDiff = getSubmenuLinksDiff({
    previousValue: oldConfig.submenuLinks,
    nextValue: newConfig.submenuLinks
  });
  if (submenuDiff) {
    diff.push(submenuDiff);
  }
  return diff.join('\n');
};

// Compute diff changes of the Custom View config.
// NOTE: Only known keys are evaluated.
const getCustomViewConfigDiff = (oldConfig, newConfig) => {
  const diff = [];

  // Default Label
  const defaultLabelDiff = getStringDiff({
    previousValue: oldConfig.defaultLabel,
    nextValue: newConfig.defaultLabel,
    label: 'defaultLabel'
  });
  if (defaultLabelDiff) {
    diff.push(defaultLabelDiff);
  }

  // Description
  const descriptionDiff = getStringDiff({
    previousValue: oldConfig.description,
    nextValue: newConfig.description,
    label: 'description'
  });
  if (descriptionDiff) {
    diff.push(descriptionDiff);
  }

  // URL
  const urlDiff = getStringDiff({
    previousValue: oldConfig.url,
    nextValue: newConfig.url,
    label: 'url'
  });
  if (urlDiff) {
    diff.push(urlDiff);
  }

  // Type
  const typeDiff = getStringDiff({
    previousValue: oldConfig.type,
    nextValue: newConfig.type,
    label: 'type'
  });
  if (typeDiff) {
    diff.push(typeDiff);
  }

  // Permissions
  const permissionsDiff = getPermissionsDiff({
    previousValue: oldConfig.permissions,
    nextValue: newConfig.permissions
  });
  if (permissionsDiff) {
    diff.push(permissionsDiff);
  }

  // Label All Locales
  const labelsDiff = getLabelAllLocalesDiff({
    previousValue: oldConfig.labelAllLocales,
    nextValue: newConfig.labelAllLocales,
    indentLevel: 1
  });
  if (labelsDiff) {
    diff.push(labelsDiff);
  }

  // Type settings
  const typeSettingsDiff = getTypeSettingsDiff({
    previousValue: oldConfig.typeSettings,
    nextValue: newConfig.typeSettings
  });
  if (typeSettingsDiff) {
    diff.push(typeSettingsDiff);
  }

  // Locators
  const locatorsDiff = getLocatorsDiff({
    previousValue: oldConfig.locators,
    nextValue: newConfig.locators
  });
  if (locatorsDiff) {
    diff.push(locatorsDiff);
  }
  return diff.join('\n');
};

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys(Object(t))).call(_context3, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
var CreateCustomApplicationFromCli = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "CreateCustomApplicationFromCli" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "data" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomApplicationDraftDataInput" } } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createCustomApplication" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "data" }, value: { kind: "Variable", name: { kind: "Name", value: "data" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 201, source: { body: "mutation CreateCustomApplicationFromCli(\n  $organizationId: String!\n  $data: CustomApplicationDraftDataInput!\n) {\n  createCustomApplication(organizationId: $organizationId, data: $data) {\n    id\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
var CreateCustomViewFromCli = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "CreateCustomViewFromCli" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "data" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewDraftDataInput" } } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createCustomView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "data" }, value: { kind: "Variable", name: { kind: "Name", value: "data" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 180, source: { body: "mutation CreateCustomViewFromCli(\n  $organizationId: String!\n  $data: CustomViewDraftDataInput!\n) {\n  createCustomView(organizationId: $organizationId, data: $data) {\n    id\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
var FetchCustomApplicationFromCli = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchCustomApplicationFromCli" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "entryPointUriPath" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationExtensionForCustomApplication" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "entryPointUriPath" }, value: { kind: "Variable", name: { kind: "Name", value: "entryPointUriPath" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationId" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "application" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "entryPointUriPath" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "description" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "url" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "icon" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "oAuthScopes" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "mainMenuLink" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "defaultLabel" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }] } }, { kind: "Field", name: { kind: "Name", value: "submenuLinks" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "uriPath" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "defaultLabel" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }] } }] } }] } }] } }], loc: { start: 0, end: 647, source: { body: "query FetchCustomApplicationFromCli($entryPointUriPath: String!) {\n  organizationExtensionForCustomApplication(\n    entryPointUriPath: $entryPointUriPath\n  ) {\n    organizationId\n    application {\n      id\n      entryPointUriPath\n      name\n      description\n      url\n      icon\n      permissions {\n        name\n        oAuthScopes\n      }\n      mainMenuLink {\n        defaultLabel\n        permissions\n        labelAllLocales {\n          locale\n          value\n        }\n      }\n      submenuLinks {\n        uriPath\n        defaultLabel\n        permissions\n        labelAllLocales {\n          locale\n          value\n        }\n      }\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
var FetchCustomViewFromCli = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchCustomViewFromCli" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "customViewId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationExtensionForCustomView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "customViewId" }, value: { kind: "Variable", name: { kind: "Name", value: "customViewId" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationId" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "defaultLabel" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "url" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "type" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "typeSettings" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "size" }, arguments: [], directives: [] }] } }, { kind: "Field", name: { kind: "Name", value: "locators" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "oAuthScopes" }, arguments: [], directives: [] }] } }] } }] } }] } }], loc: { start: 0, end: 399, source: { body: "query FetchCustomViewFromCli($customViewId: String!) {\n  organizationExtensionForCustomView(customViewId: $customViewId) {\n    organizationId\n    customView {\n      id\n      defaultLabel\n      labelAllLocales {\n        locale\n        value\n      }\n      url\n      type\n      typeSettings {\n        size\n      }\n      locators\n      permissions {\n        name\n        oAuthScopes\n      }\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
var FetchMyOrganizationsFromCli = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchMyOrganizationsFromCli" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "myOrganizations" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "total" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "results" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "name" }, arguments: [], directives: [] }] } }] } }] } }], loc: { start: 0, end: 112, source: { body: "query FetchMyOrganizationsFromCli {\n  myOrganizations {\n    total\n    results {\n      id\n      name\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
var UpdateCustomApplicationFromCli = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "UpdateCustomApplicationFromCli" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "data" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomApplicationDraftDataInput" } } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "applicationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ID" } } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "updateCustomApplication" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "data" }, value: { kind: "Variable", name: { kind: "Name", value: "data" } } }, { kind: "Argument", name: { kind: "Name", value: "applicationId" }, value: { kind: "Variable", name: { kind: "Name", value: "applicationId" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 268, source: { body: "mutation UpdateCustomApplicationFromCli(\n  $organizationId: String!\n  $data: CustomApplicationDraftDataInput!\n  $applicationId: ID!\n) {\n  updateCustomApplication(\n    organizationId: $organizationId\n    data: $data\n    applicationId: $applicationId\n  ) {\n    id\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
var UpdateCustomViewFromCli = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "UpdateCustomViewFromCli" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "data" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewDraftDataInput" } } }, directives: [] }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "customViewId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, directives: [] }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "updateCustomView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "data" }, value: { kind: "Variable", name: { kind: "Name", value: "data" } } }, { kind: "Argument", name: { kind: "Name", value: "customViewId" }, value: { kind: "Variable", name: { kind: "Name", value: "customViewId" } } }], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 248, source: { body: "mutation UpdateCustomViewFromCli(\n  $organizationId: String!\n  $data: CustomViewDraftDataInput!\n  $customViewId: String!\n) {\n  updateCustomView(\n    organizationId: $organizationId\n    data: $data\n    customViewId: $customViewId\n  ) {\n    id\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const credentialsStorage$1 = new CredentialsStorage();
async function requestWithTokenRetry(document, requestOptions) {
  let retryCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  const token = credentialsStorage$1.getToken(requestOptions.mcApiUrl);
  const client = new GraphQLClient("".concat(requestOptions.mcApiUrl, "/graphql"), {
    headers: _objectSpread(_objectSpread({
      Accept: 'application/json',
      'Content-Type': 'application/json',
      'x-user-agent': userAgent
    }, token ? {
      'x-mc-cli-access-token': token
    } : {}), requestOptions.headers)
  });
  try {
    const result = await client.rawRequest(print(document), requestOptions.variables);

    // In case a new session token is returned from the server, save it.
    const refreshedSessionToken = result.headers.get('x-refreshed-session-token');
    if (refreshedSessionToken) {
      console.log(chalk.green('Session token refreshed.'));
      console.log();
      const refreshedSessionTokenExpiresAt = result.headers.get('x-refreshed-session-token-expires-at');
      // Store the updated access token.
      credentialsStorage$1.setToken(requestOptions.mcApiUrl, {
        token: refreshedSessionToken,
        expiresAt: Number(refreshedSessionTokenExpiresAt)
      });
    }
    return result.data;
  } catch (error) {
    if (error instanceof ClientError) {
      // If it's an unauthorized error, retry the request to force the token to be refreshed.
      if (retryCount === 0 && error.response.errors && error.response.errors.length > 0) {
        var _context;
        const isUnauthorizedError = _someInstanceProperty(_context = error.response.errors).call(_context, graphqlError => {
          var _graphqlError$extensi;
          return ((_graphqlError$extensi = graphqlError.extensions) === null || _graphqlError$extensi === void 0 ? void 0 : _graphqlError$extensi.code) === 'UNAUTHENTICATED';
        });
        if (isUnauthorizedError) {
          console.log(chalk.yellow('Expired or invalid session token, attempting to retry the request with a refreshed token...'));
          return requestWithTokenRetry(document, _objectSpread(_objectSpread({}, requestOptions), {}, {
            headers: _objectSpread(_objectSpread({}, requestOptions.headers), {}, {
              'X-Force-Token': 'true'
            })
          }), retryCount + 1);
        }
      }
    }
    throw error;
  }
}
const fetchCustomApplication = async _ref => {
  let mcApiUrl = _ref.mcApiUrl,
    entryPointUriPath = _ref.entryPointUriPath,
    applicationIdentifier = _ref.applicationIdentifier;
  const customAppData = await requestWithTokenRetry(FetchCustomApplicationFromCli, {
    variables: {
      entryPointUriPath
    },
    mcApiUrl,
    headers: {
      'x-application-id': applicationIdentifier,
      'x-graphql-target': GRAPHQL_TARGETS.SETTINGS_SERVICE
    }
  });
  return customAppData.organizationExtensionForCustomApplication;
};
const fetchCustomView = async _ref2 => {
  let mcApiUrl = _ref2.mcApiUrl,
    customViewId = _ref2.customViewId,
    applicationIdentifier = _ref2.applicationIdentifier;
  const customViewData = await requestWithTokenRetry(FetchCustomViewFromCli, {
    variables: {
      customViewId
    },
    mcApiUrl,
    headers: {
      'x-custom-view-id': customViewId,
      'x-application-id': applicationIdentifier,
      'x-graphql-target': GRAPHQL_TARGETS.SETTINGS_SERVICE
    }
  });
  return customViewData.organizationExtensionForCustomView;
};
const updateCustomApplication = async _ref3 => {
  let mcApiUrl = _ref3.mcApiUrl,
    applicationId = _ref3.applicationId,
    organizationId = _ref3.organizationId,
    data = _ref3.data,
    applicationIdentifier = _ref3.applicationIdentifier;
  const updatedCustomAppsData = await requestWithTokenRetry(UpdateCustomApplicationFromCli, {
    variables: {
      organizationId,
      applicationId,
      data
    },
    mcApiUrl,
    headers: {
      'x-application-id': applicationIdentifier,
      'x-graphql-target': GRAPHQL_TARGETS.SETTINGS_SERVICE
    }
  });
  return updatedCustomAppsData.updateCustomApplication;
};
const updateCustomView = async _ref4 => {
  let mcApiUrl = _ref4.mcApiUrl,
    organizationId = _ref4.organizationId,
    data = _ref4.data,
    customViewId = _ref4.customViewId,
    applicationIdentifier = _ref4.applicationIdentifier;
  const updatedCustomViewData = await requestWithTokenRetry(UpdateCustomViewFromCli, {
    variables: {
      organizationId,
      customViewId,
      data
    },
    mcApiUrl,
    headers: {
      'x-custom-view-id': customViewId,
      'x-application-id': applicationIdentifier,
      'x-graphql-target': GRAPHQL_TARGETS.SETTINGS_SERVICE
    }
  });
  return updatedCustomViewData.updateCustomView;
};
const createCustomApplication = async _ref5 => {
  let mcApiUrl = _ref5.mcApiUrl,
    organizationId = _ref5.organizationId,
    data = _ref5.data,
    applicationIdentifier = _ref5.applicationIdentifier;
  const createdCustomAppData = await requestWithTokenRetry(CreateCustomApplicationFromCli, {
    variables: {
      organizationId,
      data
    },
    mcApiUrl,
    headers: {
      'x-application-id': applicationIdentifier,
      'x-graphql-target': GRAPHQL_TARGETS.SETTINGS_SERVICE
    }
  });
  return createdCustomAppData.createCustomApplication;
};
const createCustomView = async _ref6 => {
  let mcApiUrl = _ref6.mcApiUrl,
    organizationId = _ref6.organizationId,
    data = _ref6.data,
    applicationIdentifier = _ref6.applicationIdentifier;
  const createdCustomViewData = await requestWithTokenRetry(CreateCustomViewFromCli, {
    variables: {
      organizationId,
      data
    },
    mcApiUrl,
    headers: {
      'x-application-id': applicationIdentifier,
      'x-graphql-target': GRAPHQL_TARGETS.SETTINGS_SERVICE
    }
  });
  return createdCustomViewData.createCustomView;
};
const fetchUserOrganizations = async _ref7 => {
  let mcApiUrl = _ref7.mcApiUrl,
    applicationIdentifier = _ref7.applicationIdentifier,
    customViewId = _ref7.customViewId;
  const userOrganizations = await requestWithTokenRetry(FetchMyOrganizationsFromCli, {
    mcApiUrl,
    headers: _objectSpread(_objectSpread({
      'x-application-id': applicationIdentifier
    }, customViewId && {
      'x-custom-view-id': customViewId
    }), {}, {
      'x-graphql-target': GRAPHQL_TARGETS.ADMINISTRATION_SERVICE
    })
  });
  return userOrganizations.myOrganizations;
};

const credentialsStorage = new CredentialsStorage();
const getMcUrlLink = _ref => {
  var _context, _context2, _context3;
  let mcApiUrl = _ref.mcApiUrl,
    organizationId = _ref.organizationId,
    customEntityId = _ref.customEntityId,
    isCustomView = _ref.isCustomView;
  const mcUrl = mcApiUrl.replace('mc-api', 'mc');
  const customEntityLink = _concatInstanceProperty(_context = _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = "".concat(mcUrl, "/account/organizations/")).call(_context3, organizationId, "/custom-")).call(_context2, isCustomView ? 'views' : 'applications', "/owned/")).call(_context, customEntityId);
  return customEntityLink;
};
const isCustomViewData = data => data.entryPointUriPath === undefined;
async function createOrUpdateCustomApplication(_ref2) {
  var _context6;
  let mcApiUrl = _ref2.mcApiUrl,
    localCustomEntityData = _ref2.localCustomEntityData,
    applicationIdentifier = _ref2.applicationIdentifier,
    options = _ref2.options;
  const fetchedCustomApplication = await fetchCustomApplication({
    mcApiUrl,
    entryPointUriPath: localCustomEntityData.entryPointUriPath,
    applicationIdentifier
  });
  if (!fetchedCustomApplication) {
    var _context5;
    const userOrganizations = await fetchUserOrganizations({
      mcApiUrl,
      applicationIdentifier
    });
    let organizationId, organizationName;
    if (userOrganizations.total === 0) {
      throw new Error("It seems you are not an admin of any Organization. Please make sure to be part of the Administrators team of the Organization you want the Custom Application to be configured to.");
    }
    if (userOrganizations.total === 1) {
      const _userOrganizations$re = _slicedToArray(userOrganizations.results, 1),
        organization = _userOrganizations$re[0];
      organizationId = organization.id;
      organizationName = organization.name;
    } else {
      var _context4;
      const organizationChoices = _mapInstanceProperty(_context4 = userOrganizations.results).call(_context4, organization => ({
        title: organization.name,
        value: organization.id
      }));
      const _await$prompts = await prompts({
          type: 'select',
          name: 'organizationId',
          message: 'Select an Organization',
          choices: organizationChoices,
          initial: 0
        }),
        selectedOrganizationId = _await$prompts.organizationId;
      if (!selectedOrganizationId) {
        throw new Error("No Organization selected, aborting.");
      }
      organizationId = selectedOrganizationId;
      organizationName = _findInstanceProperty(organizationChoices).call(organizationChoices, _ref3 => {
        let value = _ref3.value;
        return value === organizationId;
      }).title;
    }
    const _await$prompts2 = await prompts({
        type: 'text',
        name: 'confirmation',
        message: _filterInstanceProperty(_context5 = ["You are about to create a new Custom Application in the \"".concat(chalk.green(organizationName), "\" organization. Are you sure you want to proceed?"), options.dryRun && chalk.gray('Using "--dry-run", no data will be created.')]).call(_context5, Boolean).join('\n'),
        initial: 'yes'
      }),
      confirmation = _await$prompts2.confirmation;
    if (!confirmation || confirmation.toLowerCase().charAt(0) !== 'y') {
      console.log(chalk.red('Aborted.'));
      return;
    }
    const data = omit(localCustomEntityData, ['id']);
    if (options.dryRun) {
      console.log();
      console.log("The following payload would be used to create a new Custom Application.");
      console.log();
      console.log(chalk.gray(_JSON$stringify(data, null, 2)));
      return;
    }
    const createdCustomApplication = await createCustomApplication({
      mcApiUrl,
      organizationId,
      data,
      applicationIdentifier
    });

    // This check is technically not necessary, as the `graphql-request` client
    // throws an error in case of GraphQL errors.
    // However, the generated TypeScript data related to the GraphQL query has the
    // field typed as optional, thus having an extra check for type correctness.
    if (!createdCustomApplication) {
      throw new Error('Failed to create the Custom Application.');
    }
    const customAppLink = getMcUrlLink({
      mcApiUrl,
      organizationId,
      customEntityId: createdCustomApplication.id
    });
    console.log(chalk.green("Custom Application created.\nPlease update the \"env.production.applicationId\" field in your local Custom Application config file with the following value: \"".concat(chalk.green(createdCustomApplication.id), "\".")));
    console.log("You can inspect the Custom Application data in the Merchant Center at \"".concat(chalk.gray(customAppLink), "\"."));
    return;
  }
  const customAppLink = getMcUrlLink({
    mcApiUrl,
    organizationId: fetchedCustomApplication.organizationId,
    customEntityId: fetchedCustomApplication.application.id
  });
  const configDiff = getCustomApplicationConfigDiff(fetchedCustomApplication.application, localCustomEntityData);
  if (!configDiff) {
    console.log(chalk.green("Custom Application up-to-date."));
    console.log("You can inspect the Custom Application data in the Merchant Center at \"".concat(chalk.gray(customAppLink), "\"."));
    return;
  }
  console.log('Changes detected:');
  console.log(configDiff);
  console.log();
  const _await$prompts3 = await prompts({
      type: 'text',
      name: 'confirmation',
      message: _filterInstanceProperty(_context6 = ["You are about to update the Custom Application \"".concat(chalk.green(localCustomEntityData.entryPointUriPath), "\" with the changes above. Are you sure you want to proceed?"), options.dryRun && chalk.gray('Using "--dry-run", no data will be updated.')]).call(_context6, Boolean).join('\n'),
      initial: 'yes'
    }),
    confirmation = _await$prompts3.confirmation;
  if (!confirmation || confirmation.toLowerCase().charAt(0) !== 'y') {
    console.log(chalk.red('Aborted.'));
    return;
  }
  const data = omit(localCustomEntityData, ['id']);
  if (options.dryRun) {
    console.log();
    console.log("The following payload would be used to update the Custom Application \"".concat(chalk.green(data.entryPointUriPath), "\"."));
    console.log();
    console.log(chalk.gray(_JSON$stringify(data, null, 2)));
    return;
  }
  await updateCustomApplication({
    mcApiUrl,
    organizationId: fetchedCustomApplication.organizationId,
    data: omit(localCustomEntityData, ['id']),
    applicationId: fetchedCustomApplication.application.id,
    applicationIdentifier
  });
  console.log(chalk.green("Custom Application updated."));
  console.log("You can inspect the Custom Application data in the Merchant Center at \"".concat(chalk.gray(customAppLink), "\"."));
}
async function createOrUpdateCustomView(_ref4) {
  var _fetchedCustomView$cu, _context9, _fetchedCustomView$cu2;
  let mcApiUrl = _ref4.mcApiUrl,
    localCustomEntityData = _ref4.localCustomEntityData,
    customViewId = _ref4.customViewId,
    options = _ref4.options,
    applicationIdentifier = _ref4.applicationIdentifier;
  const fetchedCustomView = await fetchCustomView({
    mcApiUrl,
    customViewId,
    applicationIdentifier
  });
  if (!fetchedCustomView) {
    var _context8;
    const userOrganizations = await fetchUserOrganizations({
      mcApiUrl,
      customViewId,
      applicationIdentifier
    });
    let organizationId, organizationName;
    if (userOrganizations.total === 0) {
      throw new Error("It seems you are not an admin of any Organization. Please make sure to be part of the Administrators team of the Organization you want the Custom View to be configured to.");
    }
    if (userOrganizations.total === 1) {
      const _userOrganizations$re2 = _slicedToArray(userOrganizations.results, 1),
        organization = _userOrganizations$re2[0];
      organizationId = organization.id;
      organizationName = organization.name;
    } else {
      var _context7;
      const organizationChoices = _mapInstanceProperty(_context7 = userOrganizations.results).call(_context7, organization => ({
        title: organization.name,
        value: organization.id
      }));
      const _await$prompts4 = await prompts({
          type: 'select',
          name: 'organizationId',
          message: 'Select an Organization',
          choices: organizationChoices,
          initial: 0
        }),
        selectedOrganizationId = _await$prompts4.organizationId;
      if (!selectedOrganizationId) {
        throw new Error("No Organization selected, aborting.");
      }
      organizationId = selectedOrganizationId;
      organizationName = _findInstanceProperty(organizationChoices).call(organizationChoices, _ref5 => {
        let value = _ref5.value;
        return value === organizationId;
      }).title;
    }
    const _await$prompts5 = await prompts({
        type: 'text',
        name: 'confirmation',
        message: _filterInstanceProperty(_context8 = ["You are about to create a new Custom View in the \"".concat(chalk.green(organizationName), "\" organization. Are you sure you want to proceed?"), options.dryRun && chalk.gray('Using "--dry-run", no data will be created.')]).call(_context8, Boolean).join('\n'),
        initial: 'yes'
      }),
      confirmation = _await$prompts5.confirmation;
    if (!confirmation || confirmation.toLowerCase().charAt(0) !== 'y') {
      console.log(chalk.red('Aborted.'));
      return;
    }
    const data = omit(localCustomEntityData, ['id']);
    if (options.dryRun) {
      console.log();
      console.log("The following payload would be used to create a new Custom View.");
      console.log();
      console.log(chalk.gray(_JSON$stringify(data, null, 2)));
      return;
    }
    const createdCustomView = await createCustomView({
      mcApiUrl,
      organizationId,
      data,
      applicationIdentifier
    });

    // This check is technically not necessary, as the `graphql-request` client
    // throws an error in case of GraphQL errors.
    // However, the generated TypeScript data related to the GraphQL query has the
    // field typed as optional, thus having an extra check for type correctness.
    if (!createdCustomView) {
      throw new Error('Failed to create the Custom View.');
    }
    const customViewLink = getMcUrlLink({
      mcApiUrl,
      organizationId,
      customEntityId: createdCustomView.id,
      isCustomView: true
    });
    console.log(chalk.green("Custom View created.\nPlease update the \"env.production.customViewId\" field in your local Custom View config file with the following value: \"".concat(chalk.green(createdCustomView.id), "\".")));
    console.log("You can inspect the Custom View data in the Merchant Center at \"".concat(chalk.gray(customViewLink), "\"."));
    return;
  }
  const customViewLink = getMcUrlLink({
    mcApiUrl,
    organizationId: fetchedCustomView.organizationId,
    customEntityId: (fetchedCustomView === null || fetchedCustomView === void 0 || (_fetchedCustomView$cu = fetchedCustomView.customView) === null || _fetchedCustomView$cu === void 0 ? void 0 : _fetchedCustomView$cu.id) || '',
    isCustomView: true
  });
  const configDiff = getCustomViewConfigDiff(fetchedCustomView.customView, localCustomEntityData);
  if (!configDiff) {
    console.log(chalk.green("Custom View up-to-date."));
    console.log("You can inspect the Custom View data in the Merchant Center at \"".concat(chalk.gray(customViewLink), "\"."));
    return;
  }
  console.log('Changes detected:');
  console.log(configDiff);
  console.log();
  const _await$prompts6 = await prompts({
      type: 'text',
      name: 'confirmation',
      message: _filterInstanceProperty(_context9 = ["You are about to update the Custom View \"".concat(chalk.green(localCustomEntityData.defaultLabel), "\" with the changes above. Are you sure you want to proceed?"), options.dryRun && chalk.gray('Using "--dry-run", no data will be updated.')]).call(_context9, Boolean).join('\n'),
      initial: 'yes'
    }),
    confirmation = _await$prompts6.confirmation;
  if (!confirmation || confirmation.toLowerCase().charAt(0) !== 'y') {
    console.log(chalk.red('Aborted.'));
    return;
  }
  const data = omit(localCustomEntityData, ['id']);
  if (options.dryRun) {
    console.log();
    console.log("The following payload would be used to update the Custom View \"".concat(chalk.green(data.defaultLabel), "\"."));
    console.log();
    console.log(chalk.gray(_JSON$stringify(data, null, 2)));
    return;
  }
  await updateCustomView({
    mcApiUrl,
    organizationId: fetchedCustomView.organizationId,
    data: omit(localCustomEntityData, ['id']),
    customViewId: (fetchedCustomView === null || fetchedCustomView === void 0 || (_fetchedCustomView$cu2 = fetchedCustomView.customView) === null || _fetchedCustomView$cu2 === void 0 ? void 0 : _fetchedCustomView$cu2.id) || '',
    applicationIdentifier
  });
  console.log(chalk.green("Custom View updated."));
  console.log("You can inspect the Custom View data in the Merchant Center at \"".concat(chalk.gray(customViewLink), "\"."));
}
async function run(options) {
  const applicationConfig = processConfig();
  const localCustomEntityData = applicationConfig.data;
  const _applicationConfig$en = applicationConfig.env,
    mcApiUrl = _applicationConfig$en.mcApiUrl,
    applicationIdentifier = _applicationConfig$en.applicationIdentifier,
    customViewId = _applicationConfig$en.customViewId;
  console.log("Using Merchant Center environment \"".concat(chalk.green(mcApiUrl), "\"."));
  console.log();
  const isSessionValid = credentialsStorage.isSessionValid(mcApiUrl);
  if (!isSessionValid) {
    throw new Error("You don't have a valid session. Please, run the \"mc-scripts login\" command to authenticate yourself.");
  }
  if (isCustomViewData(localCustomEntityData)) {
    createOrUpdateCustomView({
      mcApiUrl,
      localCustomEntityData,
      applicationIdentifier,
      customViewId: customViewId || localCustomEntityData.id,
      options
    });
  } else {
    createOrUpdateCustomApplication({
      mcApiUrl,
      localCustomEntityData,
      applicationIdentifier,
      options
    });
  }
}

export { run as default };
