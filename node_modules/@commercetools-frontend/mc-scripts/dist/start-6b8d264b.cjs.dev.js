'use strict';

var _parseInt = require('@babel/runtime-corejs3/core-js-stable/parse-int');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var fs = require('fs');
var chalk = require('chalk');
var checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
var clearConsole = require('react-dev-utils/clearConsole');
var openBrowser = require('react-dev-utils/openBrowser');
var WebpackDevServerUtils = require('react-dev-utils/WebpackDevServerUtils');
var webpack = require('webpack');
var WebpackDevServer = require('webpack-dev-server');
var createWebpackConfigForDevelopment = require('./create-webpack-config-for-development-8f11a518.cjs.dev.js');
var paths = require('./paths-d1febc82.cjs.dev.js');
var applicationConfig = require('@commercetools-frontend/application-config');
var mcDevAuthentication = require('@commercetools-frontend/mc-dev-authentication');
var mcHtmlTemplate = require('@commercetools-frontend/mc-html-template');
require('@babel/runtime-corejs3/core-js-stable/object/keys');
require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
require('@babel/runtime-corejs3/core-js-stable/object/define-property');
require('@babel/runtime-corejs3/helpers/defineProperty');
require('@babel/runtime-corejs3/core-js-stable/instance/map');
require('@babel/runtime-corejs3/core-js-stable/instance/filter');
require('@babel/runtime-corejs3/core-js-stable/json/stringify');
require('@babel/runtime-corejs3/core-js-stable/instance/ends-with');
require('@babel/runtime-corejs3/core-js-stable/instance/concat');
require('path');
require('@pmmmwh/react-refresh-webpack-plugin');
require('html-webpack-plugin');
require('moment-locales-webpack-plugin');
require('webpackbar');
require('@babel/runtime-corejs3/helpers/classCallCheck');
require('@babel/runtime-corejs3/helpers/createClass');
require('@babel/runtime-corejs3/core-js-stable/object/assign');
require('./create-postcss-config-843c2974.cjs.dev.js');
require('@babel/runtime-corejs3/helpers/slicedToArray');
require('./package-933e64f5.cjs.dev.js');
require('./has-jsx-runtime-aa5d21ee.cjs.dev.js');
require('./vendors-to-transpile-6ab4ea06.cjs.dev.js');
require('@babel/runtime-corejs3/core-js-stable/instance/find');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _parseInt__default = /*#__PURE__*/_interopDefault(_parseInt);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var chalk__default = /*#__PURE__*/_interopDefault(chalk);
var checkRequiredFiles__default = /*#__PURE__*/_interopDefault(checkRequiredFiles);
var clearConsole__default = /*#__PURE__*/_interopDefault(clearConsole);
var openBrowser__default = /*#__PURE__*/_interopDefault(openBrowser);
var webpack__default = /*#__PURE__*/_interopDefault(webpack);
var WebpackDevServer__default = /*#__PURE__*/_interopDefault(WebpackDevServer);

const host = process.env.HOST || '0.0.0.0';
// We support configuring the sockjs pathname during development.
// These settings let a developer run multiple simultaneous projects.
// They are used as the connection `hostname`, `pathname` and `port`
// in webpackHotDevClient. They are used as the `sockHost`, `sockPath`
// and `sockPort` options in webpack-dev-server.
const sockHost = process.env.WDS_SOCKET_HOST;
const sockPath = process.env.WDS_SOCKET_PATH; // default: '/ws'
const sockPort = process.env.WDS_SOCKET_PORT;
const createWebpackDevServerConfig = _ref => {
  let port = _ref.port,
    publicPath = _ref.publicPath;
  const applicationConfig$1 = applicationConfig.processConfig();
  const compiledHeaders = mcHtmlTemplate.processHeaders(applicationConfig$1);
  return {
    client: {
      overlay: false,
      webSocketURL: {
        hostname: sockHost,
        pathname: sockPath,
        port: sockPort
      }
    },
    // Enable gzip compression of generated files.
    compress: true,
    devMiddleware: {
      // It is important to tell WebpackDevServer to use the same "publicPath" path as
      // we specified in the webpack config. When homepage is '.', default to serving
      // from the root.
      publicPath
    },
    headers: compiledHeaders,
    historyApiFallback: {
      // Paths with dots should still use the history fallback.
      // See https://github.com/facebookincubator/create-react-app/issues/387.
      disableDotRule: true,
      index: publicPath
    },
    host,
    hot: true,
    https: false,
    port,
    setupMiddlewares(middlewares, devServer) {
      var _devServer$app;
      if (!devServer) {
        throw new Error('webpack-dev-server is not defined');
      }
      (_devServer$app = devServer.app) === null || _devServer$app === void 0 || _devServer$app.use(mcDevAuthentication.createMcDevAuthenticationMiddleware(applicationConfig$1));
      return middlewares;
    }
  };
};

async function run() {
  var _config$output, _context;
  const useYarn = fs__default["default"].existsSync(paths.paths.yarnLockFile);
  const isInteractive = process.stdout.isTTY;

  // Whether or not `react-refresh` is enabled, `react-refresh` is not 100% stable at this time,
  // which is why it's disabled by default.

  const hasWebpackConfig = fs__default["default"].existsSync(paths.paths.appWebpackConfig);

  // Warn and crash if required files are missing
  if (!checkRequiredFiles__default["default"]([])) {
    process.exit(1);
  }

  // Tools like Cloud9 rely on this.
  const DEFAULT_PORT = _parseInt__default["default"](String(process.env.HTTP_PORT), 10) || 3001;
  const HOST = process.env.HOST || '0.0.0.0';

  // We attempt to use the default port but if it is busy, we offer the user to
  // run on a different port. `detect()` Promise resolves to the next free port.
  const port = await WebpackDevServerUtils.choosePort(HOST, DEFAULT_PORT);
  if (port == null) {
    console.warn('Could not find a free port. Aborting.');
    // We have not found a port.
    return;
  }
  const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
  const appName = require(paths.paths.appPackageJson).name;
  const urls = WebpackDevServerUtils.prepareUrls(protocol, HOST, port);
  // Get webpack config
  const config = hasWebpackConfig ? require(paths.paths.appWebpackConfig) : createWebpackConfigForDevelopment.createWebpackConfigForDevelopment();

  // Create a webpack compiler that is configured with custom messages.
  const compiler = WebpackDevServerUtils.createCompiler({
    appName,
    config,
    useYarn,
    webpack: webpack__default["default"],
    urls
  });

  // Serve webpack assets generated by the compiler over a web sever.
  const serverConfig = createWebpackDevServerConfig({
    port,
    publicPath: (_config$output = config.output) === null || _config$output === void 0 ? void 0 : _config$output.publicPath
  });
  const devServer = new WebpackDevServer__default["default"](serverConfig, compiler);
  await devServer.start();
  if (isInteractive) {
    clearConsole__default["default"]();
  }
  console.log(chalk__default["default"].cyan('Starting the development server...\n'));
  openBrowser__default["default"](urls.localUrlForBrowser);
  _forEachInstanceProperty__default["default"](_context = ['SIGINT', 'SIGTERM']).call(_context, sig => {
    process.on(sig, () => {
      devServer.close();
      process.exit();
    });
  });
}

exports["default"] = run;
