import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import fs from 'fs';
import path from 'path';

const moduleFileExtensions = ['js', 'mjs', 'cjs', 'jsx', 'ts', 'tsx'];

// Make sure any symlinks in the project folder are resolved:
// https://github.com/facebook/create-react-app/issues/637
const appDirectory = fs.realpathSync(process.cwd());
const resolveApp = relativePath => path.resolve(appDirectory, relativePath);

// Resolve file paths in the order given
const resolveModule = (resolveFn, filePath) => {
  const extension = _findInstanceProperty(moduleFileExtensions).call(moduleFileExtensions, extension => {
    var _context;
    return fs.existsSync(resolveFn(_concatInstanceProperty(_context = "".concat(filePath, ".")).call(_context, extension)));
  });
  if (extension) {
    var _context2;
    return resolveFn(_concatInstanceProperty(_context2 = "".concat(filePath, ".")).call(_context2, extension));
  }
  return resolveFn("".concat(filePath, ".js"));
};

// Resolve the absolute path of the caller location. This is necessary
// to point to files within that folder.
const paths = {
  appPackageJson: resolveApp('package.json'),
  appBuild: resolveApp('public'),
  appIndexHtmlTemplate: resolveApp('public/index.html.template'),
  appIndexHtml: resolveApp('public/index.html'),
  appWebpackConfig: resolveModule(resolveApp, "webpack.config.".concat(process.env.NODE_ENV === 'production' ? 'prod' : 'dev')),
  yarnLockFile: resolveApp('yarn.lock'),
  appRoot: resolveApp('.'),
  entryPoint: resolveModule(resolveApp, 'src/index'),
  sourceFolders: [resolveApp('src')]
};

export { paths as p };
