'use strict';

var _findInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/find');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var fs = require('fs');
var path = require('path');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _findInstanceProperty__default = /*#__PURE__*/_interopDefault(_findInstanceProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var path__default = /*#__PURE__*/_interopDefault(path);

const moduleFileExtensions = ['js', 'mjs', 'cjs', 'jsx', 'ts', 'tsx'];

// Make sure any symlinks in the project folder are resolved:
// https://github.com/facebook/create-react-app/issues/637
const appDirectory = fs__default["default"].realpathSync(process.cwd());
const resolveApp = relativePath => path__default["default"].resolve(appDirectory, relativePath);

// Resolve file paths in the order given
const resolveModule = (resolveFn, filePath) => {
  const extension = _findInstanceProperty__default["default"](moduleFileExtensions).call(moduleFileExtensions, extension => {
    var _context;
    return fs__default["default"].existsSync(resolveFn(_concatInstanceProperty__default["default"](_context = "".concat(filePath, ".")).call(_context, extension)));
  });
  if (extension) {
    var _context2;
    return resolveFn(_concatInstanceProperty__default["default"](_context2 = "".concat(filePath, ".")).call(_context2, extension));
  }
  return resolveFn("".concat(filePath, ".js"));
};

// Resolve the absolute path of the caller location. This is necessary
// to point to files within that folder.
const paths = {
  appPackageJson: resolveApp('package.json'),
  appBuild: resolveApp('public'),
  appIndexHtmlTemplate: resolveApp('public/index.html.template'),
  appIndexHtml: resolveApp('public/index.html'),
  appWebpackConfig: resolveModule(resolveApp, "webpack.config.".concat('prod' )),
  yarnLockFile: resolveApp('yarn.lock'),
  appRoot: resolveApp('.'),
  entryPoint: resolveModule(resolveApp, 'src/index'),
  sourceFolders: [resolveApp('src')]
};

exports.paths = paths;
