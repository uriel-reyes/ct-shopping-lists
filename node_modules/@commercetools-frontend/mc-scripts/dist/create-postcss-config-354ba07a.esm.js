import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import path from 'path';
import { p as pkgJson } from './package-53e602ff.esm.js';

// This function aims to return the same result as `require.resolve`.
// However, resolving a path to a `.css` file does not return the real
// path when this file is executed within a Jest environment, because
// of the `identity-obj-proxy` resolver.
// Therefore, we trick it by resolving the package entry point and
// constructing the real path manually.
const safeResolvePath = (packageName, fileRelativePath) => {
  const defaultPackageEntryPoint = require.resolve(packageName);
  const _defaultPackageEntryP = defaultPackageEntryPoint.split('dist'),
    _defaultPackageEntryP2 = _slicedToArray(_defaultPackageEntryP, 1),
    pathToPackage = _defaultPackageEntryP2[0];
  return path.join(pathToPackage, fileRelativePath);
};
function createPostcssConfig() {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$postcssImportPat = _ref.postcssImportPaths,
    postcssImportPaths = _ref$postcssImportPat === void 0 ? [] : _ref$postcssImportPat,
    _ref$postcssCustomMed = _ref.postcssCustomMediaPaths,
    postcssCustomMediaPaths = _ref$postcssCustomMed === void 0 ? [] : _ref$postcssCustomMed,
    _ref$postcssCustomPro = _ref.postcssCustomPropertiesPaths,
    postcssCustomPropertiesPaths = _ref$postcssCustomPro === void 0 ? [] : _ref$postcssCustomPro;
  return {
    parser: false,
    map: false,
    plugins: [
    /**
     * Plugin to transform `@import` rules by inlining content.
     * https://github.com/postcss/postcss-import
     */
    require('postcss-import')({
      path: postcssImportPaths
    }),
    /**
     * Plugin to parse CSS and add vendor prefixes to CSS rules
     * using values from "[Can I Use](https://caniuse.com/)".
     * https://github.com/postcss/autoprefixer
     */
    require('autoprefixer')({
      // Enables `-ms-` prefixes for Grid Layout including some
      // limited autoplacement support.
      // https://github.com/postcss/autoprefixer#grid-autoplacement-support-in-ie
      grid: 'autoplace',
      overrideBrowserslist: process.env.NODE_ENV === 'production' ? pkgJson.browserslist.production : pkgJson.browserslist.development
    }),
    /**
     * Plugin to enable Custom Media Queries in CSS, following
     * the [CSS Media Queries](https://drafts.csswg.org/mediaqueries-5/#custom-mq) specification.
     * https://github.com/postcss/postcss-custom-media
     */
    require('postcss-custom-media')({
      importFrom: [safeResolvePath('@commercetools-frontend/application-components', 'materials/media-queries.css'), ...postcssCustomMediaPaths]
    }),
    /**
     * Plugin to enable Custom Properties in CSS, following
     * the [CSS Custom Properties](https://www.w3.org/TR/css-variables-1/) specification.
     * https://github.com/postcss/postcss-custom-properties
     */
    require('postcss-custom-properties')({
      preserve: false,
      importFrom: [...postcssCustomPropertiesPaths]
    }),
    /**
     * Plugin to `console.log()` the messages (warnings, etc.)
     * registered by other PostCSS plugins.
     * https://github.com/postcss/postcss-reporter
     */
    require('postcss-reporter')()]
  };
}

export { createPostcssConfig as c };
