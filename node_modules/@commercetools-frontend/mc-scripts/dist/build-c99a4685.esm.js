import _Promise from '@babel/runtime-corejs3/core-js-stable/promise';
import path from 'path';
import chalk from 'chalk';
import fs from 'fs-extra';
import checkRequiredFiles from 'react-dev-utils/checkRequiredFiles';
import FileSizeReporter from 'react-dev-utils/FileSizeReporter';
import formatWebpackMessages from 'react-dev-utils/formatWebpackMessages';
import printBuildError from 'react-dev-utils/printBuildError';
import webpack from 'webpack';
import { packageLocation } from '@commercetools-frontend/assets';
import { c as createWebpackConfigForProduction } from './create-webpack-config-for-production-e57dacb7.esm.js';
import { p as paths } from './paths-ded20ae1.esm.js';
import '@babel/runtime-corejs3/core-js-stable/object/keys';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import '@babel/runtime-corejs3/core-js-stable/object/define-property';
import '@babel/runtime-corejs3/helpers/defineProperty';
import '@babel/runtime-corejs3/core-js-stable/instance/filter';
import '@babel/runtime-corejs3/core-js-stable/instance/map';
import '@babel/runtime-corejs3/core-js-stable/json/stringify';
import '@babel/runtime-corejs3/core-js-stable/instance/ends-with';
import '@babel/runtime-corejs3/core-js-stable/number/is-integer';
import '@babel/runtime-corejs3/core-js-stable/instance/concat';
import 'css-minimizer-webpack-plugin';
import 'html-webpack-plugin';
import 'mini-css-extract-plugin';
import 'moment-locales-webpack-plugin';
import 'terser-webpack-plugin';
import 'webpack-bundle-analyzer';
import '@babel/runtime-corejs3/helpers/classCallCheck';
import '@babel/runtime-corejs3/helpers/createClass';
import '@babel/runtime-corejs3/core-js-stable/instance/bind';
import '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import '@babel/runtime-corejs3/core-js-stable/object/assign';
import 'fs';
import './create-postcss-config-354ba07a.esm.js';
import '@babel/runtime-corejs3/helpers/slicedToArray';
import './package-53e602ff.esm.js';
import './has-jsx-runtime-e3ecb09b.esm.js';
import './vendors-to-transpile-7dc84a72.esm.js';
import '@babel/runtime-corejs3/core-js-stable/instance/find';

const measureFileSizesBeforeBuild = FileSizeReporter.measureFileSizesBeforeBuild;
const printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;

// These sizes are pretty large. We'll warn for bundles exceeding them.
const WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;
const WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;
async function run() {
  const hasWebpackConfig = fs.existsSync(paths.appWebpackConfig);

  // Warn and crash if required files are missing
  if (!checkRequiredFiles([])) {
    process.exit(1);
  }

  // First, read the current file sizes in build directory.
  // This lets us display how much they changed later.
  const previousFileSizes = await measureFileSizesBeforeBuild(paths.appBuild);

  // Remove all content but keep the directory so that
  // if you're in it, you don't end up in Trash
  fs.emptyDirSync(paths.appBuild);
  // Copy default files
  copyDefaultFiles();
  try {
    // Start the webpack build
    const result = await build();
    if (result.warnings.length) {
      console.log(chalk.yellow('Compiled with warnings.\n'));
      console.log(result.warnings.join('\n\n'));
      console.log("\nSearch for the ".concat(chalk.underline(chalk.yellow('keywords')), " to learn more about each warning."));
      console.log("To ignore, add ".concat(chalk.cyan('// eslint-disable-next-line'), " to the line before.\n"));
    } else {
      console.log(chalk.green('Compiled successfully.\n'));
    }
    console.log('File sizes after gzip:\n');
    printFileSizesAfterBuild(result.stats, previousFileSizes, paths.appBuild, WARN_AFTER_BUNDLE_GZIP_SIZE, WARN_AFTER_CHUNK_GZIP_SIZE);
    console.log();
  } catch (error) {
    if (error instanceof Error) {
      printBuildError(error);
    }
    throw new Error("Failed to compile");
  }

  // Create the production build and print the deployment instructions.
  async function build() {
    console.log('Creating an optimized production build...');
    const config = hasWebpackConfig ? require(paths.appWebpackConfig) : createWebpackConfigForProduction();
    const compiler = webpack(config);
    return new _Promise((resolve, reject) => {
      compiler.run((err, stats) => {
        let messages;
        if (err) {
          if (!err.message) {
            return reject(err);
          }
          let errMessage = err.message;
          // Add additional information for postcss errors
          if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {
            errMessage += '\nCompileError: Begins at CSS selector ' +
            // @ts-ignore
            err['postcssNode'].selector;
          }
          messages = formatWebpackMessages({
            // @ts-ignore
            errors: [errMessage],
            warnings: []
          });
        } else {
          messages = formatWebpackMessages(stats === null || stats === void 0 ? void 0 : stats.toJson({
            all: false,
            warnings: true,
            errors: true
          }));
        }
        if (messages.errors.length) {
          // Only keep the first error. Others are often indicative
          // of the same problem, but confuse the reader with noise.
          if (messages.errors.length > 1) {
            messages.errors.length = 1;
          }
          return reject(new Error(messages.errors.join('\n\n')));
        }
        if (process.env.CI && (typeof process.env.CI !== 'string' || process.env.CI.toLowerCase() !== 'false') && messages.warnings.length) {
          console.log(chalk.yellow('\nTreating warnings as errors because process.env.CI = true.\n' + 'Most CI servers set it automatically.\n'));
          return reject(new Error(messages.warnings.join('\n\n')));
        }
        return resolve({
          stats: stats,
          warnings: messages.warnings
        });
      });
    });
  }
  function copyDefaultFiles() {
    fs.copySync(path.join(packageLocation, 'html-page'), paths.appBuild, {
      dereference: true
    });
  }
}

export { run as default };
