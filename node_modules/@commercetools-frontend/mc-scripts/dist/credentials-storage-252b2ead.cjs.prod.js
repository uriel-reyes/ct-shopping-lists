'use strict';

var createHttpUserAgent = require('@commercetools/http-user-agent');
var _package = require('./package-db6d1141.cjs.prod.js');
var _classCallCheck = require('@babel/runtime-corejs3/helpers/classCallCheck');
var _createClass = require('@babel/runtime-corejs3/helpers/createClass');
var _JSON$stringify = require('@babel/runtime-corejs3/core-js-stable/json/stringify');
var _Date$now = require('@babel/runtime-corejs3/core-js-stable/date/now');
var fs = require('fs');
var os = require('os');
var path = require('path');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var createHttpUserAgent__default = /*#__PURE__*/_interopDefault(createHttpUserAgent);
var _JSON$stringify__default = /*#__PURE__*/_interopDefault(_JSON$stringify);
var _Date$now__default = /*#__PURE__*/_interopDefault(_Date$now);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var os__default = /*#__PURE__*/_interopDefault(os);
var path__default = /*#__PURE__*/_interopDefault(path);

const userAgent = createHttpUserAgent__default["default"]({
  name: 'graphql-request',
  libraryName: 'mc-scripts',
  libraryVersion: _package.pkgJson.version,
  contactUrl: 'https://git.io/fjuyC',
  // points to the appkit repo issues
  contactEmail: 'support@commercetools.com'
});

const homedir = os__default["default"].homedir();
const credentialsFolderPath = path__default["default"].join(homedir, ".commercetools");
const credentialsFilePath = path__default["default"].join(credentialsFolderPath, 'mc-credentials.json');
let CredentialsStorage = /*#__PURE__*/function () {
  function CredentialsStorage() {
    _classCallCheck(this, CredentialsStorage);
    // Ensure the credentials file is present
    if (!fs__default["default"].existsSync(credentialsFilePath)) {
      fs__default["default"].mkdirSync(credentialsFolderPath, {
        recursive: true
      });
      // Initialize with an empty object
      this._writeCredentials();
    }
  }
  _createClass(CredentialsStorage, [{
    key: "_writeCredentials",
    value: function _writeCredentials(credentials) {
      fs__default["default"].writeFileSync(credentialsFilePath, _JSON$stringify__default["default"](credentials || {}, null, 2), {
        encoding: 'utf8'
      });
    }
  }, {
    key: "_loadCredentials",
    value: function _loadCredentials() {
      const data = fs__default["default"].readFileSync(credentialsFilePath, {
        encoding: 'utf8'
      });
      return JSON.parse(data);
    }
  }, {
    key: "getToken",
    value: function getToken(environmentKey) {
      const allCredentials = this._loadCredentials();
      if (!this.isSessionValid(environmentKey)) {
        return null;
      }
      return allCredentials[environmentKey].token;
    }
  }, {
    key: "setToken",
    value: function setToken(environmentKey, credentials) {
      const allCredentials = this._loadCredentials();
      allCredentials[environmentKey] = credentials;
      this._writeCredentials(allCredentials);
    }
  }, {
    key: "isSessionValid",
    value: function isSessionValid(environmentKey) {
      const allCredentials = this._loadCredentials();
      const credentials = allCredentials[environmentKey];
      if (!credentials) {
        return false;
      }
      const now = Math.floor(_Date$now__default["default"]() / 1000);
      return now < credentials.expiresAt;
    }
  }]);
  return CredentialsStorage;
}();
CredentialsStorage.location = credentialsFilePath;

exports.CredentialsStorage = CredentialsStorage;
exports.userAgent = userAgent;
