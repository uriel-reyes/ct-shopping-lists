import _JSON$stringify from '@babel/runtime-corejs3/core-js-stable/json/stringify';
import _startsWithInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/starts-with';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import fs from 'fs';
import path from 'path';

function logoutRoute(response) {
  var _context;
  let additionalCookieParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  // NOTE: removing the cookie only works if your are running the MC API
  // locally, otherwise the cookie won't get removed as it's set to a
  // proper domain (e.g. commercetools.com), which we can't unset from localhost.
  response.setHeader('Set-Cookie', _concatInstanceProperty(_context = ["mcAccessToken=''",
  // <-- unset the value
  'Path=/', "Expires=".concat(new Date(0).toUTCString()),
  // <-- put a date in the past
  'HttpOnly']).call(_context, additionalCookieParameters).join('; '));
}

// https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros
const pages$1 = {
  "loginPage": "<html>\n  <head>\n    <title>Login (development only)</title>\n    <style>\n      html,\n      body {\n        font: 1em sans-serif;\n        padding: 0;\n        margin: 0;\n        height: 100vh;\n        width: 100vw;\n      }\n\n      body {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        margin-top: 32px;\n      }\n\n      body > * + * {\n        margin-top: 32px;\n      }\n\n      .title {\n        width: 355px;\n      }\n\n      form {\n        display: flex;\n        flex-direction: column;\n        width: 355px;\n      }\n\n      form > * + * {\n        margin: 16px 0 0;\n      }\n\n      .field {\n        border: 0;\n      }\n\n      .field > * + * {\n        margin: 8px 0 0;\n      }\n\n      label {\n        display: block;\n      }\n\n      input {\n        width: 100%;\n        height: 24px;\n        outline: none;\n      }\n\n      input:focus {\n        border: 1px solid cornflowerblue;\n      }\n\n      input:focus:invalid {\n        border-color: red;\n      }\n\n      abbr {\n        text-decoration: none;\n        color: orangered;\n      }\n\n      #errors > div {\n        background-color: red;\n        color: #eee;\n        padding: 8px;\n        border-radius: 4px;\n      }\n\n      .info {\n        background-color: #b5e1fd;\n        padding: 8px;\n        border-radius: 4px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"title\">\n      <h3>\n        Welcome to the Merchant Center authorization page for local development\n      </h3>\n      <small>\n        This page is only available in development mode and is necessary to\n        authenticate yourself. In production environment, we use our own\n        authentication service.\n      </small>\n    </div>\n    <form id=\"login\">\n      <div id=\"errors\"></div>\n      <div class=\"field\">\n        <label for=\"email\">\n          Email<abbr title=\"This field is mandatory\">*</abbr>\n        </label>\n        <input id=\"email\" name=\"email\" type=\"text\" required=\"required\" />\n      </div>\n      <div class=\"field\">\n        <label for=\"password\">\n          Password<abbr title=\"This field is mandatory\">*</abbr>\n        </label>\n        <input\n          id=\"password\"\n          name=\"password\"\n          type=\"password\"\n          required=\"required\"\n        />\n      </div>\n      <div>\n        <button type=\"submit\" aria-label=\"Sign in\">Sign in ðŸš€</button>\n      </div>\n    </form>\n    <script>\n      /* eslint-disable no-var,vars-on-top */\n      /**\n       * NOTE:\n       *   This code is only used in development mode.\n       *   It authenticates a developer using the same mechanisms\n       *   as when not running in development. However,\n       *   this runs on the same domain as the developer.\n       */\n      window.addEventListener('load', function loaded() {\n        var form = document.getElementById('login');\n        form.addEventListener('submit', function onSubmit(event) {\n          event.preventDefault();\n          authorize();\n        });\n\n        function authorize() {\n          var data = new FormData(form);\n          var payload = {\n            email: data.get('email'),\n            password: data.get('password'),\n          };\n\n          var queryParams = new URLSearchParams(window.location.search);\n          if (queryParams.has('response_type')) {\n            // OIDC params\n            payload.client_id = queryParams.get('client_id');\n            payload.response_type = queryParams.get('response_type');\n            payload.scope = queryParams.get('scope');\n            payload.state = queryParams.get('state');\n            payload.nonce = queryParams.get('nonce');\n          }\n\n          var container = document.getElementById('errors');\n          // Clean up error message elements\n          while (container.firstChild) {\n            container.removeChild(container.firstChild);\n          }\n\n          const url = '__MC_API_URL__/tokens';\n\n          window\n            .fetch(url, {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n              },\n              credentials: 'include',\n              body: JSON.stringify(payload),\n            })\n            .then(function handleResponse(response) {\n              if (response.ok) {\n                return response.json().then(function onSuccess(result) {\n                  // Handle OIDC redirect.\n                  if (queryParams.has('response_type')) {\n                    window.location.replace(result.redirectTo);\n                  } else {\n                    window.localStorage.setItem('isAuthenticated', true);\n                    var searchParams = new URLSearchParams(\n                      window.location.search\n                    );\n                    var redirectTo = searchParams.get('redirectTo') || '/';\n                    window.location.replace(redirectTo);\n                  }\n                });\n              }\n              return response.text().then(function onError(responseText) {\n                var message;\n                try {\n                  var parsedResponse = JSON.parse(responseText);\n                  message = parsedResponse.message;\n                } catch (e) {\n                  console.warn(\n                    `Failed to parse error response for ${url}:`,\n                    responseText\n                  );\n\n                  message = responseText;\n                }\n                var errorMessage = document.createTextNode(message);\n                var errorContainer = document.createElement('div');\n                errorContainer.appendChild(errorMessage);\n                container.appendChild(errorContainer, container);\n              });\n            })\n            .catch(function onNetworkError(error) {\n              var errorMessage = document.createTextNode(error.message);\n              var errorContainer = document.createElement('div');\n              errorContainer.appendChild(errorMessage);\n              container.appendChild(errorContainer, container);\n            });\n        }\n      });\n    </script>\n  </body>\n</html>\n",
  "logoutPage": "<html>\n  <head>\n    <title>Logout (development only)</title>\n    <script>\n      window.localStorage.removeItem('isAuthenticated');\n      window.localStorage.removeItem('loginStrategy');\n      window.localStorage.removeItem('activeProjectKey');\n    </script>\n  </head>\n  <body>\n    <div>\n      <h3>This is the logout page for local development.</h3>\n      <p>\n        Be aware that you might still have an active session as the cookie is\n        assigned to a production domain (e.g. commercetools.com) which we can't\n        unset from localhost. This is only a problem on local development and we\n        intend fix this in the future.\n      </p>\n      <p>\n        You can\n        <a href=\"#\" onclick=\"window.location='/login'+window.location.search;\"\n          >go to the login page</a\n        >\n        now.\n      </p>\n    </div>\n  </body>\n</html>\n"
};
const trimTrailingSlash$1 = value => value.replace(/\/$/, '');
function createMcDevAuthenticationMiddleware(applicationConfig) {
  const htmlLogin = pages$1.loginPage.replace(new RegExp('__MC_API_URL__', 'g'), trimTrailingSlash$1(applicationConfig.env.mcApiUrl));
  const htmlLogout = pages$1.logoutPage;
  const isDevAuthenticationMiddlewareDisabled = String(applicationConfig.env.disableAuthRoutesOfDevServer) === 'true' || applicationConfig.env.servedByProxy;
  return (request, response, next) => {
    var _applicationConfig$en;
    if (request.originalUrl === '/api/graphql') {
      response.statusCode = 404;
      response.setHeader('Content-Type', 'application/json');
      response.end(_JSON$stringify({
        message: "This GraphQL endpoint is only available in production in the [Merchant Center Proxy Router](https://docs.commercetools.com/custom-applications/concepts/merchant-center-proxy-router). Please check that you are not calling this endpoint in development mode."
      }));
      return;
    }
    if ((_applicationConfig$en = applicationConfig.env.__DEVELOPMENT__) !== null && _applicationConfig$en !== void 0 && (_applicationConfig$en = _applicationConfig$en.oidc) !== null && _applicationConfig$en !== void 0 && _applicationConfig$en.authorizeUrl) {
      var _applicationConfig$en2, _context;
      // Handle login page for OIDC workflow when developing against a local MC API.
      if ((_applicationConfig$en2 = applicationConfig.env.__DEVELOPMENT__) !== null && _applicationConfig$en2 !== void 0 && (_applicationConfig$en2 = _applicationConfig$en2.oidc) !== null && _applicationConfig$en2 !== void 0 && _startsWithInstanceProperty(_context = _applicationConfig$en2.authorizeUrl).call(_context, 'http://localhost')) {
        var _request$originalUrl;
        if ((_request$originalUrl = request.originalUrl) !== null && _request$originalUrl !== void 0 && _startsWithInstanceProperty(_request$originalUrl).call(_request$originalUrl, '/login/authorize')) {
          if (isDevAuthenticationMiddlewareDisabled) {
            next();
          } else {
            response.end(htmlLogin);
          }
          return;
        }
      }
    } else {
      if (request.originalUrl === '/login') {
        if (isDevAuthenticationMiddlewareDisabled) {
          next();
        } else {
          response.end(htmlLogin);
        }
        return;
      }
      if (request.originalUrl === '/logout') {
        logoutRoute(response);
        if (isDevAuthenticationMiddlewareDisabled) {
          next();
        } else {
          response.end(htmlLogout);
        }
        return;
      }
    }
    next();
  };
}

// https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros
const pages = {
  "loginPage": "<html>\n  <head>\n    <title>Login (development only)</title>\n    <style>\n      html,\n      body {\n        font: 1em sans-serif;\n        padding: 0;\n        margin: 0;\n        height: 100vh;\n        width: 100vw;\n      }\n\n      body {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        margin-top: 32px;\n      }\n\n      body > * + * {\n        margin-top: 32px;\n      }\n\n      .title {\n        width: 355px;\n      }\n\n      form {\n        display: flex;\n        flex-direction: column;\n        width: 355px;\n      }\n\n      form > * + * {\n        margin: 16px 0 0;\n      }\n\n      .field {\n        border: 0;\n      }\n\n      .field > * + * {\n        margin: 8px 0 0;\n      }\n\n      label {\n        display: block;\n      }\n\n      input {\n        width: 100%;\n        height: 24px;\n        outline: none;\n      }\n\n      input:focus {\n        border: 1px solid cornflowerblue;\n      }\n\n      input:focus:invalid {\n        border-color: red;\n      }\n\n      abbr {\n        text-decoration: none;\n        color: orangered;\n      }\n\n      #errors > div {\n        background-color: red;\n        color: #eee;\n        padding: 8px;\n        border-radius: 4px;\n      }\n\n      .info {\n        background-color: #b5e1fd;\n        padding: 8px;\n        border-radius: 4px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"title\">\n      <h3>\n        Welcome to the Merchant Center authorization page for local development\n      </h3>\n      <small>\n        This page is only available in development mode and is necessary to\n        authenticate yourself. In production environment, we use our own\n        authentication service.\n      </small>\n    </div>\n    <form id=\"login\">\n      <div id=\"errors\"></div>\n      <div class=\"field\">\n        <label for=\"email\">\n          Email<abbr title=\"This field is mandatory\">*</abbr>\n        </label>\n        <input id=\"email\" name=\"email\" type=\"text\" required=\"required\" />\n      </div>\n      <div class=\"field\">\n        <label for=\"password\">\n          Password<abbr title=\"This field is mandatory\">*</abbr>\n        </label>\n        <input\n          id=\"password\"\n          name=\"password\"\n          type=\"password\"\n          required=\"required\"\n        />\n      </div>\n      <div>\n        <button type=\"submit\" aria-label=\"Sign in\">Sign in ðŸš€</button>\n      </div>\n    </form>\n    <script>\n      /* eslint-disable no-var,vars-on-top */\n      /**\n       * NOTE:\n       *   This code is only used in development mode.\n       *   It authenticates a developer using the same mechanisms\n       *   as when not running in development. However,\n       *   this runs on the same domain as the developer.\n       */\n      window.addEventListener('load', function loaded() {\n        var form = document.getElementById('login');\n        form.addEventListener('submit', function onSubmit(event) {\n          event.preventDefault();\n          authorize();\n        });\n\n        function authorize() {\n          var data = new FormData(form);\n          var payload = {\n            email: data.get('email'),\n            password: data.get('password'),\n          };\n\n          var queryParams = new URLSearchParams(window.location.search);\n          if (queryParams.has('response_type')) {\n            // OIDC params\n            payload.client_id = queryParams.get('client_id');\n            payload.response_type = queryParams.get('response_type');\n            payload.scope = queryParams.get('scope');\n            payload.state = queryParams.get('state');\n            payload.nonce = queryParams.get('nonce');\n          }\n\n          var container = document.getElementById('errors');\n          // Clean up error message elements\n          while (container.firstChild) {\n            container.removeChild(container.firstChild);\n          }\n\n          const url = '__MC_API_URL__/tokens';\n\n          window\n            .fetch(url, {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n              },\n              credentials: 'include',\n              body: JSON.stringify(payload),\n            })\n            .then(function handleResponse(response) {\n              if (response.ok) {\n                return response.json().then(function onSuccess(result) {\n                  // Handle OIDC redirect.\n                  if (queryParams.has('response_type')) {\n                    window.location.replace(result.redirectTo);\n                  } else {\n                    window.localStorage.setItem('isAuthenticated', true);\n                    var searchParams = new URLSearchParams(\n                      window.location.search\n                    );\n                    var redirectTo = searchParams.get('redirectTo') || '/';\n                    window.location.replace(redirectTo);\n                  }\n                });\n              }\n              return response.text().then(function onError(responseText) {\n                var message;\n                try {\n                  var parsedResponse = JSON.parse(responseText);\n                  message = parsedResponse.message;\n                } catch (e) {\n                  console.warn(\n                    `Failed to parse error response for ${url}:`,\n                    responseText\n                  );\n\n                  message = responseText;\n                }\n                var errorMessage = document.createTextNode(message);\n                var errorContainer = document.createElement('div');\n                errorContainer.appendChild(errorMessage);\n                container.appendChild(errorContainer, container);\n              });\n            })\n            .catch(function onNetworkError(error) {\n              var errorMessage = document.createTextNode(error.message);\n              var errorContainer = document.createElement('div');\n              errorContainer.appendChild(errorMessage);\n              container.appendChild(errorContainer, container);\n            });\n        }\n      });\n    </script>\n  </body>\n</html>\n",
  "logoutPage": "<html>\n  <head>\n    <title>Logout (development only)</title>\n    <script>\n      window.localStorage.removeItem('isAuthenticated');\n      window.localStorage.removeItem('loginStrategy');\n      window.localStorage.removeItem('activeProjectKey');\n    </script>\n  </head>\n  <body>\n    <div>\n      <h3>This is the logout page for local development.</h3>\n      <p>\n        Be aware that you might still have an active session as the cookie is\n        assigned to a production domain (e.g. commercetools.com) which we can't\n        unset from localhost. This is only a problem on local development and we\n        intend fix this in the future.\n      </p>\n      <p>\n        You can\n        <a href=\"#\" onclick=\"window.location='/login'+window.location.search;\"\n          >go to the login page</a\n        >\n        now.\n      </p>\n    </div>\n  </body>\n</html>\n"
};
const trimTrailingSlash = value => value.replace(/\/$/, '');

// Make sure any symlinks in the project folder are resolved:
// https://github.com/facebook/create-react-app/issues/637
const appDirectory = fs.realpathSync(process.cwd());
const resolveApp = relativePath => path.resolve(appDirectory, relativePath);
const paths = {
  appBuild: resolveApp('public')
};

// This transformer will generate a development `login` and `logout` HTML files
// and copy them to the application public folder.
// This is necessary to run the application locally in production mode.
const transformerLocal = compiledHtml => {
  const htmlLogin = pages.loginPage.replace(new RegExp('__MC_API_URL__', 'g'), trimTrailingSlash(compiledHtml.env.mcApiUrl));
  const htmlLogout = pages.logoutPage;
  fs.writeFileSync(path.join(paths.appBuild, 'login.html'), htmlLogin, 'utf8');
  fs.writeFileSync(path.join(paths.appBuild, 'logout.html'), htmlLogout, 'utf8');
};

export { createMcDevAuthenticationMiddleware, transformerLocal };
