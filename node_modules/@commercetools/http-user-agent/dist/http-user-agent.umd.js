(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.CommercetoolsHttpUserAgent = factory());
})(this, (function () { 'use strict';

  /*
    This is the easiest way, for this use case, to detect if we're running in
    Node.js or in a browser environment. In other cases, this won't be even a
    problem as Rollup will provide the correct polyfill in the bundle.
    The main advantage by doing it this way is that it allows to easily test
    the code running in both environments, by overriding `global.window` in
    the specific test.
  */
  var isBrowser = function isBrowser() {
    return typeof window !== 'undefined' && window.document && window.document.nodeType === 9;
  };

  function getSystemInfo() {
    if (isBrowser()) return window.navigator.userAgent;
    var nodeVersion = process.version.slice(1);
    var platformInfo = "(".concat(process.platform, "; ").concat(process.arch, ")");
    return "Node.js/".concat(nodeVersion, " ").concat(platformInfo);
  }

  function createUserAgent(options) {
    if (!options || Object.keys(options).length === 0 || !{}.hasOwnProperty.call(options, 'name')) throw new Error('Missing required option `name`'); // Main info

    var baseInfo = options.version ? "".concat(options.name, "/").concat(options.version) : options.name; // Library info

    var libraryInfo = null;
    if (options.libraryName && !options.libraryVersion) libraryInfo = options.libraryName;else if (options.libraryName && options.libraryVersion) libraryInfo = "".concat(options.libraryName, "/").concat(options.libraryVersion); // Contact info

    var contactInfo = null;
    if (options.contactUrl && !options.contactEmail) contactInfo = "(+".concat(options.contactUrl, ")");else if (!options.contactUrl && options.contactEmail) contactInfo = "(+".concat(options.contactEmail, ")");else if (options.contactUrl && options.contactEmail) contactInfo = "(+".concat(options.contactUrl, "; +").concat(options.contactEmail, ")"); // System info

    var systemInfo = getSystemInfo();
    return [baseInfo, systemInfo, libraryInfo, contactInfo].filter(Boolean).join(' ');
  }

  return createUserAgent;

}));
