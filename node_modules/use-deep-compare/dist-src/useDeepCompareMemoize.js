import deepEqual from 'dequal';
import React from 'react';
export function isPrimitive(val) {
  return val == null || /^[sbn]/.test(typeof val);
}
export function checkDeps(deps, name) {
  const reactHookName = `React.${name.replace(/DeepCompare/, '')}`;

  if (!deps || deps.length === 0) {
    throw new Error(`${name} should not be used with no dependencies. Use ${reactHookName} instead.`);
  }

  if (deps.every(isPrimitive)) {
    throw new Error(`${name} should not be used with dependencies that are all primitive values. Use ${reactHookName} instead.`);
  }
}
export function useDeepCompareMemoize(value) {
  const ref = React.useRef([]);

  if (!deepEqual(value, ref.current)) {
    ref.current = value;
  }

  return ref.current;
}