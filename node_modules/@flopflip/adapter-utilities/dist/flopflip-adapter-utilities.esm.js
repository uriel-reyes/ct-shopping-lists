import kebabCase from 'lodash/kebabCase';
import getGlobalThis from 'globalthis';
import camelCase from 'lodash/camelCase';
import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';

const denormalizeFlagName = flagName => kebabCase(flagName);

const exposeGlobally = adapter => {
  const globalThis = getGlobalThis();
  if (!globalThis.__flopflip__) {
    globalThis.__flopflip__ = {};
  }
  globalThis.__flopflip__[adapter.id] = adapter;
};

const normalizeFlag = (flagName, flagValue) => [camelCase(flagName),
// Multi variate flags contain a string or `null` - `false` seems more natural.
// eslint-disable-next-line no-eq-null, eqeqeq, @typescript-eslint/prefer-nullish-coalescing
flagValue == null ? false : flagValue];

const normalizeFlags = function (rawFlags) {
  let normalizeFlag$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : normalizeFlag;
  return Object.entries(rawFlags || {}).reduce((normalizedFlags, _ref) => {
    let _ref2 = _slicedToArray(_ref, 2),
      flagName = _ref2[0],
      flagValue = _ref2[1];
    const _normalizeFlag = normalizeFlag$1(flagName, flagValue),
      _normalizeFlag2 = _slicedToArray(_normalizeFlag, 2),
      normalizedFlagName = _normalizeFlag2[0],
      normalizedFlagValue = _normalizeFlag2[1];
    // Can't return expression as it is the assigned value
    normalizedFlags[normalizedFlagName] = normalizedFlagValue;
    return normalizedFlags;
  }, {});
};

export { denormalizeFlagName, exposeGlobally, normalizeFlag, normalizeFlags };
