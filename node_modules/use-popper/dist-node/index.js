'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var PopperJS = _interopDefault(require('popper.js'));
var React = _interopDefault(require('react'));
var useDeepCompare = require('use-deep-compare');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function useCallbackRef() {
  const [node, setNode] = React.useState(null);
  const ref = React.useCallback(node => {
    if (node !== null) {
      setNode(node);
    }
  }, []);
  return [node, ref];
}

const popperStyles = {
  position: 'absolute',
  top: '0',
  left: '0',
  opacity: '0',
  pointerEvents: 'none'
};

function usePopperState(placement) {
  const [currentPopperStyles, setPopperStyles] = React.useState(popperStyles);
  const [currentArrowStyles, setArrowStyles] = React.useState({});
  const [currentPlacement, setPlacement] = React.useState(placement);
  const setState = React.useCallback(data => {
    const {
      styles,
      arrowStyles,
      placement: p
    } = data;
    setPopperStyles(styles);
    setArrowStyles(arrowStyles);
    setPlacement(p);
    return data;
  }, []);
  const state = {
    placement: currentPlacement,
    popperStyles: currentPopperStyles,
    arrowStyles: currentArrowStyles
  };
  return [state, setState];
}

function usePopper({
  placement = 'bottom',
  positionFixed = false,
  eventsEnabled = true,
  modifiers = {}
}) {
  const popperInstance = React.useRef(null);
  const [popperStyles, updatePopperState] = usePopperState(placement);
  const [referenceNode, referenceRef] = useCallbackRef();
  const [popperNode, popperRef] = useCallbackRef();
  const [arrowNode, arrowRef] = useCallbackRef();
  useDeepCompare.useDeepCompareEffect(() => {
    if (popperInstance.current !== null) {
      popperInstance.current.destroy();
    }

    if (referenceNode === null || popperNode === null) return; // @ts-ignore

    popperInstance.current = new PopperJS(referenceNode, popperNode, {
      placement,
      positionFixed,
      modifiers: _objectSpread({}, modifiers, {
        arrow: _objectSpread({}, modifiers && modifiers.arrow, {
          enabled: Boolean(arrowNode),
          element: arrowNode
        }),
        applyStyle: {
          enabled: false
        },
        updateStateModifier: {
          enabled: true,
          order: 900,
          fn: updatePopperState
        }
      })
    });
    return () => {
      if (popperInstance.current !== null) {
        popperInstance.current.destroy();
      }
    };
  }, [popperInstance, arrowNode, referenceNode, popperNode, placement, positionFixed, modifiers]);
  React.useEffect(() => {
    if (popperInstance.current === null) return;

    if (eventsEnabled) {
      popperInstance.current.enableEventListeners();
    } else {
      popperInstance.current.disableEventListeners();
    }
  }, [popperInstance, eventsEnabled]);
  React.useEffect(() => {
    if (popperInstance.current !== null) {
      popperInstance.current.scheduleUpdate();
    }
  }, [popperInstance]);
  return {
    popperInstance: popperInstance.current,
    reference: {
      ref: referenceRef
    },

    /**
     * @deprecated Due to typo. Use `reference` instead.
     */
    referrence: {
      ref: referenceRef
    },
    popper: {
      ref: popperRef,
      styles: popperStyles.popperStyles,
      placement: popperStyles.placement
    },
    arrow: {
      ref: arrowRef,
      styles: popperStyles.arrowStyles
    }
  };
}

exports.default = usePopper;
