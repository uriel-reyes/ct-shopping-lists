import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _pt from 'prop-types';
import _setTimeout from '@babel/runtime-corejs3/core-js-stable/set-timeout';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import { useRef, useEffect, useState, useCallback, cloneElement } from 'react';
import { isValidElementType } from 'react-is';
import isNil from 'lodash/isNil';
import usePopper from 'use-popper';
import { keyframes, css } from '@emotion/react';
import { useFieldId } from '@commercetools-uikit/hooks';
import { createSequentialId, warning } from '@commercetools-uikit/utils';
import _taggedTemplateLiteral from '@babel/runtime-corejs3/helpers/esm/taggedTemplateLiteral';
import _styled from '@emotion/styled/base';
import { designTokens } from '@commercetools-uikit/design-system';
import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';

var _templateObject, _templateObject2;
function ownKeys$1(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys$1(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys$1(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const growIn = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  from {\n    transform: scale(0);\n  }\n  to {\n    transform: scale(1);\n  }\n"])));
const growOut = keyframes(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  from {\n    transform: scale(1);\n  }\n  to {\n    transform: scale(0);\n  }\n"])));
const getAnimation = state => {
  switch (state) {
    case 'opened':
      return {
        animation: "".concat(growIn, " 80ms")
      };
    case 'exiting':
      return {
        animation: "".concat(growOut, " 80ms")
      };
    default:
      return {};
  }
};
const getOffsetMargin = _ref => {
  let placement = _ref.placement;
  const position = placement && placement.split('-')[0] || '';
  switch (position) {
    case 'left':
    case 'right':
      return "0 ".concat(designTokens.spacing10);
    case 'top':
    case 'bottom':
      return "".concat(designTokens.spacing10, " 0");
    default:
      return '';
  }
};
const Body = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e14le4p1"
} : {
  target: "e14le4p1",
  label: "Body"
})("font-family:inherit;border-radius:", designTokens.borderRadius6, ";padding:", designTokens.paddingForTooltip, ";border:none;box-shadow:", designTokens.shadowForTooltip, ";font-size:", designTokens.fontSize10, ";opacity:0.95;color:", designTokens.colorSurface, ";background-color:", designTokens.backgroundColorForTooltip, ";white-space:break-spaces;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvb2x0aXAuc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVEOEIiLCJmaWxlIjoidG9vbHRpcC5zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgdHlwZSB7IFRUb29sdGlwUHJvcHMsIFRUb29sdGlwU3RhdGUgfSBmcm9tICcuL3Rvb2x0aXAnO1xuXG50eXBlIFREZXNpZ25Ub2tlbk5hbWUgPSBrZXlvZiB0eXBlb2YgZGVzaWduVG9rZW5zO1xuXG5jb25zdCBncm93SW4gPSBrZXlmcmFtZXNgXG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gIH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmA7XG5cbmNvbnN0IGdyb3dPdXQgPSBrZXlmcmFtZXNgXG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gIH1cbmA7XG5cbmNvbnN0IGdldEFuaW1hdGlvbiA9IChzdGF0ZTogVFRvb2x0aXBTdGF0ZSkgPT4ge1xuICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgY2FzZSAnb3BlbmVkJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFuaW1hdGlvbjogYCR7Z3Jvd0lufSA4MG1zYCxcbiAgICAgIH07XG4gICAgY2FzZSAnZXhpdGluZyc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhbmltYXRpb246IGAke2dyb3dPdXR9IDgwbXNgLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG5jb25zdCBnZXRPZmZzZXRNYXJnaW4gPSAoeyBwbGFjZW1lbnQgfTogeyBwbGFjZW1lbnQ6IHN0cmluZyB9KSA9PiB7XG4gIGNvbnN0IHBvc2l0aW9uID0gKHBsYWNlbWVudCAmJiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXSkgfHwgJyc7XG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICdsZWZ0JzpcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICByZXR1cm4gYDAgJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfWA7XG4gICAgY2FzZSAndG9wJzpcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgcmV0dXJuIGAke2Rlc2lnblRva2Vucy5zcGFjaW5nMTB9IDBgO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czZ9O1xuICBwYWRkaW5nOiAke2Rlc2lnblRva2Vucy5wYWRkaW5nRm9yVG9vbHRpcH07XG4gIGJvcmRlcjogbm9uZTtcbiAgYm94LXNoYWRvdzogJHtkZXNpZ25Ub2tlbnMuc2hhZG93Rm9yVG9vbHRpcH07XG4gIGZvbnQtc2l6ZTogJHtkZXNpZ25Ub2tlbnMuZm9udFNpemUxMH07XG4gIG9wYWNpdHk6IDAuOTU7XG4gIGNvbG9yOiAke2Rlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JUb29sdGlwfTtcbiAgd2hpdGUtc3BhY2U6IGJyZWFrLXNwYWNlcztcbmA7XG5cbi8vIGhlcmUgd2UgdXNlIG9iamVjdCBzdHlsZXMgc28gd2UgY2FuIHNwcmVhZCB0aGVzZVxuLy8gd2l0aCB0aGUgc3R5bGVzIHdlIGdldCBmcm9tIHJlYWN0LXBvcHBlciA6RFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBjb25zdCBnZXRCb2R5U3R5bGVzID0gKHtcbiAgY29uc3RyYWludCxcbiAgcGxhY2VtZW50LFxuICBjdXN0b21TdHlsZXMsXG59OiB7XG4gIGNvbnN0cmFpbnQ6IFRUb29sdGlwUHJvcHNbJ2hvcml6b250YWxDb25zdHJhaW50J107XG4gIHBsYWNlbWVudDogc3RyaW5nO1xuICBjdXN0b21TdHlsZXM/OiBDU1NQcm9wZXJ0aWVzO1xufSk6IENTU1Byb3BlcnRpZXMgPT4ge1xuICBjb25zdCBjb25zdHJhaW50VG9rZW5OYW1lID0gYGNvbnN0cmFpbnQke2NvbnN0cmFpbnR9YDtcbiAgcmV0dXJuIHtcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgbWFyZ2luOiBgJHtnZXRPZmZzZXRNYXJnaW4oeyBwbGFjZW1lbnQgfSl9ICFpbXBvcnRhbnRgLFxuICAgIG1heFdpZHRoOlxuICAgICAgY29uc3RyYWludFRva2VuTmFtZSBpbiBkZXNpZ25Ub2tlbnNcbiAgICAgICAgPyBkZXNpZ25Ub2tlbnNbY29uc3RyYWludFRva2VuTmFtZSBhcyBURGVzaWduVG9rZW5OYW1lXVxuICAgICAgICA6ICdhdXRvJyxcbiAgICAvLyBzbyBob3ZlcmluZyBvdmVyIHRoZSB0b29sdGlwIHdoZW4gdGhlIHRvb2x0aXAgb3ZlcmxhcHMgdGhlIGNvbXBvbmVudFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICB3aWR0aDogY29uc3RyYWludCA9PT0gJ2F1dG8nID8gJ2F1dG8nIDogdW5kZWZpbmVkLFxuICAgIHpJbmRleDogMTAwMCxcbiAgICAuLi5jdXN0b21TdHlsZXMsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VG9vbHRpcFN0eWxlcyA9ICh0b29sdGlwU3RhdGU6IFRUb29sdGlwU3RhdGUpID0+XG4gIGdldEFuaW1hdGlvbih0b29sdGlwU3RhdGUpO1xuXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgPiA6ZGlzYWJsZWQge1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB9XG5gO1xuIl19 */"));

// here we use object styles so we can spread these
// with the styles we get from react-popper :D
// eslint-disable-next-line import/prefer-default-export
const getBodyStyles = _ref2 => {
  let constraint = _ref2.constraint,
    placement = _ref2.placement,
    customStyles = _ref2.customStyles;
  const constraintTokenName = "constraint".concat(constraint);
  return _objectSpread$1({
    fontFamily: 'inherit',
    margin: "".concat(getOffsetMargin({
      placement
    }), " !important"),
    maxWidth: constraintTokenName in designTokens ? designTokens[constraintTokenName] : 'auto',
    // so hovering over the tooltip when the tooltip overlaps the component
    pointerEvents: 'none',
    width: constraint === 'auto' ? 'auto' : undefined,
    zIndex: 1000
  }, customStyles);
};
const getTooltipStyles = tooltipState => getAnimation(tooltipState);
const Wrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e14le4p0"
} : {
  target: "e14le4p0",
  label: "Wrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "18fwu9s",
  styles: "display:inline-block;cursor:not-allowed;>:disabled{pointer-events:none;}"
} : {
  name: "18fwu9s",
  styles: "display:inline-block;cursor:not-allowed;>:disabled{pointer-events:none;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvb2x0aXAuc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1HaUMiLCJmaWxlIjoidG9vbHRpcC5zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgdHlwZSB7IFRUb29sdGlwUHJvcHMsIFRUb29sdGlwU3RhdGUgfSBmcm9tICcuL3Rvb2x0aXAnO1xuXG50eXBlIFREZXNpZ25Ub2tlbk5hbWUgPSBrZXlvZiB0eXBlb2YgZGVzaWduVG9rZW5zO1xuXG5jb25zdCBncm93SW4gPSBrZXlmcmFtZXNgXG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gIH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmA7XG5cbmNvbnN0IGdyb3dPdXQgPSBrZXlmcmFtZXNgXG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gIH1cbmA7XG5cbmNvbnN0IGdldEFuaW1hdGlvbiA9IChzdGF0ZTogVFRvb2x0aXBTdGF0ZSkgPT4ge1xuICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgY2FzZSAnb3BlbmVkJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFuaW1hdGlvbjogYCR7Z3Jvd0lufSA4MG1zYCxcbiAgICAgIH07XG4gICAgY2FzZSAnZXhpdGluZyc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhbmltYXRpb246IGAke2dyb3dPdXR9IDgwbXNgLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG5jb25zdCBnZXRPZmZzZXRNYXJnaW4gPSAoeyBwbGFjZW1lbnQgfTogeyBwbGFjZW1lbnQ6IHN0cmluZyB9KSA9PiB7XG4gIGNvbnN0IHBvc2l0aW9uID0gKHBsYWNlbWVudCAmJiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXSkgfHwgJyc7XG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICdsZWZ0JzpcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICByZXR1cm4gYDAgJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfWA7XG4gICAgY2FzZSAndG9wJzpcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgcmV0dXJuIGAke2Rlc2lnblRva2Vucy5zcGFjaW5nMTB9IDBgO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGJvcmRlci1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czZ9O1xuICBwYWRkaW5nOiAke2Rlc2lnblRva2Vucy5wYWRkaW5nRm9yVG9vbHRpcH07XG4gIGJvcmRlcjogbm9uZTtcbiAgYm94LXNoYWRvdzogJHtkZXNpZ25Ub2tlbnMuc2hhZG93Rm9yVG9vbHRpcH07XG4gIGZvbnQtc2l6ZTogJHtkZXNpZ25Ub2tlbnMuZm9udFNpemUxMH07XG4gIG9wYWNpdHk6IDAuOTU7XG4gIGNvbG9yOiAke2Rlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JUb29sdGlwfTtcbiAgd2hpdGUtc3BhY2U6IGJyZWFrLXNwYWNlcztcbmA7XG5cbi8vIGhlcmUgd2UgdXNlIG9iamVjdCBzdHlsZXMgc28gd2UgY2FuIHNwcmVhZCB0aGVzZVxuLy8gd2l0aCB0aGUgc3R5bGVzIHdlIGdldCBmcm9tIHJlYWN0LXBvcHBlciA6RFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBjb25zdCBnZXRCb2R5U3R5bGVzID0gKHtcbiAgY29uc3RyYWludCxcbiAgcGxhY2VtZW50LFxuICBjdXN0b21TdHlsZXMsXG59OiB7XG4gIGNvbnN0cmFpbnQ6IFRUb29sdGlwUHJvcHNbJ2hvcml6b250YWxDb25zdHJhaW50J107XG4gIHBsYWNlbWVudDogc3RyaW5nO1xuICBjdXN0b21TdHlsZXM/OiBDU1NQcm9wZXJ0aWVzO1xufSk6IENTU1Byb3BlcnRpZXMgPT4ge1xuICBjb25zdCBjb25zdHJhaW50VG9rZW5OYW1lID0gYGNvbnN0cmFpbnQke2NvbnN0cmFpbnR9YDtcbiAgcmV0dXJuIHtcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgbWFyZ2luOiBgJHtnZXRPZmZzZXRNYXJnaW4oeyBwbGFjZW1lbnQgfSl9ICFpbXBvcnRhbnRgLFxuICAgIG1heFdpZHRoOlxuICAgICAgY29uc3RyYWludFRva2VuTmFtZSBpbiBkZXNpZ25Ub2tlbnNcbiAgICAgICAgPyBkZXNpZ25Ub2tlbnNbY29uc3RyYWludFRva2VuTmFtZSBhcyBURGVzaWduVG9rZW5OYW1lXVxuICAgICAgICA6ICdhdXRvJyxcbiAgICAvLyBzbyBob3ZlcmluZyBvdmVyIHRoZSB0b29sdGlwIHdoZW4gdGhlIHRvb2x0aXAgb3ZlcmxhcHMgdGhlIGNvbXBvbmVudFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICB3aWR0aDogY29uc3RyYWludCA9PT0gJ2F1dG8nID8gJ2F1dG8nIDogdW5kZWZpbmVkLFxuICAgIHpJbmRleDogMTAwMCxcbiAgICAuLi5jdXN0b21TdHlsZXMsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VG9vbHRpcFN0eWxlcyA9ICh0b29sdGlwU3RhdGU6IFRUb29sdGlwU3RhdGUpID0+XG4gIGdldEFuaW1hdGlvbih0b29sdGlwU3RhdGUpO1xuXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgPiA6ZGlzYWJsZWQge1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB9XG5gO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const sequentialId = createSequentialId('tooltip-');
const TooltipWrapper = props => jsx(Fragment, {
  children: props.children
});
TooltipWrapper.displayName = 'TooltipWrapperComponent';
const tooltipDefaultProps = {
  showAfter: 300,
  closeAfter: 200,
  horizontalConstraint: 'scale',
  off: false,
  placement: 'top'
};
const Tooltip = props => {
  var _props$components, _props$components2, _props$components3, _props$components4, _props$components5, _props$components6, _props$styles;
  const enterTimer = useRef();
  const leaveTimer = useRef();
  if ((_props$components = props.components) !== null && _props$components !== void 0 && _props$components.BodyComponent) {
    process.env.NODE_ENV !== "production" ? warning(isValidElementType(props.components.BodyComponent), "ui-kit/Tooltip: the prop 'components.BodyComponent' is not a valid React element.") : void 0;
  }
  if ((_props$components2 = props.components) !== null && _props$components2 !== void 0 && _props$components2.TooltipWrapperComponent) {
    process.env.NODE_ENV !== "production" ? warning(isValidElementType(props.components.TooltipWrapperComponent), "ui-kit/Tooltip: the prop 'components.TooltipWrapperComponent' is not a valid React element.") : void 0;
  }
  if ((_props$components3 = props.components) !== null && _props$components3 !== void 0 && _props$components3.WrapperComponent) {
    process.env.NODE_ENV !== "production" ? warning(isValidElementType(props.components.WrapperComponent), "ui-kit/Tooltip: the prop 'components.WrapperComponent' is not a valid React element.") : void 0;
  }
  useEffect(() => {
    return () => {
      if (enterTimer.current) {
        clearTimeout(enterTimer.current);
      }
      if (leaveTimer.current) {
        clearTimeout(leaveTimer.current);
      }
    };
  }, []);
  const _usePopper = usePopper({
      placement: props.placement,
      modifiers: props.modifiers
    }),
    reference = _usePopper.reference,
    popper = _usePopper.popper,
    popperInstance = _usePopper.popperInstance;
  const _useState = useState('closed'),
    _useState2 = _slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  const isControlled = !isNil(props.isOpen);
  const tooltipIsOpen = isControlled ? props.isOpen : state === 'opened' || state === 'exiting';
  const id = useFieldId(props.id, sequentialId);
  const onClose = props.onClose;
  const handleClose = useCallback(event => {
    if (!isControlled) {
      setState('closed');
    }
    if (onClose) {
      onClose(event);
    }
  }, [isControlled, onClose]);
  const _props$children$props = props.children.props,
    onFocus = _props$children$props.onFocus,
    onMouseOver = _props$children$props.onMouseOver;
  const showAfter = props.showAfter,
    onOpen = props.onOpen;
  const handleEnter = useCallback(event => {
    if (event) {
      if (event.type === 'mouseover' && onMouseOver) {
        onMouseOver(event);
      }
      if (event.type === 'focus' && onFocus) {
        onFocus(event);
      }
      if (state !== 'opened' && !isControlled) {
        setState('entering');
        enterTimer.current = _setTimeout(() => {
          setState('opened');
          if (onOpen) {
            onOpen(event);
          }
        }, showAfter);
      }
      event.preventDefault();
      event.stopPropagation();
    }
  }, [onFocus, onOpen, onMouseOver, isControlled, state, showAfter]);
  const _props$children$props2 = props.children.props,
    onBlur = _props$children$props2.onBlur,
    onMouseLeave = _props$children$props2.onMouseLeave;
  const closeAfter = props.closeAfter;
  const handleLeave = useCallback(event => {
    clearTimeout(enterTimer.current);
    clearTimeout(leaveTimer.current);
    if (event.type === 'mouseleave' && onMouseLeave) {
      onMouseLeave(event);
    }
    if (event.type === 'blur' && onBlur) {
      onBlur(event);
    }
    if (closeAfter && state === 'opened') {
      leaveTimer.current = _setTimeout(() => {
        const tooltipElement = popperInstance === null || popperInstance === void 0 ? void 0 : popperInstance.popper.querySelector('[data-testid="tooltip-message-wrapper"]');
        if (tooltipElement) {
          tooltipElement.addEventListener('animationend', () => handleClose());
        } else {
          handleClose();
        }
        setState('exiting');
      }, closeAfter);
    } else {
      handleClose(event);
    }
  }, [closeAfter, onBlur, onMouseLeave, handleClose, state, popperInstance]);
  useEffect(() => {
    // if tooltip was open, and then component
    // updated to be off, we should close the tooltip
    if (state === 'opened' && props.off) {
      if (closeAfter) {
        leaveTimer.current = _setTimeout(() => {
          handleClose();
        }, closeAfter);
      } else {
        handleClose();
      }
    }
  }, [props.off, closeAfter, handleClose, state]);
  const childrenProps = {
    // don't pass event listeners to children
    onFocus: null,
    onMouseOver: null,
    onMouseLeave: null,
    onBlur: null
  };
  const tooltipProps = !props.off ? {
    'aria-describedby': tooltipIsOpen ? id : null,
    // for seo and accessibility, we add the tooltip's title
    // as a native title when the title is hidden
    title: !tooltipIsOpen && state !== 'entering' && typeof props.title === 'string' ? props.title : null
  } : {};
  const eventListeners = !props.off ? {
    onMouseEnter: handleEnter,
    onMouseLeave: handleLeave,
    onFocus: handleEnter,
    onBlur: handleLeave
  } : {};
  const WrapperComponent = ((_props$components4 = props.components) === null || _props$components4 === void 0 ? void 0 : _props$components4.WrapperComponent) || Wrapper;
  const BodyComponent = ((_props$components5 = props.components) === null || _props$components5 === void 0 ? void 0 : _props$components5.BodyComponent) || Body;
  const TooltipWrapperComponent = ((_props$components6 = props.components) === null || _props$components6 === void 0 ? void 0 : _props$components6.TooltipWrapperComponent) || TooltipWrapper;
  return jsxs(Fragment, {
    children: [jsx(WrapperComponent, _objectSpread(_objectSpread({}, eventListeners), {}, {
      // @ts-expect-error: yes, ref can be undefined
      ref: reference.ref,
      children: /*#__PURE__*/cloneElement(props.children, _objectSpread(_objectSpread({}, childrenProps), tooltipProps))
    })), tooltipIsOpen && jsx(TooltipWrapperComponent, {
      children: jsx("div", {
        // ref accepts `LegacyRef`, which is a union of `RefObject` and `string`
        // propper.ref returns `RefObject`
        ref: popper.ref,
        css: /*#__PURE__*/css(_objectSpread(_objectSpread({}, popper.styles), getBodyStyles({
          constraint: props.horizontalConstraint,
          placement: popper.placement,
          customStyles: (_props$styles = props.styles) === null || _props$styles === void 0 ? void 0 : _props$styles.body
        })), process.env.NODE_ENV === "production" ? "" : ";label:Tooltip;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
        "data-placement": popper.placement,
        children: jsx("div", {
          css: /*#__PURE__*/css(_objectSpread({}, getTooltipStyles(state)), process.env.NODE_ENV === "production" ? "" : ";label:Tooltip;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
          "data-testid": "tooltip-message-wrapper",
          children: jsx(BodyComponent, {
            children: props.title
          })
        })
      })
    })]
  });
};
Tooltip.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _pt.element.isRequired,
  showAfter: _pt.number,
  closeAfter: _pt.number,
  styles: _pt.objectOf(_pt.any),
  off: _pt.bool.isRequired,
  id: _pt.string,
  onClose: _pt.func,
  onOpen: _pt.func,
  isOpen: _pt.bool,
  placement: _pt.oneOf(['top', 'top-start', 'top-end', 'right', 'right-start', 'right-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end']),
  title: _pt.string.isRequired,
  modifiers: _pt.any,
  components: _pt.shape({
    BodyComponent: _pt.elementType,
    TooltipWrapperComponent: _pt.elementType,
    WrapperComponent: _pt.elementType
  }),
  horizontalConstraint: _pt.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto'])
} : {};
Tooltip.displayName = 'ToolTip';
Tooltip.defaultProps = tooltipDefaultProps;
var Tooltip$1 = Tooltip;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { Tooltip$1 as default, version };
