'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _Object$fromEntries = require('@babel/runtime-corejs3/core-js-stable/object/from-entries');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$entries = require('@babel/runtime-corejs3/core-js-stable/object/entries');
var isPropValid = require('@emotion/is-prop-valid');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var react = require('react');
var _trimInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/trim');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$fromEntries__default = /*#__PURE__*/_interopDefault(_Object$fromEntries);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$entries__default = /*#__PURE__*/_interopDefault(_Object$entries);
var isPropValid__default = /*#__PURE__*/_interopDefault(isPropValid);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var _trimInstanceProperty__default = /*#__PURE__*/_interopDefault(_trimInstanceProperty);

const regexpData$1 = /^data-/;
function filterDataAttributes(obj) {
  var _context;
  return _Object$fromEntries__default["default"](_filterInstanceProperty__default["default"](_context = _Object$entries__default["default"](obj)).call(_context, _ref => {
    let _ref2 = _slicedToArray(_ref, 1),
      propFromEntry = _ref2[0];
    return regexpData$1.test(propFromEntry);
  }));
}

const regexpData = /^aria-/;
function filterAriaAttributes(obj) {
  var _context;
  return _Object$fromEntries__default["default"](_filterInstanceProperty__default["default"](_context = _Object$entries__default["default"](obj)).call(_context, _ref => {
    let _ref2 = _slicedToArray(_ref, 1),
      propFromEntry = _ref2[0];
    return regexpData.test(propFromEntry);
  }));
}

function filterInvalidAttributes(obj) {
  var _context;
  return _Object$fromEntries__default["default"](_filterInstanceProperty__default["default"](_context = _Object$entries__default["default"](obj)).call(_context, _ref => {
    let _ref2 = _slicedToArray(_ref, 1),
      propFromEntry = _ref2[0];
    return isPropValid__default["default"](propFromEntry);
  }));
}

// Given a string, validates that it has the correct format
// to be a number, with decimal separators and negative sign.
function isNumberish(number) {
  return !/[^(\-?)\d,.\s]/.test(number);
}

// To avoid getting the following error, we type the entire function.
//   "Assertions require every name in the call target to be declared with an explicit type annotation."
// See https://github.com/microsoft/TypeScript/pull/33622#issuecomment-575301357
const isProduction = process.env.NODE_ENV === 'production';

// Throw an error if the condition fails
// Strip out error messages for production
// > Not providing an inline default argument for message as the result is smaller
const warning = function (condition, message) {
  var _context;
  let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Warning';
  if (isProduction || condition) {
    return;
  }
  console.warn(_concatInstanceProperty__default["default"](_context = "".concat(prefix, ": ")).call(_context, message));
};
const useWarning = (condition, message) => {
  react.useEffect(() => {
    process.env.NODE_ENV !== "production" ? warning(condition, message) : void 0;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
};

const getMessage$1 = (componentName, additionalMessage) => {
  var _context;
  return _concatInstanceProperty__default["default"](_context = "\"".concat(componentName, "\" has been deprecated and will be removed in the next major version.")).call(_context, additionalMessage ? ' ' + additionalMessage : '');
};
const warnDeprecatedComponent = function (componentName) {
  let additionalMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return process.env.NODE_ENV !== "production" ? warning(false, getMessage$1(componentName, additionalMessage)) : void 0;
};
const useWarnDeprecatedComponent = function (componentName) {
  let additionalMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return useWarning(false, getMessage$1(componentName, additionalMessage));
};

const getMessage = function (propName, componentName) {
  var _context, _context2;
  let additionalMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return _concatInstanceProperty__default["default"](_context = _concatInstanceProperty__default["default"](_context2 = "\"".concat(propName, "\" property of \"")).call(_context2, componentName, "\" component has been deprecated and will be removed in the next major version.")).call(_context, additionalMessage ? ' ' + additionalMessage : '');
};
const warnDeprecatedProp = function (condition, propName, componentName) {
  let additionalMessage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  process.env.NODE_ENV !== "production" ? warning(condition, getMessage(propName, componentName, additionalMessage)) : void 0;
};
const useWarnDeprecatedProp = function (condition, propName, componentName) {
  let additionalMessage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  useWarning(condition, getMessage(propName, componentName, additionalMessage));
};

// Whenever a field requires a unique id, this factory can be used
// to create a function returning unique ids.
//
// Use it as
//  const sequentialId = createSequentialId('text-field-');
//  const element = <div id={sequentialId()}>foo</div>
function createSequentialId(prefix) {
  let id = 0;
  return () => {
    var _context;
    id += 1;
    return _concatInstanceProperty__default["default"](_context = "".concat(prefix)).call(_context, id);
  };
}

const getFieldId = (props, state, createId) => props.id || state.id || createId();
var getFieldId$1 = getFieldId;

// Attempts to parse a string containing a time in either 12h or 24h format,
// with precision of up to three milliseconds
// Valid inputs:
//   13:00
//   3:00
//   3 PM
//   14:5 am
//   13:00:00.000
//   13:00:60
//   13:00:59.908
// Returns an object containing
//   { hours, minutes, seconds, milliseconds }
// or null
// eslint-disable-next-line import/prefer-default-export
const parseTime = rawTime => {
  if (!rawTime || typeof rawTime !== 'string') return null;
  const time = _trimInstanceProperty__default["default"](rawTime).call(rawTime).toLowerCase();
  const match = time.match(/^(\d{1,2})(?::(\d{1,2})(?::(\d{1,2})(?:\.(\d{1,3}))?)?)?\s*(am|pm)?$/);
  if (!match) return null;

  // As we accept eg "3 AM" there might not be a value for minutes, seconds or
  // milliseconds, so we default them
  const _match = _slicedToArray(match, 6),
    hours = _match[1],
    minutes = _match[2],
    seconds = _match[3],
    milliseconds = _match[4],
    amPm = _match[5];
  const parsedMinutes = Number(minutes !== null && minutes !== void 0 ? minutes : '00');
  const parsedSeconds = Number(seconds !== null && seconds !== void 0 ? seconds : '00');
  // Parses the number as a fraction to ensure that .5, .05 and .005 are
  // parsed correctily (they are 500, 50 and 5 respectively).
  const parsedMilliseconds = Number("0.".concat(milliseconds !== null && milliseconds !== void 0 ? milliseconds : '000')) * 1000;
  // edge-case: allow 24:00, but nothing over it
  const parsedHours = Number(hours) === 24 && parsedMinutes === 0 && parsedSeconds === 0 && parsedMilliseconds === 0 ? 0 : Number(hours);
  if (amPm) {
    if (parsedHours > 12) return null;
    if (parsedHours === 0) return null;
    if (parsedMinutes > 59) return null;
  } else {
    if (parsedHours > 23) return null;
    if (parsedMinutes > 59) return null;
  }
  if (parsedSeconds > 59) return null;
  if (parsedMilliseconds > 999) return null;

  // 12 pm (just like 24:00) would be on the next day, so we treat it as an
  // invalid value to avoid edge cases like the day jumping forward
  // if (amPm === 'pm' && Number(hours) === 12) return null;

  const hourOffset = (() => {
    if (amPm === 'am' && parsedHours === 12) return -12;
    if (amPm === 'am') return 0;
    if (amPm === 'pm' && parsedHours !== 12) return 12;
    return 0;
  })();
  return {
    hours: parsedHours + hourOffset,
    minutes: parsedMinutes,
    seconds: parsedSeconds,
    milliseconds: parsedMilliseconds
  };
};
var parseTime$1 = parseTime;

// eslint-disable-next-line import/prefer-default-export
const canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

const SafeHTMLElement = canUseDOM ? window.HTMLElement : {};
var SafeHTMLElement$1 = SafeHTMLElement;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports.SafeHTMLElement = SafeHTMLElement$1;
exports.canUseDOM = canUseDOM;
exports.createSequentialId = createSequentialId;
exports.filterAriaAttributes = filterAriaAttributes;
exports.filterDataAttributes = filterDataAttributes;
exports.filterInvalidAttributes = filterInvalidAttributes;
exports.getFieldId = getFieldId$1;
exports.isNumberish = isNumberish;
exports.parseTime = parseTime$1;
exports.useWarnDeprecatedComponent = useWarnDeprecatedComponent;
exports.useWarnDeprecatedProp = useWarnDeprecatedProp;
exports.useWarning = useWarning;
exports.version = version;
exports.warnDeprecatedComponent = warnDeprecatedComponent;
exports.warnDeprecatedProp = warnDeprecatedProp;
exports.warning = warning;
