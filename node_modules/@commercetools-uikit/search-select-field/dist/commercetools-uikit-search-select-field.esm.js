import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _pt from 'prop-types';
import _someInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/some';
import _Object$values from '@babel/runtime-corejs3/core-js-stable/object/values';
import _Array$isArray from '@babel/runtime-corejs3/core-js-stable/array/is-array';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import { isValidElement } from 'react';
import { createSequentialId, warning, filterDataAttributes } from '@commercetools-uikit/utils';
import Constraints from '@commercetools-uikit/constraints';
import { useFieldId } from '@commercetools-uikit/hooks';
import Spacings from '@commercetools-uikit/spacings';
import FieldLabel from '@commercetools-uikit/field-label';
import SearchSelectInput from '@commercetools-uikit/search-select-input';
import FieldErrors from '@commercetools-uikit/field-errors';
import { jsx, jsxs } from '@emotion/react/jsx-runtime';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const hasErrors = errors => {
  var _context;
  return errors && _someInstanceProperty(_context = _Object$values(errors)).call(_context, Boolean);
};
const sequentialId = createSequentialId('search-select-field-');
const sequentialErrorsId = createSequentialId('search-select-field-error-')();
const defaultProps = {
  controlShouldRenderValue: true
};
const SearchSelectField = props => {
  const hasError = Boolean(props.touched) && hasErrors(props.errors);
  const id = useFieldId(props.id, sequentialId);
  if (!props.isReadOnly) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.onChange === 'function', 'SearchSelectField: `onChange` is required when field is not read only.') : void 0;
  }
  if (props.hintIcon) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.hint === 'string' || /*#__PURE__*/isValidElement(props.hint), 'SearchSelectField: `hint` is required to be string or ReactNode if hintIcon is present') : void 0;
  }
  if (props.isMulti) {
    process.env.NODE_ENV !== "production" ? warning(_Array$isArray(props.value), 'SearchSelectField: `value` is expected to be an array of string when isMulti is true') : void 0;
    process.env.NODE_ENV !== "production" ? warning(typeof props.touched === 'undefined' || _Array$isArray(props.touched), 'SearchSelectField: `touched` is expected to be an array of boolean when isMulti is true') : void 0;
  }
  return jsx(Constraints.Horizontal, {
    max: props.horizontalConstraint,
    children: jsxs(Spacings.Stack, {
      scale: "xs",
      children: [jsx(FieldLabel, {
        title: props.title,
        hint: props.hint,
        description: props.description,
        onInfoButtonClick: props.onInfoButtonClick,
        hintIcon: props.hintIcon,
        badge: props.badge,
        hasRequiredIndicator: props.isRequired,
        htmlFor: id
      }), jsx(SearchSelectInput, _objectSpread(_objectSpread({}, filterDataAttributes(props)), {}, {
        horizontalConstraint: "scale",
        hasError: hasError,
        "aria-label": props['aria-label'],
        "aria-labelledby": props['aria-labelledby'],
        "aria-invalid": hasError,
        "aria-errormessage": sequentialErrorsId,
        isAutofocussed: props.isAutofocussed,
        backspaceRemovesValue: props.backspaceRemovesValue,
        components: props.components,
        filterOption: props.filterOption,
        id: id,
        containerId: props.containerId,
        isClearable: props.isClearable,
        isDisabled: props.isDisabled,
        isReadOnly: props.isReadOnly,
        isOptionDisabled: props.isOptionDisabled,
        isMulti: props.isMulti,
        hasWarning: props.hasWarning,
        maxMenuHeight: props.maxMenuHeight,
        menuPortalTarget: props.menuPortalTarget,
        menuPortalZIndex: props.menuPortalZIndex,
        menuShouldBlockScroll: props.menuShouldBlockScroll,
        name: props.name,
        noOptionsMessage: props.noOptionsMessage,
        loadingMessage: props.loadingMessage,
        onBlur: props.onBlur,
        onChange: props.onChange,
        onFocus: props.onFocus,
        onInputChange: props.onInputChange,
        placeholder: props.placeholder,
        tabIndex: props.tabIndex,
        tabSelectsValue: props.tabSelectsValue,
        value: props.value
        // Async react-select props
        ,
        loadOptions: props.loadOptions,
        cacheOptions: props.cacheOptions,
        showOptionGroupDivider: props.showOptionGroupDivider,
        optionType: props.optionType,
        controlShouldRenderValue: props.controlShouldRenderValue,
        iconLeft: props.iconLeft
      })), jsx(FieldErrors, {
        id: sequentialErrorsId,
        errors: props.errors,
        isVisible: hasError,
        renderError: props.renderError
      })]
    })
  });
};
SearchSelectField.propTypes = process.env.NODE_ENV !== "production" ? {
  horizontalConstraint: _pt.oneOf([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto']),
  hasError: _pt.bool,
  hasWarning: _pt.bool,
  isReadOnly: _pt.bool,
  isDisabled: _pt.bool,
  isClearable: _pt.bool,
  isAutofocussed: _pt.bool,
  menuPortalZIndex: _pt.number,
  menuShouldBlockScroll: _pt.bool,
  showOptionGroupDivider: _pt.bool,
  onBlur: _pt.func,
  onChange: _pt.func,
  loadingMessage: _pt.oneOfType([_pt.string, _pt.func]),
  optionType: _pt.oneOf(['single-property', 'double-property', 'multiple-properties']),
  errors: _pt.objectOf(_pt.bool),
  renderError: _pt.func,
  isRequired: _pt.bool,
  touched: _pt.oneOfType([_pt.arrayOf(_pt.bool), _pt.bool]),
  title: _pt.node.isRequired,
  hint: _pt.node,
  description: _pt.node,
  onInfoButtonClick: _pt.func,
  hintIcon: _pt.element,
  badge: _pt.node,
  iconLeft: _pt.node
} : {};
SearchSelectField.defaultProps = defaultProps;
SearchSelectField.displayName = 'SearchSelectField';
/**
 * Use this function to convert the Formik `errors` object type to
 * our custom field errors type.
 * This is primarly useful when using TypeScript.
 */
SearchSelectField.toFieldErrors = function toFieldErrors(errors) {
  return errors;
};
var SearchSelectField$1 = SearchSelectField;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { SearchSelectField$1 as default, version };
