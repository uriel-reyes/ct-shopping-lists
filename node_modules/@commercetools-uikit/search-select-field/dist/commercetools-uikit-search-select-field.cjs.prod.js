'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var _someInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/some');
var _Object$values = require('@babel/runtime-corejs3/core-js-stable/object/values');
require('@babel/runtime-corejs3/core-js-stable/array/is-array');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
require('react');
var utils = require('@commercetools-uikit/utils');
var Constraints = require('@commercetools-uikit/constraints');
var hooks = require('@commercetools-uikit/hooks');
var Spacings = require('@commercetools-uikit/spacings');
var FieldLabel = require('@commercetools-uikit/field-label');
var SearchSelectInput = require('@commercetools-uikit/search-select-input');
var FieldErrors = require('@commercetools-uikit/field-errors');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _someInstanceProperty__default = /*#__PURE__*/_interopDefault(_someInstanceProperty);
var _Object$values__default = /*#__PURE__*/_interopDefault(_Object$values);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);
var Spacings__default = /*#__PURE__*/_interopDefault(Spacings);
var FieldLabel__default = /*#__PURE__*/_interopDefault(FieldLabel);
var SearchSelectInput__default = /*#__PURE__*/_interopDefault(SearchSelectInput);
var FieldErrors__default = /*#__PURE__*/_interopDefault(FieldErrors);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const hasErrors = errors => {
  var _context;
  return errors && _someInstanceProperty__default["default"](_context = _Object$values__default["default"](errors)).call(_context, Boolean);
};
const sequentialId = utils.createSequentialId('search-select-field-');
const sequentialErrorsId = utils.createSequentialId('search-select-field-error-')();
const defaultProps = {
  controlShouldRenderValue: true
};
const SearchSelectField = props => {
  const hasError = Boolean(props.touched) && hasErrors(props.errors);
  const id = hooks.useFieldId(props.id, sequentialId);
  if (!props.isReadOnly) ;
  if (props.hintIcon) ;
  if (props.isMulti) ;
  return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
      scale: "xs",
      children: [jsxRuntime.jsx(FieldLabel__default["default"], {
        title: props.title,
        hint: props.hint,
        description: props.description,
        onInfoButtonClick: props.onInfoButtonClick,
        hintIcon: props.hintIcon,
        badge: props.badge,
        hasRequiredIndicator: props.isRequired,
        htmlFor: id
      }), jsxRuntime.jsx(SearchSelectInput__default["default"], _objectSpread(_objectSpread({}, utils.filterDataAttributes(props)), {}, {
        horizontalConstraint: "scale",
        hasError: hasError,
        "aria-label": props['aria-label'],
        "aria-labelledby": props['aria-labelledby'],
        "aria-invalid": hasError,
        "aria-errormessage": sequentialErrorsId,
        isAutofocussed: props.isAutofocussed,
        backspaceRemovesValue: props.backspaceRemovesValue,
        components: props.components,
        filterOption: props.filterOption,
        id: id,
        containerId: props.containerId,
        isClearable: props.isClearable,
        isDisabled: props.isDisabled,
        isReadOnly: props.isReadOnly,
        isOptionDisabled: props.isOptionDisabled,
        isMulti: props.isMulti,
        hasWarning: props.hasWarning,
        maxMenuHeight: props.maxMenuHeight,
        menuPortalTarget: props.menuPortalTarget,
        menuPortalZIndex: props.menuPortalZIndex,
        menuShouldBlockScroll: props.menuShouldBlockScroll,
        name: props.name,
        noOptionsMessage: props.noOptionsMessage,
        loadingMessage: props.loadingMessage,
        onBlur: props.onBlur,
        onChange: props.onChange,
        onFocus: props.onFocus,
        onInputChange: props.onInputChange,
        placeholder: props.placeholder,
        tabIndex: props.tabIndex,
        tabSelectsValue: props.tabSelectsValue,
        value: props.value
        // Async react-select props
        ,
        loadOptions: props.loadOptions,
        cacheOptions: props.cacheOptions,
        showOptionGroupDivider: props.showOptionGroupDivider,
        optionType: props.optionType,
        controlShouldRenderValue: props.controlShouldRenderValue,
        iconLeft: props.iconLeft
      })), jsxRuntime.jsx(FieldErrors__default["default"], {
        id: sequentialErrorsId,
        errors: props.errors,
        isVisible: hasError,
        renderError: props.renderError
      })]
    })
  });
};
SearchSelectField.propTypes = {};
SearchSelectField.defaultProps = defaultProps;
SearchSelectField.displayName = 'SearchSelectField';
/**
 * Use this function to convert the Formik `errors` object type to
 * our custom field errors type.
 * This is primarly useful when using TypeScript.
 */
SearchSelectField.toFieldErrors = function toFieldErrors(errors) {
  return errors;
};
var SearchSelectField$1 = SearchSelectField;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = SearchSelectField$1;
exports.version = version;
