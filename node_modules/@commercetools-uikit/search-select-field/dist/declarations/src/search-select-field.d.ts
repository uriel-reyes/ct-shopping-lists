import { type ReactNode, type MouseEvent, type KeyboardEvent, type ReactElement } from 'react';
import type { ActionMeta, GroupBase } from 'react-select';
import type { AsyncProps } from 'react-select/async';
type ReactSelectAsyncProps = AsyncProps<unknown, boolean, GroupBase<unknown>>;
type TCustomEvent = {
    target: {
        id?: ReactSelectAsyncProps['inputId'];
        name?: ReactSelectAsyncProps['name'];
        value?: unknown;
    };
    persist: () => void;
};
type TErrorRenderer = (key: string, error?: boolean) => ReactNode;
type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
export type TSearchSelectFieldProps = {
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    'aria-label'?: ReactSelectAsyncProps['aria-label'];
    'aria-labelledby'?: ReactSelectAsyncProps['aria-labelledby'];
    id?: ReactSelectAsyncProps['inputId'];
    containerId?: ReactSelectAsyncProps['id'];
    name?: ReactSelectAsyncProps['name'];
    placeholder?: ReactSelectAsyncProps['placeholder'];
    components?: ReactSelectAsyncProps['components'];
    controlShouldRenderValue?: ReactSelectAsyncProps['controlShouldRenderValue'];
    tabIndex?: ReactSelectAsyncProps['tabIndex'];
    value?: ReactSelectAsyncProps['value'];
    backspaceRemovesValue?: ReactSelectAsyncProps['backspaceRemovesValue'];
    hasError?: boolean;
    hasWarning?: boolean;
    isReadOnly?: boolean;
    isDisabled?: boolean;
    isClearable?: boolean;
    isOptionDisabled?: ReactSelectAsyncProps['isOptionDisabled'];
    isMulti?: ReactSelectAsyncProps['isMulti'];
    isAutofocussed?: boolean;
    noOptionsMessage?: ReactSelectAsyncProps['noOptionsMessage'];
    maxMenuHeight?: ReactSelectAsyncProps['maxMenuHeight'];
    menuPortalTarget?: ReactSelectAsyncProps['menuPortalTarget'];
    menuPortalZIndex?: number;
    menuShouldBlockScroll?: boolean;
    showOptionGroupDivider?: boolean;
    onBlur?: (event: TCustomEvent) => void;
    onChange?: (event: TCustomEvent, info: ActionMeta<unknown>) => void;
    onFocus?: ReactSelectAsyncProps['onFocus'];
    onInputChange?: ReactSelectAsyncProps['onInputChange'];
    tabSelectsValue?: ReactSelectAsyncProps['tabSelectsValue'];
    loadOptions: ReactSelectAsyncProps['loadOptions'];
    loadingMessage?: string | (() => string);
    cacheOptions?: ReactSelectAsyncProps['cacheOptions'];
    filterOption?: ReactSelectAsyncProps['filterOption'];
    optionType?: 'single-property' | 'double-property' | 'multiple-properties';
    errors?: TFieldErrors;
    renderError?: TErrorRenderer;
    isRequired?: boolean;
    touched?: boolean[] | boolean;
    title: ReactNode;
    hint?: ReactNode;
    description?: ReactNode;
    onInfoButtonClick?: (event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>) => void;
    hintIcon?: ReactElement;
    badge?: ReactNode;
    iconLeft?: ReactNode;
};
declare const SearchSelectField: {
    (props: TSearchSelectFieldProps): import("@emotion/react/jsx-runtime").JSX.Element;
    defaultProps: Pick<TSearchSelectFieldProps, "controlShouldRenderValue">;
    displayName: string;
    toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
};
export default SearchSelectField;
