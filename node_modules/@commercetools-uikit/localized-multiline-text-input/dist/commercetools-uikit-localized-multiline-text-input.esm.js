import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _pt from 'prop-types';
import _reduceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import { useState, useCallback, useReducer } from 'react';
import { FormattedMessage, useIntl } from 'react-intl';
import { useToggleState } from '@commercetools-uikit/hooks';
import Stack from '@commercetools-uikit/spacings-stack';
import Constraints from '@commercetools-uikit/constraints';
import { sortLanguages, getHasErrorOnRemainingLanguages, getHasWarningOnRemainingLanguages, createLocalizedDataAttributes, getId, getName, createLocalizedString, isEmpty, omitEmptyTranslations, isTouched } from '@commercetools-uikit/localized-utils';
import { MultilineInput, messagesMultilineInput, messagesLocalizedInput, LocalizedInputToggle } from '@commercetools-uikit/input-utils';
import _styled from '@emotion/styled/base';
import { css } from '@emotion/react';
import FlatButton from '@commercetools-uikit/flat-button';
import { AngleUpIcon } from '@commercetools-uikit/icons';
import { warning, filterDataAttributes } from '@commercetools-uikit/utils';
import { designTokens } from '@commercetools-uikit/design-system';
import { jsxs, jsx, Fragment } from '@emotion/react/jsx-runtime';
import { ErrorMessage } from '@commercetools-uikit/messages';

function _EMOTION_STRINGIFIED_CSS_ERROR__$1() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

// NOTE: order is important here
// * a disabled-field currently does not display warning/error-states so it takes precedence
// * a readonly-field cannot be changed, but it might be relevant for validation, so error and warning are checked first
// how you can interact with the field is controlled separately by the props, this only influences visuals
var _ref$1 = process.env.NODE_ENV === "production" ? {
  name: "d3v9zr",
  styles: "overflow:hidden"
} : {
  name: "1h6gnzr-baseStyles",
  styles: "overflow:hidden;label:baseStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0aW9uLWlucHV0LnN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQlMiLCJmaWxlIjoidHJhbnNsYXRpb24taW5wdXQuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5cbi8vIE5PVEU6IG9yZGVyIGlzIGltcG9ydGFudCBoZXJlXG4vLyAqIGEgZGlzYWJsZWQtZmllbGQgY3VycmVudGx5IGRvZXMgbm90IGRpc3BsYXkgd2FybmluZy9lcnJvci1zdGF0ZXMgc28gaXQgdGFrZXMgcHJlY2VkZW5jZVxuLy8gKiBhIHJlYWRvbmx5LWZpZWxkIGNhbm5vdCBiZSBjaGFuZ2VkLCBidXQgaXQgbWlnaHQgYmUgcmVsZXZhbnQgZm9yIHZhbGlkYXRpb24sIHNvIGVycm9yIGFuZCB3YXJuaW5nIGFyZSBjaGVja2VkIGZpcnN0XG4vLyBob3cgeW91IGNhbiBpbnRlcmFjdCB3aXRoIHRoZSBmaWVsZCBpcyBjb250cm9sbGVkIHNlcGFyYXRlbHkgYnkgdGhlIHByb3BzLCB0aGlzIG9ubHkgaW5mbHVlbmNlcyB2aXN1YWxzXG5cbnR5cGUgVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcyA9IHtcbiAgaXNDb2xsYXBzZWQ/OiBib29sZWFuO1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgaXNSZWFkT25seT86IGJvb2xlYW47XG59O1xuXG5jb25zdCBnZXRUZXh0YXJlYVN0eWxlcyA9IChwcm9wczogVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcykgPT4ge1xuICBjb25zdCBiYXNlU3R5bGVzID0gW1xuICAgIGNzc2BcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAgIWltcG9ydGFudDtcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAgIWltcG9ydGFudDtcbiAgICBgLFxuICAgIHByb3BzLmlzQ29sbGFwc2VkICYmXG4gICAgICBjc3NgXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBgLFxuICBdO1xuICByZXR1cm4gYmFzZVN0eWxlcztcbn07XG5cbmNvbnN0IGdldExhbmd1YWdlTGFiZWxCYWNrZ3JvdW5kQ29sb3IgPSAoXG4gIHByb3BzOiBUVHJhbnNsYXRpb25JbnB1dFN0eWxlc1Byb3BzXG4pID0+IHtcbiAgaWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuRGlzYWJsZWQ7XG4gIH1cbiAgaWYgKHByb3BzLmlzUmVhZE9ubHkpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuUmVhZG9ubHk7XG4gIH1cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsO1xufTtcblxuY29uc3QgZ2V0TGFuZ3VhZ2VMYWJlbEJvcmRlckNvbG9yID0gKHByb3BzOiBUVHJhbnNsYXRpb25JbnB1dFN0eWxlc1Byb3BzKSA9PiB7XG4gIGlmIChwcm9wcy5pc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvcklucHV0V2hlbkRpc2FibGVkO1xuICB9XG4gIHJldHVybiBwcm9wcy5pc1JlYWRPbmx5XG4gICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsV2hlblJlYWRvbmx5XG4gICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsO1xufTtcblxuY29uc3QgZ2V0TGFuZ3VhZ2VMYWJlbFN0eWxlcyA9IChwcm9wczogVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcykgPT4ge1xuICByZXR1cm4gY3NzYFxuICAgIC8qIGF2b2lkIHdyYXBwaW5nIGxhYmVsIG9udG8gbmV3IGxpbmVzICovXG4gICAgZmxleDogMSAwIGF1dG87XG4gICAgY29sb3I6ICR7ZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWx9O1xuICAgIGN1cnNvcjogJHtwcm9wcy5pc0Rpc2FibGVkID8gJ25vdC1hbGxvd2VkJyA6ICdkZWZhdWx0J307XG4gICAgbGluZS1oZWlnaHQ6IGNhbGMoXG4gICAgICAke2Rlc2lnblRva2Vucy5oZWlnaHRGb3JJbnB1dH0gLSAyICogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMX1cbiAgICApO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Z2V0TGFuZ3VhZ2VMYWJlbEJhY2tncm91bmRDb2xvcihwcm9wcyl9O1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvcklucHV0fTtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JJbnB1dH07XG4gICAgYm9yZGVyOiAxcHggJHtnZXRMYW5ndWFnZUxhYmVsQm9yZGVyQ29sb3IocHJvcHMpfSBzb2xpZDtcbiAgICBwYWRkaW5nOiAke2Rlc2lnblRva2Vucy5wYWRkaW5nRm9yTG9jYWxpemVkSW5wdXRMYWJlbH07XG4gICAgZm9udC1zaXplOiAke2Rlc2lnblRva2Vucy5mb250U2l6ZUZvckxvY2FsaXplZElucHV0TGFiZWx9O1xuICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAke2Rlc2lnblRva2Vucy50cmFuc2l0aW9uU3RhbmRhcmR9LFxuICAgICAgYmFja2dyb3VuZC1jb2xvciAke2Rlc2lnblRva2Vucy50cmFuc2l0aW9uU3RhbmRhcmR9LFxuICAgICAgY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfTtcbiAgICBib3JkZXItcmlnaHQ6IDA7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICBhcHBlYXJhbmNlOiBub25lO1xuICBgO1xufTtcblxuY29uc3QgVG9nZ2xlQnV0dG9uV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG5gO1xuXG5leHBvcnQgeyBnZXRUZXh0YXJlYVN0eWxlcywgZ2V0TGFuZ3VhZ2VMYWJlbFN0eWxlcywgVG9nZ2xlQnV0dG9uV3JhcHBlciB9O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "9a98ig",
  styles: "border-top-left-radius:0!important;border-bottom-left-radius:0!important"
} : {
  name: "pb9fe4-baseStyles",
  styles: "border-top-left-radius:0!important;border-bottom-left-radius:0!important;label:baseStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0aW9uLWlucHV0LnN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQk8iLCJmaWxlIjoidHJhbnNsYXRpb24taW5wdXQuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5cbi8vIE5PVEU6IG9yZGVyIGlzIGltcG9ydGFudCBoZXJlXG4vLyAqIGEgZGlzYWJsZWQtZmllbGQgY3VycmVudGx5IGRvZXMgbm90IGRpc3BsYXkgd2FybmluZy9lcnJvci1zdGF0ZXMgc28gaXQgdGFrZXMgcHJlY2VkZW5jZVxuLy8gKiBhIHJlYWRvbmx5LWZpZWxkIGNhbm5vdCBiZSBjaGFuZ2VkLCBidXQgaXQgbWlnaHQgYmUgcmVsZXZhbnQgZm9yIHZhbGlkYXRpb24sIHNvIGVycm9yIGFuZCB3YXJuaW5nIGFyZSBjaGVja2VkIGZpcnN0XG4vLyBob3cgeW91IGNhbiBpbnRlcmFjdCB3aXRoIHRoZSBmaWVsZCBpcyBjb250cm9sbGVkIHNlcGFyYXRlbHkgYnkgdGhlIHByb3BzLCB0aGlzIG9ubHkgaW5mbHVlbmNlcyB2aXN1YWxzXG5cbnR5cGUgVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcyA9IHtcbiAgaXNDb2xsYXBzZWQ/OiBib29sZWFuO1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgaXNSZWFkT25seT86IGJvb2xlYW47XG59O1xuXG5jb25zdCBnZXRUZXh0YXJlYVN0eWxlcyA9IChwcm9wczogVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcykgPT4ge1xuICBjb25zdCBiYXNlU3R5bGVzID0gW1xuICAgIGNzc2BcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAgIWltcG9ydGFudDtcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAgIWltcG9ydGFudDtcbiAgICBgLFxuICAgIHByb3BzLmlzQ29sbGFwc2VkICYmXG4gICAgICBjc3NgXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBgLFxuICBdO1xuICByZXR1cm4gYmFzZVN0eWxlcztcbn07XG5cbmNvbnN0IGdldExhbmd1YWdlTGFiZWxCYWNrZ3JvdW5kQ29sb3IgPSAoXG4gIHByb3BzOiBUVHJhbnNsYXRpb25JbnB1dFN0eWxlc1Byb3BzXG4pID0+IHtcbiAgaWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuRGlzYWJsZWQ7XG4gIH1cbiAgaWYgKHByb3BzLmlzUmVhZE9ubHkpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuUmVhZG9ubHk7XG4gIH1cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsO1xufTtcblxuY29uc3QgZ2V0TGFuZ3VhZ2VMYWJlbEJvcmRlckNvbG9yID0gKHByb3BzOiBUVHJhbnNsYXRpb25JbnB1dFN0eWxlc1Byb3BzKSA9PiB7XG4gIGlmIChwcm9wcy5pc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvcklucHV0V2hlbkRpc2FibGVkO1xuICB9XG4gIHJldHVybiBwcm9wcy5pc1JlYWRPbmx5XG4gICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsV2hlblJlYWRvbmx5XG4gICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsO1xufTtcblxuY29uc3QgZ2V0TGFuZ3VhZ2VMYWJlbFN0eWxlcyA9IChwcm9wczogVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcykgPT4ge1xuICByZXR1cm4gY3NzYFxuICAgIC8qIGF2b2lkIHdyYXBwaW5nIGxhYmVsIG9udG8gbmV3IGxpbmVzICovXG4gICAgZmxleDogMSAwIGF1dG87XG4gICAgY29sb3I6ICR7ZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWx9O1xuICAgIGN1cnNvcjogJHtwcm9wcy5pc0Rpc2FibGVkID8gJ25vdC1hbGxvd2VkJyA6ICdkZWZhdWx0J307XG4gICAgbGluZS1oZWlnaHQ6IGNhbGMoXG4gICAgICAke2Rlc2lnblRva2Vucy5oZWlnaHRGb3JJbnB1dH0gLSAyICogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMX1cbiAgICApO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Z2V0TGFuZ3VhZ2VMYWJlbEJhY2tncm91bmRDb2xvcihwcm9wcyl9O1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvcklucHV0fTtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JJbnB1dH07XG4gICAgYm9yZGVyOiAxcHggJHtnZXRMYW5ndWFnZUxhYmVsQm9yZGVyQ29sb3IocHJvcHMpfSBzb2xpZDtcbiAgICBwYWRkaW5nOiAke2Rlc2lnblRva2Vucy5wYWRkaW5nRm9yTG9jYWxpemVkSW5wdXRMYWJlbH07XG4gICAgZm9udC1zaXplOiAke2Rlc2lnblRva2Vucy5mb250U2l6ZUZvckxvY2FsaXplZElucHV0TGFiZWx9O1xuICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAke2Rlc2lnblRva2Vucy50cmFuc2l0aW9uU3RhbmRhcmR9LFxuICAgICAgYmFja2dyb3VuZC1jb2xvciAke2Rlc2lnblRva2Vucy50cmFuc2l0aW9uU3RhbmRhcmR9LFxuICAgICAgY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfTtcbiAgICBib3JkZXItcmlnaHQ6IDA7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICBhcHBlYXJhbmNlOiBub25lO1xuICBgO1xufTtcblxuY29uc3QgVG9nZ2xlQnV0dG9uV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG5gO1xuXG5leHBvcnQgeyBnZXRUZXh0YXJlYVN0eWxlcywgZ2V0TGFuZ3VhZ2VMYWJlbFN0eWxlcywgVG9nZ2xlQnV0dG9uV3JhcHBlciB9O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const getTextareaStyles = props => {
  const baseStyles = [_ref2, props.isCollapsed && _ref$1];
  return baseStyles;
};
const getLanguageLabelBackgroundColor = props => {
  if (props.isDisabled) {
    return designTokens.backgroundColorForLocalizedInputLabelWhenDisabled;
  }
  if (props.isReadOnly) {
    return designTokens.backgroundColorForLocalizedInputLabelWhenReadonly;
  }
  return designTokens.backgroundColorForLocalizedInputLabel;
};
const getLanguageLabelBorderColor = props => {
  if (props.isDisabled) {
    return designTokens.borderColorForInputWhenDisabled;
  }
  return props.isReadOnly ? designTokens.borderColorForLocalizedInputLabelWhenReadonly : designTokens.borderColorForLocalizedInputLabel;
};
const getLanguageLabelStyles = props => {
  return /*#__PURE__*/css("flex:1 0 auto;color:", designTokens.fontColorForLocalizedInputLabel, ";cursor:", props.isDisabled ? 'not-allowed' : 'default', ";line-height:calc(\n      ", designTokens.heightForInput, " - 2 * ", designTokens.borderRadius1, "\n    );background-color:", getLanguageLabelBackgroundColor(props), ";border-top-left-radius:", designTokens.borderRadiusForInput, ";border-bottom-left-radius:", designTokens.borderRadiusForInput, ";border:1px ", getLanguageLabelBorderColor(props), " solid;padding:", designTokens.paddingForLocalizedInputLabel, ";font-size:", designTokens.fontSizeForLocalizedInputLabel, ";transition:border-color ", designTokens.transitionStandard, ",background-color ", designTokens.transitionStandard, ",color ", designTokens.transitionStandard, ";border-right:0;box-shadow:none;appearance:none;" + (process.env.NODE_ENV === "production" ? "" : ";label:getLanguageLabelStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0aW9uLWlucHV0LnN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRFkiLCJmaWxlIjoidHJhbnNsYXRpb24taW5wdXQuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5cbi8vIE5PVEU6IG9yZGVyIGlzIGltcG9ydGFudCBoZXJlXG4vLyAqIGEgZGlzYWJsZWQtZmllbGQgY3VycmVudGx5IGRvZXMgbm90IGRpc3BsYXkgd2FybmluZy9lcnJvci1zdGF0ZXMgc28gaXQgdGFrZXMgcHJlY2VkZW5jZVxuLy8gKiBhIHJlYWRvbmx5LWZpZWxkIGNhbm5vdCBiZSBjaGFuZ2VkLCBidXQgaXQgbWlnaHQgYmUgcmVsZXZhbnQgZm9yIHZhbGlkYXRpb24sIHNvIGVycm9yIGFuZCB3YXJuaW5nIGFyZSBjaGVja2VkIGZpcnN0XG4vLyBob3cgeW91IGNhbiBpbnRlcmFjdCB3aXRoIHRoZSBmaWVsZCBpcyBjb250cm9sbGVkIHNlcGFyYXRlbHkgYnkgdGhlIHByb3BzLCB0aGlzIG9ubHkgaW5mbHVlbmNlcyB2aXN1YWxzXG5cbnR5cGUgVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcyA9IHtcbiAgaXNDb2xsYXBzZWQ/OiBib29sZWFuO1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgaXNSZWFkT25seT86IGJvb2xlYW47XG59O1xuXG5jb25zdCBnZXRUZXh0YXJlYVN0eWxlcyA9IChwcm9wczogVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcykgPT4ge1xuICBjb25zdCBiYXNlU3R5bGVzID0gW1xuICAgIGNzc2BcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAgIWltcG9ydGFudDtcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAgIWltcG9ydGFudDtcbiAgICBgLFxuICAgIHByb3BzLmlzQ29sbGFwc2VkICYmXG4gICAgICBjc3NgXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBgLFxuICBdO1xuICByZXR1cm4gYmFzZVN0eWxlcztcbn07XG5cbmNvbnN0IGdldExhbmd1YWdlTGFiZWxCYWNrZ3JvdW5kQ29sb3IgPSAoXG4gIHByb3BzOiBUVHJhbnNsYXRpb25JbnB1dFN0eWxlc1Byb3BzXG4pID0+IHtcbiAgaWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuRGlzYWJsZWQ7XG4gIH1cbiAgaWYgKHByb3BzLmlzUmVhZE9ubHkpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuUmVhZG9ubHk7XG4gIH1cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsO1xufTtcblxuY29uc3QgZ2V0TGFuZ3VhZ2VMYWJlbEJvcmRlckNvbG9yID0gKHByb3BzOiBUVHJhbnNsYXRpb25JbnB1dFN0eWxlc1Byb3BzKSA9PiB7XG4gIGlmIChwcm9wcy5pc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvcklucHV0V2hlbkRpc2FibGVkO1xuICB9XG4gIHJldHVybiBwcm9wcy5pc1JlYWRPbmx5XG4gICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsV2hlblJlYWRvbmx5XG4gICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsO1xufTtcblxuY29uc3QgZ2V0TGFuZ3VhZ2VMYWJlbFN0eWxlcyA9IChwcm9wczogVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcykgPT4ge1xuICByZXR1cm4gY3NzYFxuICAgIC8qIGF2b2lkIHdyYXBwaW5nIGxhYmVsIG9udG8gbmV3IGxpbmVzICovXG4gICAgZmxleDogMSAwIGF1dG87XG4gICAgY29sb3I6ICR7ZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWx9O1xuICAgIGN1cnNvcjogJHtwcm9wcy5pc0Rpc2FibGVkID8gJ25vdC1hbGxvd2VkJyA6ICdkZWZhdWx0J307XG4gICAgbGluZS1oZWlnaHQ6IGNhbGMoXG4gICAgICAke2Rlc2lnblRva2Vucy5oZWlnaHRGb3JJbnB1dH0gLSAyICogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMX1cbiAgICApO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Z2V0TGFuZ3VhZ2VMYWJlbEJhY2tncm91bmRDb2xvcihwcm9wcyl9O1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvcklucHV0fTtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JJbnB1dH07XG4gICAgYm9yZGVyOiAxcHggJHtnZXRMYW5ndWFnZUxhYmVsQm9yZGVyQ29sb3IocHJvcHMpfSBzb2xpZDtcbiAgICBwYWRkaW5nOiAke2Rlc2lnblRva2Vucy5wYWRkaW5nRm9yTG9jYWxpemVkSW5wdXRMYWJlbH07XG4gICAgZm9udC1zaXplOiAke2Rlc2lnblRva2Vucy5mb250U2l6ZUZvckxvY2FsaXplZElucHV0TGFiZWx9O1xuICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAke2Rlc2lnblRva2Vucy50cmFuc2l0aW9uU3RhbmRhcmR9LFxuICAgICAgYmFja2dyb3VuZC1jb2xvciAke2Rlc2lnblRva2Vucy50cmFuc2l0aW9uU3RhbmRhcmR9LFxuICAgICAgY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfTtcbiAgICBib3JkZXItcmlnaHQ6IDA7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICBhcHBlYXJhbmNlOiBub25lO1xuICBgO1xufTtcblxuY29uc3QgVG9nZ2xlQnV0dG9uV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG5gO1xuXG5leHBvcnQgeyBnZXRUZXh0YXJlYVN0eWxlcywgZ2V0TGFuZ3VhZ2VMYWJlbFN0eWxlcywgVG9nZ2xlQnV0dG9uV3JhcHBlciB9O1xuIl19 */");
};
const ToggleButtonWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1yehb270"
} : {
  target: "e1yehb270",
  label: "ToggleButtonWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "ejz79s",
  styles: "flex:0;display:flex"
} : {
  name: "ejz79s",
  styles: "flex:0;display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0aW9uLWlucHV0LnN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwRXNDIiwiZmlsZSI6InRyYW5zbGF0aW9uLWlucHV0LnN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuXG4vLyBOT1RFOiBvcmRlciBpcyBpbXBvcnRhbnQgaGVyZVxuLy8gKiBhIGRpc2FibGVkLWZpZWxkIGN1cnJlbnRseSBkb2VzIG5vdCBkaXNwbGF5IHdhcm5pbmcvZXJyb3Itc3RhdGVzIHNvIGl0IHRha2VzIHByZWNlZGVuY2Vcbi8vICogYSByZWFkb25seS1maWVsZCBjYW5ub3QgYmUgY2hhbmdlZCwgYnV0IGl0IG1pZ2h0IGJlIHJlbGV2YW50IGZvciB2YWxpZGF0aW9uLCBzbyBlcnJvciBhbmQgd2FybmluZyBhcmUgY2hlY2tlZCBmaXJzdFxuLy8gaG93IHlvdSBjYW4gaW50ZXJhY3Qgd2l0aCB0aGUgZmllbGQgaXMgY29udHJvbGxlZCBzZXBhcmF0ZWx5IGJ5IHRoZSBwcm9wcywgdGhpcyBvbmx5IGluZmx1ZW5jZXMgdmlzdWFsc1xuXG50eXBlIFRUcmFuc2xhdGlvbklucHV0U3R5bGVzUHJvcHMgPSB7XG4gIGlzQ29sbGFwc2VkPzogYm9vbGVhbjtcbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG4gIGlzUmVhZE9ubHk/OiBib29sZWFuO1xufTtcblxuY29uc3QgZ2V0VGV4dGFyZWFTdHlsZXMgPSAocHJvcHM6IFRUcmFuc2xhdGlvbklucHV0U3R5bGVzUHJvcHMpID0+IHtcbiAgY29uc3QgYmFzZVN0eWxlcyA9IFtcbiAgICBjc3NgXG4gICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwICFpbXBvcnRhbnQ7XG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwICFpbXBvcnRhbnQ7XG4gICAgYCxcbiAgICBwcm9wcy5pc0NvbGxhcHNlZCAmJlxuICAgICAgY3NzYFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgYCxcbiAgXTtcbiAgcmV0dXJuIGJhc2VTdHlsZXM7XG59O1xuXG5jb25zdCBnZXRMYW5ndWFnZUxhYmVsQmFja2dyb3VuZENvbG9yID0gKFxuICBwcm9wczogVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wc1xuKSA9PiB7XG4gIGlmIChwcm9wcy5pc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsV2hlbkRpc2FibGVkO1xuICB9XG4gIGlmIChwcm9wcy5pc1JlYWRPbmx5KSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsV2hlblJlYWRvbmx5O1xuICB9XG4gIHJldHVybiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTG9jYWxpemVkSW5wdXRMYWJlbDtcbn07XG5cbmNvbnN0IGdldExhbmd1YWdlTGFiZWxCb3JkZXJDb2xvciA9IChwcm9wczogVFRyYW5zbGF0aW9uSW5wdXRTdHlsZXNQcm9wcykgPT4ge1xuICBpZiAocHJvcHMuaXNEaXNhYmxlZCkge1xuICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZDtcbiAgfVxuICByZXR1cm4gcHJvcHMuaXNSZWFkT25seVxuICAgID8gZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yTG9jYWxpemVkSW5wdXRMYWJlbFdoZW5SZWFkb25seVxuICAgIDogZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9yTG9jYWxpemVkSW5wdXRMYWJlbDtcbn07XG5cbmNvbnN0IGdldExhbmd1YWdlTGFiZWxTdHlsZXMgPSAocHJvcHM6IFRUcmFuc2xhdGlvbklucHV0U3R5bGVzUHJvcHMpID0+IHtcbiAgcmV0dXJuIGNzc2BcbiAgICAvKiBhdm9pZCB3cmFwcGluZyBsYWJlbCBvbnRvIG5ldyBsaW5lcyAqL1xuICAgIGZsZXg6IDEgMCBhdXRvO1xuICAgIGNvbG9yOiAke2Rlc2lnblRva2Vucy5mb250Q29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsfTtcbiAgICBjdXJzb3I6ICR7cHJvcHMuaXNEaXNhYmxlZCA/ICdub3QtYWxsb3dlZCcgOiAnZGVmYXVsdCd9O1xuICAgIGxpbmUtaGVpZ2h0OiBjYWxjKFxuICAgICAgJHtkZXNpZ25Ub2tlbnMuaGVpZ2h0Rm9ySW5wdXR9IC0gMiAqICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czF9XG4gICAgKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2dldExhbmd1YWdlTGFiZWxCYWNrZ3JvdW5kQ29sb3IocHJvcHMpfTtcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JJbnB1dH07XG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzRm9ySW5wdXR9O1xuICAgIGJvcmRlcjogMXB4ICR7Z2V0TGFuZ3VhZ2VMYWJlbEJvcmRlckNvbG9yKHByb3BzKX0gc29saWQ7XG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvckxvY2FsaXplZElucHV0TGFiZWx9O1xuICAgIGZvbnQtc2l6ZTogJHtkZXNpZ25Ub2tlbnMuZm9udFNpemVGb3JMb2NhbGl6ZWRJbnB1dExhYmVsfTtcbiAgICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfSxcbiAgICAgIGJhY2tncm91bmQtY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfSxcbiAgICAgIGNvbG9yICR7ZGVzaWduVG9rZW5zLnRyYW5zaXRpb25TdGFuZGFyZH07XG4gICAgYm9yZGVyLXJpZ2h0OiAwO1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgYDtcbn07XG5cbmNvbnN0IFRvZ2dsZUJ1dHRvbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuYDtcblxuZXhwb3J0IHsgZ2V0VGV4dGFyZWFTdHlsZXMsIGdldExhbmd1YWdlTGFiZWxTdHlsZXMsIFRvZ2dsZUJ1dHRvbldyYXBwZXIgfTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
});

function ownKeys$2(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys$2(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys$2(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const LeftColumn = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "eepo5hu2"
} : {
  target: "eepo5hu2",
  label: "LeftColumn"
})(process.env.NODE_ENV === "production" ? {
  name: "82a6rk",
  styles: "flex:1"
} : {
  name: "82a6rk",
  styles: "flex:1",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const RightColumn = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "eepo5hu1"
} : {
  target: "eepo5hu1",
  label: "RightColumn"
})(process.env.NODE_ENV === "production" ? {
  name: "1m04uhl",
  styles: "position:relative;flex:0;display:flex;align-items:flex-start"
} : {
  name: "1m04uhl",
  styles: "position:relative;flex:0;display:flex;align-items:flex-start",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Row = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "eepo5hu0"
} : {
  target: "eepo5hu0",
  label: "Row"
})(process.env.NODE_ENV === "production" ? {
  name: "skgbeu",
  styles: "display:flex;justify-content:flex-end"
} : {
  name: "skgbeu",
  styles: "display:flex;justify-content:flex-end",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
var _ref = process.env.NODE_ENV === "production" ? {
  name: "1ktetz7",
  styles: "width:100%;position:relative;display:flex"
} : {
  name: "1r0st9p-TranslationInput",
  styles: "width:100%;position:relative;display:flex;label:TranslationInput;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0aW9uLWlucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvSmdCIiwiZmlsZSI6InRyYW5zbGF0aW9uLWlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHVzZVN0YXRlLFxuICB1c2VDYWxsYmFjayxcbiAgdHlwZSBDaGFuZ2VFdmVudEhhbmRsZXIsXG4gIHR5cGUgRm9jdXNFdmVudEhhbmRsZXIsXG4gIHR5cGUgUmVhY3ROb2RlLFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgRmxhdEJ1dHRvbiBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9mbGF0LWJ1dHRvbic7XG5pbXBvcnQgeyBBbmdsZVVwSWNvbiB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2ljb25zJztcbmltcG9ydCBTdGFjayBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1zdGFjayc7XG5pbXBvcnQgeyBmaWx0ZXJEYXRhQXR0cmlidXRlcywgd2FybmluZyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3V0aWxzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHtcbiAgTXVsdGlsaW5lSW5wdXQsXG4gIG1lc3NhZ2VzTXVsdGlsaW5lSW5wdXQsXG59IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2lucHV0LXV0aWxzJztcbmltcG9ydCB7XG4gIGdldFRleHRhcmVhU3R5bGVzLFxuICBnZXRMYW5ndWFnZUxhYmVsU3R5bGVzLFxuICBUb2dnbGVCdXR0b25XcmFwcGVyLFxufSBmcm9tICcuL3RyYW5zbGF0aW9uLWlucHV0LnN0eWxlcyc7XG5cbmludGVyZmFjZSBIVE1MTG9jYWxpemVkVGV4dEFyZWFFbGVtZW50IGV4dGVuZHMgSFRNTFRleHRBcmVhRWxlbWVudCB7XG4gIGxhbmd1YWdlOiBzdHJpbmc7XG59XG5cbnR5cGUgVHJhbnNsYXRpb25JbnB1dFByb3BzID0ge1xuICAvKipcbiAgICogSW5kaWNhdGUgaWYgdGhlIHZhbHVlIGVudGVyZWQgaW4gdGhlIGlucHV0IGlzIGludmFsaWQuXG4gICAqL1xuICAnYXJpYS1pbnZhbGlkJz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBIVE1MIElEIG9mIGFuIGVsZW1lbnQgY29udGFpbmluZyBhbiBlcnJvciBtZXNzYWdlIHJlbGF0ZWQgdG8gdGhlIGlucHV0LlxuICAgKi9cbiAgJ2FyaWEtZXJyb3JtZXNzYWdlJz86IHN0cmluZztcbiAgb25DaGFuZ2U/OiBDaGFuZ2VFdmVudEhhbmRsZXI8SFRNTExvY2FsaXplZFRleHRBcmVhRWxlbWVudD47XG4gIGxhbmd1YWdlOiBzdHJpbmc7XG4gIG9uRm9jdXM/OiAoKSA9PiB2b2lkO1xuICBvblRvZ2dsZT86ICgpID0+IHZvaWQ7XG4gIGlzQ29sbGFwc2VkPzogYm9vbGVhbjtcbiAgaGFzTGFuZ3VhZ2VzQ29udHJvbD86IGJvb2xlYW47XG4gIHdhcm5pbmc/OiBSZWFjdE5vZGU7XG4gIGVycm9yPzogUmVhY3ROb2RlO1xuICBpZD86IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgYXV0b0NvbXBsZXRlPzogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xuICBvbkJsdXI/OiBGb2N1c0V2ZW50SGFuZGxlcjxIVE1MTG9jYWxpemVkVGV4dEFyZWFFbGVtZW50PjtcbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBoYXNXYXJuaW5nPzogYm9vbGVhbjtcbiAgaGFzRXJyb3I/OiBib29sZWFuO1xuICBpc1JlYWRPbmx5PzogYm9vbGVhbjtcbiAgaXNBdXRvZm9jdXNzZWQ/OiBib29sZWFuO1xuICBpbnRsOiB7XG4gICAgZm9ybWF0TWVzc2FnZTogKG1lc3NhZ2VPYmplY3Q6IFRNZXNzYWdlc011bHRpbGluZUlucHV0KSA9PiBzdHJpbmc7XG4gIH07XG59O1xuXG50eXBlIFRNZXNzYWdlc011bHRpbGluZUlucHV0ID0ge1xuICBpZDogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBkZWZhdWx0TWVzc2FnZTogc3RyaW5nO1xufTtcblxuY29uc3QgTGVmdENvbHVtbiA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG5gO1xuXG5jb25zdCBSaWdodENvbHVtbiA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZmxleDogMDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5gO1xuXG5jb25zdCBSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuYDtcblxuY29uc3QgVHJhbnNsYXRpb25JbnB1dCA9IChwcm9wczogVHJhbnNsYXRpb25JbnB1dFByb3BzKSA9PiB7XG4gIGNvbnN0IFtpbnB1dEhhc1NldmVyYWxSb3dzLCBzZXRJbnB1dEhhc1NldmVyYWxSb3dzXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBoYW5kbGVIZWlnaHRDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAoXywgcm93Q291bnQpID0+IHtcbiAgICAgIC8vIFRoaXMgY2hlY2tzIGlmIHRoZSBjb250ZW50IGluIHRoZSB0ZXh0YXJlYSBpcyBncmVhdGVyIHRoYW4gb25lIHJvdy4gSWYgaXQgaXMsIHRoZW4gdGhlIHRvZ2dsZSBidXR0b24gd2lsbCBiZSBzaG93bi5cbiAgICAgIC8vIFRoaXMgaXMgdG8gcHJldmVudCB0aGUgdG9nZ2xlIGJ1dHRvbiBmcm9tIHNob3dpbmcgd2hlbiB0aGVyZSBpcyBub3QgZW5vdWdoIGNvbnRlbnQgdG8gZXhwYW5kL2NvbGxhcHNlLlxuICAgICAgc2V0SW5wdXRIYXNTZXZlcmFsUm93cyhyb3dDb3VudCA+IDEpO1xuICAgIH0sXG4gICAgW3NldElucHV0SGFzU2V2ZXJhbFJvd3NdXG4gICk7XG5cbiAgY29uc3QgeyBvbkNoYW5nZSB9ID0gcHJvcHM7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2s8XG4gICAgQ2hhbmdlRXZlbnRIYW5kbGVyPEhUTUxMb2NhbGl6ZWRUZXh0QXJlYUVsZW1lbnQ+XG4gID4oXG4gICAgKGV2ZW50KSA9PiB7XG4gICAgICAvLyBXZSBtYW5pcHVsYXRlIHRoZSBldmVudCB0byBhZGQgdGhlIGxhbmd1YWdlIHRvIHRoZSB0YXJnZXQuXG4gICAgICAvLyBUaGF0IHdheSB0aGUgdXNlcnMgb2YgTG9jYWxpemVkVGV4dElucHV0J3Mgb25DaGFuZ2UgY2FuIHJlYWRcbiAgICAgIC8vIGV2ZW50LnRhcmdldC5sYW5ndWFnZSBhbmQgZXZlbnQudGFyZ2V0LnZhbHVlIHRvIGRldGVybWluZSB0aGUgbmV4dCB2YWx1ZS5cbiAgICAgIC8vXG4gICAgICAvLyBXZSBvbmx5IG5lZWQgdGhpcyBpbmZvcm1hdGlvbiBmb3IgdGhlIHN0b3J5LCB0aGUgTUMgYXBwbGljYXRpb24gY29kZSB3aWxsXG4gICAgICAvLyBuZXZlciBuZWVkIHRvIGFjY2VzcyB0aGUgaW5mb3JtYXRpb24gaW4gc3VjaCBhbiBpbmNvbnZlbmllbnQgd2F5LCBhc1xuICAgICAgLy8gRm9ybWlrIGNhbiBkZWFsIHdpdGggYSBuYW1lIGxpa2UgXCJmb28uZW5cIiBhbmQgc2V0cyB0aGUgdmFsdWUgY29ycmVjdGx5LlxuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgYXMgd2UgYXJlbid0IGd1YXJhbnRlZWQgYSBuYW1lIGluIHRoZSBzdG9yeSBhcyB0aGUgdXNlclxuICAgICAgLy8gbWlnaHQgY2xlYXIgaXQgdXNpbmcgdGhlIGtub2IsIGFuZCB0aGVuIHdlIGNhbid0IHBhcnNlIHRoZSBsYW5ndWFnZSBmcm9tXG4gICAgICAvLyB0aGUgaW5wdXQgbmFtZSBhbnltb3JlLlxuICAgICAgZXZlbnQudGFyZ2V0Lmxhbmd1YWdlID0gcHJvcHMubGFuZ3VhZ2U7XG4gICAgICBvbkNoYW5nZT8uKGV2ZW50KTtcbiAgICB9LFxuICAgIFtvbkNoYW5nZSwgcHJvcHMubGFuZ3VhZ2VdXG4gICk7XG5cbiAgY29uc3QgeyBvbkZvY3VzLCBvblRvZ2dsZSB9ID0gcHJvcHM7XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIC8vIEV4cGFuZCB0aGUgaW5wdXQgb24gZm9jdXNcbiAgICBpZiAocHJvcHMuaXNDb2xsYXBzZWQpIG9uVG9nZ2xlPy4oKTtcbiAgICBpZiAob25Gb2N1cykgb25Gb2N1cygpO1xuICB9LCBbcHJvcHMuaXNDb2xsYXBzZWQsIG9uRm9jdXMsIG9uVG9nZ2xlXSk7XG5cbiAgY29uc3Qgc2hvdWxkVG9nZ2xlQnV0dG9uVGFrZVNwYWNlID1cbiAgICAvKlxuICAgICAgLSBpZiBoYXNMYW5ndWFnZXNDb250cm9sIGFuZCB0aGVyZSBhcmUgbm8gZXJyb3JzL3dhcm5pbmdzIHRvIGRpc3BsYXlcbiAgICAgIC0gdGhlbiB0aGUgdG9nZ2xlQnV0dG9uIGlzIGFic29sdXRlbHkgcG9zaXRpb25lZFxuICAgICAgVGhpcyBpcyBiZWNhdXNlIHRoZSB0b2dnbGUgYnV0dG9uIGlzIHBsYWNlZCBuZXh0IHRvIHRoZSBMb2NhbGl6ZWRJbnB1dFRvZ2dsZSB3aXRob3V0IGJlaW5nIHNpYmxpbmdzIGluIHRoZSBET00uXG4gICAgICBJZiB0aGVyZSBpcyBhIGVycm9yIG9yIHdhcm5pbmcgc2hvd2luZyxcbiAgICAgIHRoZW4gaXQgY2FuIGJlIHBsYWNlZCBzdGF0aWNhbGx5IGJlY2F1c2UgaXQgd2lsbCB0aGVuIGJlIGEgc2libGluZyB0byB0aGUgZXJyb3Ivd2FybmluZyBtZXNzYWdlXG4gICAgICBhbmQgTG9jYWxpemVkSW5wdXRUb2dnbGUgaXMgcGxhY2VkIGJlbG93IHRoZSBlcnJvcnMvd2FybmluZ3MuXG4gICAgKi9cbiAgICAoIXByb3BzLmlzQ29sbGFwc2VkICYmIGlucHV0SGFzU2V2ZXJhbFJvd3MgJiYgIXByb3BzLmhhc0xhbmd1YWdlc0NvbnRyb2wpIHx8XG4gICAgcHJvcHMuZXJyb3IgfHxcbiAgICBwcm9wcy53YXJuaW5nO1xuXG4gIGlmICghcHJvcHMuaXNSZWFkT25seSkge1xuICAgIHdhcm5pbmcoXG4gICAgICB0eXBlb2YgcHJvcHMub25DaGFuZ2UgPT09ICdmdW5jdGlvbicsXG4gICAgICAnTG9jYWxpemVkTXVsdGlsaW5lVGV4dElucHV0L1RyYW5zbGF0aW9uSW5wdXQ6IFwib25DaGFuZ2VcIiBpcyByZXF1aXJlZCB3aGVuIGlzUmVhZE9ubHkgaXMgbm90IHRydWUnXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFN0YWNrIHNjYWxlPVwieHNcIj5cbiAgICAgIDxkaXZcbiAgICAgICAga2V5PXtwcm9wcy5sYW5ndWFnZX1cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGB9XG4gICAgICA+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPXtwcm9wcy5pZH0gY3NzPXtnZXRMYW5ndWFnZUxhYmVsU3R5bGVzKHByb3BzKX0+XG4gICAgICAgICAge3Byb3BzLmxhbmd1YWdlLnRvVXBwZXJDYXNlKCl9XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxNdWx0aWxpbmVJbnB1dFxuICAgICAgICAgIGlkPXtwcm9wcy5pZH1cbiAgICAgICAgICBuYW1lPXtwcm9wcy5uYW1lfVxuICAgICAgICAgIGF1dG9Db21wbGV0ZT17cHJvcHMuYXV0b0NvbXBsZXRlfVxuICAgICAgICAgIHZhbHVlPXtwcm9wcy52YWx1ZX1cbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgIG9uSGVpZ2h0Q2hhbmdlPXtoYW5kbGVIZWlnaHRDaGFuZ2V9XG4gICAgICAgICAgb25CbHVyPXtwcm9wcy5vbkJsdXJ9XG4gICAgICAgICAgb25Gb2N1cz17aGFuZGxlRm9jdXN9XG4gICAgICAgICAgaXNEaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17cHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgY3NzPXtnZXRUZXh0YXJlYVN0eWxlcyhwcm9wcyl9XG4gICAgICAgICAgaGFzRXJyb3I9e3Byb3BzLmhhc0Vycm9yfVxuICAgICAgICAgIGhhc1dhcm5pbmc9e3Byb3BzLmhhc1dhcm5pbmd9XG4gICAgICAgICAgaXNSZWFkT25seT17cHJvcHMuaXNSZWFkT25seX1cbiAgICAgICAgICBpc0F1dG9mb2N1c3NlZD17cHJvcHMuaXNBdXRvZm9jdXNzZWR9XG4gICAgICAgICAgaXNPcGVuPXshcHJvcHMuaXNDb2xsYXBzZWR9XG4gICAgICAgICAgey4uLmZpbHRlckRhdGFBdHRyaWJ1dGVzKHByb3BzKX1cbiAgICAgICAgICAvKiBBUklBICovXG4gICAgICAgICAgYXJpYS1pbnZhbGlkPXtwcm9wc1snYXJpYS1pbnZhbGlkJ119XG4gICAgICAgICAgYXJpYS1lcnJvcm1lc3NhZ2U9e3Byb3BzWydhcmlhLWVycm9ybWVzc2FnZSddfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8Um93XG4gICAgICAgIC8vIE5PVEU6IGFwcGx5aW5nIHRoaXMgc3R5bGUgd2l0aGluZyB0aGUgYHN0eWxlZGAgY29tcG9uZW50IHJlc3VsdHMgaW4gdGhlIHByb2R1Y3Rpb25cbiAgICAgICAgLy8gYnVuZGxlIHRvIGFwcGx5IHRoZSBzdHlsZSBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gICAgICAgIC8vIEZvciBpbnN0YW5jZSwgd2UgbmVlZCB0byBvdmVycmlkZSB0aGUgbWFyZ2luZyBvZiB0aGUgc3BhY2luZyBjb21wb25lbnQsIHdoaWNoIGFsc29cbiAgICAgICAgLy8gdXNlcyBgIWltcG9ydGFudGAuXG4gICAgICAgIC8vIEFueXdheSwgYXBwYXJlbnRseSBieSBwYXNzaW5nIHRoZSBzdHlsZSBhcyBhIGBjc3NgIHByb3AgdG8gdGhlIGBzdHlsZWRgIGNvbXBvbmVudFxuICAgICAgICAvLyBkb2VzIHRoZSB0cmljay5cbiAgICAgICAgLy8gVE9ETzogcmV2aXNpdCB0aGUgbG9naWMgYW5kIHRoZSBpbXBsZW1lbnRhdGlvbiB0byBtYXliZSBhdm9pZCBoYXZpbmcgdG8gYXBwbHkgdGhpcyBzdHlsZS5cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgbWFyZ2luLXRvcDogJHtzaG91bGRUb2dnbGVCdXR0b25UYWtlU3BhY2VcbiAgICAgICAgICAgID8gJ2luaGVyaXQnXG4gICAgICAgICAgICA6ICcwcHggIWltcG9ydGFudCd9O1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICB7KCgpID0+IHtcbiAgICAgICAgICBpZiAocHJvcHMuZXJyb3IpXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8TGVmdENvbHVtbj5cbiAgICAgICAgICAgICAgICA8ZGl2Pntwcm9wcy5lcnJvcn08L2Rpdj5cbiAgICAgICAgICAgICAgPC9MZWZ0Q29sdW1uPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBpZiAocHJvcHMud2FybmluZylcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxMZWZ0Q29sdW1uPlxuICAgICAgICAgICAgICAgIDxkaXY+e3Byb3BzLndhcm5pbmd9PC9kaXY+XG4gICAgICAgICAgICAgIDwvTGVmdENvbHVtbj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pKCl9XG4gICAgICAgIHshcHJvcHMuaXNDb2xsYXBzZWQgJiYgaW5wdXRIYXNTZXZlcmFsUm93cyAmJiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxMZWZ0Q29sdW1uIC8+XG4gICAgICAgICAgICA8UmlnaHRDb2x1bW4+XG4gICAgICAgICAgICAgIDxUb2dnbGVCdXR0b25XcmFwcGVyXG4gICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAhc2hvdWxkVG9nZ2xlQnV0dG9uVGFrZVNwYWNlICYmXG4gICAgICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmcxMH07XG4gICAgICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGbGF0QnV0dG9uXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtwcm9wcy5vblRvZ2dsZX1cbiAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e3Byb3BzLmlzRGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICBsYWJlbD17cHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc011bHRpbGluZUlucHV0LmNvbGxhcHNlXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgaWNvbj17PEFuZ2xlVXBJY29uIHNpemU9XCJzbWFsbFwiIC8+fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvVG9nZ2xlQnV0dG9uV3JhcHBlcj5cbiAgICAgICAgICAgIDwvUmlnaHRDb2x1bW4+XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L1Jvdz5cbiAgICA8L1N0YWNrPlxuICApO1xufTtcblxuVHJhbnNsYXRpb25JbnB1dC5kaXNwbGF5TmFtZSA9ICdUcmFuc2xhdGlvbklucHV0JztcblxuZXhwb3J0IGRlZmF1bHQgVHJhbnNsYXRpb25JbnB1dDtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const TranslationInput = props => {
  const _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    inputHasSeveralRows = _useState2[0],
    setInputHasSeveralRows = _useState2[1];
  const handleHeightChange = useCallback((_, rowCount) => {
    // This checks if the content in the textarea is greater than one row. If it is, then the toggle button will be shown.
    // This is to prevent the toggle button from showing when there is not enough content to expand/collapse.
    setInputHasSeveralRows(rowCount > 1);
  }, [setInputHasSeveralRows]);
  const onChange = props.onChange;
  const handleChange = useCallback(event => {
    // We manipulate the event to add the language to the target.
    // That way the users of LocalizedTextInput's onChange can read
    // event.target.language and event.target.value to determine the next value.
    //
    // We only need this information for the story, the MC application code will
    // never need to access the information in such an inconvenient way, as
    // Formik can deal with a name like "foo.en" and sets the value correctly.
    // We can't use this as we aren't guaranteed a name in the story as the user
    // might clear it using the knob, and then we can't parse the language from
    // the input name anymore.
    event.target.language = props.language;
    onChange === null || onChange === void 0 ? void 0 : onChange(event);
  }, [onChange, props.language]);
  const onFocus = props.onFocus,
    onToggle = props.onToggle;
  const handleFocus = useCallback(() => {
    // Expand the input on focus
    if (props.isCollapsed) onToggle === null || onToggle === void 0 ? void 0 : onToggle();
    if (onFocus) onFocus();
  }, [props.isCollapsed, onFocus, onToggle]);
  const shouldToggleButtonTakeSpace =
  /*
    - if hasLanguagesControl and there are no errors/warnings to display
    - then the toggleButton is absolutely positioned
    This is because the toggle button is placed next to the LocalizedInputToggle without being siblings in the DOM.
    If there is a error or warning showing,
    then it can be placed statically because it will then be a sibling to the error/warning message
    and LocalizedInputToggle is placed below the errors/warnings.
  */
  !props.isCollapsed && inputHasSeveralRows && !props.hasLanguagesControl || props.error || props.warning;
  if (!props.isReadOnly) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.onChange === 'function', 'LocalizedMultilineTextInput/TranslationInput: "onChange" is required when isReadOnly is not true') : void 0;
  }
  return jsxs(Stack, {
    scale: "xs",
    children: [jsxs("div", {
      css: _ref,
      children: [jsx("label", {
        htmlFor: props.id,
        css: getLanguageLabelStyles(props),
        children: props.language.toUpperCase()
      }), jsx(MultilineInput, _objectSpread$2(_objectSpread$2({
        id: props.id,
        name: props.name,
        autoComplete: props.autoComplete,
        value: props.value,
        onChange: handleChange,
        onHeightChange: handleHeightChange,
        onBlur: props.onBlur,
        onFocus: handleFocus,
        isDisabled: props.isDisabled,
        placeholder: props.placeholder,
        css: getTextareaStyles(props),
        hasError: props.hasError,
        hasWarning: props.hasWarning,
        isReadOnly: props.isReadOnly,
        isAutofocussed: props.isAutofocussed,
        isOpen: !props.isCollapsed
      }, filterDataAttributes(props)), {}, {
        /* ARIA */
        "aria-invalid": props['aria-invalid'],
        "aria-errormessage": props['aria-errormessage']
      }))]
    }, props.language), jsxs(Row
    // NOTE: applying this style withing the `styled` component results in the production
    // bundle to apply the style in the wrong order.
    // For instance, we need to override the marging of the spacing component, which also
    // uses `!important`.
    // Anyway, apparently by passing the style as a `css` prop to the `styled` component
    // does the trick.
    // TODO: revisit the logic and the implementation to maybe avoid having to apply this style.
    , {
      css: /*#__PURE__*/css("margin-top:", shouldToggleButtonTakeSpace ? 'inherit' : '0px !important', ";" + (process.env.NODE_ENV === "production" ? "" : ";label:TranslationInput;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
      children: [(() => {
        if (props.error) return jsx(LeftColumn, {
          children: jsx("div", {
            children: props.error
          })
        });
        if (props.warning) return jsx(LeftColumn, {
          children: jsx("div", {
            children: props.warning
          })
        });
        return null;
      })(), !props.isCollapsed && inputHasSeveralRows && jsxs(Fragment, {
        children: [jsx(LeftColumn, {}), jsx(RightColumn, {
          children: jsx(ToggleButtonWrapper, {
            css: [!shouldToggleButtonTakeSpace && /*#__PURE__*/css("position:absolute;top:0;right:0;margin-top:", designTokens.spacing10, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:TranslationInput;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : ";label:TranslationInput;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"],
            children: jsx(FlatButton, {
              onClick: props.onToggle,
              isDisabled: props.isDisabled,
              label: props.intl.formatMessage(messagesMultilineInput.collapse),
              icon: jsx(AngleUpIcon, {
                size: "small"
              })
            })
          })
        })]
      })]
    })]
  });
};
TranslationInput.propTypes = process.env.NODE_ENV !== "production" ? {
  'aria-invalid': _pt.bool,
  'aria-errormessage': _pt.string,
  onChange: _pt.func,
  language: _pt.string.isRequired,
  onFocus: _pt.func,
  onToggle: _pt.func,
  isCollapsed: _pt.bool,
  hasLanguagesControl: _pt.bool,
  warning: _pt.node,
  error: _pt.node,
  id: _pt.string,
  name: _pt.string,
  autoComplete: _pt.string,
  value: _pt.string.isRequired,
  onBlur: _pt.func,
  isDisabled: _pt.bool,
  placeholder: _pt.string,
  hasWarning: _pt.bool,
  hasError: _pt.bool,
  isReadOnly: _pt.bool,
  isAutofocussed: _pt.bool,
  intl: _pt.shape({
    formatMessage: _pt.func.isRequired
  }).isRequired
} : {};
TranslationInput.displayName = 'TranslationInput';
var TranslationInput$1 = TranslationInput;

function ownKeys$1(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys$1(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys$1(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const RequiredValueErrorMessage = () => jsx(ErrorMessage, {
  children: jsx(FormattedMessage, _objectSpread$1({}, messagesLocalizedInput.missingRequiredField))
});
RequiredValueErrorMessage.displayName = 'RequiredValueErrorMessage';
var RequiredValueErrorMessage$1 = RequiredValueErrorMessage;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context3 = ownKeys(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const expandedTranslationsReducer = (state, action) => {
  switch (action.type) {
    case 'toggle':
      return _objectSpread(_objectSpread({}, state), {}, {
        [action.payload]: !state[action.payload]
      });
    case 'toggleAll':
      {
        var _context;
        const newState = _reduceInstanceProperty(_context = _Object$keys(state)).call(_context, (translations, locale) => {
          return _objectSpread({
            [locale]: true
          }, translations);
        }, {});
        return newState;
      }
    default:
      return state;
  }
};

// This component supports expanding/collapsing multiline inputs, but it also
// supports showing/hiding the remaining languages.
// These two features are both about opening/closing something, and so the code
// can get quite confusing. We try to stick to expand/collapse for the
// multiline inputs, while we use show/hide/open/close for the remaining
// languages.
const LocalizedMultilineTextInput = props => {
  var _context2;
  const intl = useIntl();
  const initialExpandedTranslationsState = _reduceInstanceProperty(_context2 = _Object$keys(props.value)).call(_context2, (translations, locale) => _objectSpread(_objectSpread({}, translations), {}, {
    [locale]: Boolean(props.defaultExpandMultilineText)
  }), {});
  const _useReducer = useReducer(expandedTranslationsReducer, initialExpandedTranslationsState),
    _useReducer2 = _slicedToArray(_useReducer, 2),
    expandedTranslationsState = _useReducer2[0],
    expandedTranslationsDispatch = _useReducer2[1];
  const defaultExpansionState = props.hideLanguageExpansionControls || props.defaultExpandLanguages ||
  // useToggleState's default is `true`, but we want `false`
  false;
  const _useToggleState = useToggleState(defaultExpansionState),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    areLanguagesOpened = _useToggleState2[0],
    toggleLanguages = _useToggleState2[1];
  const toggleLanguage = useCallback(language => {
    expandedTranslationsDispatch({
      type: 'toggle',
      payload: language
    });
  }, [expandedTranslationsDispatch]);
  const languages = sortLanguages(props.selectedLanguage, _Object$keys(props.value));
  const hasErrorInRemainingLanguages = props.hasError || getHasErrorOnRemainingLanguages(props.errors, props.selectedLanguage);
  const hasWarningInRemainingLanguages = props.hasWarning || getHasWarningOnRemainingLanguages(props.warnings, props.selectedLanguage);
  if (hasErrorInRemainingLanguages || hasWarningInRemainingLanguages) {
    if (!areLanguagesOpened) {
      // this update within render replaces the old `getDerivedStateFromProps` functionality
      // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops
      toggleLanguages();
    }
  }
  const onLocalizedInputToggle = useCallback(() => toggleLanguages(), [toggleLanguages]);
  const shouldRenderLanguagesButton = languages.length > 1 && !props.hideLanguageExpansionControls;
  if (!props.isReadOnly) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.onChange === 'function', 'LocalizedMultilineTextInput: "onChange" is required when isReadOnly is not true') : void 0;
  }
  if (props.hideLanguageExpansionControls) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.hideLanguageExpansionControls === 'boolean', 'LocalizedMultilineTextInput: "defaultExpandLanguages" does not have any effect when "hideLanguageExpansionControls" is set.') : void 0;
  }
  return jsx(Constraints.Horizontal, {
    max: props.horizontalConstraint,
    children: jsxs(Stack, {
      scale: "xs",
      children: [jsx(Stack, {
        scale: "s",
        children: _mapInstanceProperty(languages).call(languages, (language, index) => {
          const isFirstLanguage = index === 0;
          if (!isFirstLanguage && !areLanguagesOpened) return null;
          const isLastLanguage = index === languages.length - 1;
          const hasLanguagesControl = isFirstLanguage && !areLanguagesOpened || isLastLanguage;
          return jsx(TranslationInput$1, _objectSpread(_objectSpread({
            autoComplete: props.autoComplete,
            id: LocalizedMultilineTextInput.getId(props.id, language),
            name: LocalizedMultilineTextInput.getName(props.name, language),
            value: props.value[language],
            onChange: props.onChange,
            language: language,
            isCollapsed: !expandedTranslationsState[language],
            onToggle: () => toggleLanguage(language),
            placeholder: props.placeholder ? props.placeholder[language] : undefined,
            onBlur: props.onBlur,
            onFocus: props.onFocus,
            isAutofocussed: index === 0 && props.isAutofocussed,
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            hasError: Boolean(props.hasError || props.errors && props.errors[language]),
            hasWarning: Boolean(props.hasWarning || props.warnings && props.warnings[language]),
            intl: intl,
            warning: props.warnings && props.warnings[language],
            error: props.errors && props.errors[language],
            hasLanguagesControl: hasLanguagesControl
          }, createLocalizedDataAttributes(props, language)), {}, {
            /* ARIA */
            "aria-invalid": props['aria-invalid'],
            "aria-errormessage": props['aria-errormessage']
          }), language);
        })
      }), shouldRenderLanguagesButton && jsx(LocalizedInputToggle, {
        isOpen: areLanguagesOpened,
        onClick: onLocalizedInputToggle,
        isDisabled: areLanguagesOpened && Boolean(hasErrorInRemainingLanguages || hasWarningInRemainingLanguages),
        remainingLocalizations: languages.length - 1
      })]
    })
  });
};
LocalizedMultilineTextInput.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt.string,
  name: _pt.string,
  autoComplete: _pt.string,
  'aria-invalid': _pt.bool,
  'aria-errormessage': _pt.string,
  value: _pt.objectOf(_pt.string).isRequired,
  onChange: _pt.func,
  selectedLanguage: _pt.string.isRequired,
  onBlur: _pt.func,
  onFocus: _pt.func,
  defaultExpandMultilineText: _pt.bool,
  hideLanguageExpansionControls: _pt.bool,
  defaultExpandLanguages: _pt.bool,
  isAutofocussed: _pt.bool,
  isDisabled: _pt.bool,
  isReadOnly: _pt.bool,
  placeholder: _pt.objectOf(_pt.string),
  horizontalConstraint: _pt.oneOf([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto']),
  hasError: _pt.bool,
  hasWarning: _pt.bool,
  errors: _pt.objectOf(_pt.node),
  warnings: _pt.objectOf(_pt.node)
} : {};
LocalizedMultilineTextInput.displayName = 'LocalizedMultilineTextInput';
LocalizedMultilineTextInput.RequiredValueErrorMessage = RequiredValueErrorMessage$1;
LocalizedMultilineTextInput.getId = getId;
LocalizedMultilineTextInput.getName = getName;
LocalizedMultilineTextInput.defaultProps = {
  horizontalConstraint: 'scale'
};
LocalizedMultilineTextInput.createLocalizedString = createLocalizedString;
LocalizedMultilineTextInput.isEmpty = isEmpty;
LocalizedMultilineTextInput.omitEmptyTranslations = omitEmptyTranslations;
LocalizedMultilineTextInput.isTouched = isTouched;
var LocalizedMultilineTextInput$1 = LocalizedMultilineTextInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { LocalizedMultilineTextInput$1 as default, version };
