import { type ReactNode, type ChangeEventHandler, type FocusEventHandler } from 'react';
interface HTMLLocalizedTextAreaElement extends HTMLTextAreaElement {
    language: string;
}
export type TLocalizedMultilineTextInputProps = {
    id?: string;
    name?: string;
    autoComplete?: string;
    'aria-invalid'?: boolean;
    'aria-errormessage'?: string;
    value: {
        [key: string]: string;
    };
    onChange?: ChangeEventHandler<HTMLLocalizedTextAreaElement>;
    selectedLanguage: string;
    onBlur?: FocusEventHandler<HTMLLocalizedTextAreaElement>;
    onFocus?: () => void;
    defaultExpandMultilineText?: boolean;
    hideLanguageExpansionControls?: boolean;
    defaultExpandLanguages?: boolean;
    isAutofocussed?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    placeholder?: {
        [key: string]: string;
    };
    horizontalConstraint?: 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    hasError?: boolean;
    hasWarning?: boolean;
    errors?: {
        [key: string]: ReactNode;
    };
    warnings?: {
        [key: string]: ReactNode;
    };
};
declare const LocalizedMultilineTextInput: {
    (props: TLocalizedMultilineTextInputProps): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    RequiredValueErrorMessage: {
        (): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    getId: (idPrefix?: string | undefined, language?: string | undefined) => string | undefined;
    getName: (namePrefix?: string | undefined, language?: string | undefined) => string | undefined;
    defaultProps: {
        horizontalConstraint: string;
    };
    createLocalizedString: (languages: string[], existingTranslations?: {
        [locale: string]: string;
    }) => {
        [locale: string]: string;
    };
    isEmpty: (localizedString?: {
        [locale: string]: string;
    } | undefined) => boolean;
    omitEmptyTranslations: <TTranslations extends {
        [locale: string]: string;
    }>(localizedString: TTranslations) => {
        [locale: string]: string;
    };
    isTouched: (touched?: {
        [locale: string]: boolean;
    } | undefined) => boolean;
};
export default LocalizedMultilineTextInput;
