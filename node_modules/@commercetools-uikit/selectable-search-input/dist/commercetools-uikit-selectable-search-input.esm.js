import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _styled from '@emotion/styled/base';
import _pt from 'prop-types';
import _flatMapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/flat-map';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _trimInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/trim';
import { useCallback, useState, useRef } from 'react';
import SecondaryIconButton from '@commercetools-uikit/secondary-icon-button';
import Constraints from '@commercetools-uikit/constraints';
import { CloseIcon, SearchIcon } from '@commercetools-uikit/icons';
import { createSequentialId, warning, filterDataAttributes } from '@commercetools-uikit/utils';
import { createSelectStyles, DropdownIndicator, messages, warnIfMenuPortalPropsAreMissing } from '@commercetools-uikit/select-utils';
import { css } from '@emotion/react';
import { getInputStyles } from '@commercetools-uikit/input-utils';
import { designTokens } from '@commercetools-uikit/design-system';
import _objectWithoutProperties from '@babel/runtime-corejs3/helpers/esm/objectWithoutProperties';
import { useIntl } from 'react-intl';
import Select, { components } from 'react-select';
import { jsx, jsxs } from '@emotion/react/jsx-runtime';
import { useToggleState, useFieldId } from '@commercetools-uikit/hooks';

function ownKeys$2(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys$2(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys$2(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const getInputContainerBorderColor = function (props) {
  let defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : designTokens.borderColorForInput;
  if (props.isDisabled) {
    return designTokens.borderColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designTokens.borderColorForInputWhenReadonly;
  }
  if (props.hasError) {
    return designTokens.borderColorForInputWhenError;
  }
  if (props.hasWarning) {
    return designTokens.borderColorForInputWhenWarning;
  }
  return defaultColor;
};
const getInputFontColor = props => {
  if (props.isDisabled) {
    return designTokens.fontColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designTokens.fontColorForInputWhenReadonly;
  }
  if (props.hasError) {
    return designTokens.fontColorForInputWhenError;
  }
  if (props.hasWarning) {
    return designTokens.fontColorForInputWhenWarning;
  }
  return designTokens.fontColorForInput;
};
const getInputBoxShadow = props => {
  if (props.hasError) {
    return designTokens.shadowForInputWhenError;
  }
  if (props.hasWarning) {
    return designTokens.shadowForInputWhenWarning;
  }
  return designTokens.shadowForInput;
};
const getSelectableSearchInputStyles = props => [getInputStyles(props), /*#__PURE__*/css("border:none;box-shadow:none;background:none;&,&:focus,&:focus:not(:read-only){box-shadow:none;}&:focus,&:hover{background-color:transparent!important;}width:100%;color:", getInputFontColor(props), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getSelectableSearchInputStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")];
const getButtonStyles = () => /*#__PURE__*/css("border:none;background:none;height:100%;border-top-right-radius:", designTokens.borderRadiusForInput, ";border-bottom-right-radius:", designTokens.borderRadiusForInput, ";border-left:none;align-items:center;transition:border-color ", designTokens.transitionStandard, ",background-color ", designTokens.transitionStandard, ";transition:border-color ", designTokens.transitionStandard, ",box-shadow ", designTokens.transitionStandard, ";margin-right:", designTokens.marginRightForClearInputIcon, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getButtonStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const getIconColor = (props, defaultColor) => {
  if (props.isDisabled) {
    return designTokens.fontColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designTokens.fontColorForSearchInputIconWhenReadonly;
  }
  return defaultColor;
};
const getClearIconButtonStyles = props => [getButtonStyles(), /*#__PURE__*/css("fill:", getIconColor(props, designTokens.fontColorForClearInputIcon), ";&:hover{fill:", getIconColor(props, designTokens.fontColorForClearInputIconWhenHovered), ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:getClearIconButtonStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")];
const getSearchIconButtonStyles = props => [getButtonStyles(), /*#__PURE__*/css("margin-right:", designTokens.marginRightForSearchInputIcon, ";fill:", getIconColor(props, designTokens.fontColorForSearchInputIcon), ";cursor:", props.isReadOnly ? 'default' : 'pointer', ";&:hover{fill:", getIconColor(props, designTokens.fontColorForSearchInputIconWhenHovered), ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:getSearchIconButtonStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")];
const getBackgroundColor = (props, defaultColor) => {
  if (props.isDisabled) {
    return designTokens.backgroundColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designTokens.backgroundColorForInputWhenReadonly;
  }
  return defaultColor;
};
const getSelectableSearchInputContainerStyles = props => [/*#__PURE__*/css("display:flex;align-items:center;background-color:", getBackgroundColor(props, designTokens.backgroundColorForInput), ";border:1px solid ", getInputContainerBorderColor(props), ";border-radius:", designTokens.borderRadiusForInput, ";box-shadow:", getInputBoxShadow(props), ";height:", designTokens.heightForInput, ";box-sizing:border-box;border-top-left-radius:0;border-bottom-left-radius:0;margin-left:0;width:", props.horizontalConstraint === 'auto' ? 'auto' : '100%', ";transition:border-color ", designTokens.transitionStandard, ",background-color ", designTokens.transitionStandard, ";&::placeholder{color:", designTokens.placeholderFontColorForInput, ";}&:hover{border-color:", getInputContainerBorderColor(props, designTokens.borderColorForInputWhenHovered), ";background-color:", getBackgroundColor(props, designTokens.backgroundColorForInputWhenHovered), ";}&:focus{border-color:", designTokens.borderColorForInputWhenFocused, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:getSelectableSearchInputContainerStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), !props.isDisabled && !props.isReadOnly && /*#__PURE__*/css("&:focus-within{border-color:", designTokens.borderColorForInputWhenFocused, ";box-shadow:", designTokens.boxShadowForDatetimeInputWhenHovered, " ", designTokens.borderColorForInputWhenFocused, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:getSelectableSearchInputContainerStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")];
const createSelectableSelectStyles = _ref => {
  let hasWarning = _ref.hasWarning,
    hasError = _ref.hasError,
    isDisabled = _ref.isDisabled,
    isReadOnly = _ref.isReadOnly,
    menuPortalZIndex = _ref.menuPortalZIndex,
    dropdownHasFocus = _ref.dropdownHasFocus,
    horizontalConstraint = _ref.horizontalConstraint;
  const selectStyles = createSelectStyles({
    hasWarning,
    hasError,
    menuPortalZIndex,
    isDisabled,
    isReadOnly,
    horizontalConstraint
  });
  return _objectSpread$2(_objectSpread$2({}, selectStyles), {}, {
    control: (base, state) => _objectSpread$2(_objectSpread$2({}, selectStyles.control(base, state)), {}, {
      padding: designTokens.paddingForSelectableSearchInputDropdown,
      borderTopRightRadius: '0',
      borderBottomRightRadius: '0',
      borderRight: '0',
      height: '100%',
      borderColor: (() => {
        if (isDisabled) return "".concat(designTokens.borderColorForInputWhenDisabled, " !important");
        if (isReadOnly) return "".concat(designTokens.borderColorForInputWhenReadonly, " !important");
        if (hasError) return designTokens.borderColorForInputWhenError;
        if (hasWarning) return designTokens.borderColorForInputWhenWarning;
        if (dropdownHasFocus) {
          return designTokens.borderColorForInputWhenFocused;
        }
        return designTokens.borderColorForInput;
      })(),
      cursor: (() => {
        if (isDisabled) return 'not-allowed';
        if (isReadOnly) return "default";
        return 'pointer';
      })(),
      backgroundColor: getBackgroundColor({
        isDisabled,
        isReadOnly
      }, base.backgroundColor || ''),
      '&:hover': {
        backgroundColor: getBackgroundColor({
          isDisabled,
          isReadOnly
        }, designTokens.backgroundColorForInputWhenHovered)
      }
    }),
    singleValue: base => _objectSpread$2(_objectSpread$2({}, base), {}, {
      marginLeft: 0,
      maxWidth: 'initial',
      color: getInputFontColor({
        hasWarning,
        hasError,
        isDisabled,
        isReadOnly
      })
    }),
    dropdownIndicator: () => ({
      fill: isReadOnly ? designTokens.fontColorForInputWhenDisabled : designTokens.fontColorForSelectInputIcon
    })
  });
};

const _excluded = ["id"];
function ownKeys$1(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys$1(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys$1(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const SingleValue = _ref => {
  let id = _ref.id,
    props = _objectWithoutProperties(_ref, _excluded);
  return jsx(components.SingleValue, _objectSpread$1(_objectSpread$1({}, props), {}, {
    children: jsx("label", {
      htmlFor: id,
      children: props.children
    })
  }));
};
SingleValue.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt.string,
  children: _pt.node
} : {};
const SelectableSelect = props => {
  const intl = useIntl();
  const dropdownStyles = createSelectableSelectStyles({
    hasWarning: props.hasWarning,
    hasError: props.hasError,
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    menuPortalZIndex: props.menuPortalZIndex,
    dropdownHasFocus: props.dropdownHasFocus
  });
  const onChange = props.onChange,
    name = props.name,
    id = props.id,
    textInputRef = props.textInputRef;
  const handleDropdownChange = useCallback(nextSelectedOptions => {
    var _textInputRef$current;
    if (onChange) {
      onChange({
        target: {
          id: id,
          name: name,
          value: nextSelectedOptions.value
        }
      });
    }
    (_textInputRef$current = textInputRef.current) === null || _textInputRef$current === void 0 ? void 0 : _textInputRef$current.focus();
  }, [onChange, id, name, textInputRef]);
  return jsx(Select, {
    inputId: props.id,
    name: props.name,
    value: props.selectedOption,
    isDisabled: props.isDisabled,
    isSearchable: props.isReadOnly ? false : props.isMenuSearchable,
    maxMenuHeight: props.maxMenuHeight,
    closeMenuOnSelect: props.closeMenuOnSelect,
    components: {
      SingleValue: innerProps => jsx(SingleValue, _objectSpread$1(_objectSpread$1({}, innerProps), {}, {
        id: props.id
      })),
      DropdownIndicator
    },
    options: props.options,
    menuIsOpen: props.isReadOnly ? false : undefined,
    placeholder: "",
    styles: dropdownStyles,
    onFocus: props.handleDropdownFocus,
    menuPortalTarget: props.menuPortalTarget,
    menuShouldBlockScroll: props.menuShouldBlockScroll,
    onBlur: props.handleDropdownBlur,
    onChange: handleDropdownChange,
    onInputChange: props.onMenuInputChange,
    noOptionsMessage: props.noMenuOptionsMessage || (_ref2 => {
      let inputValue = _ref2.inputValue;
      return !inputValue || inputValue === '' ? intl.formatMessage(messages.noOptionsMessageWithoutInputValue) : intl.formatMessage(messages.noOptionsMessageWithInputValue, {
        inputValue
      });
    })
  });
};
SelectableSelect.propTypes = process.env.NODE_ENV !== "production" ? {
  dropdownHasFocus: _pt.bool.isRequired,
  handleDropdownFocus: _pt.func.isRequired,
  handleDropdownBlur: _pt.func.isRequired,
  textInputRef: _pt.any.isRequired,
  selectedOption: _pt.any
} : {};
var SelectableSelect$1 = SelectableSelect;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context3 = ownKeys(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const Container = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "encv1cf0"
} : {
  target: "encv1cf0",
  label: "Container"
})(process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "zjik7",
  styles: "display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const getTextInputName = name => name ? "".concat(name, ".textInput") : undefined;
const getDropdownName = name => name ? "".concat(name, ".dropdown") : undefined;
const defaultProps = {
  horizontalConstraint: 'scale',
  isClearable: true,
  menuHorizontalConstraint: 3,
  showSubmitButton: true,
  menuPortalZIndex: 1,
  options: []
};
const selectableSearchInputSequentialId = createSequentialId('selectable-search-input-');
const isOptionObject = option => option.options !== undefined;
const SelectableSearchInput = props => {
  var _context;
  const _useToggleState = useToggleState(false),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    dropdownHasFocus = _useToggleState2[0],
    toggleDropdownHasFocus = _useToggleState2[1];
  const _useState = useState(props.value.text || ''),
    _useState2 = _slicedToArray(_useState, 2),
    searchValue = _useState2[0],
    setSearchValue = _useState2[1];
  const containerRef = useRef(null);
  const textInputRef = useRef(null);
  const optionsWithoutGroups = _flatMapInstanceProperty(_context = props.options).call(_context, option => {
    if (isOptionObject(option)) {
      return option.options;
    }
    return option;
  });
  const selectedOption = _findInstanceProperty(optionsWithoutGroups).call(optionsWithoutGroups, option => option.value === props.value.option);
  const selectablSearchInputId = useFieldId(props.id, selectableSearchInputSequentialId);
  if (!props.isReadOnly) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.onChange === 'function', 'SelectableSearchInput: `onChange` is required when is not read only.') : void 0;
  }
  warnIfMenuPortalPropsAreMissing({
    menuPortalZIndex: props.menuPortalZIndex,
    menuPortalTarget: props.menuPortalTarget,
    componentName: 'SelectableSearchInput'
  });
  const onFocus = props.onFocus,
    onBlur = props.onBlur,
    name = props.name;
  const handleTextInputFocus = useCallback(() => {
    if (onFocus) {
      onFocus({
        target: {
          id: SelectableSearchInput.getTextInputId(selectablSearchInputId),
          name: getTextInputName(name)
        }
      });
    }
  }, [onFocus, selectablSearchInputId, name]);
  const handleTextInputBlur = useCallback(() => {
    if (onBlur) {
      onBlur({
        target: {
          id: SelectableSearchInput.getTextInputId(selectablSearchInputId),
          name: getTextInputName(name)
        }
      });
    }
  }, [onBlur, selectablSearchInputId, name]);
  const handleClear = () => {
    setSearchValue('');
    if (props.onReset) {
      props.onReset();
    }
  };
  const handleChange = event => {
    setSearchValue(event.target.value);
    if (props.onChange) {
      props.onChange({
        target: {
          id: SelectableSearchInput.getTextInputId(selectablSearchInputId),
          name: getTextInputName(props.name),
          value: event.target.value
        }
      });
    }
  };
  const handleSubmit = event => {
    event.preventDefault();
    if (props.onSubmit) {
      var _selectedOption$value;
      props.onSubmit({
        text: searchValue,
        option: (_selectedOption$value = selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value) !== null && _selectedOption$value !== void 0 ? _selectedOption$value : ''
      });
    }
  };
  const dropdownName = getDropdownName(props.name);
  const dropdownId = SelectableSearchInput.getDropdownId(selectablSearchInputId);
  const handleDropdownFocus = useCallback(() => {
    if (onFocus) {
      onFocus({
        target: {
          id: dropdownId,
          name: dropdownName
        }
      });
    }
    toggleDropdownHasFocus(true);
  }, [onFocus, toggleDropdownHasFocus, dropdownName, dropdownId]);
  const handleDropdownBlur = useCallback(() => {
    if (onBlur) {
      onBlur({
        target: {
          id: dropdownId,
          name: dropdownName
        }
      });
    }
    toggleDropdownHasFocus(false);
  }, [toggleDropdownHasFocus, onBlur, dropdownName, dropdownId]);
  const handleContainerBlur = useCallback(event => {
    var _containerRef$current;
    // ensures that both fields are marked as touched when one of them
    // is blurred
    if (typeof onBlur === 'function' && !((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(event.relatedTarget))) {
      onBlur({
        target: {
          id: SelectableSearchInput.getDropdownId(selectablSearchInputId),
          name: getDropdownName(name)
        }
      });
      onBlur({
        target: {
          id: SelectableSearchInput.getTextInputId(selectablSearchInputId),
          name: getTextInputName(name)
        }
      });
    }
  }, [onBlur, selectablSearchInputId, name]);
  return jsx(Constraints.Horizontal, {
    max: props.horizontalConstraint,
    children: jsxs(Container, {
      ref: containerRef,
      onBlur: handleContainerBlur,
      "data-testid": "selectable-search-input-container",
      children: [jsx(Constraints.Horizontal, {
        max: props.menuHorizontalConstraint,
        children: jsx(SelectableSelect$1, _objectSpread(_objectSpread({}, props), {}, {
          id: SelectableSearchInput.getDropdownId(selectablSearchInputId),
          name: getDropdownName(props.name),
          dropdownHasFocus: dropdownHasFocus,
          handleDropdownFocus: handleDropdownFocus,
          handleDropdownBlur: handleDropdownBlur,
          textInputRef: textInputRef,
          selectedOption: selectedOption
        }))
      }), jsxs("div", {
        css: [getSelectableSearchInputContainerStyles(props), dropdownHasFocus && !props.isReadOnly && /*#__PURE__*/css("border-left-color:", designTokens.borderColorForInputWhenFocused, ";&:hover{border-left-color:", designTokens.borderColorForInputWhenFocused, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:SelectableSearchInput;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : ";label:SelectableSearchInput;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"],
        children: [jsx("input", _objectSpread(_objectSpread({
          ref: textInputRef,
          id: SelectableSearchInput.getTextInputId(selectablSearchInputId),
          name: getTextInputName(props.name),
          type: "text",
          value: searchValue,
          onChange: handleChange,
          onBlur: handleTextInputBlur,
          onFocus: handleTextInputFocus,
          disabled: props.isDisabled,
          placeholder: props.placeholder,
          readOnly: props.isReadOnly,
          autoFocus: props.isAutofocussed,
          autoComplete: props.autoComplete,
          "aria-readonly": props.isReadOnly,
          contentEditable: !props.isReadOnly,
          css: getSelectableSearchInputStyles(props)
        }, filterDataAttributes(props)), {}, {
          /* ARIA */
          "aria-invalid": props['aria-invalid'],
          "aria-errormessage": props['aria-errormessage'],
          "data-testid": "selectable-input",
          onKeyDown: event => {
            if (!props.isReadOnly && event.key === 'Enter') {
              handleSubmit(event);
            }
          }
        })), props.isClearable && searchValue && !props.isDisabled && !props.isReadOnly && jsx(SecondaryIconButton, {
          icon: jsx(CloseIcon, {}),
          size: "medium",
          label: 'clear-button',
          onClick: handleClear,
          css: getClearIconButtonStyles(props)
        }), props.showSubmitButton && jsx(SecondaryIconButton, {
          icon: jsx(SearchIcon, {}),
          label: 'search-button',
          onClick: handleSubmit,
          css: getSearchIconButtonStyles(props),
          isDisabled: props.isDisabled
        })]
      })]
    })
  });
};
SelectableSearchInput.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt.string,
  autoComplete: _pt.string,
  'aria-invalid': _pt.bool,
  'aria-errormessage': _pt.string,
  name: _pt.string,
  value: _pt.shape({
    text: _pt.string.isRequired,
    option: _pt.string.isRequired
  }).isRequired,
  onChange: _pt.func,
  onBlur: _pt.func,
  onFocus: _pt.func,
  onSubmit: _pt.func.isRequired,
  onReset: _pt.func,
  isAutofocussed: _pt.bool,
  isDisabled: _pt.bool,
  isReadOnly: _pt.bool,
  hasError: _pt.bool,
  hasWarning: _pt.bool,
  placeholder: _pt.string,
  isClearable: _pt.bool,
  horizontalConstraint: _pt.oneOf([10, 11, 12, 13, 14, 15, 16, 'scale', 'auto']),
  options: _pt.oneOfType([_pt.arrayOf(_pt.shape({
    value: _pt.string.isRequired,
    label: _pt.node
  })), _pt.arrayOf(_pt.shape({
    options: _pt.arrayOf(_pt.shape({
      value: _pt.string.isRequired,
      label: _pt.node
    })).isRequired
  }))]).isRequired,
  menuPortalZIndex: _pt.number,
  menuHorizontalConstraint: _pt.oneOf([3, 4, 5]),
  showSubmitButton: _pt.bool
} : {};
SelectableSearchInput.displayName = 'SelectableSearchInput';
SelectableSearchInput.defaultProps = defaultProps;
SelectableSearchInput.isEmpty = formValue => {
  var _context2;
  return !formValue || _trimInstanceProperty(_context2 = formValue.text).call(_context2) === '';
};
SelectableSearchInput.getTextInputId = getTextInputName;
SelectableSearchInput.getDropdownId = getDropdownName;
var SelectableSearchInput$1 = SelectableSearchInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { SelectableSearchInput$1 as default, version };
