'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _objectWithoutProperties = require('@babel/runtime-corejs3/helpers/objectWithoutProperties');
var _styled = require('@emotion/styled/base');
var _pt = require('prop-types');
var _lastIndexOfInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/last-index-of');
var _parseFloat = require('@babel/runtime-corejs3/core-js-stable/parse-float');
var _Math$trunc = require('@babel/runtime-corejs3/core-js-stable/math/trunc');
var _indexOfInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/index-of');
var _parseInt = require('@babel/runtime-corejs3/core-js-stable/parse-int');
var _trimInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/trim');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _findInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/find');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var react$1 = require('react');
var ReactDOM = require('react-dom');
var has = require('lodash/has');
var Select = require('react-select');
var reactIntl = require('react-intl');
var react = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var utils = require('@commercetools-uikit/utils');
var Tooltip = require('@commercetools-uikit/tooltip');
var selectUtils = require('@commercetools-uikit/select-utils');
var icons = require('@commercetools-uikit/icons');
var Constraints = require('@commercetools-uikit/constraints');
var hooks = require('@commercetools-uikit/hooks');
var inputUtils = require('@commercetools-uikit/input-utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var _lastIndexOfInstanceProperty__default = /*#__PURE__*/_interopDefault(_lastIndexOfInstanceProperty);
var _parseFloat__default = /*#__PURE__*/_interopDefault(_parseFloat);
var _Math$trunc__default = /*#__PURE__*/_interopDefault(_Math$trunc);
var _indexOfInstanceProperty__default = /*#__PURE__*/_interopDefault(_indexOfInstanceProperty);
var _parseInt__default = /*#__PURE__*/_interopDefault(_parseInt);
var _trimInstanceProperty__default = /*#__PURE__*/_interopDefault(_trimInstanceProperty);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _findInstanceProperty__default = /*#__PURE__*/_interopDefault(_findInstanceProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var ReactDOM__default = /*#__PURE__*/_interopDefault(ReactDOM);
var has__default = /*#__PURE__*/_interopDefault(has);
var Select__default = /*#__PURE__*/_interopDefault(Select);
var Tooltip__default = /*#__PURE__*/_interopDefault(Tooltip);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);

var currencies = {
	ADP: {
		fractionDigits: 0
	},
	AED: {
		fractionDigits: 2
	},
	AFA: {
		fractionDigits: 2
	},
	AFN: {
		fractionDigits: 2
	},
	ALL: {
		fractionDigits: 2
	},
	AMD: {
		fractionDigits: 2
	},
	ANG: {
		fractionDigits: 2
	},
	AOA: {
		fractionDigits: 2
	},
	ARS: {
		fractionDigits: 2
	},
	ATS: {
		fractionDigits: 2
	},
	AUD: {
		fractionDigits: 2
	},
	AWG: {
		fractionDigits: 2
	},
	AYM: {
		fractionDigits: 2
	},
	AZM: {
		fractionDigits: 2
	},
	AZN: {
		fractionDigits: 2
	},
	BAM: {
		fractionDigits: 2
	},
	BBD: {
		fractionDigits: 2
	},
	BDT: {
		fractionDigits: 2
	},
	BEF: {
		fractionDigits: 0
	},
	BGL: {
		fractionDigits: 2
	},
	BGN: {
		fractionDigits: 2
	},
	BHD: {
		fractionDigits: 3
	},
	BIF: {
		fractionDigits: 0
	},
	BMD: {
		fractionDigits: 2
	},
	BND: {
		fractionDigits: 2
	},
	BOB: {
		fractionDigits: 2
	},
	BOV: {
		fractionDigits: 2
	},
	BRL: {
		fractionDigits: 2
	},
	BSD: {
		fractionDigits: 2
	},
	BTN: {
		fractionDigits: 2
	},
	BWP: {
		fractionDigits: 2
	},
	BYB: {
		fractionDigits: 0
	},
	BYR: {
		fractionDigits: 0
	},
	BZD: {
		fractionDigits: 2
	},
	CAD: {
		fractionDigits: 2
	},
	CDF: {
		fractionDigits: 2
	},
	CHF: {
		fractionDigits: 2
	},
	CLF: {
		fractionDigits: 0
	},
	CLP: {
		fractionDigits: 0
	},
	CNY: {
		fractionDigits: 2
	},
	COP: {
		fractionDigits: 2
	},
	CRC: {
		fractionDigits: 2
	},
	CSD: {
		fractionDigits: 2
	},
	CUC: {
		fractionDigits: 2
	},
	CUP: {
		fractionDigits: 2
	},
	CVE: {
		fractionDigits: 2
	},
	CYP: {
		fractionDigits: 2
	},
	CZK: {
		fractionDigits: 2
	},
	DEM: {
		fractionDigits: 2
	},
	DJF: {
		fractionDigits: 0
	},
	DKK: {
		fractionDigits: 2
	},
	DOP: {
		fractionDigits: 2
	},
	DZD: {
		fractionDigits: 2
	},
	EEK: {
		fractionDigits: 2
	},
	EGP: {
		fractionDigits: 2
	},
	ERN: {
		fractionDigits: 2
	},
	ESP: {
		fractionDigits: 0
	},
	ETB: {
		fractionDigits: 2
	},
	EUR: {
		fractionDigits: 2
	},
	FIM: {
		fractionDigits: 2
	},
	FJD: {
		fractionDigits: 2
	},
	FKP: {
		fractionDigits: 2
	},
	FRF: {
		fractionDigits: 2
	},
	GBP: {
		fractionDigits: 2
	},
	GEL: {
		fractionDigits: 2
	},
	GHC: {
		fractionDigits: 2
	},
	GHS: {
		fractionDigits: 2
	},
	GIP: {
		fractionDigits: 2
	},
	GMD: {
		fractionDigits: 2
	},
	GNF: {
		fractionDigits: 0
	},
	GRD: {
		fractionDigits: 0
	},
	GTQ: {
		fractionDigits: 2
	},
	GWP: {
		fractionDigits: 2
	},
	GYD: {
		fractionDigits: 2
	},
	HKD: {
		fractionDigits: 2
	},
	HNL: {
		fractionDigits: 2
	},
	HRK: {
		fractionDigits: 2
	},
	HTG: {
		fractionDigits: 2
	},
	HUF: {
		fractionDigits: 2
	},
	IDR: {
		fractionDigits: 2
	},
	IEP: {
		fractionDigits: 2
	},
	ILS: {
		fractionDigits: 2
	},
	INR: {
		fractionDigits: 2
	},
	IQD: {
		fractionDigits: 3
	},
	IRR: {
		fractionDigits: 2
	},
	ISK: {
		fractionDigits: 0
	},
	ITL: {
		fractionDigits: 0
	},
	JMD: {
		fractionDigits: 2
	},
	JOD: {
		fractionDigits: 3
	},
	JPY: {
		fractionDigits: 0
	},
	KES: {
		fractionDigits: 2
	},
	KGS: {
		fractionDigits: 2
	},
	KHR: {
		fractionDigits: 2
	},
	KMF: {
		fractionDigits: 0
	},
	KPW: {
		fractionDigits: 2
	},
	KRW: {
		fractionDigits: 0
	},
	KWD: {
		fractionDigits: 3
	},
	KYD: {
		fractionDigits: 2
	},
	KZT: {
		fractionDigits: 2
	},
	LAK: {
		fractionDigits: 2
	},
	LBP: {
		fractionDigits: 2
	},
	LKR: {
		fractionDigits: 2
	},
	LRD: {
		fractionDigits: 2
	},
	LSL: {
		fractionDigits: 2
	},
	LTL: {
		fractionDigits: 2
	},
	LUF: {
		fractionDigits: 0
	},
	LVL: {
		fractionDigits: 2
	},
	LYD: {
		fractionDigits: 3
	},
	MAD: {
		fractionDigits: 2
	},
	MDL: {
		fractionDigits: 2
	},
	MGA: {
		fractionDigits: 2
	},
	MGF: {
		fractionDigits: 0
	},
	MKD: {
		fractionDigits: 2
	},
	MMK: {
		fractionDigits: 2
	},
	MNT: {
		fractionDigits: 2
	},
	MOP: {
		fractionDigits: 2
	},
	MRO: {
		fractionDigits: 2
	},
	MTL: {
		fractionDigits: 2
	},
	MUR: {
		fractionDigits: 2
	},
	MVR: {
		fractionDigits: 2
	},
	MWK: {
		fractionDigits: 2
	},
	MXN: {
		fractionDigits: 2
	},
	MXV: {
		fractionDigits: 2
	},
	MYR: {
		fractionDigits: 2
	},
	MZM: {
		fractionDigits: 2
	},
	MZN: {
		fractionDigits: 2
	},
	NAD: {
		fractionDigits: 2
	},
	NGN: {
		fractionDigits: 2
	},
	NIO: {
		fractionDigits: 2
	},
	NLG: {
		fractionDigits: 2
	},
	NOK: {
		fractionDigits: 2
	},
	NPR: {
		fractionDigits: 2
	},
	NZD: {
		fractionDigits: 2
	},
	OMR: {
		fractionDigits: 3
	},
	PAB: {
		fractionDigits: 2
	},
	PEN: {
		fractionDigits: 2
	},
	PGK: {
		fractionDigits: 2
	},
	PHP: {
		fractionDigits: 2
	},
	PKR: {
		fractionDigits: 2
	},
	PLN: {
		fractionDigits: 2
	},
	PTE: {
		fractionDigits: 0
	},
	PYG: {
		fractionDigits: 0
	},
	QAR: {
		fractionDigits: 2
	},
	ROL: {
		fractionDigits: 2
	},
	RON: {
		fractionDigits: 2
	},
	RSD: {
		fractionDigits: 2
	},
	RUB: {
		fractionDigits: 2
	},
	RUR: {
		fractionDigits: 2
	},
	RWF: {
		fractionDigits: 0
	},
	SAR: {
		fractionDigits: 2
	},
	SBD: {
		fractionDigits: 2
	},
	SCR: {
		fractionDigits: 2
	},
	SDD: {
		fractionDigits: 2
	},
	SDG: {
		fractionDigits: 2
	},
	SEK: {
		fractionDigits: 2
	},
	SGD: {
		fractionDigits: 2
	},
	SHP: {
		fractionDigits: 2
	},
	SIT: {
		fractionDigits: 2
	},
	SKK: {
		fractionDigits: 2
	},
	SLL: {
		fractionDigits: 2
	},
	SOS: {
		fractionDigits: 2
	},
	SRD: {
		fractionDigits: 2
	},
	SRG: {
		fractionDigits: 2
	},
	SSP: {
		fractionDigits: 2
	},
	STD: {
		fractionDigits: 2
	},
	SVC: {
		fractionDigits: 2
	},
	SYP: {
		fractionDigits: 2
	},
	SZL: {
		fractionDigits: 2
	},
	THB: {
		fractionDigits: 2
	},
	TJS: {
		fractionDigits: 2
	},
	TMM: {
		fractionDigits: 2
	},
	TMT: {
		fractionDigits: 2
	},
	TND: {
		fractionDigits: 3
	},
	TOP: {
		fractionDigits: 2
	},
	TPE: {
		fractionDigits: 0
	},
	TRL: {
		fractionDigits: 0
	},
	TRY: {
		fractionDigits: 2
	},
	TTD: {
		fractionDigits: 2
	},
	TWD: {
		fractionDigits: 2
	},
	TZS: {
		fractionDigits: 2
	},
	UAH: {
		fractionDigits: 2
	},
	UGX: {
		fractionDigits: 0
	},
	USD: {
		fractionDigits: 2
	},
	USN: {
		fractionDigits: 2
	},
	USS: {
		fractionDigits: 2
	},
	UYU: {
		fractionDigits: 2
	},
	UZS: {
		fractionDigits: 2
	},
	VEB: {
		fractionDigits: 2
	},
	VEF: {
		fractionDigits: 2
	},
	VND: {
		fractionDigits: 0
	},
	VUV: {
		fractionDigits: 0
	},
	WST: {
		fractionDigits: 2
	},
	XAF: {
		fractionDigits: 0
	},
	XAG: {
		fractionDigits: -1
	},
	XAU: {
		fractionDigits: -1
	},
	XBA: {
		fractionDigits: -1
	},
	XBB: {
		fractionDigits: -1
	},
	XBC: {
		fractionDigits: -1
	},
	XBD: {
		fractionDigits: -1
	},
	XCD: {
		fractionDigits: 2
	},
	XDR: {
		fractionDigits: -1
	},
	XFO: {
		fractionDigits: -1
	},
	XFU: {
		fractionDigits: -1
	},
	XOF: {
		fractionDigits: 0
	},
	XPD: {
		fractionDigits: -1
	},
	XPF: {
		fractionDigits: 0
	},
	XPT: {
		fractionDigits: -1
	},
	XSU: {
		fractionDigits: -1
	},
	XTS: {
		fractionDigits: -1
	},
	XUA: {
		fractionDigits: -1
	},
	XXX: {
		fractionDigits: -1
	},
	YER: {
		fractionDigits: 2
	},
	YUM: {
		fractionDigits: 2
	},
	ZAR: {
		fractionDigits: 2
	},
	ZMK: {
		fractionDigits: 2
	},
	ZMW: {
		fractionDigits: 2
	},
	ZWD: {
		fractionDigits: 2
	},
	ZWL: {
		fractionDigits: 2
	},
	ZWN: {
		fractionDigits: 2
	},
	ZWR: {
		fractionDigits: 2
	}
};

const getLanguageLabelBackgroundColor = props => {
  if (props.isDisabled) {
    return designSystem.designTokens.backgroundColorForLocalizedInputLabelWhenDisabled;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.backgroundColorForLocalizedInputLabelWhenReadonly;
  }
  return designSystem.designTokens.backgroundColorForLocalizedInputLabel;
};
const getCurrencyLabelStyles = props => /*#__PURE__*/react.css("display:flex;color:", designSystem.designTokens.fontColorForInputWhenDisabled, ";cursor:", props.isDisabled ? 'not-allowed' : 'default', ";background-color:", getLanguageLabelBackgroundColor(props), ";border-top-left-radius:", designSystem.designTokens.borderRadiusForInput, ";border-bottom-left-radius:", designSystem.designTokens.borderRadiusForInput, ";border:1px solid ", props.isReadOnly ? designSystem.designTokens.borderColorForInputWhenReadonly : designSystem.designTokens.borderColorForInputWhenDisabled, ";border-right:0;padding:", designSystem.designTokens.paddingForMoneyInputCurrencyDropdown, ";align-items:center;font-size:", designSystem.designTokens.fontSizeForLocalizedInputLabel, ";box-sizing:border-box;&:focus-within:{border-width:1px;}" + (process.env.NODE_ENV === "production" ? "" : ";label:getCurrencyLabelStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vbmV5LWlucHV0LnN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFlMEQiLCJmaWxlIjoibW9uZXktaW5wdXQuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBnZXRJbnB1dFN0eWxlcyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2lucHV0LXV0aWxzJztcbmltcG9ydCB0eXBlIHsgVElucHV0UHJvcHMgfSBmcm9tICcuL21vbmV5LWlucHV0JztcblxuY29uc3QgZ2V0TGFuZ3VhZ2VMYWJlbEJhY2tncm91bmRDb2xvciA9IChwcm9wczogVElucHV0UHJvcHMpID0+IHtcbiAgaWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuRGlzYWJsZWQ7XG4gIH1cbiAgaWYgKHByb3BzLmlzUmVhZE9ubHkpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuUmVhZG9ubHk7XG4gIH1cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsO1xufTtcblxuY29uc3QgZ2V0Q3VycmVuY3lMYWJlbFN0eWxlcyA9IChwcm9wczogVElucHV0UHJvcHMpID0+IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgY29sb3I6ICR7ZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvcklucHV0V2hlbkRpc2FibGVkfTtcbiAgY3Vyc29yOiAke3Byb3BzLmlzRGlzYWJsZWQgPyAnbm90LWFsbG93ZWQnIDogJ2RlZmF1bHQnfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtnZXRMYW5ndWFnZUxhYmVsQmFja2dyb3VuZENvbG9yKHByb3BzKX07XG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvcklucHV0fTtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzRm9ySW5wdXR9O1xuICBib3JkZXI6IDFweCBzb2xpZFxuICAgICR7cHJvcHMuaXNSZWFkT25seVxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5SZWFkb25seVxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZH07XG4gIGJvcmRlci1yaWdodDogMDtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0Zvck1vbmV5SW5wdXRDdXJyZW5jeURyb3Bkb3dufTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAke2Rlc2lnblRva2Vucy5mb250U2l6ZUZvckxvY2FsaXplZElucHV0TGFiZWx9O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG4gICY6Zm9jdXMtd2l0aGluOiB7XG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XG4gIH1cbmA7XG5cbnR5cGUgVEdldEFtb3VudElucHV0U3R5bGVzID0ge1xuICBoYXNGb2N1czogYm9vbGVhbjtcbn0gJiBUSW5wdXRQcm9wcztcbmNvbnN0IGdldEFtb3VudElucHV0U3R5bGVzID0gKHByb3BzOiBUR2V0QW1vdW50SW5wdXRTdHlsZXMpID0+IFtcbiAgZ2V0SW5wdXRTdHlsZXMocHJvcHMpLFxuICBjc3NgXG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuXG4gICAgJjo6cGxhY2Vob2xkZXIge1xuICAgICAgY29sb3I6ICR7ZGVzaWduVG9rZW5zLnBsYWNlaG9sZGVyRm9udENvbG9yRm9ySW5wdXR9O1xuICAgIH1cbiAgYCxcbl07XG5cbnR5cGUgVEdldEhpZ2hQcmVjaXNpb25XcmFwcGVyU3R5bGVzID0ge1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGdldEhpZ2hQcmVjaXNpb25XcmFwcGVyU3R5bGVzID0gKHtcbiAgaXNEaXNhYmxlZCxcbn06IFRHZXRIaWdoUHJlY2lzaW9uV3JhcHBlclN0eWxlcykgPT4gY3NzYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIG1hcmdpbi1yaWdodDogJHtkZXNpZ25Ub2tlbnMubWFyZ2luUmlnaHRGb3JNb25leUlucHV0UHJlY2lzaW9uQmFkZ2V9O1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGN1cnNvcjogJHtpc0Rpc2FibGVkID8gJ25vdC1hbGxvd2VkJyA6ICdkZWZhdWx0J307XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuYDtcblxuZXhwb3J0IHtcbiAgZ2V0SGlnaFByZWNpc2lvbldyYXBwZXJTdHlsZXMsXG4gIGdldEN1cnJlbmN5TGFiZWxTdHlsZXMsXG4gIGdldEFtb3VudElucHV0U3R5bGVzLFxufTtcbiJdfQ== */");
const getAmountInputStyles = props => [inputUtils.getInputStyles(props), /*#__PURE__*/react.css("border-top-left-radius:0;border-bottom-left-radius:0;margin-left:0;&::placeholder{color:", designSystem.designTokens.placeholderFontColorForInput, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:getAmountInputStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vbmV5LWlucHV0LnN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwQ0siLCJmaWxlIjoibW9uZXktaW5wdXQuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBnZXRJbnB1dFN0eWxlcyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2lucHV0LXV0aWxzJztcbmltcG9ydCB0eXBlIHsgVElucHV0UHJvcHMgfSBmcm9tICcuL21vbmV5LWlucHV0JztcblxuY29uc3QgZ2V0TGFuZ3VhZ2VMYWJlbEJhY2tncm91bmRDb2xvciA9IChwcm9wczogVElucHV0UHJvcHMpID0+IHtcbiAgaWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuRGlzYWJsZWQ7XG4gIH1cbiAgaWYgKHByb3BzLmlzUmVhZE9ubHkpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvckxvY2FsaXplZElucHV0TGFiZWxXaGVuUmVhZG9ubHk7XG4gIH1cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsO1xufTtcblxuY29uc3QgZ2V0Q3VycmVuY3lMYWJlbFN0eWxlcyA9IChwcm9wczogVElucHV0UHJvcHMpID0+IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgY29sb3I6ICR7ZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvcklucHV0V2hlbkRpc2FibGVkfTtcbiAgY3Vyc29yOiAke3Byb3BzLmlzRGlzYWJsZWQgPyAnbm90LWFsbG93ZWQnIDogJ2RlZmF1bHQnfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtnZXRMYW5ndWFnZUxhYmVsQmFja2dyb3VuZENvbG9yKHByb3BzKX07XG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvcklucHV0fTtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzRm9ySW5wdXR9O1xuICBib3JkZXI6IDFweCBzb2xpZFxuICAgICR7cHJvcHMuaXNSZWFkT25seVxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5SZWFkb25seVxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZH07XG4gIGJvcmRlci1yaWdodDogMDtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0Zvck1vbmV5SW5wdXRDdXJyZW5jeURyb3Bkb3dufTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAke2Rlc2lnblRva2Vucy5mb250U2l6ZUZvckxvY2FsaXplZElucHV0TGFiZWx9O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG4gICY6Zm9jdXMtd2l0aGluOiB7XG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XG4gIH1cbmA7XG5cbnR5cGUgVEdldEFtb3VudElucHV0U3R5bGVzID0ge1xuICBoYXNGb2N1czogYm9vbGVhbjtcbn0gJiBUSW5wdXRQcm9wcztcbmNvbnN0IGdldEFtb3VudElucHV0U3R5bGVzID0gKHByb3BzOiBUR2V0QW1vdW50SW5wdXRTdHlsZXMpID0+IFtcbiAgZ2V0SW5wdXRTdHlsZXMocHJvcHMpLFxuICBjc3NgXG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuXG4gICAgJjo6cGxhY2Vob2xkZXIge1xuICAgICAgY29sb3I6ICR7ZGVzaWduVG9rZW5zLnBsYWNlaG9sZGVyRm9udENvbG9yRm9ySW5wdXR9O1xuICAgIH1cbiAgYCxcbl07XG5cbnR5cGUgVEdldEhpZ2hQcmVjaXNpb25XcmFwcGVyU3R5bGVzID0ge1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGdldEhpZ2hQcmVjaXNpb25XcmFwcGVyU3R5bGVzID0gKHtcbiAgaXNEaXNhYmxlZCxcbn06IFRHZXRIaWdoUHJlY2lzaW9uV3JhcHBlclN0eWxlcykgPT4gY3NzYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIG1hcmdpbi1yaWdodDogJHtkZXNpZ25Ub2tlbnMubWFyZ2luUmlnaHRGb3JNb25leUlucHV0UHJlY2lzaW9uQmFkZ2V9O1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGN1cnNvcjogJHtpc0Rpc2FibGVkID8gJ25vdC1hbGxvd2VkJyA6ICdkZWZhdWx0J307XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuYDtcblxuZXhwb3J0IHtcbiAgZ2V0SGlnaFByZWNpc2lvbldyYXBwZXJTdHlsZXMsXG4gIGdldEN1cnJlbmN5TGFiZWxTdHlsZXMsXG4gIGdldEFtb3VudElucHV0U3R5bGVzLFxufTtcbiJdfQ== */")];
const getHighPrecisionWrapperStyles = _ref => {
  let isDisabled = _ref.isDisabled;
  return /*#__PURE__*/react.css("position:absolute;top:0;right:0;margin-right:", designSystem.designTokens.marginRightForMoneyInputPrecisionBadge, ";height:100%;display:flex;align-items:center;cursor:", isDisabled ? 'not-allowed' : 'default', ";justify-content:center;" + (process.env.NODE_ENV === "production" ? "" : ";label:getHighPrecisionWrapperStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vbmV5LWlucHV0LnN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyRHlDIiwiZmlsZSI6Im1vbmV5LWlucHV0LnN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgZ2V0SW5wdXRTdHlsZXMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9pbnB1dC11dGlscyc7XG5pbXBvcnQgdHlwZSB7IFRJbnB1dFByb3BzIH0gZnJvbSAnLi9tb25leS1pbnB1dCc7XG5cbmNvbnN0IGdldExhbmd1YWdlTGFiZWxCYWNrZ3JvdW5kQ29sb3IgPSAocHJvcHM6IFRJbnB1dFByb3BzKSA9PiB7XG4gIGlmIChwcm9wcy5pc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsV2hlbkRpc2FibGVkO1xuICB9XG4gIGlmIChwcm9wcy5pc1JlYWRPbmx5KSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JMb2NhbGl6ZWRJbnB1dExhYmVsV2hlblJlYWRvbmx5O1xuICB9XG4gIHJldHVybiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTG9jYWxpemVkSW5wdXRMYWJlbDtcbn07XG5cbmNvbnN0IGdldEN1cnJlbmN5TGFiZWxTdHlsZXMgPSAocHJvcHM6IFRJbnB1dFByb3BzKSA9PiBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGNvbG9yOiAke2Rlc2lnblRva2Vucy5mb250Q29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZH07XG4gIGN1cnNvcjogJHtwcm9wcy5pc0Rpc2FibGVkID8gJ25vdC1hbGxvd2VkJyA6ICdkZWZhdWx0J307XG4gIGJhY2tncm91bmQtY29sb3I6ICR7Z2V0TGFuZ3VhZ2VMYWJlbEJhY2tncm91bmRDb2xvcihwcm9wcyl9O1xuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JJbnB1dH07XG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvcklucHV0fTtcbiAgYm9yZGVyOiAxcHggc29saWRcbiAgICAke3Byb3BzLmlzUmVhZE9ubHlcbiAgICAgID8gZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9ySW5wdXRXaGVuUmVhZG9ubHlcbiAgICAgIDogZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9ySW5wdXRXaGVuRGlzYWJsZWR9O1xuICBib3JkZXItcmlnaHQ6IDA7XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnBhZGRpbmdGb3JNb25leUlucHV0Q3VycmVuY3lEcm9wZG93bn07XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogJHtkZXNpZ25Ub2tlbnMuZm9udFNpemVGb3JMb2NhbGl6ZWRJbnB1dExhYmVsfTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICAmOmZvY3VzLXdpdGhpbjoge1xuICAgIGJvcmRlci13aWR0aDogMXB4O1xuICB9XG5gO1xuXG50eXBlIFRHZXRBbW91bnRJbnB1dFN0eWxlcyA9IHtcbiAgaGFzRm9jdXM6IGJvb2xlYW47XG59ICYgVElucHV0UHJvcHM7XG5jb25zdCBnZXRBbW91bnRJbnB1dFN0eWxlcyA9IChwcm9wczogVEdldEFtb3VudElucHV0U3R5bGVzKSA9PiBbXG4gIGdldElucHV0U3R5bGVzKHByb3BzKSxcbiAgY3NzYFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcbiAgICBtYXJnaW4tbGVmdDogMDtcblxuICAgICY6OnBsYWNlaG9sZGVyIHtcbiAgICAgIGNvbG9yOiAke2Rlc2lnblRva2Vucy5wbGFjZWhvbGRlckZvbnRDb2xvckZvcklucHV0fTtcbiAgICB9XG4gIGAsXG5dO1xuXG50eXBlIFRHZXRIaWdoUHJlY2lzaW9uV3JhcHBlclN0eWxlcyA9IHtcbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG59O1xuXG5jb25zdCBnZXRIaWdoUHJlY2lzaW9uV3JhcHBlclN0eWxlcyA9ICh7XG4gIGlzRGlzYWJsZWQsXG59OiBUR2V0SGlnaFByZWNpc2lvbldyYXBwZXJTdHlsZXMpID0+IGNzc2BcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xuICBtYXJnaW4tcmlnaHQ6ICR7ZGVzaWduVG9rZW5zLm1hcmdpblJpZ2h0Rm9yTW9uZXlJbnB1dFByZWNpc2lvbkJhZGdlfTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBjdXJzb3I6ICR7aXNEaXNhYmxlZCA/ICdub3QtYWxsb3dlZCcgOiAnZGVmYXVsdCd9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5cbmV4cG9ydCB7XG4gIGdldEhpZ2hQcmVjaXNpb25XcmFwcGVyU3R5bGVzLFxuICBnZXRDdXJyZW5jeUxhYmVsU3R5bGVzLFxuICBnZXRBbW91bnRJbnB1dFN0eWxlcyxcbn07XG4iXX0= */");
};

var messages = reactIntl.defineMessages({
  highPrecision: {
    id: 'UIKit.MoneyInput.highPrecision',
    description: 'Label of high precision tooltip in MoneyInput',
    defaultMessage: 'High Precision Price'
  }
});

const _excluded = ["id"];
function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context14, _context15; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context14 = ownKeys(Object(source), !0)).call(_context14, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context15 = ownKeys(Object(source))).call(_context15, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const TooltipWrapper = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "e1u90zjc0"
} : {
  target: "e1u90zjc0",
  label: "TooltipWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "zjik7",
  styles: "display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const moneyInputSequentialId = utils.createSequentialId('money-input-');
const getPortalId = id => "portal-".concat(id);
const getPortalNode = id => document.querySelector("#".concat(getPortalId(id)));
const Portal = props => {
  const domNode = getPortalNode(props.id);
  if (domNode) {
    return /*#__PURE__*/ReactDOM__default["default"].createPortal(props.children, domNode);
  }
  return null;
};
Portal.propTypes = {
  id: _pt__default["default"].string.isRequired,
  children: _pt__default["default"].node,
  isDisabled: _pt__default["default"].bool,
  isReadOnly: _pt__default["default"].bool
};
const CurrencyLabel = props => jsxRuntime.jsx("label", {
  htmlFor: props.id,
  css: getCurrencyLabelStyles(props),
  children: props.children
});
CurrencyLabel.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt__default["default"].string.isRequired,
  children: _pt__default["default"].node,
  isDisabled: _pt__default["default"].bool,
  isReadOnly: _pt__default["default"].bool
} : {};
CurrencyLabel.displayName = 'CurrencyLabel';
const SingleValue = _ref3 => {
  let id = _ref3.id,
    props = _objectWithoutProperties(_ref3, _excluded);
  return jsxRuntime.jsx(Select.components.SingleValue, _objectSpread(_objectSpread({}, props), {}, {
    children: jsxRuntime.jsx("label", {
      htmlFor: id,
      children: props.children
    })
  }));
};
SingleValue.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt__default["default"].string,
  children: _pt__default["default"].node
} : {};
SingleValue.displayName = 'SingleValue';
// overwrite styles of createSelectStyles
const createCurrencySelectStyles = _ref4 => {
  let hasWarning = _ref4.hasWarning,
    hasError = _ref4.hasError,
    isDisabled = _ref4.isDisabled,
    isReadOnly = _ref4.isReadOnly,
    menuPortalZIndex = _ref4.menuPortalZIndex,
    currencyHasFocus = _ref4.currencyHasFocus;
  const selectStyles = selectUtils.createSelectStyles({
    hasWarning,
    hasError,
    menuPortalZIndex,
    isReadOnly,
    isDisabled
  });
  return _objectSpread(_objectSpread({}, selectStyles), {}, {
    control: (base, state) => _objectSpread(_objectSpread({}, selectStyles.control(base, state)), {}, {
      padding: designSystem.designTokens.paddingForMoneyInputCurrencyDropdown,
      borderTopRightRadius: '0',
      borderBottomRightRadius: '0',
      borderRight: '0',
      minWidth: designSystem.designTokens.minWidthForMoneyInputCurrencyDropdown,
      height: '100%',
      borderColor: (() => {
        if (isDisabled) return "".concat(designSystem.designTokens.borderColorForInputWhenDisabled, " !important");
        if (isReadOnly) return "".concat(designSystem.designTokens.borderColorForInputWhenReadonly, " !important");
        if (hasError) return designSystem.designTokens.borderColorForInputWhenError;
        if (hasWarning) return designSystem.designTokens.borderColorForInputWhenWarning;
        if (currencyHasFocus) {
          return designSystem.designTokens.borderColorForInputWhenFocused;
        }
        return designSystem.designTokens.borderColorForInput;
      })(),
      cursor: (() => {
        if (isDisabled) return 'not-allowed';
        if (isReadOnly) return "default";
        return 'pointer';
      })(),
      backgroundColor: (() => {
        if (isReadOnly) return designSystem.designTokens.backgroundColorForInputWhenReadonly;
        return base.backgroundColor;
      })(),
      '&:hover': {
        borderColor: designSystem.designTokens.borderColorForInput
      },
      '&:hover:not(:read-only):not(:disabled)': {
        backgroundColor: designSystem.designTokens.backgroundColorForInputWhenHovered
      }
    }),
    singleValue: base => _objectSpread(_objectSpread({}, base), {}, {
      marginLeft: 0,
      maxWidth: 'initial',
      color: (() => {
        if (isDisabled) return designSystem.designTokens.fontColorForInputWhenDisabled;
        if (hasError) return designSystem.designTokens.fontColorForInputWhenError;
        if (hasWarning) return designSystem.designTokens.fontColorForInputWhenWarning;
        if (isReadOnly) return designSystem.designTokens.fontColorForInputWhenReadonly;
        return base.color;
      })()
    }),
    dropdownIndicator: () => ({
      fill: isReadOnly ? designSystem.designTokens.fontColorForInputWhenReadonly : designSystem.designTokens.fontColorForMoneyInputCurrencyDropdownIndicator
    })
  });
};
// The MoneyInput component always operates on a value consisting of:
// ```
// { amount: String, currencyCode: String }
// ```
//
// The amount may only use a dot as the decimal separator.
// The `currencyCode` must be supported by the API.
//
// The `MoneyInput` does not do any validation on its own. It only serves as a way
// to get the amount and `currencyCode` input from the user. Validation is always
// up to the parent.
//
// The CTP API supports two types of prices: `centPrecision` and `highPrecision`.
// The `MoneyInput` itself does not know about these. However,
// it has two static methods defined (`convertToMoneyValue` and `parseMoneyValue`),
// which can be used to convert between `MoneyInput` value and the `MoneyValue`
// supported by the API.
// Some places in the API do not support `highPrecision` prices, but the
// `convertToMoneyValue `will always return either a `centPrecision `or a
// `highPrecision` price. It's up the `MoneyInput`'s parent to show a validation
// error in case a `highPrecision` price is used.
//
// A value is considered as to have `highPrecision` when the number of supplied
// fraction digits exceed the number of fraction digits the currency uses. For
// example, `EUR 42.00` is always a `centPrecision` price, while `EUR 42.001` is always a
// `highPrecision` price. It is not possible to have `EUR 42.00` as a `highPrecision`
// price.
//
// The first time the component renders, we want to try to show the `centAmount`
// as a formatted number. To achieve this, the `parseMoneyValue` function can
// be used to turn the API value into a value the `MoneyInput` understands.
// During this transformation, the money value will get formatted into "amount".
//
// When the user changes the value, we don't want to format again. We only format
// in case the user blurs the field. This avoids many edge cases where the
// formatting would mess with the user's input.
//
//
// A full example of an `MoneyValue` with `centPrecision` would be
// ```
// {
//   "type": "centPrecision",
//   "currencyCode": "EUR",
//   "centAmount": 4200,
//   "fractionDigits": 2
// }
// ```
// which equals `EUR 42.00`.
//
// A full example of an `MoneyValue` with `highPrecision` would be
// ```
// {
//  "type": "highPrecision",
//  "currencyCode": "EUR",
//  "centAmount": 1,
//  "preciseAmount": 123456,
//  "fractionDigits": 7
// }
// ```
// which equals `EUR 0.0123456`

// Parsing
// Since most users are not careful about how they enter values, we will parse
// both `.` and `,` as decimal separators.
// When a value is `1.000,00` we parse it as `1000`.
// When a value is `1,000.00` we also parse it as `1000`.
//
// This means the highest amount always wins. We do this by comparing the last
// position of `.` and `,`. Whatever occurs later is used as the decimal separator.
const parseRawAmountToNumber = (rawAmount, locale) => {
  let fractionsSeparator;
  if (locale) {
    fractionsSeparator = 2.5 // we need any number with fractions, so that we know what is the fraction
    .toLocaleString(locale) // "symbol" for the provided locale
    .replace(/\d/g, ''); // then we remove the numbers and keep the "symbol"
  } else {
    var _context, _context2;
    const lastDot = _lastIndexOfInstanceProperty__default["default"](_context = String(rawAmount)).call(_context, '.');
    const lastComma = _lastIndexOfInstanceProperty__default["default"](_context2 = String(rawAmount)).call(_context2, ',');
    fractionsSeparator = lastComma > lastDot ? ',' : '.';
  }
  fractionsSeparator = fractionsSeparator === '.' ? '\\.' : fractionsSeparator; // here we escape the '.' to use it as regex
  // The raw amount with only one sparator
  const normalizedAmount = String(rawAmount).replace(new RegExp("[^-0-9".concat(fractionsSeparator, "]"), 'g'), '') // we just keep the numbers and the fraction symbol
  .replace(fractionsSeparator, '.'); // then we change whatever `fractionsSeparator` was to `.` so we can parse it as float

  return _parseFloat__default["default"](normalizedAmount);
};

// Turns the user input into a value the MoneyInput can pass up through onChange
// In case the number of fraction digits contained in "amount" exceeds the
// number of fraction digits the currency uses, it will emit a price of
// type "highPrecision" instead of the regular "centPrecision".
// It will return "null" in case an invalid value is entered.
// The value is invalid when
//  - no amount was entered
//  - an invalid amount was entered
//  - no currency was selected
//
// This function expects the "amount" to be a trimmed value.

const createMoneyValue = (rawAmount, locale, currencyCode) => {
  var _context3, _context4;
  if (!currencyCode) return null;
  const currency = currencies[currencyCode];
  if (!currency) return null;
  if (rawAmount.length === 0 || !utils.isNumberish(rawAmount)) return null;
  process.env.NODE_ENV !== "production" ? utils.warning(locale || currency.fractionDigits !== 0, "MoneyInput: A locale must be provided when currency has no fraction digits (".concat(currencyCode, ")")) : void 0;
  const amountAsNumber = parseRawAmountToNumber(rawAmount, locale);
  if (isNaN(amountAsNumber)) return null;

  // The cent amount is rounded to the currencie's default number
  // of fraction digits for prices with high precision.
  //
  // Additionally, JavaScript is sometimes incorrect when multiplying floats,
  //   e.g. 2.49 * 100 -> 249.00000000000003
  // While inaccuracy from multiplying floating point numbers is a
  // general problem in JS, we can avoid it by cutting off all
  // decimals. This is possible since cents is the base unit, so we
  // operate on integers anyways
  // Also we should the round the value to ensure that we come close
  // to the nearest decimal value
  // ref: https://github.com/commercetools/merchant-center-frontend/pull/770
  const centAmount = _Math$trunc__default["default"](Math.round(amountAsNumber * 10 ** currency.fractionDigits));
  const fractionDigitsOfAmount =
  // The conversion to a string will always use a dot as the separator.
  // That means we don't have to handle a comma.
  _indexOfInstanceProperty__default["default"](_context3 = String(amountAsNumber)).call(_context3, '.') === -1 ? 0 : String(amountAsNumber).length - _indexOfInstanceProperty__default["default"](_context4 = String(amountAsNumber)).call(_context4, '.') - 1;
  if (fractionDigitsOfAmount > currency.fractionDigits) {
    return {
      type: 'highPrecision',
      currencyCode,
      centAmount,
      preciseAmount: _parseInt__default["default"](
      // Here we need to convert  a number like 8.066652 to its centamount
      // We could do that by multiplying it with 10 ** number-of-fraction-digits
      // but then we'll run into problems with JavaScript's floating point
      // number precision and end up with 8066651.9999999, and then parseInt
      // cuts off the remainder.
      // So instead of using maths to convert the number, we just replace
      // the dot inside the number which does the same thing.
      // We don't need to replace "," as well, as numbers always us a dot
      // when converted using String().
      //
      // The mathematical way: amountAsNumber * 10 ** fractionDigitsOfAmount,
      String(amountAsNumber).replace('.', ''), 10),
      fractionDigits: fractionDigitsOfAmount
    };
  }
  return {
    type: 'centPrecision',
    currencyCode,
    centAmount,
    fractionDigits: currency.fractionDigits
  };
};
const createEmptyMoneyValue = currencyCode => ({
  type: 'centPrecision',
  currencyCode,
  centAmount: NaN,
  fractionDigits: 2
});
const getAmountAsNumberFromMoneyValue = moneyValue => moneyValue.type === 'highPrecision' ? moneyValue.preciseAmount / 10 ** moneyValue.fractionDigits : moneyValue.centAmount / 10 ** currencies[moneyValue.currencyCode].fractionDigits;

// gets called with a string and should return a formatted string
const formatAmount = (rawAmount, locale, currencyCode) => {
  // fallback in case the user didn't enter an amount yet (or it's invalid)
  const moneyValue = createMoneyValue(rawAmount, locale, currencyCode) || createEmptyMoneyValue(currencyCode);
  const amount = getAmountAsNumberFromMoneyValue(moneyValue);
  const fractionDigits = moneyValue.preciseAmount ? moneyValue.fractionDigits : currencies[moneyValue.currencyCode].fractionDigits;
  return isNaN(amount) ? '' : amount.toLocaleString(locale, {
    minimumFractionDigits: fractionDigits
  });
};
const getAmountInputName = name => name ? "".concat(name, ".amount") : undefined;
const getCurrencyDropdownName = name => name ? "".concat(name, ".currencyCode") : undefined;
const defaultProps = {
  currencies: [],
  horizontalConstraint: 'scale',
  menuPortalZIndex: 1
};
var _ref = process.env.NODE_ENV === "production" ? {
  name: "pw7jst",
  styles: "position:relative;width:100%"
} : {
  name: "h5hvsa-MoneyInput",
  styles: "position:relative;width:100%;label:MoneyInput;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vbmV5LWlucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwekJrQiIsImZpbGUiOiJtb25leS1pbnB1dC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSZWYsIHVzZUNhbGxiYWNrLCB0eXBlIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGhhcyBmcm9tICdsb2Rhc2gvaGFzJztcbmltcG9ydCBTZWxlY3QsIHtcbiAgY29tcG9uZW50cyxcbiAgdHlwZSBTaW5nbGVWYWx1ZVByb3BzLFxuICB0eXBlIFByb3BzIGFzIFJlYWN0U2VsZWN0UHJvcHMsXG59IGZyb20gJ3JlYWN0LXNlbGVjdCc7XG5pbXBvcnQgeyB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgeyBjc3MsIHR5cGUgVGhlbWUgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7XG4gIHdhcm5pbmcsXG4gIGlzTnVtYmVyaXNoLFxuICBmaWx0ZXJEYXRhQXR0cmlidXRlcyxcbiAgY3JlYXRlU2VxdWVudGlhbElkLFxufSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90b29sdGlwJztcbmltcG9ydCB7XG4gIERyb3Bkb3duSW5kaWNhdG9yLFxuICBjcmVhdGVTZWxlY3RTdHlsZXMsXG4gIHdhcm5JZk1lbnVQb3J0YWxQcm9wc0FyZU1pc3NpbmcsXG59IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NlbGVjdC11dGlscyc7XG5pbXBvcnQgeyBGcmFjdGlvbkRpZ2l0c0ljb24gfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9pY29ucyc7XG5pbXBvcnQgQ29uc3RyYWludHMgZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvY29uc3RyYWludHMnO1xuaW1wb3J0IHsgdXNlRmllbGRJZCwgdXNlVG9nZ2xlU3RhdGUgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9ob29rcyc7XG5pbXBvcnQgY3VycmVuY2llcyBmcm9tICcuL2N1cnJlbmNpZXMuanNvbic7XG5pbXBvcnQge1xuICBnZXRIaWdoUHJlY2lzaW9uV3JhcHBlclN0eWxlcyxcbiAgZ2V0Q3VycmVuY3lMYWJlbFN0eWxlcyxcbiAgZ2V0QW1vdW50SW5wdXRTdHlsZXMsXG59IGZyb20gJy4vbW9uZXktaW5wdXQuc3R5bGVzJztcbmltcG9ydCBtZXNzYWdlcyBmcm9tICcuL21lc3NhZ2VzJztcblxuY29uc3QgVG9vbHRpcFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuYDtcblxuY29uc3QgbW9uZXlJbnB1dFNlcXVlbnRpYWxJZCA9IGNyZWF0ZVNlcXVlbnRpYWxJZCgnbW9uZXktaW5wdXQtJyk7XG5cbmNvbnN0IGdldFBvcnRhbElkID0gKGlkPzogc3RyaW5nKSA9PiBgcG9ydGFsLSR7aWR9YDtcbmNvbnN0IGdldFBvcnRhbE5vZGUgPSAoaWQ/OiBzdHJpbmcpID0+XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2dldFBvcnRhbElkKGlkKX1gKTtcblxudHlwZSBUTGFiZWwgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgaXNSZWFkT25seT86IGJvb2xlYW47XG59O1xuXG5jb25zdCBQb3J0YWwgPSAocHJvcHM6IFRMYWJlbCkgPT4ge1xuICBjb25zdCBkb21Ob2RlID0gZ2V0UG9ydGFsTm9kZShwcm9wcy5pZCk7XG4gIGlmIChkb21Ob2RlKSB7XG4gICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChwcm9wcy5jaGlsZHJlbiwgZG9tTm9kZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBDdXJyZW5jeUxhYmVsID0gKHByb3BzOiBUTGFiZWwpID0+IChcbiAgPGxhYmVsIGh0bWxGb3I9e3Byb3BzLmlkfSBjc3M9e2dldEN1cnJlbmN5TGFiZWxTdHlsZXMocHJvcHMpfT5cbiAgICB7cHJvcHMuY2hpbGRyZW59XG4gIDwvbGFiZWw+XG4pO1xuXG5DdXJyZW5jeUxhYmVsLmRpc3BsYXlOYW1lID0gJ0N1cnJlbmN5TGFiZWwnO1xuXG50eXBlIFRTaW5nbGVWYWx1ZSA9IHtcbiAgaWQ/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xufSAmIFNpbmdsZVZhbHVlUHJvcHM7XG5cbmNvbnN0IFNpbmdsZVZhbHVlID0gKHsgaWQsIC4uLnByb3BzIH06IFRTaW5nbGVWYWx1ZSkgPT4gKFxuICA8Y29tcG9uZW50cy5TaW5nbGVWYWx1ZSB7Li4ucHJvcHN9PlxuICAgIDxsYWJlbCBodG1sRm9yPXtpZH0+e3Byb3BzLmNoaWxkcmVufTwvbGFiZWw+XG4gIDwvY29tcG9uZW50cy5TaW5nbGVWYWx1ZT5cbik7XG5cblNpbmdsZVZhbHVlLmRpc3BsYXlOYW1lID0gJ1NpbmdsZVZhbHVlJztcblxudHlwZSBUQ3JlYXRlQ3VycmVuY3lTZWxlY3RTdHlsZXMgPSAoXG4gIGlucHV0OiBUSW5wdXRQcm9wcyAmIHtcbiAgICBjdXJyZW5jeUhhc0ZvY3VzPzogYm9vbGVhbjtcbiAgfVxuKSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBUSW5wdXRQcm9wcyA9IHtcbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG4gIGhhc0Vycm9yPzogYm9vbGVhbjtcbiAgaGFzV2FybmluZz86IGJvb2xlYW47XG4gIGlzUmVhZE9ubHk/OiBib29sZWFuO1xuICBtZW51UG9ydGFsWkluZGV4PzogbnVtYmVyO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgdGhlbWU/OiBUaGVtZTtcbn07XG5cbnR5cGUgVEJhc2UgPSB7XG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgY29sb3I/OiBzdHJpbmc7XG59O1xuLy8gb3ZlcndyaXRlIHN0eWxlcyBvZiBjcmVhdGVTZWxlY3RTdHlsZXNcbmNvbnN0IGNyZWF0ZUN1cnJlbmN5U2VsZWN0U3R5bGVzOiBUQ3JlYXRlQ3VycmVuY3lTZWxlY3RTdHlsZXMgPSAoe1xuICBoYXNXYXJuaW5nLFxuICBoYXNFcnJvcixcbiAgaXNEaXNhYmxlZCxcbiAgaXNSZWFkT25seSxcbiAgbWVudVBvcnRhbFpJbmRleCxcbiAgY3VycmVuY3lIYXNGb2N1cyxcbn0pID0+IHtcbiAgY29uc3Qgc2VsZWN0U3R5bGVzID0gY3JlYXRlU2VsZWN0U3R5bGVzKHtcbiAgICBoYXNXYXJuaW5nLFxuICAgIGhhc0Vycm9yLFxuICAgIG1lbnVQb3J0YWxaSW5kZXgsXG4gICAgaXNSZWFkT25seSxcbiAgICBpc0Rpc2FibGVkLFxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICAuLi5zZWxlY3RTdHlsZXMsXG4gICAgY29udHJvbDogKGJhc2U6IFRCYXNlLCBzdGF0ZTogUmVhY3RTZWxlY3RQcm9wcykgPT4gKHtcbiAgICAgIC4uLnNlbGVjdFN0eWxlcy5jb250cm9sKGJhc2UsIHN0YXRlKSxcbiAgICAgIHBhZGRpbmc6IGRlc2lnblRva2Vucy5wYWRkaW5nRm9yTW9uZXlJbnB1dEN1cnJlbmN5RHJvcGRvd24sXG4gICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJzAnLFxuICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6ICcwJyxcbiAgICAgIGJvcmRlclJpZ2h0OiAnMCcsXG4gICAgICBtaW5XaWR0aDogZGVzaWduVG9rZW5zLm1pbldpZHRoRm9yTW9uZXlJbnB1dEN1cnJlbmN5RHJvcGRvd24sXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGJvcmRlckNvbG9yOiAoKCkgPT4ge1xuICAgICAgICBpZiAoaXNEaXNhYmxlZClcbiAgICAgICAgICByZXR1cm4gYCR7ZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9ySW5wdXRXaGVuRGlzYWJsZWR9ICFpbXBvcnRhbnRgO1xuICAgICAgICBpZiAoaXNSZWFkT25seSlcbiAgICAgICAgICByZXR1cm4gYCR7ZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9ySW5wdXRXaGVuUmVhZG9ubHl9ICFpbXBvcnRhbnRgO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHJldHVybiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5FcnJvcjtcbiAgICAgICAgaWYgKGhhc1dhcm5pbmcpIHJldHVybiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5XYXJuaW5nO1xuICAgICAgICBpZiAoY3VycmVuY3lIYXNGb2N1cykge1xuICAgICAgICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5Gb2N1c2VkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dDtcbiAgICAgIH0pKCksXG4gICAgICBjdXJzb3I6ICgoKSA9PiB7XG4gICAgICAgIGlmIChpc0Rpc2FibGVkKSByZXR1cm4gJ25vdC1hbGxvd2VkJztcbiAgICAgICAgaWYgKGlzUmVhZE9ubHkpIHJldHVybiBgZGVmYXVsdGA7XG4gICAgICAgIHJldHVybiAncG9pbnRlcic7XG4gICAgICB9KSgpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAoKCkgPT4ge1xuICAgICAgICBpZiAoaXNSZWFkT25seSkgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JJbnB1dFdoZW5SZWFkb25seTtcbiAgICAgICAgcmV0dXJuIGJhc2UuYmFja2dyb3VuZENvbG9yO1xuICAgICAgfSkoKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmJvcmRlckNvbG9yRm9ySW5wdXQsXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6bm90KDpyZWFkLW9ubHkpOm5vdCg6ZGlzYWJsZWQpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JJbnB1dFdoZW5Ib3ZlcmVkLFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBzaW5nbGVWYWx1ZTogKGJhc2U6IFRCYXNlKSA9PiAoe1xuICAgICAgLi4uYmFzZSxcbiAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICBtYXhXaWR0aDogJ2luaXRpYWwnLFxuICAgICAgY29sb3I6ICgoKSA9PiB7XG4gICAgICAgIGlmIChpc0Rpc2FibGVkKSByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvcklucHV0V2hlbkRpc2FibGVkO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHJldHVybiBkZXNpZ25Ub2tlbnMuZm9udENvbG9yRm9ySW5wdXRXaGVuRXJyb3I7XG4gICAgICAgIGlmIChoYXNXYXJuaW5nKSByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvcklucHV0V2hlbldhcm5pbmc7XG4gICAgICAgIGlmIChpc1JlYWRPbmx5KSByZXR1cm4gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvcklucHV0V2hlblJlYWRvbmx5O1xuICAgICAgICByZXR1cm4gYmFzZS5jb2xvcjtcbiAgICAgIH0pKCksXG4gICAgfSksXG4gICAgZHJvcGRvd25JbmRpY2F0b3I6ICgpID0+ICh7XG4gICAgICBmaWxsOiBpc1JlYWRPbmx5XG4gICAgICAgID8gZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvcklucHV0V2hlblJlYWRvbmx5XG4gICAgICAgIDogZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvck1vbmV5SW5wdXRDdXJyZW5jeURyb3Bkb3duSW5kaWNhdG9yLFxuICAgIH0pLFxuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgVEN1cnJlbmN5Q29kZSA9IGtleW9mIHR5cGVvZiBjdXJyZW5jaWVzO1xuXG50eXBlIFRNb25leUNvbmRpdGlvbmFsUHJvcHMgPVxuICB8IHsgdHlwZTogJ2hpZ2hQcmVjaXNpb24nOyBwcmVjaXNlQW1vdW50OiBudW1iZXIgfVxuICB8IHtcbiAgICAgIC8qKlxuICAgICAgICogVXN1YWxseSBlaXRoZXIgYSBgY2VudFByZWNpc2lvbmAgb3IgYSBgaGlnaFByZWNpc2lvbmAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdjZW50UHJlY2lzaW9uJztcbiAgICAgIHByZWNpc2VBbW91bnQ/OiBuZXZlcjtcbiAgICB9O1xuZXhwb3J0IHR5cGUgVE1vbmV5VmFsdWUgPSB7XG4gIGN1cnJlbmN5Q29kZTogVEN1cnJlbmN5Q29kZTtcbiAgY2VudEFtb3VudDogbnVtYmVyO1xuICBmcmFjdGlvbkRpZ2l0czogbnVtYmVyO1xufSAmIFRNb25leUNvbmRpdGlvbmFsUHJvcHM7XG4vLyBUaGUgTW9uZXlJbnB1dCBjb21wb25lbnQgYWx3YXlzIG9wZXJhdGVzIG9uIGEgdmFsdWUgY29uc2lzdGluZyBvZjpcbi8vIGBgYFxuLy8geyBhbW91bnQ6IFN0cmluZywgY3VycmVuY3lDb2RlOiBTdHJpbmcgfVxuLy8gYGBgXG4vL1xuLy8gVGhlIGFtb3VudCBtYXkgb25seSB1c2UgYSBkb3QgYXMgdGhlIGRlY2ltYWwgc2VwYXJhdG9yLlxuLy8gVGhlIGBjdXJyZW5jeUNvZGVgIG11c3QgYmUgc3VwcG9ydGVkIGJ5IHRoZSBBUEkuXG4vL1xuLy8gVGhlIGBNb25leUlucHV0YCBkb2VzIG5vdCBkbyBhbnkgdmFsaWRhdGlvbiBvbiBpdHMgb3duLiBJdCBvbmx5IHNlcnZlcyBhcyBhIHdheVxuLy8gdG8gZ2V0IHRoZSBhbW91bnQgYW5kIGBjdXJyZW5jeUNvZGVgIGlucHV0IGZyb20gdGhlIHVzZXIuIFZhbGlkYXRpb24gaXMgYWx3YXlzXG4vLyB1cCB0byB0aGUgcGFyZW50LlxuLy9cbi8vIFRoZSBDVFAgQVBJIHN1cHBvcnRzIHR3byB0eXBlcyBvZiBwcmljZXM6IGBjZW50UHJlY2lzaW9uYCBhbmQgYGhpZ2hQcmVjaXNpb25gLlxuLy8gVGhlIGBNb25leUlucHV0YCBpdHNlbGYgZG9lcyBub3Qga25vdyBhYm91dCB0aGVzZS4gSG93ZXZlcixcbi8vIGl0IGhhcyB0d28gc3RhdGljIG1ldGhvZHMgZGVmaW5lZCAoYGNvbnZlcnRUb01vbmV5VmFsdWVgIGFuZCBgcGFyc2VNb25leVZhbHVlYCksXG4vLyB3aGljaCBjYW4gYmUgdXNlZCB0byBjb252ZXJ0IGJldHdlZW4gYE1vbmV5SW5wdXRgIHZhbHVlIGFuZCB0aGUgYE1vbmV5VmFsdWVgXG4vLyBzdXBwb3J0ZWQgYnkgdGhlIEFQSS5cbi8vIFNvbWUgcGxhY2VzIGluIHRoZSBBUEkgZG8gbm90IHN1cHBvcnQgYGhpZ2hQcmVjaXNpb25gIHByaWNlcywgYnV0IHRoZVxuLy8gYGNvbnZlcnRUb01vbmV5VmFsdWUgYHdpbGwgYWx3YXlzIHJldHVybiBlaXRoZXIgYSBgY2VudFByZWNpc2lvbiBgb3IgYVxuLy8gYGhpZ2hQcmVjaXNpb25gIHByaWNlLiBJdCdzIHVwIHRoZSBgTW9uZXlJbnB1dGAncyBwYXJlbnQgdG8gc2hvdyBhIHZhbGlkYXRpb25cbi8vIGVycm9yIGluIGNhc2UgYSBgaGlnaFByZWNpc2lvbmAgcHJpY2UgaXMgdXNlZC5cbi8vXG4vLyBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXMgdG8gaGF2ZSBgaGlnaFByZWNpc2lvbmAgd2hlbiB0aGUgbnVtYmVyIG9mIHN1cHBsaWVkXG4vLyBmcmFjdGlvbiBkaWdpdHMgZXhjZWVkIHRoZSBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRoZSBjdXJyZW5jeSB1c2VzLiBGb3Jcbi8vIGV4YW1wbGUsIGBFVVIgNDIuMDBgIGlzIGFsd2F5cyBhIGBjZW50UHJlY2lzaW9uYCBwcmljZSwgd2hpbGUgYEVVUiA0Mi4wMDFgIGlzIGFsd2F5cyBhXG4vLyBgaGlnaFByZWNpc2lvbmAgcHJpY2UuIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBoYXZlIGBFVVIgNDIuMDBgIGFzIGEgYGhpZ2hQcmVjaXNpb25gXG4vLyBwcmljZS5cbi8vXG4vLyBUaGUgZmlyc3QgdGltZSB0aGUgY29tcG9uZW50IHJlbmRlcnMsIHdlIHdhbnQgdG8gdHJ5IHRvIHNob3cgdGhlIGBjZW50QW1vdW50YFxuLy8gYXMgYSBmb3JtYXR0ZWQgbnVtYmVyLiBUbyBhY2hpZXZlIHRoaXMsIHRoZSBgcGFyc2VNb25leVZhbHVlYCBmdW5jdGlvbiBjYW5cbi8vIGJlIHVzZWQgdG8gdHVybiB0aGUgQVBJIHZhbHVlIGludG8gYSB2YWx1ZSB0aGUgYE1vbmV5SW5wdXRgIHVuZGVyc3RhbmRzLlxuLy8gRHVyaW5nIHRoaXMgdHJhbnNmb3JtYXRpb24sIHRoZSBtb25leSB2YWx1ZSB3aWxsIGdldCBmb3JtYXR0ZWQgaW50byBcImFtb3VudFwiLlxuLy9cbi8vIFdoZW4gdGhlIHVzZXIgY2hhbmdlcyB0aGUgdmFsdWUsIHdlIGRvbid0IHdhbnQgdG8gZm9ybWF0IGFnYWluLiBXZSBvbmx5IGZvcm1hdFxuLy8gaW4gY2FzZSB0aGUgdXNlciBibHVycyB0aGUgZmllbGQuIFRoaXMgYXZvaWRzIG1hbnkgZWRnZSBjYXNlcyB3aGVyZSB0aGVcbi8vIGZvcm1hdHRpbmcgd291bGQgbWVzcyB3aXRoIHRoZSB1c2VyJ3MgaW5wdXQuXG4vL1xuLy9cbi8vIEEgZnVsbCBleGFtcGxlIG9mIGFuIGBNb25leVZhbHVlYCB3aXRoIGBjZW50UHJlY2lzaW9uYCB3b3VsZCBiZVxuLy8gYGBgXG4vLyB7XG4vLyAgIFwidHlwZVwiOiBcImNlbnRQcmVjaXNpb25cIixcbi8vICAgXCJjdXJyZW5jeUNvZGVcIjogXCJFVVJcIixcbi8vICAgXCJjZW50QW1vdW50XCI6IDQyMDAsXG4vLyAgIFwiZnJhY3Rpb25EaWdpdHNcIjogMlxuLy8gfVxuLy8gYGBgXG4vLyB3aGljaCBlcXVhbHMgYEVVUiA0Mi4wMGAuXG4vL1xuLy8gQSBmdWxsIGV4YW1wbGUgb2YgYW4gYE1vbmV5VmFsdWVgIHdpdGggYGhpZ2hQcmVjaXNpb25gIHdvdWxkIGJlXG4vLyBgYGBcbi8vIHtcbi8vICBcInR5cGVcIjogXCJoaWdoUHJlY2lzaW9uXCIsXG4vLyAgXCJjdXJyZW5jeUNvZGVcIjogXCJFVVJcIixcbi8vICBcImNlbnRBbW91bnRcIjogMSxcbi8vICBcInByZWNpc2VBbW91bnRcIjogMTIzNDU2LFxuLy8gIFwiZnJhY3Rpb25EaWdpdHNcIjogN1xuLy8gfVxuLy8gYGBgXG4vLyB3aGljaCBlcXVhbHMgYEVVUiAwLjAxMjM0NTZgXG5cbi8vIFBhcnNpbmdcbi8vIFNpbmNlIG1vc3QgdXNlcnMgYXJlIG5vdCBjYXJlZnVsIGFib3V0IGhvdyB0aGV5IGVudGVyIHZhbHVlcywgd2Ugd2lsbCBwYXJzZVxuLy8gYm90aCBgLmAgYW5kIGAsYCBhcyBkZWNpbWFsIHNlcGFyYXRvcnMuXG4vLyBXaGVuIGEgdmFsdWUgaXMgYDEuMDAwLDAwYCB3ZSBwYXJzZSBpdCBhcyBgMTAwMGAuXG4vLyBXaGVuIGEgdmFsdWUgaXMgYDEsMDAwLjAwYCB3ZSBhbHNvIHBhcnNlIGl0IGFzIGAxMDAwYC5cbi8vXG4vLyBUaGlzIG1lYW5zIHRoZSBoaWdoZXN0IGFtb3VudCBhbHdheXMgd2lucy4gV2UgZG8gdGhpcyBieSBjb21wYXJpbmcgdGhlIGxhc3Rcbi8vIHBvc2l0aW9uIG9mIGAuYCBhbmQgYCxgLiBXaGF0ZXZlciBvY2N1cnMgbGF0ZXIgaXMgdXNlZCBhcyB0aGUgZGVjaW1hbCBzZXBhcmF0b3IuXG5leHBvcnQgY29uc3QgcGFyc2VSYXdBbW91bnRUb051bWJlciA9IChyYXdBbW91bnQ6IHN0cmluZywgbG9jYWxlOiBzdHJpbmcpID0+IHtcbiAgbGV0IGZyYWN0aW9uc1NlcGFyYXRvcjtcblxuICBpZiAobG9jYWxlKSB7XG4gICAgZnJhY3Rpb25zU2VwYXJhdG9yID0gKDIuNSkgLy8gd2UgbmVlZCBhbnkgbnVtYmVyIHdpdGggZnJhY3Rpb25zLCBzbyB0aGF0IHdlIGtub3cgd2hhdCBpcyB0aGUgZnJhY3Rpb25cbiAgICAgIC50b0xvY2FsZVN0cmluZyhsb2NhbGUpIC8vIFwic3ltYm9sXCIgZm9yIHRoZSBwcm92aWRlZCBsb2NhbGVcbiAgICAgIC5yZXBsYWNlKC9cXGQvZywgJycpOyAvLyB0aGVuIHdlIHJlbW92ZSB0aGUgbnVtYmVycyBhbmQga2VlcCB0aGUgXCJzeW1ib2xcIlxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGxhc3REb3QgPSBTdHJpbmcocmF3QW1vdW50KS5sYXN0SW5kZXhPZignLicpO1xuICAgIGNvbnN0IGxhc3RDb21tYSA9IFN0cmluZyhyYXdBbW91bnQpLmxhc3RJbmRleE9mKCcsJyk7XG4gICAgZnJhY3Rpb25zU2VwYXJhdG9yID0gbGFzdENvbW1hID4gbGFzdERvdCA/ICcsJyA6ICcuJztcbiAgfVxuXG4gIGZyYWN0aW9uc1NlcGFyYXRvciA9IGZyYWN0aW9uc1NlcGFyYXRvciA9PT0gJy4nID8gJ1xcXFwuJyA6IGZyYWN0aW9uc1NlcGFyYXRvcjsgLy8gaGVyZSB3ZSBlc2NhcGUgdGhlICcuJyB0byB1c2UgaXQgYXMgcmVnZXhcbiAgLy8gVGhlIHJhdyBhbW91bnQgd2l0aCBvbmx5IG9uZSBzcGFyYXRvclxuICBjb25zdCBub3JtYWxpemVkQW1vdW50ID0gU3RyaW5nKHJhd0Ftb3VudClcbiAgICAucmVwbGFjZShuZXcgUmVnRXhwKGBbXi0wLTkke2ZyYWN0aW9uc1NlcGFyYXRvcn1dYCwgJ2cnKSwgJycpIC8vIHdlIGp1c3Qga2VlcCB0aGUgbnVtYmVycyBhbmQgdGhlIGZyYWN0aW9uIHN5bWJvbFxuICAgIC5yZXBsYWNlKGZyYWN0aW9uc1NlcGFyYXRvciwgJy4nKTsgLy8gdGhlbiB3ZSBjaGFuZ2Ugd2hhdGV2ZXIgYGZyYWN0aW9uc1NlcGFyYXRvcmAgd2FzIHRvIGAuYCBzbyB3ZSBjYW4gcGFyc2UgaXQgYXMgZmxvYXRcblxuICByZXR1cm4gcGFyc2VGbG9hdChub3JtYWxpemVkQW1vdW50KTtcbn07XG5cbi8vIFR1cm5zIHRoZSB1c2VyIGlucHV0IGludG8gYSB2YWx1ZSB0aGUgTW9uZXlJbnB1dCBjYW4gcGFzcyB1cCB0aHJvdWdoIG9uQ2hhbmdlXG4vLyBJbiBjYXNlIHRoZSBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIGNvbnRhaW5lZCBpbiBcImFtb3VudFwiIGV4Y2VlZHMgdGhlXG4vLyBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRoZSBjdXJyZW5jeSB1c2VzLCBpdCB3aWxsIGVtaXQgYSBwcmljZSBvZlxuLy8gdHlwZSBcImhpZ2hQcmVjaXNpb25cIiBpbnN0ZWFkIG9mIHRoZSByZWd1bGFyIFwiY2VudFByZWNpc2lvblwiLlxuLy8gSXQgd2lsbCByZXR1cm4gXCJudWxsXCIgaW4gY2FzZSBhbiBpbnZhbGlkIHZhbHVlIGlzIGVudGVyZWQuXG4vLyBUaGUgdmFsdWUgaXMgaW52YWxpZCB3aGVuXG4vLyAgLSBubyBhbW91bnQgd2FzIGVudGVyZWRcbi8vICAtIGFuIGludmFsaWQgYW1vdW50IHdhcyBlbnRlcmVkXG4vLyAgLSBubyBjdXJyZW5jeSB3YXMgc2VsZWN0ZWRcbi8vXG4vLyBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIFwiYW1vdW50XCIgdG8gYmUgYSB0cmltbWVkIHZhbHVlLlxuXG5leHBvcnQgY29uc3QgY3JlYXRlTW9uZXlWYWx1ZSA9IChcbiAgcmF3QW1vdW50OiBzdHJpbmcsXG4gIGxvY2FsZTogc3RyaW5nLFxuICBjdXJyZW5jeUNvZGU/OiBUQ3VycmVuY3lDb2RlIHwgJydcbik6IFRNb25leVZhbHVlIHwgbnVsbCA9PiB7XG4gIGlmICghY3VycmVuY3lDb2RlKSByZXR1cm4gbnVsbDtcblxuICBjb25zdCBjdXJyZW5jeSA9IGN1cnJlbmNpZXNbY3VycmVuY3lDb2RlXTtcbiAgaWYgKCFjdXJyZW5jeSkgcmV0dXJuIG51bGw7XG5cbiAgaWYgKHJhd0Ftb3VudC5sZW5ndGggPT09IDAgfHwgIWlzTnVtYmVyaXNoKHJhd0Ftb3VudCkpIHJldHVybiBudWxsO1xuXG4gIHdhcm5pbmcoXG4gICAgbG9jYWxlIHx8IGN1cnJlbmN5LmZyYWN0aW9uRGlnaXRzICE9PSAwLFxuICAgIGBNb25leUlucHV0OiBBIGxvY2FsZSBtdXN0IGJlIHByb3ZpZGVkIHdoZW4gY3VycmVuY3kgaGFzIG5vIGZyYWN0aW9uIGRpZ2l0cyAoJHtjdXJyZW5jeUNvZGV9KWBcbiAgKTtcbiAgY29uc3QgYW1vdW50QXNOdW1iZXIgPSBwYXJzZVJhd0Ftb3VudFRvTnVtYmVyKHJhd0Ftb3VudCwgbG9jYWxlKTtcbiAgaWYgKGlzTmFOKGFtb3VudEFzTnVtYmVyKSkgcmV0dXJuIG51bGw7XG5cbiAgLy8gVGhlIGNlbnQgYW1vdW50IGlzIHJvdW5kZWQgdG8gdGhlIGN1cnJlbmNpZSdzIGRlZmF1bHQgbnVtYmVyXG4gIC8vIG9mIGZyYWN0aW9uIGRpZ2l0cyBmb3IgcHJpY2VzIHdpdGggaGlnaCBwcmVjaXNpb24uXG4gIC8vXG4gIC8vIEFkZGl0aW9uYWxseSwgSmF2YVNjcmlwdCBpcyBzb21ldGltZXMgaW5jb3JyZWN0IHdoZW4gbXVsdGlwbHlpbmcgZmxvYXRzLFxuICAvLyAgIGUuZy4gMi40OSAqIDEwMCAtPiAyNDkuMDAwMDAwMDAwMDAwMDNcbiAgLy8gV2hpbGUgaW5hY2N1cmFjeSBmcm9tIG11bHRpcGx5aW5nIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgaXMgYVxuICAvLyBnZW5lcmFsIHByb2JsZW0gaW4gSlMsIHdlIGNhbiBhdm9pZCBpdCBieSBjdXR0aW5nIG9mZiBhbGxcbiAgLy8gZGVjaW1hbHMuIFRoaXMgaXMgcG9zc2libGUgc2luY2UgY2VudHMgaXMgdGhlIGJhc2UgdW5pdCwgc28gd2VcbiAgLy8gb3BlcmF0ZSBvbiBpbnRlZ2VycyBhbnl3YXlzXG4gIC8vIEFsc28gd2Ugc2hvdWxkIHRoZSByb3VuZCB0aGUgdmFsdWUgdG8gZW5zdXJlIHRoYXQgd2UgY29tZSBjbG9zZVxuICAvLyB0byB0aGUgbmVhcmVzdCBkZWNpbWFsIHZhbHVlXG4gIC8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2NvbW1lcmNldG9vbHMvbWVyY2hhbnQtY2VudGVyLWZyb250ZW5kL3B1bGwvNzcwXG4gIGNvbnN0IGNlbnRBbW91bnQgPSBNYXRoLnRydW5jKFxuICAgIE1hdGgucm91bmQoYW1vdW50QXNOdW1iZXIgKiAxMCAqKiBjdXJyZW5jeS5mcmFjdGlvbkRpZ2l0cylcbiAgKTtcblxuICBjb25zdCBmcmFjdGlvbkRpZ2l0c09mQW1vdW50ID1cbiAgICAvLyBUaGUgY29udmVyc2lvbiB0byBhIHN0cmluZyB3aWxsIGFsd2F5cyB1c2UgYSBkb3QgYXMgdGhlIHNlcGFyYXRvci5cbiAgICAvLyBUaGF0IG1lYW5zIHdlIGRvbid0IGhhdmUgdG8gaGFuZGxlIGEgY29tbWEuXG4gICAgU3RyaW5nKGFtb3VudEFzTnVtYmVyKS5pbmRleE9mKCcuJykgPT09IC0xXG4gICAgICA/IDBcbiAgICAgIDogU3RyaW5nKGFtb3VudEFzTnVtYmVyKS5sZW5ndGggLSBTdHJpbmcoYW1vdW50QXNOdW1iZXIpLmluZGV4T2YoJy4nKSAtIDE7XG5cbiAgaWYgKGZyYWN0aW9uRGlnaXRzT2ZBbW91bnQgPiBjdXJyZW5jeS5mcmFjdGlvbkRpZ2l0cykge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnaGlnaFByZWNpc2lvbicsXG4gICAgICBjdXJyZW5jeUNvZGUsXG4gICAgICBjZW50QW1vdW50LFxuICAgICAgcHJlY2lzZUFtb3VudDogcGFyc2VJbnQoXG4gICAgICAgIC8vIEhlcmUgd2UgbmVlZCB0byBjb252ZXJ0ICBhIG51bWJlciBsaWtlIDguMDY2NjUyIHRvIGl0cyBjZW50YW1vdW50XG4gICAgICAgIC8vIFdlIGNvdWxkIGRvIHRoYXQgYnkgbXVsdGlwbHlpbmcgaXQgd2l0aCAxMCAqKiBudW1iZXItb2YtZnJhY3Rpb24tZGlnaXRzXG4gICAgICAgIC8vIGJ1dCB0aGVuIHdlJ2xsIHJ1biBpbnRvIHByb2JsZW1zIHdpdGggSmF2YVNjcmlwdCdzIGZsb2F0aW5nIHBvaW50XG4gICAgICAgIC8vIG51bWJlciBwcmVjaXNpb24gYW5kIGVuZCB1cCB3aXRoIDgwNjY2NTEuOTk5OTk5OSwgYW5kIHRoZW4gcGFyc2VJbnRcbiAgICAgICAgLy8gY3V0cyBvZmYgdGhlIHJlbWFpbmRlci5cbiAgICAgICAgLy8gU28gaW5zdGVhZCBvZiB1c2luZyBtYXRocyB0byBjb252ZXJ0IHRoZSBudW1iZXIsIHdlIGp1c3QgcmVwbGFjZVxuICAgICAgICAvLyB0aGUgZG90IGluc2lkZSB0aGUgbnVtYmVyIHdoaWNoIGRvZXMgdGhlIHNhbWUgdGhpbmcuXG4gICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gcmVwbGFjZSBcIixcIiBhcyB3ZWxsLCBhcyBudW1iZXJzIGFsd2F5cyB1cyBhIGRvdFxuICAgICAgICAvLyB3aGVuIGNvbnZlcnRlZCB1c2luZyBTdHJpbmcoKS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIG1hdGhlbWF0aWNhbCB3YXk6IGFtb3VudEFzTnVtYmVyICogMTAgKiogZnJhY3Rpb25EaWdpdHNPZkFtb3VudCxcbiAgICAgICAgU3RyaW5nKGFtb3VudEFzTnVtYmVyKS5yZXBsYWNlKCcuJywgJycpLFxuICAgICAgICAxMFxuICAgICAgKSxcbiAgICAgIGZyYWN0aW9uRGlnaXRzOiBmcmFjdGlvbkRpZ2l0c09mQW1vdW50LFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdjZW50UHJlY2lzaW9uJyxcbiAgICBjdXJyZW5jeUNvZGUsXG4gICAgY2VudEFtb3VudCxcbiAgICBmcmFjdGlvbkRpZ2l0czogY3VycmVuY3kuZnJhY3Rpb25EaWdpdHMsXG4gIH07XG59O1xuY29uc3QgY3JlYXRlRW1wdHlNb25leVZhbHVlID0gKGN1cnJlbmN5Q29kZTogVEN1cnJlbmN5Q29kZSk6IFRNb25leVZhbHVlID0+ICh7XG4gIHR5cGU6ICdjZW50UHJlY2lzaW9uJyxcbiAgY3VycmVuY3lDb2RlLFxuICBjZW50QW1vdW50OiBOYU4sXG4gIGZyYWN0aW9uRGlnaXRzOiAyLFxufSk7XG5cbmNvbnN0IGdldEFtb3VudEFzTnVtYmVyRnJvbU1vbmV5VmFsdWUgPSAobW9uZXlWYWx1ZTogVE1vbmV5VmFsdWUpID0+XG4gIG1vbmV5VmFsdWUudHlwZSA9PT0gJ2hpZ2hQcmVjaXNpb24nXG4gICAgPyBtb25leVZhbHVlLnByZWNpc2VBbW91bnQgLyAxMCAqKiBtb25leVZhbHVlLmZyYWN0aW9uRGlnaXRzXG4gICAgOiBtb25leVZhbHVlLmNlbnRBbW91bnQgL1xuICAgICAgMTAgKiogY3VycmVuY2llc1ttb25leVZhbHVlLmN1cnJlbmN5Q29kZV0uZnJhY3Rpb25EaWdpdHM7XG5cbi8vIGdldHMgY2FsbGVkIHdpdGggYSBzdHJpbmcgYW5kIHNob3VsZCByZXR1cm4gYSBmb3JtYXR0ZWQgc3RyaW5nXG5jb25zdCBmb3JtYXRBbW91bnQgPSAoXG4gIHJhd0Ftb3VudDogc3RyaW5nLFxuICBsb2NhbGU6IHN0cmluZyxcbiAgY3VycmVuY3lDb2RlOiBUQ3VycmVuY3lDb2RlXG4pID0+IHtcbiAgLy8gZmFsbGJhY2sgaW4gY2FzZSB0aGUgdXNlciBkaWRuJ3QgZW50ZXIgYW4gYW1vdW50IHlldCAob3IgaXQncyBpbnZhbGlkKVxuICBjb25zdCBtb25leVZhbHVlID1cbiAgICBjcmVhdGVNb25leVZhbHVlKHJhd0Ftb3VudCwgbG9jYWxlLCBjdXJyZW5jeUNvZGUpIHx8XG4gICAgY3JlYXRlRW1wdHlNb25leVZhbHVlKGN1cnJlbmN5Q29kZSk7XG5cbiAgY29uc3QgYW1vdW50ID0gZ2V0QW1vdW50QXNOdW1iZXJGcm9tTW9uZXlWYWx1ZShtb25leVZhbHVlKTtcblxuICBjb25zdCBmcmFjdGlvbkRpZ2l0cyA9IG1vbmV5VmFsdWUucHJlY2lzZUFtb3VudFxuICAgID8gbW9uZXlWYWx1ZS5mcmFjdGlvbkRpZ2l0c1xuICAgIDogY3VycmVuY2llc1ttb25leVZhbHVlLmN1cnJlbmN5Q29kZV0uZnJhY3Rpb25EaWdpdHM7XG5cbiAgcmV0dXJuIGlzTmFOKGFtb3VudClcbiAgICA/ICcnXG4gICAgOiBhbW91bnQudG9Mb2NhbGVTdHJpbmcobG9jYWxlLCB7IG1pbmltdW1GcmFjdGlvbkRpZ2l0czogZnJhY3Rpb25EaWdpdHMgfSk7XG59O1xuXG5jb25zdCBnZXRBbW91bnRJbnB1dE5hbWUgPSAobmFtZT86IHN0cmluZykgPT5cbiAgbmFtZSA/IGAke25hbWV9LmFtb3VudGAgOiB1bmRlZmluZWQ7XG5jb25zdCBnZXRDdXJyZW5jeURyb3Bkb3duTmFtZSA9IChuYW1lPzogc3RyaW5nKSA9PlxuICBuYW1lID8gYCR7bmFtZX0uY3VycmVuY3lDb2RlYCA6IHVuZGVmaW5lZDtcblxuZXhwb3J0IHR5cGUgVFZhbHVlID0ge1xuICBhbW91bnQ6IHN0cmluZztcbiAgY3VycmVuY3lDb2RlOiBUQ3VycmVuY3lDb2RlIHwgJyc7XG59O1xuXG50eXBlIFRDdXN0b21FdmVudCA9IHtcbiAgdGFyZ2V0OiB7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICB2YWx1ZT86IHN0cmluZyB8IHN0cmluZ1tdIHwgbnVsbDtcbiAgfTtcbiAgcGVyc2lzdD86ICgpID0+IHZvaWQ7XG59O1xuXG50eXBlIFRNb25leUlucHV0UHJvcHMgPSB7XG4gIC8qKlxuICAgKiBVc2VkIGFzIEhUTUwgaWQgcHJvcGVydHkuIEFuIGlkIGlzIGF1dG8tZ2VuZXJhdGVkIHdoZW4gaXQgaXMgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuICAvKipcbiAgICogVXNlZCBhcyBIVE1MIGBhdXRvY29tcGxldGVgIHByb3BlcnR5XG4gICAqL1xuICBhdXRvQ29tcGxldGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpbiB0aGUgaW5wdXQgaXMgaW52YWxpZC5cbiAgICovXG4gICdhcmlhLWludmFsaWQnPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEhUTUwgSUQgb2YgYW4gZWxlbWVudCBjb250YWluaW5nIGFuIGVycm9yIG1lc3NhZ2UgcmVsYXRlZCB0byB0aGUgaW5wdXQuXG4gICAqL1xuICAnYXJpYS1lcnJvcm1lc3NhZ2UnPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHByZWZpeCB1c2VkIHRvIGNyZWF0ZSBhIEhUTUwgYG5hbWVgIHByb3BlcnR5IGZvciB0aGUgYW1vdW50IGlucHV0IGZpZWxkIChgJHtuYW1lfS5hbW91bnRgKSBhbmQgdGhlIGN1cnJlbmN5IGRyb3Bkb3duIChgJHtuYW1lfS5jdXJyZW5jeUNvZGVgKS5cbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBWYWx1ZSBvZiB0aGUgaW5wdXQuIENvbnNpc3RzIG9mIHRoZSBjdXJyZW5jeSBjb2RlIGFuZCBhbiBhbW91bnQuIGBhbW91bnRgIGlzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgYW1vdW50LiBBIGRvdCBoYXMgdG8gYmUgdXNlZCBhcyB0aGUgZGVjaW1hbCBzZXBhcmF0b3IuXG4gICAqL1xuICB2YWx1ZTogVFZhbHVlO1xuICAvKipcbiAgICogTGlzdCBvZiBwb3NzaWJsZSBjdXJyZW5jaWVzLiBXaGVuIG5vdCBwcm92aWRlZCBvciBlbXB0eSwgdGhlIGNvbXBvbmVudCByZW5kZXJzIGEgbGFiZWwgd2l0aCB0aGUgdmFsdWUncyBjdXJyZW5jeSBpbnN0ZWFkIG9mIGEgZHJvcGRvd24uXG4gICAqL1xuICBjdXJyZW5jaWVzOiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIFBsYWNlaG9sZGVyIHRleHQgZm9yIHRoZSBpbnB1dFxuICAgKi9cbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBpbnB1dCBpcyBibHVycmVkXG4gICAqL1xuICBvbkJsdXI/OiAoZXZlbnQ6IFRDdXN0b21FdmVudCkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGlucHV0IGlzIGZvY3VzZWRcbiAgICovXG4gIG9uRm9jdXM/OiAoZXZlbnQ6IFRDdXN0b21FdmVudCkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IHRoZSBpbnB1dCBjYW5ub3QgYmUgbW9kaWZpZWQgKGUuZyBub3QgYXV0aG9yaXplZCwgb3IgY2hhbmdlcyBjdXJyZW50bHkgc2F2aW5nKS5cbiAgICovXG4gIGlzRGlzYWJsZWQ/OiBib29sZWFuO1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgdGhlIGZpZWxkIGlzIGRpc3BsYXlpbmcgcmVhZC1vbmx5IGNvbnRlbnRcbiAgICovXG4gIGlzUmVhZE9ubHk/OiBib29sZWFuO1xuICAvKipcbiAgICogRm9jdXMgdGhlIGlucHV0IG9uIGluaXRpYWwgcmVuZGVyXG4gICAqL1xuICBpc0F1dG9mb2N1c3NlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDYWxsZWQgd2l0aCB0aGUgZXZlbnQgb2YgdGhlIGlucHV0IG9yIGRyb3Bkb3duIHdoZW4gZWl0aGVyIHRoZSBjdXJyZW5jeSBvciB0aGUgYW1vdW50IGhhdmUgY2hhbmdlZC5cbiAgICovXG4gIG9uQ2hhbmdlPzogKGV2ZW50OiBUQ3VzdG9tRXZlbnQpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBEb20gZWxlbWVudCB0byBwb3J0YWwgdGhlIGN1cnJlbmN5IHNlbGVjdCBtZW51IHRvXG4gICAqIDxicj5cbiAgICogW1Byb3BzIGZyb20gUmVhY3Qgc2VsZWN0IHdhcyB1c2VkXShodHRwczovL3JlYWN0LXNlbGVjdC5jb20vcHJvcHMpXG4gICAqL1xuICBtZW51UG9ydGFsVGFyZ2V0PzogUmVhY3RTZWxlY3RQcm9wc1snbWVudVBvcnRhbFRhcmdldCddO1xuICAvKipcbiAgICogei1pbmRleCB2YWx1ZSBmb3IgdGhlIGN1cnJlbmN5IHNlbGVjdCBtZW51IHBvcnRhbFxuICAgKiA8YnI+XG4gICAqIFVzZSBpbiBjb25qdW5jdGlvbiB3aXRoIGBtZW51UG9ydGFsVGFyZ2V0YFxuICAgKi9cbiAgbWVudVBvcnRhbFpJbmRleD86IG51bWJlcjtcbiAgLyoqXG4gICAqIHdoZXRoZXIgdGhlIG1lbnUgc2hvdWxkIGJsb2NrIHNjcm9sbCB3aGlsZSBvcGVuXG4gICAqIDxicj5cbiAgICogW1Byb3BzIGZyb20gUmVhY3Qgc2VsZWN0IHdhcyB1c2VkXShodHRwczovL3JlYWN0LXNlbGVjdC5jb20vcHJvcHMpXG4gICAqL1xuICBtZW51U2hvdWxkQmxvY2tTY3JvbGw/OiBSZWFjdFNlbGVjdFByb3BzWydtZW51U2hvdWxkQmxvY2tTY3JvbGwnXTtcbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IGlucHV0IGhhcyBlcnJvcnNcbiAgICovXG4gIGhhc0Vycm9yPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIENvbnRyb2wgdG8gaW5kaWNhdGUgb24gdGhlIGlucHV0IGlmIHRoZXJlIGFyZSBzZWxlY3RlZCB2YWx1ZXMgdGhhdCBhcmUgcG90ZW50aWFsbHkgaW52YWxpZFxuICAgKi9cbiAgaGFzV2FybmluZz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBTaG93cyBoaWdoIHByZWNpc2lvbiBiYWRnZSBpbiBjYXNlIGN1cnJlbnQgdmFsdWUgdXNlcyBoaWdoIHByZWNpc2lvbi5cbiAgICovXG4gIGhhc0hpZ2hQcmVjaXNpb25CYWRnZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBIb3Jpem9udGFsIHNpemUgbGltaXQgb2YgdGhlIGlucHV0IGZpZWxkcy5cbiAgICovXG4gIGhvcml6b250YWxDb25zdHJhaW50PzpcbiAgICB8IDNcbiAgICB8IDRcbiAgICB8IDVcbiAgICB8IDZcbiAgICB8IDdcbiAgICB8IDhcbiAgICB8IDlcbiAgICB8IDEwXG4gICAgfCAxMVxuICAgIHwgMTJcbiAgICB8IDEzXG4gICAgfCAxNFxuICAgIHwgMTVcbiAgICB8IDE2XG4gICAgfCAnc2NhbGUnXG4gICAgfCAnYXV0byc7XG59O1xuXG5jb25zdCBkZWZhdWx0UHJvcHM6IFBpY2s8XG4gIFRNb25leUlucHV0UHJvcHMsXG4gICdjdXJyZW5jaWVzJyB8ICdob3Jpem9udGFsQ29uc3RyYWludCcgfCAnbWVudVBvcnRhbFpJbmRleCdcbj4gPSB7XG4gIGN1cnJlbmNpZXM6IFtdLFxuICBob3Jpem9udGFsQ29uc3RyYWludDogJ3NjYWxlJyxcbiAgbWVudVBvcnRhbFpJbmRleDogMSxcbn07XG5cbmNvbnN0IE1vbmV5SW5wdXQgPSAocHJvcHM6IFRNb25leUlucHV0UHJvcHMpID0+IHtcbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcbiAgY29uc3QgW2N1cnJlbmN5SGFzRm9jdXMsIHRvZ2dsZUN1cnJlbmN5SGFzRm9jdXNdID0gdXNlVG9nZ2xlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYW1vdW50SGFzRm9jdXMsIHRvZ2dsZUFtb3VudEhhc0ZvY3VzXSA9IHVzZVRvZ2dsZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBjb250YWluZXJSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBhbW91bnRJbnB1dFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBtb25leUlucHV0SWQgPSB1c2VGaWVsZElkKHByb3BzLmlkLCBtb25leUlucHV0U2VxdWVudGlhbElkKTtcblxuICBpZiAoIXByb3BzLmlzUmVhZE9ubHkpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgdHlwZW9mIHByb3BzLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ01vbmV5SW5wdXQ6IFwib25DaGFuZ2VcIiBpcyByZXF1aXJlZCB3aGVuIGlzIG5vdCByZWFkIG9ubHkuJ1xuICAgICk7XG4gIH1cblxuICB3YXJuSWZNZW51UG9ydGFsUHJvcHNBcmVNaXNzaW5nKHtcbiAgICBtZW51UG9ydGFsWkluZGV4OiBwcm9wcy5tZW51UG9ydGFsWkluZGV4LFxuICAgIG1lbnVQb3J0YWxUYXJnZXQ6IHByb3BzLm1lbnVQb3J0YWxUYXJnZXQsXG4gICAgY29tcG9uZW50TmFtZTogJ01vbmV5SW5wdXQnLFxuICB9KTtcblxuICBjb25zdCB7IG9uRm9jdXMgfSA9IHByb3BzO1xuICBjb25zdCBoYW5kbGVBbW91bnRGb2N1cyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAob25Gb2N1cylcbiAgICAgIG9uRm9jdXMoe1xuICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICBpZDogTW9uZXlJbnB1dC5nZXRBbW91bnRJbnB1dElkKG1vbmV5SW5wdXRJZCksXG4gICAgICAgICAgbmFtZTogZ2V0QW1vdW50SW5wdXROYW1lKHByb3BzLm5hbWUpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgdG9nZ2xlQW1vdW50SGFzRm9jdXModHJ1ZSk7XG4gIH0sIFt0b2dnbGVBbW91bnRIYXNGb2N1cywgb25Gb2N1cywgbW9uZXlJbnB1dElkLCBwcm9wcy5uYW1lXSk7XG5cbiAgY29uc3QgeyBvbkNoYW5nZSB9ID0gcHJvcHM7XG4gIGNvbnN0IGhhbmRsZUFtb3VudEJsdXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgYW1vdW50ID0gcHJvcHMudmFsdWUuYW1vdW50LnRyaW0oKTtcbiAgICB0b2dnbGVBbW91bnRIYXNGb2N1cyhmYWxzZSk7XG4gICAgLy8gU2tpcCBmb3JtYXR0aW5nIGZvciBlbXB0eSB2YWx1ZSBvciB3aGVuIHRoZSBpbnB1dCBpcyB1c2VkIHdpdGggYW5cbiAgICAvLyB1bmtub3duIGN1cnJlbmN5LlxuICAgIGlmIChcbiAgICAgIGFtb3VudC5sZW5ndGggPiAwICYmXG4gICAgICBwcm9wcy52YWx1ZS5jdXJyZW5jeUNvZGUgJiZcbiAgICAgIGN1cnJlbmNpZXNbcHJvcHMudmFsdWUuY3VycmVuY3lDb2RlXVxuICAgICkge1xuICAgICAgY29uc3QgZm9ybWF0dGVkQW1vdW50ID0gZm9ybWF0QW1vdW50KFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIGludGwubG9jYWxlLFxuICAgICAgICBwcm9wcy52YWx1ZS5jdXJyZW5jeUNvZGVcbiAgICAgICk7XG5cbiAgICAgIC8vIFdoZW4gdGhlIHVzZXIgZW50ZXJlZCBhIHZhbHVlIHdpdGggY2VudFByZWNpc2lvbiwgd2UgY2FuIGZvcm1hdFxuICAgICAgLy8gdGhlIHJlc3VsdGluZyB2YWx1ZSB0byB0aGF0IGN1cnJlbmN5LCBlLmcuIDIwLjEgdG8gMjAuMTBcbiAgICAgIGlmIChTdHJpbmcoZm9ybWF0dGVkQW1vdW50KSAhPT0gYW1vdW50KSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZW1pdCBhbiBldmVudCB3aXRoIHRoZSBub3cgZm9ybWF0dGVkIHZhbHVlXG4gICAgICAgIGNvbnN0IGZha2VFdmVudCA9IHtcbiAgICAgICAgICBwZXJzaXN0OiAoKSA9PiB7fSxcbiAgICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICAgIGlkOiBNb25leUlucHV0LmdldEFtb3VudElucHV0SWQobW9uZXlJbnB1dElkKSxcbiAgICAgICAgICAgIG5hbWU6IGdldEFtb3VudElucHV0TmFtZShwcm9wcy5uYW1lKSxcbiAgICAgICAgICAgIHZhbHVlOiBmb3JtYXR0ZWRBbW91bnQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgb25DaGFuZ2U/LihmYWtlRXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW1xuICAgIGludGwubG9jYWxlLFxuICAgIG9uQ2hhbmdlLFxuICAgIG1vbmV5SW5wdXRJZCxcbiAgICBwcm9wcy5uYW1lLFxuICAgIHByb3BzLnZhbHVlLmFtb3VudCxcbiAgICBwcm9wcy52YWx1ZS5jdXJyZW5jeUNvZGUsXG4gICAgdG9nZ2xlQW1vdW50SGFzRm9jdXMsXG4gIF0pO1xuXG4gIGNvbnN0IGhhbmRsZUFtb3VudENoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgIChldmVudCkgPT4ge1xuICAgICAgaWYgKGlzTnVtYmVyaXNoKGV2ZW50LnRhcmdldC52YWx1ZSkpIHtcbiAgICAgICAgb25DaGFuZ2U/Lih7XG4gICAgICAgICAgcGVyc2lzdDogKCkgPT4ge30sXG4gICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICBpZDogTW9uZXlJbnB1dC5nZXRBbW91bnRJbnB1dElkKG1vbmV5SW5wdXRJZCksXG4gICAgICAgICAgICBuYW1lOiBnZXRBbW91bnRJbnB1dE5hbWUocHJvcHMubmFtZSksXG4gICAgICAgICAgICB2YWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW29uQ2hhbmdlLCBtb25leUlucHV0SWQsIHByb3BzLm5hbWVdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQ3VycmVuY3lDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAob3B0aW9uKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW5jeUNvZGUgPSBvcHRpb24udmFsdWU7XG4gICAgICBpZiAocHJvcHMudmFsdWUuY3VycmVuY3lDb2RlICE9PSBjdXJyZW5jeUNvZGUpIHtcbiAgICAgICAgLy8gV2hlbiB0aGUgdXNlciBjaGFuZ2VzIGZyb20gYSBjdXJyZW5jeSB3aXRoIDMgZnJhY3Rpb24gZGlnaXRzIHRvXG4gICAgICAgIC8vIGEgY3VycmVuY3kgd2l0aCAyIGZyYWN0aW9uIGRpZ2l0cywgYW5kIHdoZW4gdGhlIGlucHV0IHZhbHVlIHdhc1xuICAgICAgICAvLyBcIjkuMDAwXCIgKDkpLCB0aGVuIGl0IHNob3VsZCBjaGFuZ2UgdG8gXCI5LjAwXCIgdG8gcmVmbGVjdCB0aGUgbmV3XG4gICAgICAgIC8vIGN1cnJlbmN5J3MgbnVtYmVyIG9mIGZyYWN0aW9uIGRpZ2l0cy5cbiAgICAgICAgLy8gV2hlbiB0aGUgY3VycmVuY3kgd2FzIGEgaGlnaC1wcmVjaXNpb24gcHJpY2UsIHRoZW4gbm8gZGlnaXRzIHNob3VsZFxuICAgICAgICAvLyBiZSBsb3N0XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZEFtb3VudCA9IGZvcm1hdEFtb3VudChcbiAgICAgICAgICBwcm9wcy52YWx1ZS5hbW91bnQudHJpbSgpLFxuICAgICAgICAgIGludGwubG9jYWxlLFxuICAgICAgICAgIGN1cnJlbmN5Q29kZVxuICAgICAgICApO1xuICAgICAgICAvLyBUaGUgdXNlciBjb3VsZCBiZSBjaGFuZ2luZyB0aGUgY3VycmVuY3kgYmVmb3JlIGVudGVyaW5nIGFueSBhbW91bnQsXG4gICAgICAgIC8vIG9yIHdoaWxlIHRoZSBhbW91bnQgaXMgaW52YWxpZC4gSW4gdGhlc2UgY2FzZXMsIHdlIGRvbid0IGF0dGVtcHQgdG9cbiAgICAgICAgLy8gZm9ybWF0IHRoZSBhbW91bnQuXG4gICAgICAgIGNvbnN0IG5leHRBbW91bnQgPSBpc05hTihOdW1iZXIoZm9ybWF0dGVkQW1vdW50KSlcbiAgICAgICAgICA/IHByb3BzLnZhbHVlLmFtb3VudFxuICAgICAgICAgIDogZm9ybWF0dGVkQW1vdW50O1xuXG4gICAgICAgIC8vIGNoYW5nZSBjdXJyZW5jeSBjb2RlXG4gICAgICAgIGNvbnN0IGZha2VDdXJyZW5jeUV2ZW50ID0ge1xuICAgICAgICAgIHBlcnNpc3Q6ICgpID0+IHt9LFxuICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgaWQ6IE1vbmV5SW5wdXQuZ2V0Q3VycmVuY3lEcm9wZG93bklkKG1vbmV5SW5wdXRJZCksXG4gICAgICAgICAgICBuYW1lOiBnZXRDdXJyZW5jeURyb3Bkb3duTmFtZShwcm9wcy5uYW1lKSxcbiAgICAgICAgICAgIHZhbHVlOiBjdXJyZW5jeUNvZGUgfHwgJycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgb25DaGFuZ2U/LihmYWtlQ3VycmVuY3lFdmVudCk7XG5cbiAgICAgICAgLy8gY2hhbmdlIGFtb3VudCBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKHByb3BzLnZhbHVlLmFtb3VudCAhPT0gbmV4dEFtb3VudCkge1xuICAgICAgICAgIG9uQ2hhbmdlPy4oe1xuICAgICAgICAgICAgcGVyc2lzdDogKCkgPT4ge30sXG4gICAgICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICAgICAgaWQ6IE1vbmV5SW5wdXQuZ2V0QW1vdW50SW5wdXRJZChtb25leUlucHV0SWQpLFxuICAgICAgICAgICAgICBuYW1lOiBnZXRBbW91bnRJbnB1dE5hbWUocHJvcHMubmFtZSksXG4gICAgICAgICAgICAgIHZhbHVlOiBuZXh0QW1vdW50LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFtb3VudElucHV0UmVmLmN1cnJlbnQ/LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbXG4gICAgICBpbnRsLmxvY2FsZSxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgbW9uZXlJbnB1dElkLFxuICAgICAgcHJvcHMubmFtZSxcbiAgICAgIHByb3BzLnZhbHVlLmFtb3VudCxcbiAgICAgIHByb3BzLnZhbHVlLmN1cnJlbmN5Q29kZSxcbiAgICBdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQ3VycmVuY3lGb2N1cyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAob25Gb2N1cylcbiAgICAgIG9uRm9jdXMoe1xuICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICBpZDogTW9uZXlJbnB1dC5nZXRDdXJyZW5jeURyb3Bkb3duSWQobW9uZXlJbnB1dElkKSxcbiAgICAgICAgICBuYW1lOiBnZXRDdXJyZW5jeURyb3Bkb3duTmFtZShwcm9wcy5uYW1lKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgdG9nZ2xlQ3VycmVuY3lIYXNGb2N1cyh0cnVlKTtcbiAgfSwgW29uRm9jdXMsIHRvZ2dsZUN1cnJlbmN5SGFzRm9jdXMsIHByb3BzLm5hbWUsIG1vbmV5SW5wdXRJZF0pO1xuXG4gIGNvbnN0IGhhbmRsZUN1cnJlbmN5Qmx1ciA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB0b2dnbGVDdXJyZW5jeUhhc0ZvY3VzKGZhbHNlKTtcbiAgfSwgW3RvZ2dsZUN1cnJlbmN5SGFzRm9jdXNdKTtcblxuICBjb25zdCBoYXNOb0N1cnJlbmNpZXMgPSBwcm9wcy5jdXJyZW5jaWVzLmxlbmd0aCA9PT0gMDtcbiAgY29uc3QgaGFzRm9jdXMgPSBjdXJyZW5jeUhhc0ZvY3VzIHx8IGFtb3VudEhhc0ZvY3VzO1xuICBjb25zdCBjdXJyZW5jeVNlbGVjdFN0eWxlcyA9IGNyZWF0ZUN1cnJlbmN5U2VsZWN0U3R5bGVzKHtcbiAgICBoYXNXYXJuaW5nOiBwcm9wcy5oYXNXYXJuaW5nLFxuICAgIGhhc0Vycm9yOiBwcm9wcy5oYXNFcnJvcixcbiAgICBpc0Rpc2FibGVkOiBwcm9wcy5pc0Rpc2FibGVkLFxuICAgIGlzUmVhZE9ubHk6IHByb3BzLmlzUmVhZE9ubHksXG4gICAgbWVudVBvcnRhbFpJbmRleDogcHJvcHMubWVudVBvcnRhbFpJbmRleCxcbiAgICBjdXJyZW5jeUhhc0ZvY3VzLFxuICB9KTtcbiAgY29uc3Qgb3B0aW9ucyA9IHByb3BzLmN1cnJlbmNpZXMubWFwKChjdXJyZW5jeUNvZGUpID0+ICh7XG4gICAgbGFiZWw6IGN1cnJlbmN5Q29kZSxcbiAgICB2YWx1ZTogY3VycmVuY3lDb2RlLFxuICB9KSk7XG5cbiAgY29uc3Qgb3B0aW9uID0gKCgpID0+IHtcbiAgICBjb25zdCBtYXRjaGVkT3B0aW9uID0gb3B0aW9ucy5maW5kKFxuICAgICAgKG9wdGlvbkNhbmRpZGF0ZSkgPT4gb3B0aW9uQ2FuZGlkYXRlLnZhbHVlID09PSBwcm9wcy52YWx1ZS5jdXJyZW5jeUNvZGVcbiAgICApO1xuICAgIGlmIChtYXRjaGVkT3B0aW9uKSByZXR1cm4gbWF0Y2hlZE9wdGlvbjtcbiAgICAvLyBlbnN1cmUgYW4gb3B0aW9uIGlzIGZvdW5kLCBldmVuIHdoZW4gdGhlIGN1cnJlbmNpZXMgZG9uJ3QgaW5jbHVkZVxuICAgIC8vIHRoZSBtb25leSB2YWx1ZSdzIGN1cnJlbmN5Q29kZVxuICAgIGlmIChwcm9wcy52YWx1ZS5jdXJyZW5jeUNvZGUudHJpbSgpICE9PSAnJylcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsOiBwcm9wcy52YWx1ZS5jdXJyZW5jeUNvZGUsXG4gICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZS5jdXJyZW5jeUNvZGUsXG4gICAgICB9O1xuICAgIHJldHVybiBudWxsO1xuICB9KSgpO1xuXG4gIGNvbnN0IGlzSGlnaFByZWNpc2lvbiA9XG4gICAgIU1vbmV5SW5wdXQuaXNFbXB0eShwcm9wcy52YWx1ZSkgJiZcbiAgICBNb25leUlucHV0LmlzSGlnaFByZWNpc2lvbihwcm9wcy52YWx1ZSwgaW50bC5sb2NhbGUpO1xuXG4gIGNvbnN0IHsgb25CbHVyIH0gPSBwcm9wcztcbiAgY29uc3QgaGFuZGxlQ29udGFpbmVyQmx1ciA9IHVzZUNhbGxiYWNrKFxuICAgIChldmVudCkgPT4ge1xuICAgICAgLy8gZW5zdXJlcyB0aGF0IGJvdGggZmllbGRzIGFyZSBtYXJrZWQgYXMgdG91Y2hlZCB3aGVuIG9uZSBvZiB0aGVtXG4gICAgICAvLyBpcyBibHVycmVkXG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBvbkJsdXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgIWNvbnRhaW5lclJlZi5jdXJyZW50Py5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KVxuICAgICAgKSB7XG4gICAgICAgIG9uQmx1cih7XG4gICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICBpZDogTW9uZXlJbnB1dC5nZXRDdXJyZW5jeURyb3Bkb3duSWQobW9uZXlJbnB1dElkKSxcbiAgICAgICAgICAgIG5hbWU6IGdldEN1cnJlbmN5RHJvcGRvd25OYW1lKHByb3BzLm5hbWUpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBvbkJsdXIoe1xuICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgaWQ6IE1vbmV5SW5wdXQuZ2V0QW1vdW50SW5wdXRJZChtb25leUlucHV0SWQpLFxuICAgICAgICAgICAgbmFtZTogZ2V0QW1vdW50SW5wdXROYW1lKHByb3BzLm5hbWUpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW29uQmx1ciwgbW9uZXlJbnB1dElkLCBwcm9wcy5uYW1lXVxuICApO1xuXG4gIGNvbnN0IFRvb2x0aXBQb3J0YWwgPSB1c2VDYWxsYmFjayhcbiAgICAocmVtYWluaW5nUHJvcHMpID0+IDxQb3J0YWwgey4uLnJlbWFpbmluZ1Byb3BzfSBpZD17cHJvcHMuaWR9IC8+LFxuICAgIFtwcm9wcy5pZF1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxDb25zdHJhaW50cy5Ib3Jpem9udGFsIG1heD17cHJvcHMuaG9yaXpvbnRhbENvbnN0cmFpbnR9PlxuICAgICAgPGRpdlxuICAgICAgICByZWY9e2NvbnRhaW5lclJlZn1cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGB9XG4gICAgICAgIGRhdGEtdGVzdGlkPVwibW9uZXktaW5wdXQtY29udGFpbmVyXCJcbiAgICAgICAgb25CbHVyPXtoYW5kbGVDb250YWluZXJCbHVyfVxuICAgICAgPlxuICAgICAgICB7aGFzTm9DdXJyZW5jaWVzID8gKFxuICAgICAgICAgIDxDdXJyZW5jeUxhYmVsXG4gICAgICAgICAgICBpZD17TW9uZXlJbnB1dC5nZXRBbW91bnRJbnB1dElkKG1vbmV5SW5wdXRJZCkgYXMgc3RyaW5nfVxuICAgICAgICAgICAgaXNEaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgICAgICAgIGlzUmVhZE9ubHk9e3Byb3BzLmlzUmVhZE9ubHl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge29wdGlvbiAmJiBvcHRpb24ubGFiZWx9XG4gICAgICAgICAgPC9DdXJyZW5jeUxhYmVsPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgIGlucHV0SWQ9e01vbmV5SW5wdXQuZ2V0Q3VycmVuY3lEcm9wZG93bklkKG1vbmV5SW5wdXRJZCl9XG4gICAgICAgICAgICBuYW1lPXtnZXRDdXJyZW5jeURyb3Bkb3duTmFtZShwcm9wcy5uYW1lKX1cbiAgICAgICAgICAgIHZhbHVlPXtvcHRpb259XG4gICAgICAgICAgICBpc0Rpc2FibGVkPXtwcm9wcy5pc0Rpc2FibGVkfVxuICAgICAgICAgICAgaXNTZWFyY2hhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgIGNvbXBvbmVudHM9e1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgU2luZ2xlVmFsdWU6IChpbm5lclByb3BzKSA9PiAoXG4gICAgICAgICAgICAgICAgICA8U2luZ2xlVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgey4uLmlubmVyUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGlkPXtNb25leUlucHV0LmdldEN1cnJlbmN5RHJvcGRvd25JZChtb25leUlucHV0SWQpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIElucHV0OiAob3duUHJvcHMpID0+IChcbiAgICAgICAgICAgICAgICAgIDxjb21wb25lbnRzLklucHV0IHsuLi5vd25Qcm9wc30gcmVhZE9ubHk9e3Byb3BzLmlzUmVhZE9ubHl9IC8+XG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBEcm9wZG93bkluZGljYXRvcixcbiAgICAgICAgICAgICAgfSBhcyBSZWFjdFNlbGVjdFByb3BzWydjb21wb25lbnRzJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgICAgICBtZW51SXNPcGVuPXtwcm9wcy5pc1JlYWRPbmx5ID8gZmFsc2UgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlwiXG4gICAgICAgICAgICBzdHlsZXM9e2N1cnJlbmN5U2VsZWN0U3R5bGVzIGFzIFJlYWN0U2VsZWN0UHJvcHNbJ3N0eWxlcyddfVxuICAgICAgICAgICAgb25Gb2N1cz17aGFuZGxlQ3VycmVuY3lGb2N1c31cbiAgICAgICAgICAgIG1lbnVQb3J0YWxUYXJnZXQ9e3Byb3BzLm1lbnVQb3J0YWxUYXJnZXR9XG4gICAgICAgICAgICBtZW51U2hvdWxkQmxvY2tTY3JvbGw9e3Byb3BzLm1lbnVTaG91bGRCbG9ja1Njcm9sbH1cbiAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQ3VycmVuY3lCbHVyfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUN1cnJlbmN5Q2hhbmdlfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJjdXJyZW5jeS1kcm9wZG93blwiXG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgYH1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgcmVmPXthbW91bnRJbnB1dFJlZn1cbiAgICAgICAgICAgIGlkPXtNb25leUlucHV0LmdldEFtb3VudElucHV0SWQobW9uZXlJbnB1dElkKX1cbiAgICAgICAgICAgIGF1dG9Db21wbGV0ZT17cHJvcHMuYXV0b0NvbXBsZXRlfVxuICAgICAgICAgICAgbmFtZT17Z2V0QW1vdW50SW5wdXROYW1lKHByb3BzLm5hbWUpfVxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgb25Gb2N1cz17aGFuZGxlQW1vdW50Rm9jdXN9XG4gICAgICAgICAgICB2YWx1ZT17cHJvcHMudmFsdWUuYW1vdW50fVxuICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgIGdldEFtb3VudElucHV0U3R5bGVzKHsgLi4ucHJvcHMsIGhhc0ZvY3VzIH0pLFxuICAgICAgICAgICAgICAvLyBhY2NvdW50cyBmb3Igc2l6ZSBvZiBpY29uXG4gICAgICAgICAgICAgIHByb3BzLmhhc0hpZ2hQcmVjaXNpb25CYWRnZSAmJlxuICAgICAgICAgICAgICAgIGlzSGlnaFByZWNpc2lvbiAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmc0MH07XG4gICAgICAgICAgICAgICAgYCxcbiAgICAgICAgICAgICAgY3VycmVuY3lIYXNGb2N1cyAmJlxuICAgICAgICAgICAgICAgICFwcm9wcy5pc0Rpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgIXByb3BzLmlzUmVhZE9ubHkgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICBib3JkZXItbGVmdC1jb2xvcjogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5Gb2N1c2VkfTtcbiAgICAgICAgICAgICAgICBgLFxuICAgICAgICAgICAgXX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwcm9wcy5wbGFjZWhvbGRlcn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVBbW91bnRDaGFuZ2V9XG4gICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUFtb3VudEJsdXJ9XG4gICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgICAgICAgIHJlYWRPbmx5PXtwcm9wcy5pc1JlYWRPbmx5fVxuICAgICAgICAgICAgYXV0b0ZvY3VzPXtwcm9wcy5pc0F1dG9mb2N1c3NlZH1cbiAgICAgICAgICAgIHsuLi5maWx0ZXJEYXRhQXR0cmlidXRlcyhwcm9wcyl9XG4gICAgICAgICAgICAvKiBBUklBICovXG4gICAgICAgICAgICBhcmlhLWludmFsaWQ9e3Byb3BzWydhcmlhLWludmFsaWQnXX1cbiAgICAgICAgICAgIGFyaWEtZXJyb3JtZXNzYWdlPXtwcm9wc1snYXJpYS1lcnJvcm1lc3NhZ2UnXX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtwcm9wcy5oYXNIaWdoUHJlY2lzaW9uQmFkZ2UgJiYgaXNIaWdoUHJlY2lzaW9uICYmIChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIHshcHJvcHMuaXNEaXNhYmxlZCAmJiA8ZGl2IGlkPXtnZXRQb3J0YWxJZChwcm9wcy5pZCl9IC8+fVxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY3NzPXsoKSA9PlxuICAgICAgICAgICAgICAgICAgZ2V0SGlnaFByZWNpc2lvbldyYXBwZXJTdHlsZXMoe1xuICAgICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkOiBwcm9wcy5pc0Rpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8VG9vbHRpcFxuICAgICAgICAgICAgICAgICAgb2ZmPXtwcm9wcy5pc0Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgcGxhY2VtZW50PVwidG9wLWVuZFwiXG4gICAgICAgICAgICAgICAgICAvLyB3ZSB1c2UgbmVnYXRpdmUgbWFyZ2luIHRvIG1ha2UgdXAgZm9yIHRoZSBwYWRkaW5nIGluIHRoZSBUb29sdGlwIFdyYXBwZXJcbiAgICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgdGhlIHRvb2x0aXAgaXMgZmx1c2ggd2l0aCB0aGUgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICBzdHlsZXM9e3tcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogYCR7ZGVzaWduVG9rZW5zLnNwYWNpbmcyMH0gLSR7ZGVzaWduVG9rZW5zLnNwYWNpbmcxMH0gJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzIwfSAwYCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICB0aXRsZT17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmhpZ2hQcmVjaXNpb24pfVxuICAgICAgICAgICAgICAgICAgY29tcG9uZW50cz17e1xuICAgICAgICAgICAgICAgICAgICBUb29sdGlwV3JhcHBlckNvbXBvbmVudDogVG9vbHRpcFBvcnRhbCxcbiAgICAgICAgICAgICAgICAgICAgV3JhcHBlckNvbXBvbmVudDogVG9vbHRpcFdyYXBwZXIsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxGcmFjdGlvbkRpZ2l0c0ljb25cbiAgICAgICAgICAgICAgICAgICAgY29sb3I9e3Byb3BzLmlzRGlzYWJsZWQgPyAnbmV1dHJhbDYwJyA6ICdpbmZvJ31cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9Db25zdHJhaW50cy5Ib3Jpem9udGFsPlxuICApO1xufTtcblxuTW9uZXlJbnB1dC5kaXNwbGF5TmFtZSA9ICdNb25leUlucHV0JztcblxuTW9uZXlJbnB1dC5nZXRBbW91bnRJbnB1dElkID0gZ2V0QW1vdW50SW5wdXROYW1lO1xuXG5Nb25leUlucHV0LmdldEN1cnJlbmN5RHJvcGRvd25JZCA9IGdldEN1cnJlbmN5RHJvcGRvd25OYW1lO1xuXG5Nb25leUlucHV0LmNvbnZlcnRUb01vbmV5VmFsdWUgPSAodmFsdWU6IFRWYWx1ZSwgbG9jYWxlOiBzdHJpbmcpID0+XG4gIGNyZWF0ZU1vbmV5VmFsdWUoXG4gICAgdHlwZW9mIHZhbHVlLmFtb3VudCA9PT0gJ3N0cmluZycgPyB2YWx1ZS5hbW91bnQudHJpbSgpIDogJycsXG4gICAgbG9jYWxlLFxuICAgIHZhbHVlLmN1cnJlbmN5Q29kZVxuICApO1xuXG5Nb25leUlucHV0LnBhcnNlTW9uZXlWYWx1ZSA9IChcbiAgbW9uZXlWYWx1ZTogVE1vbmV5VmFsdWUsXG4gIGxvY2FsZTogc3RyaW5nXG4pOiBUVmFsdWUgPT4ge1xuICBpZiAoIW1vbmV5VmFsdWUpIHJldHVybiB7IGN1cnJlbmN5Q29kZTogJycsIGFtb3VudDogJycgfTtcblxuICB3YXJuaW5nKFxuICAgIHR5cGVvZiBsb2NhbGUgPT09ICdzdHJpbmcnLFxuICAgICdNb25leUlucHV0LnBhcnNlTW9uZXlWYWx1ZTogQSBsb2NhbGUgbXVzdCBiZSBwYXNzZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCdcbiAgKTtcblxuICB3YXJuaW5nKFxuICAgIHR5cGVvZiBtb25leVZhbHVlID09PSAnb2JqZWN0JyxcbiAgICAnTW9uZXlJbnB1dC5wYXJzZU1vbmV5VmFsdWU6IFZhbHVlIG11c3QgYmUgcGFzc2VkIGFzIGFuIG9iamVjdCBvciBiZSB1bmRlZmluZWQnXG4gICk7XG5cbiAgd2FybmluZyhcbiAgICB0eXBlb2YgbW9uZXlWYWx1ZS5jdXJyZW5jeUNvZGUgPT09ICdzdHJpbmcnLFxuICAgICdNb25leUlucHV0LnBhcnNlTW9uZXlWYWx1ZTogVmFsdWUgbXVzdCBjb250YWluIFwiY3VycmVuY3lDb2RlXCInXG4gICk7XG5cbiAgd2FybmluZyhcbiAgICBoYXMoY3VycmVuY2llcywgbW9uZXlWYWx1ZS5jdXJyZW5jeUNvZGUpLFxuICAgICdNb25leUlucHV0LnBhcnNlTW9uZXlWYWx1ZTogVmFsdWUgbXVzdCB1c2Uga25vd24gY3VycmVuY3kgY29kZSdcbiAgKTtcblxuICB3YXJuaW5nKFxuICAgIC8vIGhpZ2hQcmVjaXNpb24gb3IgY2VudFByZWNpc2lvbiB2YWx1ZXMgbXVzdCBiZSBzZXRcbiAgICB0eXBlb2YgbW9uZXlWYWx1ZS5jZW50QW1vdW50ID09PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGVvZiBtb25leVZhbHVlLnByZWNpc2VBbW91bnQgPT09ICdudW1iZXInICYmXG4gICAgICAgIHR5cGVvZiBtb25leVZhbHVlLmZyYWN0aW9uRGlnaXRzID09PSAnbnVtYmVyJyksXG4gICAgJ01vbmV5SW5wdXQucGFyc2VNb25leVZhbHVlOiBWYWx1ZSBtdXN0IGNvbnRhaW4gXCJhbW91bnRcIidcbiAgKTtcblxuICBjb25zdCBhbW91bnQgPSBmb3JtYXRBbW91bnQoXG4gICAgZ2V0QW1vdW50QXNOdW1iZXJGcm9tTW9uZXlWYWx1ZShtb25leVZhbHVlKS50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHtcbiAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogbW9uZXlWYWx1ZS5mcmFjdGlvbkRpZ2l0cyxcbiAgICB9KSxcbiAgICBsb2NhbGUsXG4gICAgbW9uZXlWYWx1ZS5jdXJyZW5jeUNvZGVcbiAgKTtcblxuICByZXR1cm4geyBhbW91bnQsIGN1cnJlbmN5Q29kZTogbW9uZXlWYWx1ZS5jdXJyZW5jeUNvZGUgfTtcbn07XG5cbk1vbmV5SW5wdXQuaXNFbXB0eSA9IChmb3JtVmFsdWU6IFRWYWx1ZSkgPT5cbiAgIWZvcm1WYWx1ZSB8fFxuICBmb3JtVmFsdWUuYW1vdW50LnRyaW0oKSA9PT0gJycgfHxcbiAgZm9ybVZhbHVlLmN1cnJlbmN5Q29kZS50cmltKCkgPT09ICcnO1xuXG5Nb25leUlucHV0LmlzSGlnaFByZWNpc2lvbiA9IChmb3JtVmFsdWU6IFRWYWx1ZSwgbG9jYWxlOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgd2FybmluZyhcbiAgICAhTW9uZXlJbnB1dC5pc0VtcHR5KGZvcm1WYWx1ZSksXG4gICAgJ01vbmV5VmFsdWUuaXNIaWdoUHJlY2lzaW9uIG1heSBub3QgYmUgY2FsbGVkIHdpdGggYW4gZW1wdHkgbW9uZXkgdmFsdWUuJ1xuICApO1xuICBjb25zdCBtb25leVZhbHVlID0gTW9uZXlJbnB1dC5jb252ZXJ0VG9Nb25leVZhbHVlKGZvcm1WYWx1ZSwgbG9jYWxlKTtcbiAgcmV0dXJuIG1vbmV5VmFsdWU/LnR5cGUgPT09ICdoaWdoUHJlY2lzaW9uJztcbn07XG5cbnR5cGUgVFRvdWNoZWQgPSB7XG4gIGFtb3VudD86IGJvb2xlYW47XG4gIGN1cnJlbmN5Q29kZT86IGJvb2xlYW47XG59O1xuXG5Nb25leUlucHV0LmlzVG91Y2hlZCA9ICh0b3VjaGVkPzogVFRvdWNoZWQpID0+XG4gIEJvb2xlYW4odG91Y2hlZCAmJiB0b3VjaGVkLmN1cnJlbmN5Q29kZSAmJiB0b3VjaGVkLmFtb3VudCk7XG5cbk1vbmV5SW5wdXQuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBNb25leUlucHV0O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "xqiz9q",
  styles: "font-family:inherit;width:100%;position:relative;display:flex"
} : {
  name: "1w49f4-MoneyInput",
  styles: "font-family:inherit;width:100%;position:relative;display:flex;label:MoneyInput;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const MoneyInput = props => {
  var _context7, _context9, _context10;
  const intl = reactIntl.useIntl();
  const _useToggleState = hooks.useToggleState(false),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    currencyHasFocus = _useToggleState2[0],
    toggleCurrencyHasFocus = _useToggleState2[1];
  const _useToggleState3 = hooks.useToggleState(false),
    _useToggleState4 = _slicedToArray(_useToggleState3, 2),
    amountHasFocus = _useToggleState4[0],
    toggleAmountHasFocus = _useToggleState4[1];
  const containerRef = react$1.useRef(null);
  const amountInputRef = react$1.useRef(null);
  const moneyInputId = hooks.useFieldId(props.id, moneyInputSequentialId);
  if (!props.isReadOnly) {
    process.env.NODE_ENV !== "production" ? utils.warning(typeof props.onChange === 'function', 'MoneyInput: "onChange" is required when is not read only.') : void 0;
  }
  selectUtils.warnIfMenuPortalPropsAreMissing({
    menuPortalZIndex: props.menuPortalZIndex,
    menuPortalTarget: props.menuPortalTarget,
    componentName: 'MoneyInput'
  });
  const onFocus = props.onFocus;
  const handleAmountFocus = react$1.useCallback(() => {
    if (onFocus) onFocus({
      target: {
        id: MoneyInput.getAmountInputId(moneyInputId),
        name: getAmountInputName(props.name)
      }
    });
    toggleAmountHasFocus(true);
  }, [toggleAmountHasFocus, onFocus, moneyInputId, props.name]);
  const onChange = props.onChange;
  const handleAmountBlur = react$1.useCallback(() => {
    var _context5;
    const amount = _trimInstanceProperty__default["default"](_context5 = props.value.amount).call(_context5);
    toggleAmountHasFocus(false);
    // Skip formatting for empty value or when the input is used with an
    // unknown currency.
    if (amount.length > 0 && props.value.currencyCode && currencies[props.value.currencyCode]) {
      const formattedAmount = formatAmount(amount, intl.locale, props.value.currencyCode);

      // When the user entered a value with centPrecision, we can format
      // the resulting value to that currency, e.g. 20.1 to 20.10
      if (String(formattedAmount) !== amount) {
        // We need to emit an event with the now formatted value
        const fakeEvent = {
          persist: () => {},
          target: {
            id: MoneyInput.getAmountInputId(moneyInputId),
            name: getAmountInputName(props.name),
            value: formattedAmount
          }
        };
        onChange === null || onChange === void 0 ? void 0 : onChange(fakeEvent);
      }
    }
  }, [intl.locale, onChange, moneyInputId, props.name, props.value.amount, props.value.currencyCode, toggleAmountHasFocus]);
  const handleAmountChange = react$1.useCallback(event => {
    if (utils.isNumberish(event.target.value)) {
      onChange === null || onChange === void 0 ? void 0 : onChange({
        persist: () => {},
        target: {
          id: MoneyInput.getAmountInputId(moneyInputId),
          name: getAmountInputName(props.name),
          value: event.target.value
        }
      });
    }
  }, [onChange, moneyInputId, props.name]);
  const handleCurrencyChange = react$1.useCallback(option => {
    const currencyCode = option.value;
    if (props.value.currencyCode !== currencyCode) {
      var _context6, _amountInputRef$curre;
      // When the user changes from a currency with 3 fraction digits to
      // a currency with 2 fraction digits, and when the input value was
      // "9.000" (9), then it should change to "9.00" to reflect the new
      // currency's number of fraction digits.
      // When the currency was a high-precision price, then no digits should
      // be lost
      const formattedAmount = formatAmount(_trimInstanceProperty__default["default"](_context6 = props.value.amount).call(_context6), intl.locale, currencyCode);
      // The user could be changing the currency before entering any amount,
      // or while the amount is invalid. In these cases, we don't attempt to
      // format the amount.
      const nextAmount = isNaN(Number(formattedAmount)) ? props.value.amount : formattedAmount;

      // change currency code
      const fakeCurrencyEvent = {
        persist: () => {},
        target: {
          id: MoneyInput.getCurrencyDropdownId(moneyInputId),
          name: getCurrencyDropdownName(props.name),
          value: currencyCode || ''
        }
      };
      onChange === null || onChange === void 0 ? void 0 : onChange(fakeCurrencyEvent);

      // change amount if necessary
      if (props.value.amount !== nextAmount) {
        onChange === null || onChange === void 0 ? void 0 : onChange({
          persist: () => {},
          target: {
            id: MoneyInput.getAmountInputId(moneyInputId),
            name: getAmountInputName(props.name),
            value: nextAmount
          }
        });
      }
      (_amountInputRef$curre = amountInputRef.current) === null || _amountInputRef$curre === void 0 ? void 0 : _amountInputRef$curre.focus();
    }
  }, [intl.locale, onChange, moneyInputId, props.name, props.value.amount, props.value.currencyCode]);
  const handleCurrencyFocus = react$1.useCallback(() => {
    if (onFocus) onFocus({
      target: {
        id: MoneyInput.getCurrencyDropdownId(moneyInputId),
        name: getCurrencyDropdownName(props.name)
      }
    });
    toggleCurrencyHasFocus(true);
  }, [onFocus, toggleCurrencyHasFocus, props.name, moneyInputId]);
  const handleCurrencyBlur = react$1.useCallback(() => {
    toggleCurrencyHasFocus(false);
  }, [toggleCurrencyHasFocus]);
  const hasNoCurrencies = props.currencies.length === 0;
  const hasFocus = currencyHasFocus || amountHasFocus;
  const currencySelectStyles = createCurrencySelectStyles({
    hasWarning: props.hasWarning,
    hasError: props.hasError,
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    menuPortalZIndex: props.menuPortalZIndex,
    currencyHasFocus
  });
  const options = _mapInstanceProperty__default["default"](_context7 = props.currencies).call(_context7, currencyCode => ({
    label: currencyCode,
    value: currencyCode
  }));
  const option = (_context8 => {
    const matchedOption = _findInstanceProperty__default["default"](options).call(options, optionCandidate => optionCandidate.value === props.value.currencyCode);
    if (matchedOption) return matchedOption;
    // ensure an option is found, even when the currencies don't include
    // the money value's currencyCode
    if (_trimInstanceProperty__default["default"](_context8 = props.value.currencyCode).call(_context8) !== '') return {
      label: props.value.currencyCode,
      value: props.value.currencyCode
    };
    return null;
  })();
  const isHighPrecision = !MoneyInput.isEmpty(props.value) && MoneyInput.isHighPrecision(props.value, intl.locale);
  const onBlur = props.onBlur;
  const handleContainerBlur = react$1.useCallback(event => {
    var _containerRef$current;
    // ensures that both fields are marked as touched when one of them
    // is blurred
    if (typeof onBlur === 'function' && !((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(event.relatedTarget))) {
      onBlur({
        target: {
          id: MoneyInput.getCurrencyDropdownId(moneyInputId),
          name: getCurrencyDropdownName(props.name)
        }
      });
      onBlur({
        target: {
          id: MoneyInput.getAmountInputId(moneyInputId),
          name: getAmountInputName(props.name)
        }
      });
    }
  }, [onBlur, moneyInputId, props.name]);
  const TooltipPortal = react$1.useCallback(remainingProps => jsxRuntime.jsx(Portal, _objectSpread(_objectSpread({}, remainingProps), {}, {
    id: props.id
  })), [props.id]);
  return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: jsxRuntime.jsxs("div", {
      ref: containerRef,
      css: _ref2,
      "data-testid": "money-input-container",
      onBlur: handleContainerBlur,
      children: [hasNoCurrencies ? jsxRuntime.jsx(CurrencyLabel, {
        id: MoneyInput.getAmountInputId(moneyInputId),
        isDisabled: props.isDisabled,
        isReadOnly: props.isReadOnly,
        children: option && option.label
      }) : jsxRuntime.jsx(Select__default["default"], {
        inputId: MoneyInput.getCurrencyDropdownId(moneyInputId),
        name: getCurrencyDropdownName(props.name),
        value: option,
        isDisabled: props.isDisabled,
        isSearchable: false,
        components: {
          SingleValue: innerProps => jsxRuntime.jsx(SingleValue, _objectSpread(_objectSpread({}, innerProps), {}, {
            id: MoneyInput.getCurrencyDropdownId(moneyInputId)
          })),
          Input: ownProps => jsxRuntime.jsx(Select.components.Input, _objectSpread(_objectSpread({}, ownProps), {}, {
            readOnly: props.isReadOnly
          })),
          DropdownIndicator: selectUtils.DropdownIndicator
        },
        options: options,
        menuIsOpen: props.isReadOnly ? false : undefined,
        placeholder: "",
        styles: currencySelectStyles,
        onFocus: handleCurrencyFocus,
        menuPortalTarget: props.menuPortalTarget,
        menuShouldBlockScroll: props.menuShouldBlockScroll,
        onBlur: handleCurrencyBlur,
        onChange: handleCurrencyChange,
        "data-testid": "currency-dropdown"
      }), jsxRuntime.jsxs("div", {
        css: _ref,
        children: [jsxRuntime.jsx("input", _objectSpread(_objectSpread({
          ref: amountInputRef,
          id: MoneyInput.getAmountInputId(moneyInputId),
          autoComplete: props.autoComplete,
          name: getAmountInputName(props.name),
          type: "text",
          onFocus: handleAmountFocus,
          value: props.value.amount,
          css: [getAmountInputStyles(_objectSpread(_objectSpread({}, props), {}, {
            hasFocus
          })),
          // accounts for size of icon
          props.hasHighPrecisionBadge && isHighPrecision && /*#__PURE__*/react.css("padding-right:", designSystem.designTokens.spacing40, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:MoneyInput;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), currencyHasFocus && !props.isDisabled && !props.isReadOnly && /*#__PURE__*/react.css("border-left-color:", designSystem.designTokens.borderColorForInputWhenFocused, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:MoneyInput;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : ";label:MoneyInput;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"],
          placeholder: props.placeholder,
          onChange: handleAmountChange,
          onBlur: handleAmountBlur,
          disabled: props.isDisabled,
          readOnly: props.isReadOnly,
          autoFocus: props.isAutofocussed
        }, utils.filterDataAttributes(props)), {}, {
          /* ARIA */
          "aria-invalid": props['aria-invalid'],
          "aria-errormessage": props['aria-errormessage']
        })), props.hasHighPrecisionBadge && isHighPrecision && jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [!props.isDisabled && jsxRuntime.jsx("div", {
            id: getPortalId(props.id)
          }), jsxRuntime.jsx("div", {
            css: () => getHighPrecisionWrapperStyles({
              isDisabled: props.isDisabled
            }),
            children: jsxRuntime.jsx(Tooltip__default["default"], {
              off: props.isDisabled,
              placement: "top-end"
              // we use negative margin to make up for the padding in the Tooltip Wrapper
              // so that the tooltip is flush with the component
              ,
              styles: {
                body: {
                  margin: _concatInstanceProperty__default["default"](_context9 = _concatInstanceProperty__default["default"](_context10 = "".concat(designSystem.designTokens.spacing20, " -")).call(_context10, designSystem.designTokens.spacing10, " ")).call(_context9, designSystem.designTokens.spacing20, " 0")
                }
              },
              title: intl.formatMessage(messages.highPrecision),
              components: {
                TooltipWrapperComponent: TooltipPortal,
                WrapperComponent: TooltipWrapper
              },
              children: jsxRuntime.jsx(icons.FractionDigitsIcon, {
                color: props.isDisabled ? 'neutral60' : 'info'
              })
            })
          })]
        })]
      })]
    })
  });
};
MoneyInput.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt__default["default"].string,
  autoComplete: _pt__default["default"].string,
  'aria-invalid': _pt__default["default"].bool,
  'aria-errormessage': _pt__default["default"].string,
  name: _pt__default["default"].string,
  value: _pt__default["default"].shape({
    amount: _pt__default["default"].string.isRequired,
    currencyCode: _pt__default["default"].oneOfType([_pt__default["default"].any, _pt__default["default"].oneOf([''])]).isRequired
  }).isRequired,
  currencies: _pt__default["default"].arrayOf(_pt__default["default"].string).isRequired,
  placeholder: _pt__default["default"].string,
  onBlur: _pt__default["default"].func,
  onFocus: _pt__default["default"].func,
  isDisabled: _pt__default["default"].bool,
  isReadOnly: _pt__default["default"].bool,
  isAutofocussed: _pt__default["default"].bool,
  onChange: _pt__default["default"].func,
  menuPortalZIndex: _pt__default["default"].number,
  hasError: _pt__default["default"].bool,
  hasWarning: _pt__default["default"].bool,
  hasHighPrecisionBadge: _pt__default["default"].bool,
  horizontalConstraint: _pt__default["default"].oneOf([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto'])
} : {};
MoneyInput.displayName = 'MoneyInput';
MoneyInput.getAmountInputId = getAmountInputName;
MoneyInput.getCurrencyDropdownId = getCurrencyDropdownName;
MoneyInput.convertToMoneyValue = (value, locale) => {
  var _context11;
  return createMoneyValue(typeof value.amount === 'string' ? _trimInstanceProperty__default["default"](_context11 = value.amount).call(_context11) : '', locale, value.currencyCode);
};
MoneyInput.parseMoneyValue = (moneyValue, locale) => {
  if (!moneyValue) return {
    currencyCode: '',
    amount: ''
  };
  process.env.NODE_ENV !== "production" ? utils.warning(typeof locale === 'string', 'MoneyInput.parseMoneyValue: A locale must be passed as the second argument') : void 0;
  process.env.NODE_ENV !== "production" ? utils.warning(typeof moneyValue === 'object', 'MoneyInput.parseMoneyValue: Value must be passed as an object or be undefined') : void 0;
  process.env.NODE_ENV !== "production" ? utils.warning(typeof moneyValue.currencyCode === 'string', 'MoneyInput.parseMoneyValue: Value must contain "currencyCode"') : void 0;
  process.env.NODE_ENV !== "production" ? utils.warning(has__default["default"](currencies, moneyValue.currencyCode), 'MoneyInput.parseMoneyValue: Value must use known currency code') : void 0;
  process.env.NODE_ENV !== "production" ? utils.warning(
  // highPrecision or centPrecision values must be set
  typeof moneyValue.centAmount === 'number' || typeof moneyValue.preciseAmount === 'number' && typeof moneyValue.fractionDigits === 'number', 'MoneyInput.parseMoneyValue: Value must contain "amount"') : void 0;
  const amount = formatAmount(getAmountAsNumberFromMoneyValue(moneyValue).toLocaleString(locale, {
    minimumFractionDigits: moneyValue.fractionDigits
  }), locale, moneyValue.currencyCode);
  return {
    amount,
    currencyCode: moneyValue.currencyCode
  };
};
MoneyInput.isEmpty = formValue => {
  var _context12, _context13;
  return !formValue || _trimInstanceProperty__default["default"](_context12 = formValue.amount).call(_context12) === '' || _trimInstanceProperty__default["default"](_context13 = formValue.currencyCode).call(_context13) === '';
};
MoneyInput.isHighPrecision = (formValue, locale) => {
  process.env.NODE_ENV !== "production" ? utils.warning(!MoneyInput.isEmpty(formValue), 'MoneyValue.isHighPrecision may not be called with an empty money value.') : void 0;
  const moneyValue = MoneyInput.convertToMoneyValue(formValue, locale);
  return (moneyValue === null || moneyValue === void 0 ? void 0 : moneyValue.type) === 'highPrecision';
};
MoneyInput.isTouched = touched => Boolean(touched && touched.currencyCode && touched.amount);
MoneyInput.defaultProps = defaultProps;
var MoneyInput$1 = MoneyInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = MoneyInput$1;
exports.version = version;
