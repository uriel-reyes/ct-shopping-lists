import { type Props as ReactSelectProps } from 'react-select';
import { type Theme } from '@emotion/react';
import currencies from './currencies.json';
export type TInputProps = {
    isDisabled?: boolean;
    hasError?: boolean;
    hasWarning?: boolean;
    isReadOnly?: boolean;
    menuPortalZIndex?: number;
    theme?: Theme;
};
export type TCurrencyCode = keyof typeof currencies;
type TMoneyConditionalProps = {
    type: 'highPrecision';
    preciseAmount: number;
} | {
    type: 'centPrecision';
    preciseAmount?: never;
};
export type TMoneyValue = {
    currencyCode: TCurrencyCode;
    centAmount: number;
    fractionDigits: number;
} & TMoneyConditionalProps;
export declare const parseRawAmountToNumber: (rawAmount: string, locale: string) => number;
export declare const createMoneyValue: (rawAmount: string, locale: string, currencyCode?: TCurrencyCode | '') => TMoneyValue | null;
export type TValue = {
    amount: string;
    currencyCode: TCurrencyCode | '';
};
type TCustomEvent = {
    target: {
        id?: string;
        name?: string;
        value?: string | string[] | null;
    };
    persist?: () => void;
};
type TMoneyInputProps = {
    id?: string;
    autoComplete?: string;
    'aria-invalid'?: boolean;
    'aria-errormessage'?: string;
    name?: string;
    value: TValue;
    currencies: string[];
    placeholder?: string;
    onBlur?: (event: TCustomEvent) => void;
    onFocus?: (event: TCustomEvent) => void;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    isAutofocussed?: boolean;
    onChange?: (event: TCustomEvent) => void;
    menuPortalTarget?: ReactSelectProps['menuPortalTarget'];
    menuPortalZIndex?: number;
    menuShouldBlockScroll?: ReactSelectProps['menuShouldBlockScroll'];
    hasError?: boolean;
    hasWarning?: boolean;
    hasHighPrecisionBadge?: boolean;
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
};
declare const MoneyInput: {
    (props: TMoneyInputProps): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    getAmountInputId: (name?: string) => string | undefined;
    getCurrencyDropdownId: (name?: string) => string | undefined;
    convertToMoneyValue(value: TValue, locale: string): TMoneyValue | null;
    parseMoneyValue(moneyValue: TMoneyValue, locale: string): TValue;
    isEmpty(formValue: TValue): boolean;
    isHighPrecision(formValue: TValue, locale: string): boolean;
    isTouched(touched?: TTouched): boolean;
    defaultProps: Pick<TMoneyInputProps, "horizontalConstraint" | "menuPortalZIndex" | "currencies">;
};
type TTouched = {
    amount?: boolean;
    currencyCode?: boolean;
};
export default MoneyInput;
