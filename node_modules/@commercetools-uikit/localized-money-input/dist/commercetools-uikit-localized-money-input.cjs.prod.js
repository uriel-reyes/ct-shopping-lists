'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _sortInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/sort');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _Object$values = require('@babel/runtime-corejs3/core-js-stable/object/values');
var _reduceInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/reduce');
var react = require('react');
var reactIntl = require('react-intl');
require('@emotion/react');
var hooks = require('@commercetools-uikit/hooks');
var MoneyInput = require('@commercetools-uikit/money-input');
var Stack = require('@commercetools-uikit/spacings-stack');
var Constraints = require('@commercetools-uikit/constraints');
var icons = require('@commercetools-uikit/icons');
var localizedUtils = require('@commercetools-uikit/localized-utils');
var utils = require('@commercetools-uikit/utils');
var inputUtils = require('@commercetools-uikit/input-utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _sortInstanceProperty__default = /*#__PURE__*/_interopDefault(_sortInstanceProperty);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _Object$values__default = /*#__PURE__*/_interopDefault(_Object$values);
var _reduceInstanceProperty__default = /*#__PURE__*/_interopDefault(_reduceInstanceProperty);
var MoneyInput__default = /*#__PURE__*/_interopDefault(MoneyInput);
var Stack__default = /*#__PURE__*/_interopDefault(Stack);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);

var messages = reactIntl.defineMessages({
  missingRequiredField: {
    id: 'UIKit.LocalizedMoneyInput.missingRequiredField',
    description: 'Error message for missing required value',
    defaultMessage: 'This field is required. Provide at least one value.'
  },
  show: {
    id: 'UIKit.LocalizedMoneyInput.show',
    description: 'Show all currencies button',
    defaultMessage: 'Show all currencies ({remainingCurrencies})'
  },
  hide: {
    id: 'UIKit.LocalizedMoneyInput.hide',
    description: 'Hide currencies button',
    defaultMessage: 'Hide currencies ({remainingCurrencies})'
  }
});

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const sequentialId = utils.createSequentialId('localized-money-input-');

// sorts the currencies with the following priority:
// - The selected currency is placed first (e.g EUR)
// - All other currencies follow, sorted alphabetically as well
const sortCurrencies = (selectedCurrency, allCurrencies) => {
  const remainingCurrencies = _filterInstanceProperty__default["default"](allCurrencies).call(allCurrencies, currency => currency !== selectedCurrency);
  return [selectedCurrency, ..._sortInstanceProperty__default["default"](remainingCurrencies).call(remainingCurrencies)];
};
var _ref = {
  name: "1ktetz7",
  styles: "width:100%;position:relative;display:flex"
} ;
const LocalizedInput = props => {
  const onChange = props.onChange;
  const handleChange = react.useCallback(event => {
    // We manipulate the event to add the currency to the target.
    // That way the users  can read
    // event.target.currency and event.target.value to determine the next value.
    //
    // We only need this information for the story, the MC application code will
    // never need to access the information in such an inconvenient way, as
    // Formik can deal with a name like "foo.en" and sets the value correctly.
    // We can't use this as we aren't guaranteed a name in the story as the user
    // might clear it using the knob, and then we can't parse the currency from
    // the input name anymore.
    //
    event.target.currency = props.currency;
    onChange === null || onChange === void 0 ? void 0 : onChange(event);
  }, [props.currency, onChange]);
  return jsxRuntime.jsxs(Stack__default["default"], {
    scale: "xs",
    children: [jsxRuntime.jsx("div", {
      css: _ref,
      children: jsxRuntime.jsx(MoneyInput__default["default"], _objectSpread({
        name: props.name,
        value: props.value,
        onChange: handleChange,
        onBlur: props.onBlur,
        isDisabled: props.isDisabled,
        isReadOnly: props.isReadOnly,
        placeholder: props.placeholder,
        hasError: props.hasError,
        hasWarning: props.hasWarning,
        hasHighPrecisionBadge: props.hasHighPrecisionBadge
      }, utils.filterDataAttributes(props)))
    }), (props.error || props.warning) && jsxRuntime.jsx("div", {
      children: props.error ? props.error : props.warning
    })]
  });
};
LocalizedInput.propTypes = {};
LocalizedInput.displayName = 'LocalizedInput';
const LocalizedMoneyInput = props => {
  const intl = reactIntl.useIntl();
  const defaultExpansionState = props.hideCurrencyExpansionControls || props.defaultExpandCurrencies ||
  // default to `false`, because useToggleState defaults to `true`
  false;
  const _useToggleState = hooks.useToggleState(defaultExpansionState),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    areCurrenciesExpanded = _useToggleState2[0],
    toggleCurrencies = _useToggleState2[1];
  const onLocalizedMoneyInputToggle = react.useCallback(() => toggleCurrencies(), [toggleCurrencies]);
  const id = hooks.useFieldId(props.id, sequentialId);
  const hasErrorInRemainingCurrencies = props.hasError || localizedUtils.getHasErrorOnRemainingLanguages(props.errors, props.selectedCurrency);
  const hasWarningInRemainingCurrencies = props.hasWarning || localizedUtils.getHasWarningOnRemainingLanguages(props.warnings, props.selectedCurrency);
  if (hasErrorInRemainingCurrencies || hasWarningInRemainingCurrencies) {
    // this update within render replaces the old `getDerivedStateFromProps` functionality
    // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops
    if (!areCurrenciesExpanded) {
      toggleCurrencies();
    }
  }
  const currencies = sortCurrencies(props.selectedCurrency, _Object$keys__default["default"](props.value));
  const shouldRenderCurrencyControl = currencies.length > 1 && !props.hideCurrencyExpansionControls;
  if (props.hideCurrencyExpansionControls) ;
  return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: jsxRuntime.jsxs(Stack__default["default"], {
      scale: "xs",
      children: [jsxRuntime.jsx(Stack__default["default"], {
        scale: "s",
        children: _mapInstanceProperty__default["default"](currencies).call(currencies, (currency, index) => {
          const isFirstCurrency = index === 0;
          if (!isFirstCurrency && !areCurrenciesExpanded) return null;
          return jsxRuntime.jsx(LocalizedInput, _objectSpread(_objectSpread({
            id: LocalizedMoneyInput.getId(id, currency),
            name: LocalizedMoneyInput.getName(props.name, currency),
            value: props.value[currency],
            onChange: props.onChange,
            currency: currency,
            placeholder: props.placeholder ? props.placeholder[currency] : undefined,
            onBlur: props.onBlur,
            onFocus: props.onFocus,
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            hasError: Boolean(props.hasError || props.errors && props.errors[currency]),
            hasWarning: Boolean(props.hasWarning || props.warnings && props.warnings[currency]),
            warning: props.warnings && props.warnings[currency],
            error: props.errors && props.errors[currency]
          }, localizedUtils.createLocalizedDataAttributes(props, currency)), {}, {
            hasHighPrecisionBadge: props.hasHighPrecisionBadge
          }), currency);
        })
      }), shouldRenderCurrencyControl && jsxRuntime.jsx(inputUtils.LocalizedInputToggle, {
        icon: jsxRuntime.jsx(icons.CoinsIcon, {}),
        onClick: onLocalizedMoneyInputToggle,
        isOpen: areCurrenciesExpanded,
        isDisabled: areCurrenciesExpanded && Boolean(hasErrorInRemainingCurrencies || hasWarningInRemainingCurrencies),
        showMessage: intl.formatMessage(messages.show, {
          remainingCurrencies: currencies.length - 1
        }),
        hideMessage: intl.formatMessage(messages.hide, {
          remainingCurrencies: currencies.length - 1
        })
      })]
    })
  });
};
LocalizedMoneyInput.propTypes = {};
LocalizedMoneyInput.displayName = 'LocalizedMoneyInput';
LocalizedMoneyInput.getId = localizedUtils.getId;
LocalizedMoneyInput.getName = localizedUtils.getName;
LocalizedMoneyInput.defaultProps = {
  horizontalConstraint: 'scale'
};
LocalizedMoneyInput.convertToMoneyValues = (values, locale) => {
  var _context;
  return _mapInstanceProperty__default["default"](_context = _Object$values__default["default"](values)).call(_context, value => {
    return MoneyInput__default["default"].convertToMoneyValue(value, locale);
  });
};
LocalizedMoneyInput.parseMoneyValues = function () {
  let moneyValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let locale = arguments.length > 1 ? arguments[1] : undefined;
  return _reduceInstanceProperty__default["default"](moneyValues).call(moneyValues, (allValues, moneyValue) => {
    const value = MoneyInput__default["default"].parseMoneyValue(moneyValue, locale);
    return _objectSpread(_objectSpread({}, allValues), {}, {
      [value.currencyCode]: value
    });
  }, {});
};
LocalizedMoneyInput.getHighPrecisionCurrencies = (values, locale) => {
  const typedCurrencyCodes = _Object$keys__default["default"](values);
  return _filterInstanceProperty__default["default"](typedCurrencyCodes).call(typedCurrencyCodes, currencyCode => MoneyInput__default["default"].isHighPrecision(values[currencyCode], locale));
};
LocalizedMoneyInput.getEmptyCurrencies = values => {
  const typedCurrencyCodes = _Object$keys__default["default"](values);
  return _filterInstanceProperty__default["default"](typedCurrencyCodes).call(typedCurrencyCodes, currencyCode => MoneyInput__default["default"].isEmpty(values[currencyCode]));
};
var LocalizedMoneyInput$1 = LocalizedMoneyInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = LocalizedMoneyInput$1;
exports.version = version;
