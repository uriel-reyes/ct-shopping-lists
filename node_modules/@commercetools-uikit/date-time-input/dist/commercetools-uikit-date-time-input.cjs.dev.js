'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Reflect$construct = require('@babel/runtime-corejs3/core-js-stable/reflect/construct');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _classCallCheck = require('@babel/runtime-corejs3/helpers/classCallCheck');
var _createClass = require('@babel/runtime-corejs3/helpers/createClass');
var _inherits = require('@babel/runtime-corejs3/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime-corejs3/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime-corejs3/helpers/getPrototypeOf');
var _pt = require('prop-types');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var _includesInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/includes');
var _fillInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/fill');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var react$1 = require('react');
var Downshift = require('downshift');
var reactIntl = require('react-intl');
var Constraints = require('@commercetools-uikit/constraints');
var utils = require('@commercetools-uikit/utils');
var calendarTimeUtils = require('@commercetools-uikit/calendar-time-utils');
var calendarUtils = require('@commercetools-uikit/calendar-utils');
var react = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Reflect$construct__default = /*#__PURE__*/_interopDefault(_Reflect$construct);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var _includesInstanceProperty__default = /*#__PURE__*/_interopDefault(_includesInstanceProperty);
var _fillInstanceProperty__default = /*#__PURE__*/_interopDefault(_fillInstanceProperty);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var Downshift__default = /*#__PURE__*/_interopDefault(Downshift);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);

const getInputStyles = () => /*#__PURE__*/react.css("width:100%;text-align:center;border:0;border-top:1px solid ", designSystem.designTokens.colorNeutral90, ";padding:10px 0;outline:0;font-size:", designSystem.designTokens.fontSizeDefault, ";margin-top:", designSystem.designTokens.spacing20, ";color:", designSystem.designTokens.colorSolid, ";:disabled{background-color:", designSystem.designTokens.colorSurface, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:getInputStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbWUtaW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1nQyIsImZpbGUiOiJ0aW1lLWlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiQGVtb3Rpb24vcmVhY3QvdHlwZXMvY3NzLXByb3BcIiAvPlxuaW1wb3J0IHR5cGUgeyBLZXlib2FyZEV2ZW50SGFuZGxlciwgUmVmT2JqZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgdHlwZSB7IFREYXRlVGltZUlucHV0UHJvcHMgfSBmcm9tICcuL2RhdGUtdGltZS1pbnB1dCc7XG5cbmNvbnN0IGdldElucHV0U3R5bGVzID0gKCkgPT4gY3NzYFxuICB3aWR0aDogMTAwJTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXI6IDA7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAke2Rlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5MH07XG4gIHBhZGRpbmc6IDEwcHggMDtcbiAgb3V0bGluZTogMDtcbiAgZm9udC1zaXplOiAke2Rlc2lnblRva2Vucy5mb250U2l6ZURlZmF1bHR9O1xuICBtYXJnaW4tdG9wOiAke2Rlc2lnblRva2Vucy5zcGFjaW5nMjB9O1xuICBjb2xvcjogJHtkZXNpZ25Ub2tlbnMuY29sb3JTb2xpZH07XG5cbiAgOmRpc2FibGVkIHtcbiAgICAvKiBGaXhlcyBiYWNrZ3JvdW5kIGNvbG9yIGluIEZpcmVmb3ggKi9cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICB9XG5gO1xuXG50eXBlIFREYXRlQ2FsZW5kYXJUaW1lSW5wdXRQcm9wcyA9IHtcbiAgdGltZUlucHV0UmVmOiBSZWZPYmplY3Q8SFRNTElucHV0RWxlbWVudD47XG4gIG9uS2V5RG93bjogS2V5Ym9hcmRFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD47XG59ICYgUGljazxcbiAgVERhdGVUaW1lSW5wdXRQcm9wcyxcbiAgJ2lzRGlzYWJsZWQnIHwgJ29uQ2hhbmdlJyB8ICd2YWx1ZScgfCAncGxhY2Vob2xkZXInXG4+O1xuXG5jb25zdCBEYXRlQ2FsZW5kYXJUaW1lSW5wdXQgPSAocHJvcHM6IFREYXRlQ2FsZW5kYXJUaW1lSW5wdXRQcm9wcykgPT4gKFxuICA8aW5wdXRcbiAgICBkaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICByZWY9e3Byb3BzLnRpbWVJbnB1dFJlZn1cbiAgICB0eXBlPVwidGV4dFwiXG4gICAgdmFsdWU9e3Byb3BzLnZhbHVlfVxuICAgIG9uQ2hhbmdlPXtwcm9wcy5vbkNoYW5nZX1cbiAgICBvbktleURvd249e3Byb3BzLm9uS2V5RG93bn1cbiAgICBwbGFjZWhvbGRlcj17cHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgY3NzPXtnZXRJbnB1dFN0eWxlcygpfVxuICAvPlxuKTtcblxuRGF0ZUNhbGVuZGFyVGltZUlucHV0LmRpc3BsYXlOYW1lID0gJ0RhdGVDYWxlbmRhclRpbWVJbnB1dCc7XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVDYWxlbmRhclRpbWVJbnB1dDtcbiJdfQ== */");
const DateCalendarTimeInput = props => jsxRuntime.jsx("input", {
  disabled: props.isDisabled,
  ref: props.timeInputRef,
  type: "text",
  value: props.value,
  onChange: props.onChange,
  onKeyDown: props.onKeyDown,
  placeholder: props.placeholder,
  css: getInputStyles()
});
DateCalendarTimeInput.propTypes = process.env.NODE_ENV !== "production" ? {
  timeInputRef: _pt__default["default"].any.isRequired,
  onKeyDown: _pt__default["default"].func.isRequired
} : {};
DateCalendarTimeInput.displayName = 'DateCalendarTimeInput';
var TimeInput = DateCalendarTimeInput;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context3, _context4; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source), !0)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct__default["default"](Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct__default["default"]) return false; if (_Reflect$construct__default["default"].sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct__default["default"](Boolean, [], function () {})); return true; } catch (e) { return false; } }
const activationTypes = [Downshift__default["default"].stateChangeTypes.keyDownEnter, Downshift__default["default"].stateChangeTypes.clickItem];
const preventDownshiftDefault = event => {
  event.nativeEvent.preventDownshiftDefault = true;
};

// This keeps the menu open when the user focuses the time input (thereby
// blurring the regular input/toggle button)
const createBlurHandler = timeInputRef => event => {
  event.persist();
  if (event.relatedTarget === timeInputRef.current) {
    preventDownshiftDefault(event);
  }
};
let DateTimeInput = /*#__PURE__*/function (_Component) {
  _inherits(DateTimeInput, _Component);
  var _super = _createSuper(DateTimeInput);
  function DateTimeInput() {
    var _this;
    _classCallCheck(this, DateTimeInput);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call(this, ...args);
    _this.inputRef = /*#__PURE__*/react$1.createRef();
    _this.timeInputRef = /*#__PURE__*/react$1.createRef();
    _this.state = {
      calendarDate: calendarTimeUtils.getToday(_this.props.timeZone),
      suggestedItems: [],
      highlightedIndex: _this.props.value === '' ? null : calendarTimeUtils.getDateInMonth(_this.props.value, _this.props.timeZone) - 1,
      timeString: ''
    };
    _this.jumpMonths = function (amount) {
      let dayToHighlight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      _this.setState(prevState => {
        const nextDate = calendarTimeUtils.changeMonth(prevState.calendarDate, _this.props.timeZone, amount);
        return {
          calendarDate: nextDate,
          highlightedIndex: dayToHighlight
        };
      });
    };
    _this.showToday = () => {
      const today = calendarTimeUtils.getToday(_this.props.timeZone);
      _this.setState(prevState => ({
        calendarDate: today,
        highlightedIndex: (prevState.suggestedItems || []).length + calendarTimeUtils.getDateInMonth(today, _this.props.timeZone) - 1
      }), () => {
        var _this$inputRef$curren;
        return (_this$inputRef$curren = _this.inputRef.current) === null || _this$inputRef$curren === void 0 ? void 0 : _this$inputRef$curren.focus();
      });
    };
    _this.handleBlur = () => {
      if (_this.props.onBlur) _this.props.onBlur({
        target: {
          id: _this.props.id,
          name: _this.props.name
        }
      });
    };
    _this.handleTimeChange = event => {
      const parsedTime = utils.parseTime(event.target.value);
      _this.setState({
        timeString: event.target.value
      });

      // We can't update the parent when there is no value
      if (_this.props.value === '') return;
      let date = calendarTimeUtils.getStartOf(_this.props.value, _this.props.timeZone);
      if (parsedTime) {
        date = calendarTimeUtils.changeTime(date, _this.props.timeZone, parsedTime);
      }
      _this.emit(date);
    };
    _this.emit = value => {
      var _this$props$onChange, _this$props;
      return (_this$props$onChange = (_this$props = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props, {
        target: {
          id: _this.props.id,
          name: _this.props.name,
          // when cleared the value is null, but we always want it to be an
          // empty string when there is no value.
          value: value || ''
        }
      });
    };
    return _this;
  }
  _createClass(DateTimeInput, [{
    key: "render",
    value: function render() {
      var _context;
      if (!this.props.isReadOnly) {
        process.env.NODE_ENV !== "production" ? utils.warning(typeof this.props.onChange === 'function', 'DateTimeInput: `onChange` is required when input is not read only.') : void 0;
      }
      return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
        max: this.props.horizontalConstraint,
        children: jsxRuntime.jsx(Downshift__default["default"]
        // Setting the key to the timeZone conveniently forces a rerender
        // when the time-zone changes. Otherwise we'd need to make
        // inputValue a controlled property so that we can update
        // the displayed value as downshift seems to ignore an updated
        // itemToString function.
        , {
          inputId: this.props.id,
          itemToString: calendarTimeUtils.createItemDateTimeToString(this.props.intl.locale, this.props.timeZone),
          selectedItem: this.props.value === '' ? null : this.props.value,
          highlightedIndex: this.state.highlightedIndex,
          onChange: this.emit,
          stateReducer: (_, changes) => {
            if (_includesInstanceProperty__default["default"](activationTypes).call(activationTypes, changes.type)) {
              return _objectSpread(_objectSpread({}, changes), {}, {
                isOpen: true
              });
            }
            return changes;
          },
          onStateChange: changes => {
            this.setState(prevState => {
              if (_includesInstanceProperty__default["default"](activationTypes).call(activationTypes, changes.type)) {
                return {
                  startDate: changes.isOpen ? prevState.startDate : null,
                  inputValue: changes.inputValue || prevState.inputValue,
                  timeString: changes.selectedItem ? calendarTimeUtils.formatTime(changes.selectedItem, this.props.intl.locale, this.props.timeZone) : prevState.timeString
                };
              }
              if (changes.hasOwnProperty('inputValue')) {
                const suggestedItems = calendarTimeUtils.createSuggestedItems(changes.inputValue, this.props.timeZone);
                return {
                  suggestedItems,
                  highlightedIndex: suggestedItems.length > 0 ? 0 : null
                };
              }
              if (changes.hasOwnProperty('isOpen')) {
                return {
                  inputValue: changes.inputValue || prevState.inputValue,
                  startDate: changes.isOpen ? prevState.startDate : null,
                  // set time input value to time from value when menu is opened
                  timeString: changes.isOpen && this.props.value !== '' ? calendarTimeUtils.formatTime(this.props.value, this.props.intl.locale, this.props.timeZone) : '',
                  // ensure calendar always opens on selected item, or on
                  // current month when there is no selected item
                  calendarDate: this.props.value === '' ? calendarTimeUtils.getToday(this.props.timeZone) : this.props.value
                };
              }
              if (changes.hasOwnProperty('highlightedIndex')) {
                return {
                  highlightedIndex: changes.highlightedIndex
                };
              }
              return null;
            }, () => {
              if (_includesInstanceProperty__default["default"](activationTypes).call(activationTypes, changes.type)) {
                var _this$timeInputRef$cu, _this$timeInputRef$cu2;
                (_this$timeInputRef$cu = this.timeInputRef.current) === null || _this$timeInputRef$cu === void 0 ? void 0 : _this$timeInputRef$cu.focus();
                (_this$timeInputRef$cu2 = this.timeInputRef.current) === null || _this$timeInputRef$cu2 === void 0 ? void 0 : _this$timeInputRef$cu2.setSelectionRange(0, this.state.timeString.length);
              }
            });
          },
          children: _ref => {
            var _context2;
            let getInputProps = _ref.getInputProps,
              getMenuProps = _ref.getMenuProps,
              getItemProps = _ref.getItemProps,
              getToggleButtonProps = _ref.getToggleButtonProps,
              clearSelection = _ref.clearSelection,
              highlightedIndex = _ref.highlightedIndex,
              openMenu = _ref.openMenu,
              closeMenu = _ref.closeMenu,
              setHighlightedIndex = _ref.setHighlightedIndex,
              selectedItem = _ref.selectedItem,
              inputValue = _ref.inputValue,
              isOpen = _ref.isOpen;
            const suggestedItems = this.state.suggestedItems;
            const calendarItems = calendarTimeUtils.createCalendarItems(this.state.calendarDate, this.state.timeString, this.props.timeZone);
            const paddingDayCount = calendarTimeUtils.getPaddingDayCount(this.state.calendarDate, this.props.intl.locale, this.props.timeZone);
            const paddingDays = _fillInstanceProperty__default["default"](_context2 = Array(paddingDayCount)).call(_context2, undefined);
            const weekdays = calendarTimeUtils.getWeekdayNames(this.props.intl.locale);
            const today = calendarTimeUtils.getToday(this.props.timeZone);
            const isTimeInputVisible = Boolean(this.props.value) && this.props.value !== '';
            return jsxRuntime.jsxs("div", {
              onFocus: this.props.onFocus,
              onBlur: this.handleBlur,
              children: [jsxRuntime.jsx(calendarUtils.CalendarBody, {
                inputRef: this.inputRef,
                inputProps: getInputProps(_objectSpread({
                  /* ARIA */
                  'aria-invalid': this.props['aria-invalid'],
                  'aria-errormessage': this.props['aria-errormessage'],
                  // Unset the aria-labelledby as it interfers with the link
                  // between the <label for> and the <input id>.
                  'aria-labelledby': undefined,
                  name: this.props.name,
                  placeholder: typeof this.props.placeholder === 'string' ? this.props.placeholder : calendarTimeUtils.getLocalizedDateTimeFormatPattern(this.props.intl.locale, 'full'),
                  onMouseEnter: () => {
                    // we remove the highlight so that the user can use the
                    // arrow keys to move the cursor when hovering
                    if (isOpen) setHighlightedIndex(-1);
                  },
                  onKeyDown: event => {
                    if (this.props.isReadOnly) {
                      preventDownshiftDefault(event);
                      return;
                    }
                    // parse input when user presses enter on regular input,
                    // close menu and notify parent
                    if (event.key === 'Enter' && highlightedIndex === null) {
                      preventDownshiftDefault(event);
                      const parsedDate = calendarTimeUtils.parseInputText(inputValue, this.props.intl.locale, this.props.timeZone);
                      this.emit(parsedDate);
                      closeMenu();
                    }
                    // ArrowDown
                    if (event.key === 'ArrowDown') {
                      if (Number(highlightedIndex) + 1 >= calendarItems.length) {
                        // if it's the end of the month
                        // then bypass normal arrow navigation
                        preventDownshiftDefault(event);
                        // then jump to start of next month
                        this.jumpMonths(1, 0);
                      }
                    }
                    // ArrowUp
                    if (event.key === 'ArrowUp') {
                      const previousDay = calendarTimeUtils.getPreviousDay(calendarItems[Number(highlightedIndex)]);
                      if (Number(highlightedIndex) <= 0) {
                        // if it's the start of the month
                        // then bypass normal arrow navigation
                        preventDownshiftDefault(event);
                        const numberOfDaysOfPrevMonth = calendarTimeUtils.getDaysInMonth(previousDay, this.props.timeZone);
                        // then jump to the last day of the previous month
                        this.jumpMonths(-1, numberOfDaysOfPrevMonth - 1);
                      }
                    }
                  },
                  onClick: this.props.isReadOnly ? undefined : openMenu,
                  onBlur: createBlurHandler(this.timeInputRef),
                  onChange: event => {
                    var _event$target$value;
                    // keep timeInput and regular input in sync when user
                    // types into regular input
                    if (!isOpen) return;
                    const time = (_event$target$value = event.target.value) === null || _event$target$value === void 0 ? void 0 : _event$target$value.split(' ')[1];
                    if (!time) return;
                    const parsedTime = utils.parseTime(time);
                    this.setState(() => {
                      if (!parsedTime) return {
                        timeString: ''
                      };
                      let date = calendarTimeUtils.getToday(this.props.timeZone);
                      if (parsedTime) {
                        date = calendarTimeUtils.changeTime(date, this.props.timeZone, parsedTime);
                      }
                      return {
                        timeString: calendarTimeUtils.formatTime(date, this.props.intl.locale, this.props.timeZone)
                      };
                    });
                  }
                }, utils.filterDataAttributes(this.props))),
                hasSelection: Boolean(selectedItem),
                onClear: clearSelection,
                isOpen: isOpen,
                isDisabled: this.props.isDisabled,
                isReadOnly: this.props.isReadOnly,
                toggleButtonProps: getToggleButtonProps({
                  onBlur: createBlurHandler(this.timeInputRef)
                }),
                hasError: this.props.hasError,
                hasWarning: this.props.hasWarning
              }), isOpen && !this.props.isDisabled && jsxRuntime.jsxs(calendarUtils.CalendarMenu, _objectSpread(_objectSpread({}, getMenuProps()), {}, {
                hasFooter: true,
                hasError: this.props.hasError,
                hasWarning: this.props.hasWarning,
                children: [jsxRuntime.jsx(calendarUtils.CalendarHeader, {
                  monthLabel: calendarTimeUtils.getMonthCalendarLabel(this.state.calendarDate, this.props.intl.locale),
                  yearLabel: calendarTimeUtils.getYearCalendarLabel(this.state.calendarDate, this.props.intl.locale),
                  onPrevMonthClick: () => this.jumpMonths(-1),
                  onTodayClick: this.showToday,
                  onNextMonthClick: () => this.jumpMonths(1),
                  onPrevYearClick: () => this.jumpMonths(-12),
                  onNextYearClick: () => this.jumpMonths(12)
                }), jsxRuntime.jsxs(calendarUtils.CalendarContent, {
                  children: [_mapInstanceProperty__default["default"](weekdays).call(weekdays, weekday => jsxRuntime.jsx(calendarUtils.CalendarDay, {
                    type: "heading",
                    children: weekday
                  }, weekday)), _mapInstanceProperty__default["default"](paddingDays).call(paddingDays, (_, index) => jsxRuntime.jsx(calendarUtils.CalendarDay, {
                    type: "spacing"
                  }, index)), _mapInstanceProperty__default["default"](calendarItems).call(calendarItems, (item, index) => jsxRuntime.jsx(calendarUtils.CalendarDay, _objectSpread(_objectSpread({
                    isToday: calendarTimeUtils.isSameDay(today, item)
                  }, getItemProps({
                    disabled: this.props.isDisabled,
                    item,
                    onMouseOut: () => {
                      setHighlightedIndex(-1);
                    }
                  })), {}, {
                    isHighlighted: suggestedItems.length + index === highlightedIndex,
                    isSelected: calendarTimeUtils.isSameDay(item, this.props.value),
                    children: calendarTimeUtils.getCalendarDayLabel(item, this.props.timeZone)
                  }), item))]
                }), jsxRuntime.jsx(TimeInput, {
                  isDisabled: !isTimeInputVisible,
                  timeInputRef: this.timeInputRef,
                  placeholder: calendarTimeUtils.getLocalizedDateTimeFormatPattern(this.props.intl.locale, 'time'),
                  value: this.state.timeString,
                  onChange: this.handleTimeChange,
                  onKeyDown: event => {
                    if (event.key === 'ArrowUp') {
                      var _this$inputRef$curren2;
                      setHighlightedIndex(-1);
                      (_this$inputRef$curren2 = this.inputRef.current) === null || _this$inputRef$curren2 === void 0 ? void 0 : _this$inputRef$curren2.focus();
                      return;
                    }
                    if (event.key === 'Enter') {
                      var _this$inputRef$curren3, _this$inputRef$curren4;
                      setHighlightedIndex(-1);
                      (_this$inputRef$curren3 = this.inputRef.current) === null || _this$inputRef$curren3 === void 0 ? void 0 : _this$inputRef$curren3.focus();
                      (_this$inputRef$curren4 = this.inputRef.current) === null || _this$inputRef$curren4 === void 0 ? void 0 : _this$inputRef$curren4.setSelectionRange(0, 100);
                      closeMenu();
                    }
                  }
                })]
              }))]
            });
          }
        }, _concatInstanceProperty__default["default"](_context = "".concat(this.props.timeZone, ":")).call(_context, this.props.intl.locale))
      });
    }
  }]);
  return DateTimeInput;
}(react$1.Component);
DateTimeInput.displayName = 'DateTimeInput';
DateTimeInput.propTypes = process.env.NODE_ENV !== "production" ? {
  'aria-invalid': _pt__default["default"].bool,
  'aria-errormessage': _pt__default["default"].string,
  horizontalConstraint: _pt__default["default"].oneOf([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto']),
  value: _pt__default["default"].string.isRequired,
  onChange: _pt__default["default"].func,
  onFocus: _pt__default["default"].func,
  onBlur: _pt__default["default"].func,
  timeZone: _pt__default["default"].string.isRequired,
  id: _pt__default["default"].string,
  name: _pt__default["default"].string,
  placeholder: _pt__default["default"].string,
  isDisabled: _pt__default["default"].bool,
  isReadOnly: _pt__default["default"].bool,
  hasError: _pt__default["default"].bool,
  hasWarning: _pt__default["default"].bool
} : {};
var dateTimeInput = reactIntl.injectIntl(DateTimeInput);

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = dateTimeInput;
exports.version = version;
