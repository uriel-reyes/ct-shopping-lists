import { type ChangeEventHandler, type FocusEventHandler, type ReactElement, type ReactNode } from 'react';
type TComponents = {
    wrapper?: (children: ReactElement) => ReactElement;
};
export type TOptionProps = {
    value: string | boolean;
    children: string | ReactElement | (() => ReactElement);
    components?: TComponents;
    additionalContent?: ReactNode;
    id?: string;
    name?: string;
    isChecked?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    hasError?: boolean;
    hasWarning?: boolean;
    onChange?: ChangeEventHandler<HTMLInputElement>;
    onFocus?: FocusEventHandler<HTMLLabelElement>;
    onBlur?: FocusEventHandler<HTMLLabelElement>;
    isHovered?: boolean;
};
export type TStylesProps = Pick<TOptionProps, 'isDisabled' | 'hasError' | 'hasWarning' | 'isHovered' | 'isReadOnly' | 'isChecked'>;
declare const Option: {
    (props: TOptionProps): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    defaultProps: {
        components: {};
    };
};
export default Option;
