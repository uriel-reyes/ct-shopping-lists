'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var reactIntl = require('react-intl');
var isEmpty = require('lodash/isEmpty');
var reactSelect = require('react-select');
var AsyncSelect = require('react-select/async');
var utils = require('@commercetools-uikit/utils');
var Constraints = require('@commercetools-uikit/constraints');
var LoadingSpinner = require('@commercetools-uikit/loading-spinner');
var selectUtils = require('@commercetools-uikit/select-utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var isEmpty__default = /*#__PURE__*/_interopDefault(isEmpty);
var AsyncSelect__default = /*#__PURE__*/_interopDefault(AsyncSelect);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);
var LoadingSpinner__default = /*#__PURE__*/_interopDefault(LoadingSpinner);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const LoadingIndicator = () => jsxRuntime.jsx(LoadingSpinner__default["default"], {
  scale: "s"
});
LoadingIndicator.displayName = 'LoadingIndicator';
const customizedComponents = {
  DropdownIndicator: selectUtils.DropdownIndicator,
  ClearIndicator: selectUtils.ClearIndicator,
  LoadingIndicator,
  MultiValueRemove: selectUtils.TagRemove
};
const defaultProps = {
  // Using "null" will ensure that the currently selected value disappears in
  // case "undefined" gets passed as the next value
  value: null,
  isSearchable: true,
  menuPortalZIndex: 1,
  controlShouldRenderValue: true
};
const AsyncSelectInput = props => {
  const intl = reactIntl.useIntl();
  if (!props.isReadOnly) ;
  selectUtils.warnIfMenuPortalPropsAreMissing({
    menuPortalZIndex: props.menuPortalZIndex,
    menuPortalTarget: props.menuPortalTarget,
    componentName: 'AsyncSelectInput'
  });
  const placeholder = props.placeholder || intl.formatMessage(selectUtils.messages.placeholder);
  const loadingMessage = () => {
    if (typeof props.loadingMessage === 'function') {
      return props.loadingMessage();
    }
    return props.loadingMessage || intl.formatMessage(selectUtils.messages.loadingOptions);
  };
  return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: jsxRuntime.jsx("div", _objectSpread(_objectSpread({}, utils.filterDataAttributes(props)), {}, {
      children: jsxRuntime.jsx(AsyncSelect__default["default"], {
        "aria-label": props['aria-label'],
        "aria-labelledby": props['aria-labelledby'],
        "aria-invalid": props['aria-invalid'],
        "aria-errormessage": props['aria-errormessage'],
        autoFocus: props.isAutofocussed,
        backspaceRemovesValue: props.isReadOnly ? false : props.backspaceRemovesValue,
        components: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, customizedComponents), props.iconLeft && !props.isMulti ? selectUtils.customComponentsWithIcons : {}), props.isReadOnly ? {
          Input: ownProps => jsxRuntime.jsx(reactSelect.components.Input, _objectSpread(_objectSpread({}, ownProps), {}, {
            readOnly: true
          }))
        } : {}), props.components),
        menuIsOpen: props.isReadOnly ? false : props.menuIsOpen,
        styles: selectUtils.createSelectStyles({
          hasWarning: props.hasWarning,
          hasError: props.hasError,
          showOptionGroupDivider: props.showOptionGroupDivider,
          menuPortalZIndex: props.menuPortalZIndex,
          isDisabled: props.isDisabled,
          isReadOnly: props.isReadOnly,
          iconLeft: props.iconLeft,
          isMulti: props.isMulti,
          hasValue: !isEmpty__default["default"](props.value),
          controlShouldRenderValue: props.controlShouldRenderValue,
          horizontalConstraint: props.horizontalConstraint
        }),
        filterOption: props.filterOption
        // react-select uses "id" (for the container) and "inputId" (for the input),
        // but we use "id" (for the input) and "containerId" (for the container)
        // instead.
        // This makes it easier to less confusing to use with <label />s.
        ,
        id: props.containerId,
        inputId: props.id,
        inputValue: props.inputValue,
        isClearable: props.isReadOnly ? false : props.isClearable,
        isDisabled: props.isDisabled,
        isOptionDisabled: props.isOptionDisabled,
        isMulti: props.isMulti,
        isSearchable: props.isSearchable,
        maxMenuHeight: props.maxMenuHeight,
        menuPortalTarget: props.menuPortalTarget,
        menuShouldBlockScroll: props.menuShouldBlockScroll,
        closeMenuOnSelect: props.closeMenuOnSelect,
        name: props.name,
        loadingMessage: loadingMessage,
        noOptionsMessage: props.noOptionsMessage || (_ref => {
          let inputValue = _ref.inputValue;
          return inputValue === '' ? intl.formatMessage(selectUtils.messages.noOptionsMessageWithoutInputValue) : intl.formatMessage(selectUtils.messages.noOptionsMessageWithInputValue, {
            inputValue
          });
        }),
        onBlur: props.onBlur ? () => {
          const event = {
            target: {
              id: props.id,
              name: (() => {
                if (!props.name) return undefined;
                if (!props.isMulti) return props.name;
                // We append the ".0" to make Formik set the touched
                // state as an array instead of a boolean only.
                // Otherwise the shapes would clash on submission, as
                // Formik will create an array on submission anyways.
                return "".concat(props.name, ".0");
              })()
            },
            persist: () => {}
          };
          props.onBlur && props.onBlur(event);
        } : undefined,
        onChange: (value, info) => {
          var _props$onChange;
          let newValue = value;
          if (props.isMulti && !newValue) {
            newValue = [];
          }
          (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
            target: {
              id: props.id,
              name: props.name,
              value: newValue
            },
            persist: () => {}
          }, info);
        },
        onFocus: props.onFocus,
        onInputChange: props.onInputChange,
        placeholder: placeholder,
        tabIndex: props.tabIndex,
        tabSelectsValue: props.tabSelectsValue,
        value: props.value
        // Async react-select props
        ,
        defaultOptions: props.defaultOptions,
        loadOptions: props.loadOptions,
        cacheOptions: props.cacheOptions
        // Extra props
        // @ts-ignore: passed to the react-select components via `selectProps`.
        ,
        iconLeft: props.iconLeft,
        controlShouldRenderValue: props.controlShouldRenderValue
      })
    }))
  });
};
AsyncSelectInput.propTypes = {};
AsyncSelectInput.displayName = 'AsyncSelectInput';
AsyncSelectInput.defaultProps = defaultProps;

/**
 * Expose static helper methods.
 */

// Formik will set the field to an array on submission, so we always have to
// deal with an array. The touched state ends up being an empty array in case
// values were removed only. So we have to treat any array we receive as
// a signal of the field having been touched.
AsyncSelectInput.isTouched = touched => Boolean(touched);

/**
 * Expose react-select components for customization purposes.
 */

// custom
AsyncSelectInput.ClearIndicator = customizedComponents.ClearIndicator;
AsyncSelectInput.Control = reactSelect.components.Control;
AsyncSelectInput.CrossIcon = reactSelect.components.CrossIcon;
AsyncSelectInput.DownChevron = reactSelect.components.DownChevron;
// custom
AsyncSelectInput.DropdownIndicator = customizedComponents.DropdownIndicator;
AsyncSelectInput.Group = reactSelect.components.Group;
AsyncSelectInput.GroupHeading = reactSelect.components.GroupHeading;
AsyncSelectInput.IndicatorSeparator = reactSelect.components.IndicatorSeparator;
AsyncSelectInput.IndicatorsContainer = reactSelect.components.IndicatorsContainer;
AsyncSelectInput.Input = reactSelect.components.Input;
// custom
AsyncSelectInput.LoadingIndicator = customizedComponents.LoadingIndicator;
AsyncSelectInput.LoadingMessage = reactSelect.components.LoadingMessage;
AsyncSelectInput.Menu = reactSelect.components.Menu;
AsyncSelectInput.MenuList = reactSelect.components.MenuList;
AsyncSelectInput.MenuPortal = reactSelect.components.MenuPortal;
AsyncSelectInput.MultiValue = reactSelect.components.MultiValue;
AsyncSelectInput.MultiValueContainer = reactSelect.components.MultiValueContainer;
AsyncSelectInput.MultiValueLabel = reactSelect.components.MultiValueLabel;
// custom
AsyncSelectInput.MultiValueRemove = customizedComponents.MultiValueRemove;
AsyncSelectInput.NoOptionsMessage = reactSelect.components.NoOptionsMessage;
AsyncSelectInput.Option = reactSelect.components.Option;
AsyncSelectInput.Placeholder = reactSelect.components.Placeholder;
AsyncSelectInput.SelectContainer = reactSelect.components.SelectContainer;
AsyncSelectInput.SingleValue = reactSelect.components.SingleValue;
AsyncSelectInput.ValueContainer = reactSelect.components.ValueContainer;
var AsyncSelectInput$1 = AsyncSelectInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = AsyncSelectInput$1;
exports.version = version;
