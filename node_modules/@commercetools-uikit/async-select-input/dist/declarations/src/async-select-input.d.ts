import type { ReactNode } from 'react';
import { type ActionMeta, type GroupBase, type OptionsOrGroups } from 'react-select';
import { type AsyncProps } from 'react-select/async';
type TCustomEvent = {
    target: {
        id?: ReactSelectAsyncProps['inputId'];
        name?: ReactSelectAsyncProps['name'];
        value?: unknown;
    };
    persist: () => void;
};
type ReactSelectAsyncProps = AsyncProps<unknown, boolean, GroupBase<unknown>>;
export type TAsyncSelectInputProps = {
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    hasError?: boolean;
    hasWarning?: boolean;
    isReadOnly?: boolean;
    'aria-label'?: ReactSelectAsyncProps['aria-label'];
    'aria-labelledby'?: ReactSelectAsyncProps['aria-labelledby'];
    'aria-invalid'?: ReactSelectAsyncProps['aria-invalid'];
    'aria-errormessage'?: ReactSelectAsyncProps['aria-errormessage'];
    isAutofocussed?: boolean;
    backspaceRemovesValue?: ReactSelectAsyncProps['backspaceRemovesValue'];
    components?: ReactSelectAsyncProps['components'];
    controlShouldRenderValue?: ReactSelectAsyncProps['controlShouldRenderValue'];
    filterOption?: ReactSelectAsyncProps['filterOption'];
    id?: ReactSelectAsyncProps['inputId'];
    inputValue?: ReactSelectAsyncProps['inputValue'];
    containerId?: ReactSelectAsyncProps['id'];
    isClearable?: ReactSelectAsyncProps['isClearable'];
    isDisabled?: ReactSelectAsyncProps['isDisabled'];
    isOptionDisabled?: ReactSelectAsyncProps['isOptionDisabled'];
    isMulti?: ReactSelectAsyncProps['isMulti'];
    isSearchable?: ReactSelectAsyncProps['isSearchable'];
    menuIsOpen?: ReactSelectAsyncProps['menuIsOpen'];
    maxMenuHeight?: ReactSelectAsyncProps['maxMenuHeight'];
    menuPortalTarget?: ReactSelectAsyncProps['menuPortalTarget'];
    menuPortalZIndex: number;
    menuShouldBlockScroll?: ReactSelectAsyncProps['menuShouldBlockScroll'];
    closeMenuOnSelect?: ReactSelectAsyncProps['closeMenuOnSelect'];
    name?: ReactSelectAsyncProps['name'];
    noOptionsMessage?: ReactSelectAsyncProps['noOptionsMessage'];
    onBlur?: (event: TCustomEvent) => void;
    onChange?: (event: TCustomEvent, info: ActionMeta<unknown>) => void;
    onFocus?: ReactSelectAsyncProps['onFocus'];
    onInputChange?: ReactSelectAsyncProps['onInputChange'];
    placeholder?: ReactSelectAsyncProps['placeholder'];
    loadingMessage?: string | (() => string);
    tabIndex?: ReactSelectAsyncProps['tabIndex'];
    tabSelectsValue?: ReactSelectAsyncProps['tabSelectsValue'];
    value?: ReactSelectAsyncProps['value'];
    defaultOptions?: OptionsOrGroups<unknown, GroupBase<unknown>> | boolean;
    loadOptions: ReactSelectAsyncProps['loadOptions'];
    cacheOptions?: ReactSelectAsyncProps['cacheOptions'];
    showOptionGroupDivider?: boolean;
    iconLeft?: ReactNode;
};
declare const AsyncSelectInput: {
    (props: TAsyncSelectInputProps): import("@emotion/react/jsx-runtime").JSX.Element;
    displayName: string;
    defaultProps: Pick<TAsyncSelectInputProps, "value" | "controlShouldRenderValue" | "isSearchable" | "menuPortalZIndex">;
    isTouched(touched: unknown): boolean;
    ClearIndicator: {
        (props: import("@commercetools-uikit/select-utils").TClearIndicatorProps): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Control: <Option_1, IsMulti_1 extends boolean, Group_1 extends GroupBase<Option_1>>(props: import("react-select").ControlProps<Option_1, IsMulti_1, Group_1>) => import("@emotion/react").jsx.JSX.Element;
    CrossIcon: (props: import("react-select/dist/declarations/src/components/indicators").CrossIconProps) => import("@emotion/react").jsx.JSX.Element;
    DownChevron: (props: import("react-select/dist/declarations/src/components/indicators").DownChevronProps) => import("@emotion/react").jsx.JSX.Element;
    DropdownIndicator: {
        (props: import("react-select").DropdownIndicatorProps<unknown, boolean, GroupBase<unknown>>): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Group: <Option_3, IsMulti_3 extends boolean, Group_3 extends GroupBase<Option_3>>(props: import("react-select").GroupProps<Option_3, IsMulti_3, Group_3>) => import("@emotion/react").jsx.JSX.Element;
    GroupHeading: <Option_4, IsMulti_4 extends boolean, Group_4 extends GroupBase<Option_4>>(props: import("react-select").GroupHeadingProps<Option_4, IsMulti_4, Group_4>) => import("@emotion/react").jsx.JSX.Element;
    IndicatorSeparator: <Option_6, IsMulti_6 extends boolean, Group_6 extends GroupBase<Option_6>>(props: import("react-select").IndicatorSeparatorProps<Option_6, IsMulti_6, Group_6>) => import("@emotion/react").jsx.JSX.Element;
    IndicatorsContainer: <Option_5, IsMulti_5 extends boolean, Group_5 extends GroupBase<Option_5>>(props: import("react-select").IndicatorsContainerProps<Option_5, IsMulti_5, Group_5>) => import("@emotion/react").jsx.JSX.Element;
    Input: <Option_7, IsMulti_7 extends boolean, Group_7 extends GroupBase<Option_7>>(props: import("react-select").InputProps<Option_7, IsMulti_7, Group_7>) => import("@emotion/react").jsx.JSX.Element;
    LoadingIndicator: {
        (): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    LoadingMessage: {
        <Option_12, IsMulti_12 extends boolean, Group_12 extends GroupBase<Option_12>>(props: import("react-select").NoticeProps<Option_12, IsMulti_12, Group_12>): import("@emotion/react").jsx.JSX.Element;
        defaultProps: {
            children: string;
        };
    };
    Menu: <Option_9, IsMulti_9 extends boolean, Group_9 extends GroupBase<Option_9>>(props: import("react-select").MenuProps<Option_9, IsMulti_9, Group_9>) => import("@emotion/react").jsx.JSX.Element;
    MenuList: <Option_10, IsMulti_10 extends boolean, Group_10 extends GroupBase<Option_10>>(props: import("react-select").MenuListProps<Option_10, IsMulti_10, Group_10>) => import("@emotion/react").jsx.JSX.Element;
    MenuPortal: <Option_11, IsMulti_11 extends boolean, Group_11 extends GroupBase<Option_11>>(props: import("react-select/dist/declarations/src/components/Menu").MenuPortalProps<Option_11, IsMulti_11, Group_11>) => import("@emotion/react").jsx.JSX.Element | null;
    MultiValue: <Option_14, IsMulti_14 extends boolean, Group_14 extends GroupBase<Option_14>>(props: import("react-select").MultiValueProps<Option_14, IsMulti_14, Group_14>) => import("@emotion/react").jsx.JSX.Element;
    MultiValueContainer: <Option_15, IsMulti_15 extends boolean, Group_15 extends GroupBase<Option_15>>({ children, innerProps, }: import("react-select").MultiValueGenericProps<Option_15, IsMulti_15, Group_15>) => import("@emotion/react").jsx.JSX.Element;
    MultiValueLabel: <Option_15_1, IsMulti_15_1 extends boolean, Group_15_1 extends GroupBase<Option_15_1>>({ children, innerProps, }: import("react-select").MultiValueGenericProps<Option_15_1, IsMulti_15_1, Group_15_1>) => import("@emotion/react").jsx.JSX.Element;
    MultiValueRemove: {
        (props: import("@commercetools-uikit/select-utils").TTagRemoveProps): import("@emotion/react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    NoOptionsMessage: {
        <Option_13, IsMulti_13 extends boolean, Group_13 extends GroupBase<Option_13>>(props: import("react-select").NoticeProps<Option_13, IsMulti_13, Group_13>): import("@emotion/react").jsx.JSX.Element;
        defaultProps: {
            children: string;
        };
    };
    Option: <Option_16, IsMulti_16 extends boolean, Group_16 extends GroupBase<Option_16>>(props: import("react-select").OptionProps<Option_16, IsMulti_16, Group_16>) => import("@emotion/react").jsx.JSX.Element;
    Placeholder: <Option_17, IsMulti_17 extends boolean, Group_17 extends GroupBase<Option_17>>(props: import("react-select").PlaceholderProps<Option_17, IsMulti_17, Group_17>) => import("@emotion/react").jsx.JSX.Element;
    SelectContainer: <Option_18, IsMulti_18 extends boolean, Group_18 extends GroupBase<Option_18>>(props: import("react-select").ContainerProps<Option_18, IsMulti_18, Group_18>) => import("@emotion/react").jsx.JSX.Element;
    SingleValue: <Option_19, IsMulti_19 extends boolean, Group_19 extends GroupBase<Option_19>>(props: import("react-select").SingleValueProps<Option_19, IsMulti_19, Group_19>) => import("@emotion/react").jsx.JSX.Element;
    ValueContainer: <Option_20, IsMulti_20 extends boolean, Group_20 extends GroupBase<Option_20>>(props: import("react-select").ValueContainerProps<Option_20, IsMulti_20, Group_20>) => import("@emotion/react").jsx.JSX.Element;
};
export default AsyncSelectInput;
