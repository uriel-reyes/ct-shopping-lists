'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var react = require('react');
var reactIntl = require('react-intl');
var AsyncSelectInput = require('@commercetools-uikit/async-select-input');
require('@commercetools-uikit/utils');
var selectUtils = require('@commercetools-uikit/select-utils');
var _styled = require('@emotion/styled/base');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var designSystem = require('@commercetools-uikit/design-system');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var AsyncSelectInput__default = /*#__PURE__*/_interopDefault(AsyncSelectInput);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);

var messages = reactIntl.defineMessages({
  noOptionsMessage: {
    id: 'UIKit.SearchSelectInput.noOptionsMessage',
    description: 'Text of search select dropdown when no options match search text',
    defaultMessage: 'No matches found for your search term'
  },
  loadingOptionsMessage: {
    id: 'UIKit.SearchSelectInput.loadingOptionsMessage',
    description: 'Text showed while the options are being loaded',
    defaultMessage: 'Loading exact matches'
  },
  placeholderMessage: {
    id: 'UIKit.SearchSelectInput.placeholderMessage',
    description: 'Placeholder text for the input',
    defaultMessage: 'Search byâ€¦'
  }
});

const SearchSelectInputWrapper = /*#__PURE__*/_styled__default["default"]("div", {
  target: "e6cl9390"
} )(props => {
  var _context;
  return !props.isDisabled && !props.isReadOnly ? _concatInstanceProperty__default["default"](_context = "div[class$='control'] {\n        &:hover {\n          cursor: text;\n        }\n        div[class$='indicatorContainer' i] {\n          cursor: pointer;\n          svg * {\n            fill: ".concat(designSystem.designTokens.fontColorForSearchInputIcon, ";\n          }\n          :hover svg * {\n            fill: ")).call(_context, designSystem.designTokens.fontColorForSearchInputIconWhenHovered, ";\n          }\n        }\n      }") : '';
}, ";" + ("" ));

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const defaultProps = {
  value: null,
  menuPortalZIndex: 1,
  maxMenuHeight: 220,
  controlShouldRenderValue: true
};
const SearchSelectInput = props => {
  const intl = reactIntl.useIntl();
  if (!props.isReadOnly) ;
  selectUtils.warnIfMenuPortalPropsAreMissing({
    menuPortalZIndex: props.menuPortalZIndex,
    menuPortalTarget: props.menuPortalTarget,
    componentName: 'SearchSelectInput'
  });
  const noOptionsMessage = props.noOptionsMessage || (() => intl.formatMessage(messages.noOptionsMessage));
  const loadingMessage = props.loadingMessage || intl.formatMessage(messages.loadingOptionsMessage);
  const placeholder = props.placeholder || intl.formatMessage(messages.placeholderMessage);
  const optionType = props.optionType;
  const components = react.useMemo(() => _objectSpread(_objectSpread({
    Option: optionInnerProps => jsxRuntime.jsx(selectUtils.CustomSelectInputOption, _objectSpread(_objectSpread({}, optionInnerProps), {}, {
      optionType: optionType,
      optionInnerProps: optionInnerProps
    }))
  }, props.components), {}, {
    DropdownIndicator: selectUtils.SearchIconDropdownIndicator
  }), [props.components, optionType]);
  return jsxRuntime.jsx(SearchSelectInputWrapper, {
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    children: jsxRuntime.jsx(AsyncSelectInput__default["default"], _objectSpread(_objectSpread({}, props), {}, {
      components: components,
      placeholder: placeholder,
      iconLeft: props.iconLeft,
      loadingMessage: loadingMessage,
      noOptionsMessage: noOptionsMessage,
      isSearchable: true,
      closeMenuOnSelect: props.closeMenuOnSelect
    }))
  });
};
SearchSelectInput.propTypes = {};
SearchSelectInput.defaultProps = defaultProps;
SearchSelectInput.displayName = 'SearchSelectInput';
var SearchSelectInput$1 = SearchSelectInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = SearchSelectInput$1;
exports.version = version;
