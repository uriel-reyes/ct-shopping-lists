'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _taggedTemplateLiteral = require('@babel/runtime-corejs3/helpers/taggedTemplateLiteral');
require('prop-types');
var react$1 = require('react');
require('@commercetools-uikit/utils');
var react = require('@emotion/react');
var isNil = require('lodash/isNil');
var hooks = require('@commercetools-uikit/hooks');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var isNil__default = /*#__PURE__*/_interopDefault(isNil);

var _templateObject, _templateObject2, _templateObject3, _templateObject4;
function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const defaultProps = {
  minHeight: 0
};
const getMinHeight = minHeight => minHeight !== 0 ? "".concat(minHeight, "px") : minHeight;
const getVisibility = height => height === 0 ? 'hidden' : 'visible';
const createOpeningAnimation = function (height) {
  let minHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return react.keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    0% { height: ", "; overflow: hidden; visibility: ", "; }\n    99% { height: ", "px; overflow: hidden; }\n    100% { height: auto; overflow: visible; }\n  "])), getMinHeight(minHeight), getVisibility(minHeight), height);
};
const createClosingAnimation = function (height) {
  let minHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return react.keyframes(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    from { height: ", "px; }\n    to { height: ", "; overflow: hidden; visibility: ", "; }\n  "])), height, getMinHeight(minHeight), getVisibility(minHeight));
};
const useToggleAnimation = function (isOpen, toggle) {
  let minHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  const nodeRef = react$1.useRef();
  const animationRef = react$1.useRef(null);
  const prevIsOpen = hooks.usePrevious(isOpen);
  react$1.useEffect(() => {
  },
  // to match the componentDidMount behaviour
  [nodeRef]);
  const handleToggle = react$1.useCallback(() => {

    // set panel height to the height of the content,
    // so we can animate between the height and 0
    toggle && toggle();
  }, [nodeRef, toggle]);
  const containerStyles = isOpen ? {
    height: 'auto'
  } : {
    height: getMinHeight(minHeight),
    overflow: 'hidden',
    visibility: getVisibility(minHeight)
  };

  // if state has changed
  if (typeof prevIsOpen !== 'undefined' && prevIsOpen !== isOpen && nodeRef.current) {
    animationRef.current = isOpen ? createOpeningAnimation(nodeRef.current.clientHeight, minHeight) : createClosingAnimation(nodeRef.current.clientHeight, minHeight);
  }
  return [animationRef.current, containerStyles, handleToggle, nodeRef];
};
const ControlledCollapsibleMotion = props => {
  const _useToggleAnimation = useToggleAnimation(!props.isClosed, props.onToggle, props.minHeight),
    _useToggleAnimation2 = _slicedToArray(_useToggleAnimation, 4),
    animation = _useToggleAnimation2[0],
    containerStyles = _useToggleAnimation2[1],
    animationToggle = _useToggleAnimation2[2],
    registerContentNode = _useToggleAnimation2[3];
  return jsxRuntime.jsx(react.ClassNames, {
    children: _ref => {
      let css = _ref.css;
      let animationStyle = {};
      if (animation) {
        // By calling `css`, emotion injects the required CSS into the document head.
        // eslint-disable-next-line no-unused-expressions
        css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n            animation: ", " 200ms\n              forwards;\n          "])), animation);
        animationStyle = {
          animation: "".concat(animation.name, " 200ms forwards")
        };
      }
      return props.children({
        isOpen: !props.isClosed,
        containerStyles: _objectSpread(_objectSpread({}, containerStyles), animationStyle),
        toggle: animationToggle,
        registerContentNode: registerContentNode
      });
    }
  });
};
ControlledCollapsibleMotion.propTypes = {};
ControlledCollapsibleMotion.displayName = 'ControlledCollapsibleMotion';
const UncontrolledCollapsibleMotion = props => {
  const _useToggleState = hooks.useToggleState(!props.isDefaultClosed),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    isOpen = _useToggleState2[0],
    toggle = _useToggleState2[1];
  const _useToggleAnimation3 = useToggleAnimation(isOpen, toggle, props.minHeight),
    _useToggleAnimation4 = _slicedToArray(_useToggleAnimation3, 4),
    animation = _useToggleAnimation4[0],
    containerStyles = _useToggleAnimation4[1],
    animationToggle = _useToggleAnimation4[2],
    registerContentNode = _useToggleAnimation4[3];
  return jsxRuntime.jsx(react.ClassNames, {
    children: _ref2 => {
      let css = _ref2.css;
      let animationStyle = {};
      if (animation) {
        // By calling `css`, emotion injects the required CSS into the document head.
        // eslint-disable-next-line no-unused-expressions
        css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n            animation: ", " 200ms\n              forwards;\n          "])), animation);
        animationStyle = {
          animation: "".concat(animation.name, " 200ms forwards")
        };
      }
      return props.children({
        isOpen,
        containerStyles: _objectSpread(_objectSpread({}, containerStyles), animationStyle),
        toggle: animationToggle,
        registerContentNode: registerContentNode
      });
    }
  });
};
UncontrolledCollapsibleMotion.propTypes = {};
UncontrolledCollapsibleMotion.displayName = 'UncontrolledCollapsibleMotion';
UncontrolledCollapsibleMotion.defaultProps = defaultProps;
const CollapsibleMotion = props => {
  const isControlledComponent = !isNil__default["default"](props.isClosed);
  if (isControlledComponent) {
    return jsxRuntime.jsx(ControlledCollapsibleMotion, _objectSpread({}, props));
  }
  return jsxRuntime.jsx(UncontrolledCollapsibleMotion, _objectSpread({}, props));
};
CollapsibleMotion.propTypes = {};
CollapsibleMotion.displayName = 'CollapsibleMotion';
CollapsibleMotion.defaultProps = defaultProps;
var CollapsibleMotion$1 = CollapsibleMotion;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = CollapsibleMotion$1;
exports.version = version;
