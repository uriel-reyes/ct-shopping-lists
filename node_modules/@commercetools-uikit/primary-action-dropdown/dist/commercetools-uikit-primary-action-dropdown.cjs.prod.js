'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _styled = require('@emotion/styled/base');
require('prop-types');
var _findInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/find');
var react = require('react');
var react$1 = require('@emotion/react');
var AccessibleButton = require('@commercetools-uikit/accessible-button');
var designSystem = require('@commercetools-uikit/design-system');
var Text = require('@commercetools-uikit/text');
require('@commercetools-uikit/utils');
var icons = require('@commercetools-uikit/icons');
var hooks = require('@commercetools-uikit/hooks');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _findInstanceProperty__default = /*#__PURE__*/_interopDefault(_findInstanceProperty);
var AccessibleButton__default = /*#__PURE__*/_interopDefault(AccessibleButton);
var Text__default = /*#__PURE__*/_interopDefault(Text);

const getButtonStyles = isDisabled => {
  const baseButtonStyles = /*#__PURE__*/react$1.css("display:flex;align-items:center;height:", designSystem.designTokens.bigButtonHeight, ";" + ("" ), "" );
  if (isDisabled) {
    return [baseButtonStyles, /*#__PURE__*/react$1.css("box-shadow:none;background-color:", designSystem.designTokens.backgroundColorForPrimaryActionDropdownWhenDisabled, ";border:", "1px solid ".concat(designSystem.designTokens.colorNeutral), ";" + ("" ), "" )];
  }
  return [baseButtonStyles, /*#__PURE__*/react$1.css("background-color:", designSystem.designTokens.colorSurface, ";box-shadow:", designSystem.designTokens.shadowForPrimaryActionDropdown, ";border:", "1px solid ".concat(designSystem.designTokens.colorNeutral), ";&:hover{box-shadow:", designSystem.designTokens.shadowForPrimaryActionDropdownWhenHovered, ";background-color:", designSystem.designTokens.colorNeutral95, ";}&:active{box-shadow:", designSystem.designTokens.shadowForPrimaryActionDropdownWhenActive, ";background-color:", designSystem.designTokens.backgroundColorForPrimaryActionDropdownWhenActive, ";}" + ("" ), "" )];
};
var _ref2 = {
  name: "s5xdrg",
  styles: "display:flex;align-items:center"
} ;
const DropdownHead = props => jsxRuntime.jsxs("div", {
  css: _ref2,
  children: [jsxRuntime.jsxs(AccessibleButton__default["default"], {
    label: props.children,
    onClick: props.onClick,
    isDisabled: props.isDisabled,
    css: [...getButtonStyles(props.isDisabled), /*#__PURE__*/react$1.css("padding:", designSystem.designTokens.paddingForPrimaryActionDropdown, ";border-radius:", designSystem.designTokens.borderRadiusForPrimaryActionDropdown, ";" + ("" ), "" ), "" ],
    children: [jsxRuntime.jsx("span", {
      css: /*#__PURE__*/react$1.css("margin-right:", designSystem.designTokens.marginRightForPrimaryActionDropdown, ";display:flex;align-items:center;justify-content:center;" + ("" ), "" ),
      children: /*#__PURE__*/react.cloneElement(props.iconLeft, {
        size: 'big',
        color: props.isDisabled ? 'neutral60' : 'solid'
      })
    }), jsxRuntime.jsx("span", {
      css: /*#__PURE__*/react$1.css("margin:0 ", designSystem.designTokens.spacing10, " 0 0;display:flex;align-items:center;justify-content:center;" + ("" ), "" ),
      children: jsxRuntime.jsx(Text__default["default"].Detail, {
        tone: props.isDisabled ? 'secondary' : undefined,
        children: props.children
      })
    })]
  }), props.chevron]
});
DropdownHead.propTypes = {};
DropdownHead.displayName = 'DropdownHead';
var _ref = {
  name: "1jklb6q",
  styles: "pointer-events:none;margin-top:3px"
} ;
const DropdownChevron = /*#__PURE__*/react.forwardRef((props, ref) => jsxRuntime.jsx(AccessibleButton__default["default"], {
  ref: ref,
  label: "Open Dropdown",
  onClick: props.onClick,
  isDisabled: props.isDisabled,
  css: [...getButtonStyles(props.isDisabled), /*#__PURE__*/react$1.css("padding:", designSystem.designTokens.paddingForPrimaryActionDropdownIcon, ";border-radius:", designSystem.designTokens.borderRadiusForPrimaryActionDropdownIcon, ";border-color:", designSystem.designTokens.colorNeutral, ";border-width:", designSystem.designTokens.borderForPrimaryActionDropdownIcon, ";border-style:solid;" + ("" ), "" ), "" ],
  children: jsxRuntime.jsx("div", {
    // The margin-top is to center the icon as the caret visually looks too high otherwise
    css: _ref,
    children: /*#__PURE__*/react.cloneElement(props.isOpen && !props.isDisabled ? jsxRuntime.jsx(icons.CaretUpIcon, {}) : jsxRuntime.jsx(icons.CaretDownIcon, {}), {
      color: 'neutral60',
      size: 'small'
    })
  })
}));
DropdownChevron.displayName = 'DropdownChevron';
const Options = /*#__PURE__*/_styled__default["default"]("div", {
  target: "eb24b7r0"
} )("position:absolute;z-index:5;width:100%;top:calc(", designSystem.designTokens.spacing20, " + ", designSystem.designTokens.bigButtonHeight, ");border:1px solid ", designSystem.designTokens.borderColorForPrimaryActionDropdownMenu, ";border-radius:", designSystem.designTokens.borderRadiusForPrimaryActionDropdownMenu, ";box-shadow:", designSystem.designTokens.shadowForPrimaryActionDropdownMenu, ";margin-top:", designSystem.designTokens.marginTopForPrimaryActionDropdown, ";>button{padding-left:", designSystem.designTokens.spacing30, ";white-space:normal;&:active{background-color:", designSystem.designTokens.colorInfo95, ";}}" + ("" ));

/*
  This component registers a global click event listener to close the dropdown.
  It uses this global listener to close when:
    - an element outside of the dropdown is clicked
    - an element in the dropdown options is clicked

  In order to be still able to open the dropdown we have to avoid auto-closing
  when the dropdown trigger itself is clicked. Otherwise it would open and close
  immediately.
 */

const PrimaryActionDropdown = props => {
  const ref = react.useRef();
  const _useToggleState = hooks.useToggleState(false),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    isOpen = _useToggleState2[0],
    toggle = _useToggleState2[1];
  const handleGlobalClick = react.useCallback(event => {
    const dropdownButton = ref.current;
    if (dropdownButton && event.target !== dropdownButton && !dropdownButton.contains(event.target)) {
      toggle(false);
    }
  }, [ref, toggle]);
  react.useEffect(() => {
    window.addEventListener('click', handleGlobalClick);
    return () => {
      window.removeEventListener('click', handleGlobalClick);
    };
  }, [handleGlobalClick]);
  const childrenAsArray = react.Children.toArray(props.children);
  const primaryOption = _findInstanceProperty__default["default"](childrenAsArray).call(childrenAsArray, option => /*#__PURE__*/react.isValidElement(option) && !option.props.isDisabled) || childrenAsArray[0];
  const onClick = primaryOption.props.onClick;
  const handleClickOnHead = react.useCallback(event => {
    if (isOpen) {
      toggle(true);
    } else {
      onClick(event);
    }
  }, [isOpen, onClick, toggle]);
  const handleClickOnChevron = react.useCallback(() => {
    toggle();
  }, [toggle]);
  return jsxRuntime.jsxs("div", {
    css: /*#__PURE__*/react$1.css("position:relative;display:inline-flex;align-items:column;>:first-of-type>button{height:", designSystem.designTokens.heightForPrimaryActionDropdown, ";}" + ("" ), "" ),
    children: [jsxRuntime.jsx(DropdownHead, {
      iconLeft: primaryOption.props.iconLeft,
      isDisabled: primaryOption.props.isDisabled,
      onClick: handleClickOnHead,
      chevron: jsxRuntime.jsx(DropdownChevron, {
        ref: ref,
        onClick: handleClickOnChevron,
        isDisabled: primaryOption.props.isDisabled,
        isOpen: isOpen
      }),
      children: primaryOption.props.children
    }), isOpen && !primaryOption.props.isDisabled && jsxRuntime.jsx(Options, {
      children: childrenAsArray
    })]
  });
};
PrimaryActionDropdown.propTypes = {};
PrimaryActionDropdown.displayName = 'PrimaryActionDropdown';
var PrimaryActionDropdown$1 = PrimaryActionDropdown;

const Option = props => jsxRuntime.jsx(AccessibleButton__default["default"], {
  label: props.children,
  onClick: props.onClick,
  isDisabled: props.isDisabled,
  css: [/*#__PURE__*/react$1.css("display:block;text-align:left;width:100%;padding:", designSystem.designTokens.spacing20, ";background-color:", designSystem.designTokens.colorSurface, ";&:first-of-type{border-radius:", designSystem.designTokens.borderRadius6, " ", designSystem.designTokens.borderRadius6, " 0 0;}&:last-of-type{border-radius:0 0 ", designSystem.designTokens.borderRadius6, " ", designSystem.designTokens.borderRadius6, ";}&:hover{background-color:", designSystem.designTokens.colorNeutral95, ";}" + ("" ), "" ), props.isDisabled && /*#__PURE__*/react$1.css("color:", designSystem.designTokens.colorNeutral, ";" + ("" ), "" ), "" , "" ],
  children: props.children
});
Option.propTypes = {};
Option.displayName = 'Option';
Option.defaultProps = {
  isDisabled: false
};
var Option$1 = Option;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports.Option = Option$1;
exports["default"] = PrimaryActionDropdown$1;
exports.version = version;
