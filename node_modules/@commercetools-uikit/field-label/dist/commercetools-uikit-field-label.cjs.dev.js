'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _styled = require('@emotion/styled/base');
var _pt = require('prop-types');
var react = require('react');
var utils = require('@commercetools-uikit/utils');
require('@emotion/react');
var IconButton = require('@commercetools-uikit/icon-button');
var icons = require('@commercetools-uikit/icons');
var Text = require('@commercetools-uikit/text');
var Constraints = require('@commercetools-uikit/constraints');
var Inline = require('@commercetools-uikit/spacings-inline');
var Label = require('@commercetools-uikit/label');
var designSystem = require('@commercetools-uikit/design-system');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var IconButton__default = /*#__PURE__*/_interopDefault(IconButton);
var Text__default = /*#__PURE__*/_interopDefault(Text);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);
var Inline__default = /*#__PURE__*/_interopDefault(Inline);
var Label__default = /*#__PURE__*/_interopDefault(Label);

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/*
  This is needed to deal with every FieldLabel row vertical spacing
  when provided `hint` or `description` is a React component which
  might render nothing.
  Previously we were using the `Stack` component but, as we are wrapping
  those props values with some elements, `Stack` was including some vertical
  spacing even when the received values did not render anything.

  The implementation is tightly coupled to how we currently wrap
  those props, so if we change that, we will need to adjust this as well.
*/
const LabelRowWrapper = /*#__PURE__*/_styled__default["default"]("div", process.env.NODE_ENV === "production" ? {
  target: "erir8oc0"
} : {
  target: "erir8oc0",
  label: "LabelRowWrapper"
})("& [data-key='field-label-hint-wrapper'],& [data-key='field-label-description-wrapper']{margin-top:", designSystem.designTokens.spacing10, "!important;}& [data-key='field-label-hint-wrapper']:empty,& [data-key='field-label-description-wrapper']:empty{margin-top:0!important;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpZWxkLWxhYmVsLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4RmtDIiwiZmlsZSI6ImZpZWxkLWxhYmVsLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNsb25lRWxlbWVudCxcbiAgTW91c2VFdmVudCxcbiAgS2V5Ym9hcmRFdmVudCxcbiAgUmVhY3RFbGVtZW50LFxuICBSZWFjdE5vZGUsXG59IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHdhcm5pbmcgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9pY29uLWJ1dHRvbic7XG5pbXBvcnQgeyBJbmZvcm1hdGlvbkljb24gfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9pY29ucyc7XG5pbXBvcnQgVGV4dCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90ZXh0JztcbmltcG9ydCBDb25zdHJhaW50cyBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9jb25zdHJhaW50cyc7XG5pbXBvcnQgSW5saW5lIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzLWlubGluZSc7XG5pbXBvcnQgTGFiZWwgZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvbGFiZWwnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5cbmV4cG9ydCB0eXBlIFRGaWVsZExhYmVsUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBUaXRsZSBvZiB0aGUgbGFiZWxcbiAgICovXG4gIHRpdGxlOiBzdHJpbmcgfCBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBIaW50IGZvciB0aGUgbGFiZWwuIFByb3ZpZGVzIGEgc3VwcGxlbWVudGFyeSBidXQgaW1wb3J0YW50IGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGUgYmVoYXZpb3VyIG9mIHRoZSBpbnB1dCAoZS5nIHdhcm4gYWJvdXQgdW5pcXVlbmVzcyBvZiBhIGZpZWxkLCB3aGVuIGl0IGNhbiBvbmx5IGJlIHNldCBvbmNlKSwgd2hlcmVhcyBkZXNjcmlwdGlvbiBjYW4gZGVzY3JpYmUgaXQgaW4gbW9yZSBkZXB0aC4gQ2FuIGFsc28gcmVjZWl2ZSBhIGhpbnRJY29uLlxuICAgKi9cbiAgaGludD86IHN0cmluZyB8IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgZGVzY3JpcHRpb24gZm9yIHRoZSB0aXRsZS5cbiAgICovXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgUmVhY3ROb2RlO1xuICAvKipcbiAgICogRnVuY3Rpb24gY2FsbGVkIHdoZW4gaW5mbyBidXR0b24gaXMgcHJlc3NlZC4gSW5mbyBidXR0b24gd2lsbCBvbmx5IGJlIHZpc2libGUgd2hlbiB0aGlzIHByb3AgaXMgcGFzc2VkLlxuICAgKi9cbiAgb25JbmZvQnV0dG9uQ2xpY2s/OiAoXG4gICAgZXZlbnQ6IE1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+IHwgS2V5Ym9hcmRFdmVudDxIVE1MQnV0dG9uRWxlbWVudD5cbiAgKSA9PiB2b2lkO1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSB0b25lIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGxhYmVsXG4gICAqL1xuICB0b25lPzogJ3ByaW1hcnknIHwgJ2ludmVydGVkJztcbiAgLyoqXG4gICAqIEljb24gdG8gYmUgZGlzcGxheWVkIGJlc2lkZSB0aGUgaGludCB0ZXh0LiBXaWxsIG9ubHkgZ2V0IHJlbmRlcmVkIHdoZW4gaGludCBpcyBwYXNzZWQgYXMgd2VsbC5cbiAgICovXG4gIGhpbnRJY29uPzogUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICogQmFkZ2UgdG8gYmUgZGlzcGxheWVkIGJlc2lkZSB0aGUgbGFiZWwuIE1pZ2h0IGJlIHVzZWQgdG8gZGlzcGxheSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb250ZW50IG9mIHRoZSBmaWVsZCAoRS5nIHZlcmlmaWVkIGVtYWlsKVxuICAgKi9cbiAgYmFkZ2U/OiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGxhYmVsZWQgZmllbGQgaXMgcmVxdWlyZWQgaW4gYSBmb3JtXG4gICAqL1xuICBoYXNSZXF1aXJlZEluZGljYXRvcj86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgZm9yIEhUTUwgYXR0cmlidXRlLCB1c2VkIHRvIHJlZmVyZW5jZSBmb3JtIGVsZW1lbnRzIHdpdGggdGhlIHJlbGF0ZWQgYXR0cmlidXRlIGlkIG9yIGFyaWEtbGFiZWxsZWRieS5cbiAgICovXG4gIGh0bWxGb3I/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgaWQgSFRNTCBhdHRyaWJ1dGUsIHVzZWQgdG8gcmVmZXJlbmNlIG5vbi1mb3JtIGVsZW1lbnRzIHdpdGggdGhlIHJlbGF0ZWQgYXR0cmlidXRlIGFyaWEtbGFiZWxsZWRieS5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuICAvKipcbiAgICogSG9yaXpvbnRhbCBzaXplIGxpbWl0IG9mIHRoZSBsYWJlbC5cbiAgICovXG4gIGhvcml6b250YWxDb25zdHJhaW50PzpcbiAgICB8IDNcbiAgICB8IDRcbiAgICB8IDVcbiAgICB8IDZcbiAgICB8IDdcbiAgICB8IDhcbiAgICB8IDlcbiAgICB8IDEwXG4gICAgfCAxMVxuICAgIHwgMTJcbiAgICB8IDEzXG4gICAgfCAxNFxuICAgIHwgMTVcbiAgICB8IDE2XG4gICAgfCAnc2NhbGUnXG4gICAgfCAnYXV0byc7XG59O1xuXG4vKlxuICBUaGlzIGlzIG5lZWRlZCB0byBkZWFsIHdpdGggZXZlcnkgRmllbGRMYWJlbCByb3cgdmVydGljYWwgc3BhY2luZ1xuICB3aGVuIHByb3ZpZGVkIGBoaW50YCBvciBgZGVzY3JpcHRpb25gIGlzIGEgUmVhY3QgY29tcG9uZW50IHdoaWNoXG4gIG1pZ2h0IHJlbmRlciBub3RoaW5nLlxuICBQcmV2aW91c2x5IHdlIHdlcmUgdXNpbmcgdGhlIGBTdGFja2AgY29tcG9uZW50IGJ1dCwgYXMgd2UgYXJlIHdyYXBwaW5nXG4gIHRob3NlIHByb3BzIHZhbHVlcyB3aXRoIHNvbWUgZWxlbWVudHMsIGBTdGFja2Agd2FzIGluY2x1ZGluZyBzb21lIHZlcnRpY2FsXG4gIHNwYWNpbmcgZXZlbiB3aGVuIHRoZSByZWNlaXZlZCB2YWx1ZXMgZGlkIG5vdCByZW5kZXIgYW55dGhpbmcuXG5cbiAgVGhlIGltcGxlbWVudGF0aW9uIGlzIHRpZ2h0bHkgY291cGxlZCB0byBob3cgd2UgY3VycmVudGx5IHdyYXBcbiAgdGhvc2UgcHJvcHMsIHNvIGlmIHdlIGNoYW5nZSB0aGF0LCB3ZSB3aWxsIG5lZWQgdG8gYWRqdXN0IHRoaXMgYXMgd2VsbC5cbiovXG5jb25zdCBMYWJlbFJvd1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICAmIFtkYXRhLWtleT0nZmllbGQtbGFiZWwtaGludC13cmFwcGVyJ10sXG4gICYgW2RhdGEta2V5PSdmaWVsZC1sYWJlbC1kZXNjcmlwdGlvbi13cmFwcGVyJ10ge1xuICAgIG1hcmdpbi10b3A6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmcxMH0gIWltcG9ydGFudDtcbiAgfVxuICAmIFtkYXRhLWtleT0nZmllbGQtbGFiZWwtaGludC13cmFwcGVyJ106ZW1wdHksXG4gICYgW2RhdGEta2V5PSdmaWVsZC1sYWJlbC1kZXNjcmlwdGlvbi13cmFwcGVyJ106ZW1wdHkge1xuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcbiAgfVxuYDtcblxuY29uc3QgRmllbGRMYWJlbCA9IChwcm9wczogVEZpZWxkTGFiZWxQcm9wcykgPT4ge1xuICBpZiAocHJvcHMuaGludEljb24pIHtcbiAgICB3YXJuaW5nKFxuICAgICAgcHJvcHMuaGludEljb24ucHJvcHMuc2l6ZSA9PT0gdW5kZWZpbmVkLFxuICAgICAgJ3VpLWtpdC9GaWVsZExhYmVsOiBzZXR0aW5nIGBoaW50SWNvbmAgc2l6ZSBpcyBub3Qgc3VwcG9ydGVkLidcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgIEJvb2xlYW4ocHJvcHMuaGludCksXG4gICAgICAndWkta2l0L0ZpZWxkTGFiZWw6IGBoaW50YCBpcyByZXF1aXJlZCB3aGVuIGBoaW50SWNvbmAgaXMgcHJvdmlkZWQnXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPENvbnN0cmFpbnRzLkhvcml6b250YWwgbWF4PXtwcm9wcy5ob3Jpem9udGFsQ29uc3RyYWludH0+XG4gICAgICA8SW5saW5lIGFsaWduSXRlbXM9eydjZW50ZXInfSBzY2FsZT1cInhzXCI+XG4gICAgICAgIDxUZXh0LldyYXA+XG4gICAgICAgICAgPExhYmVsXG4gICAgICAgICAgICBpc1JlcXVpcmVkSW5kaWNhdG9yVmlzaWJsZT17cHJvcHMuaGFzUmVxdWlyZWRJbmRpY2F0b3J9XG4gICAgICAgICAgICB0b25lPXtwcm9wcy50b25lfVxuICAgICAgICAgICAgaWQ9e3Byb3BzLmlkfVxuICAgICAgICAgICAgaHRtbEZvcj17cHJvcHMuaHRtbEZvcn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7cHJvcHMudGl0bGV9XG4gICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgPC9UZXh0LldyYXA+XG4gICAgICAgIHtwcm9wcy5vbkluZm9CdXR0b25DbGljayAmJiAoXG4gICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgIGxhYmVsPVwiTW9yZSBJbmZvXCJcbiAgICAgICAgICAgIGljb249ezxJbmZvcm1hdGlvbkljb24gLz59XG4gICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgb25DbGljaz17cHJvcHMub25JbmZvQnV0dG9uQ2xpY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvSW5saW5lPlxuXG4gICAgICB7cHJvcHMuaGludCAmJiAoXG4gICAgICAgIDxMYWJlbFJvd1dyYXBwZXI+XG4gICAgICAgICAgPElubGluZSBhbGlnbkl0ZW1zPXsnY2VudGVyJ30gc2NhbGU9XCJ4c1wiPlxuICAgICAgICAgICAge3Byb3BzLmhpbnRJY29uICYmIChcbiAgICAgICAgICAgICAgPElubGluZSBkYXRhLWtleT1cImZpZWxkLWxhYmVsLWhpbnQtd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgIHtjbG9uZUVsZW1lbnQocHJvcHMuaGludEljb24sIHtcbiAgICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBhZGQgcHJvcGVyIHRvbmUgd2hlbiB0b25lcyBhcmUgcmVmYWN0b3JlZFxuICAgICAgICAgICAgICAgICAgc2l6ZTogJ21lZGl1bScsXG4gICAgICAgICAgICAgICAgICBjb2xvcjogcHJvcHMuaGludEljb24ucHJvcHMuY29sb3IgfHwgJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICA8L0lubGluZT5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7cHJvcHMuaGludCAmJiAoXG4gICAgICAgICAgICAgIDxUZXh0LkRldGFpbCB0b25lPVwic2Vjb25kYXJ5XCIgZGF0YS1rZXk9XCJmaWVsZC1sYWJlbC1oaW50LXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICB7cHJvcHMuaGludH1cbiAgICAgICAgICAgICAgPC9UZXh0LkRldGFpbD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9JbmxpbmU+XG4gICAgICAgIDwvTGFiZWxSb3dXcmFwcGVyPlxuICAgICAgKX1cbiAgICAgIHtwcm9wcy5kZXNjcmlwdGlvbiAmJiAoXG4gICAgICAgIDxMYWJlbFJvd1dyYXBwZXI+XG4gICAgICAgICAgPFRleHQuV3JhcD5cbiAgICAgICAgICAgIDxUZXh0LkRldGFpbFxuICAgICAgICAgICAgICB0b25lPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgZGF0YS1rZXk9XCJmaWVsZC1sYWJlbC1kZXNjcmlwdGlvbi13cmFwcGVyXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3Byb3BzLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgPC9UZXh0LkRldGFpbD5cbiAgICAgICAgICA8L1RleHQuV3JhcD5cbiAgICAgICAgPC9MYWJlbFJvd1dyYXBwZXI+XG4gICAgICApfVxuXG4gICAgICB7cHJvcHMuYmFkZ2UgJiYgKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBgfVxuICAgICAgICA+XG4gICAgICAgICAge3Byb3BzLmJhZGdlfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9Db25zdHJhaW50cy5Ib3Jpem9udGFsPlxuICApO1xufTtcblxuRmllbGRMYWJlbC5kaXNwbGF5TmFtZSA9ICdGaWVsZExhYmVsJztcbkZpZWxkTGFiZWwuZGVmYXVsdFByb3BzID0ge1xuICBob3Jpem9udGFsQ29uc3RyYWludDogJ3NjYWxlJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZpZWxkTGFiZWw7XG4iXX0= */"));
var _ref = process.env.NODE_ENV === "production" ? {
  name: "skgbeu",
  styles: "display:flex;justify-content:flex-end"
} : {
  name: "pfzph7-FieldLabel",
  styles: "display:flex;justify-content:flex-end;label:FieldLabel;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpZWxkLWxhYmVsLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnTGtCIiwiZmlsZSI6ImZpZWxkLWxhYmVsLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNsb25lRWxlbWVudCxcbiAgTW91c2VFdmVudCxcbiAgS2V5Ym9hcmRFdmVudCxcbiAgUmVhY3RFbGVtZW50LFxuICBSZWFjdE5vZGUsXG59IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHdhcm5pbmcgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9pY29uLWJ1dHRvbic7XG5pbXBvcnQgeyBJbmZvcm1hdGlvbkljb24gfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9pY29ucyc7XG5pbXBvcnQgVGV4dCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90ZXh0JztcbmltcG9ydCBDb25zdHJhaW50cyBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9jb25zdHJhaW50cyc7XG5pbXBvcnQgSW5saW5lIGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3NwYWNpbmdzLWlubGluZSc7XG5pbXBvcnQgTGFiZWwgZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvbGFiZWwnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5cbmV4cG9ydCB0eXBlIFRGaWVsZExhYmVsUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBUaXRsZSBvZiB0aGUgbGFiZWxcbiAgICovXG4gIHRpdGxlOiBzdHJpbmcgfCBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBIaW50IGZvciB0aGUgbGFiZWwuIFByb3ZpZGVzIGEgc3VwcGxlbWVudGFyeSBidXQgaW1wb3J0YW50IGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGUgYmVoYXZpb3VyIG9mIHRoZSBpbnB1dCAoZS5nIHdhcm4gYWJvdXQgdW5pcXVlbmVzcyBvZiBhIGZpZWxkLCB3aGVuIGl0IGNhbiBvbmx5IGJlIHNldCBvbmNlKSwgd2hlcmVhcyBkZXNjcmlwdGlvbiBjYW4gZGVzY3JpYmUgaXQgaW4gbW9yZSBkZXB0aC4gQ2FuIGFsc28gcmVjZWl2ZSBhIGhpbnRJY29uLlxuICAgKi9cbiAgaGludD86IHN0cmluZyB8IFJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgZGVzY3JpcHRpb24gZm9yIHRoZSB0aXRsZS5cbiAgICovXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgUmVhY3ROb2RlO1xuICAvKipcbiAgICogRnVuY3Rpb24gY2FsbGVkIHdoZW4gaW5mbyBidXR0b24gaXMgcHJlc3NlZC4gSW5mbyBidXR0b24gd2lsbCBvbmx5IGJlIHZpc2libGUgd2hlbiB0aGlzIHByb3AgaXMgcGFzc2VkLlxuICAgKi9cbiAgb25JbmZvQnV0dG9uQ2xpY2s/OiAoXG4gICAgZXZlbnQ6IE1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+IHwgS2V5Ym9hcmRFdmVudDxIVE1MQnV0dG9uRWxlbWVudD5cbiAgKSA9PiB2b2lkO1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSB0b25lIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGxhYmVsXG4gICAqL1xuICB0b25lPzogJ3ByaW1hcnknIHwgJ2ludmVydGVkJztcbiAgLyoqXG4gICAqIEljb24gdG8gYmUgZGlzcGxheWVkIGJlc2lkZSB0aGUgaGludCB0ZXh0LiBXaWxsIG9ubHkgZ2V0IHJlbmRlcmVkIHdoZW4gaGludCBpcyBwYXNzZWQgYXMgd2VsbC5cbiAgICovXG4gIGhpbnRJY29uPzogUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICogQmFkZ2UgdG8gYmUgZGlzcGxheWVkIGJlc2lkZSB0aGUgbGFiZWwuIE1pZ2h0IGJlIHVzZWQgdG8gZGlzcGxheSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb250ZW50IG9mIHRoZSBmaWVsZCAoRS5nIHZlcmlmaWVkIGVtYWlsKVxuICAgKi9cbiAgYmFkZ2U/OiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGxhYmVsZWQgZmllbGQgaXMgcmVxdWlyZWQgaW4gYSBmb3JtXG4gICAqL1xuICBoYXNSZXF1aXJlZEluZGljYXRvcj86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgZm9yIEhUTUwgYXR0cmlidXRlLCB1c2VkIHRvIHJlZmVyZW5jZSBmb3JtIGVsZW1lbnRzIHdpdGggdGhlIHJlbGF0ZWQgYXR0cmlidXRlIGlkIG9yIGFyaWEtbGFiZWxsZWRieS5cbiAgICovXG4gIGh0bWxGb3I/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgaWQgSFRNTCBhdHRyaWJ1dGUsIHVzZWQgdG8gcmVmZXJlbmNlIG5vbi1mb3JtIGVsZW1lbnRzIHdpdGggdGhlIHJlbGF0ZWQgYXR0cmlidXRlIGFyaWEtbGFiZWxsZWRieS5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuICAvKipcbiAgICogSG9yaXpvbnRhbCBzaXplIGxpbWl0IG9mIHRoZSBsYWJlbC5cbiAgICovXG4gIGhvcml6b250YWxDb25zdHJhaW50PzpcbiAgICB8IDNcbiAgICB8IDRcbiAgICB8IDVcbiAgICB8IDZcbiAgICB8IDdcbiAgICB8IDhcbiAgICB8IDlcbiAgICB8IDEwXG4gICAgfCAxMVxuICAgIHwgMTJcbiAgICB8IDEzXG4gICAgfCAxNFxuICAgIHwgMTVcbiAgICB8IDE2XG4gICAgfCAnc2NhbGUnXG4gICAgfCAnYXV0byc7XG59O1xuXG4vKlxuICBUaGlzIGlzIG5lZWRlZCB0byBkZWFsIHdpdGggZXZlcnkgRmllbGRMYWJlbCByb3cgdmVydGljYWwgc3BhY2luZ1xuICB3aGVuIHByb3ZpZGVkIGBoaW50YCBvciBgZGVzY3JpcHRpb25gIGlzIGEgUmVhY3QgY29tcG9uZW50IHdoaWNoXG4gIG1pZ2h0IHJlbmRlciBub3RoaW5nLlxuICBQcmV2aW91c2x5IHdlIHdlcmUgdXNpbmcgdGhlIGBTdGFja2AgY29tcG9uZW50IGJ1dCwgYXMgd2UgYXJlIHdyYXBwaW5nXG4gIHRob3NlIHByb3BzIHZhbHVlcyB3aXRoIHNvbWUgZWxlbWVudHMsIGBTdGFja2Agd2FzIGluY2x1ZGluZyBzb21lIHZlcnRpY2FsXG4gIHNwYWNpbmcgZXZlbiB3aGVuIHRoZSByZWNlaXZlZCB2YWx1ZXMgZGlkIG5vdCByZW5kZXIgYW55dGhpbmcuXG5cbiAgVGhlIGltcGxlbWVudGF0aW9uIGlzIHRpZ2h0bHkgY291cGxlZCB0byBob3cgd2UgY3VycmVudGx5IHdyYXBcbiAgdGhvc2UgcHJvcHMsIHNvIGlmIHdlIGNoYW5nZSB0aGF0LCB3ZSB3aWxsIG5lZWQgdG8gYWRqdXN0IHRoaXMgYXMgd2VsbC5cbiovXG5jb25zdCBMYWJlbFJvd1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICAmIFtkYXRhLWtleT0nZmllbGQtbGFiZWwtaGludC13cmFwcGVyJ10sXG4gICYgW2RhdGEta2V5PSdmaWVsZC1sYWJlbC1kZXNjcmlwdGlvbi13cmFwcGVyJ10ge1xuICAgIG1hcmdpbi10b3A6ICR7ZGVzaWduVG9rZW5zLnNwYWNpbmcxMH0gIWltcG9ydGFudDtcbiAgfVxuICAmIFtkYXRhLWtleT0nZmllbGQtbGFiZWwtaGludC13cmFwcGVyJ106ZW1wdHksXG4gICYgW2RhdGEta2V5PSdmaWVsZC1sYWJlbC1kZXNjcmlwdGlvbi13cmFwcGVyJ106ZW1wdHkge1xuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcbiAgfVxuYDtcblxuY29uc3QgRmllbGRMYWJlbCA9IChwcm9wczogVEZpZWxkTGFiZWxQcm9wcykgPT4ge1xuICBpZiAocHJvcHMuaGludEljb24pIHtcbiAgICB3YXJuaW5nKFxuICAgICAgcHJvcHMuaGludEljb24ucHJvcHMuc2l6ZSA9PT0gdW5kZWZpbmVkLFxuICAgICAgJ3VpLWtpdC9GaWVsZExhYmVsOiBzZXR0aW5nIGBoaW50SWNvbmAgc2l6ZSBpcyBub3Qgc3VwcG9ydGVkLidcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgIEJvb2xlYW4ocHJvcHMuaGludCksXG4gICAgICAndWkta2l0L0ZpZWxkTGFiZWw6IGBoaW50YCBpcyByZXF1aXJlZCB3aGVuIGBoaW50SWNvbmAgaXMgcHJvdmlkZWQnXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPENvbnN0cmFpbnRzLkhvcml6b250YWwgbWF4PXtwcm9wcy5ob3Jpem9udGFsQ29uc3RyYWludH0+XG4gICAgICA8SW5saW5lIGFsaWduSXRlbXM9eydjZW50ZXInfSBzY2FsZT1cInhzXCI+XG4gICAgICAgIDxUZXh0LldyYXA+XG4gICAgICAgICAgPExhYmVsXG4gICAgICAgICAgICBpc1JlcXVpcmVkSW5kaWNhdG9yVmlzaWJsZT17cHJvcHMuaGFzUmVxdWlyZWRJbmRpY2F0b3J9XG4gICAgICAgICAgICB0b25lPXtwcm9wcy50b25lfVxuICAgICAgICAgICAgaWQ9e3Byb3BzLmlkfVxuICAgICAgICAgICAgaHRtbEZvcj17cHJvcHMuaHRtbEZvcn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7cHJvcHMudGl0bGV9XG4gICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgPC9UZXh0LldyYXA+XG4gICAgICAgIHtwcm9wcy5vbkluZm9CdXR0b25DbGljayAmJiAoXG4gICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgIGxhYmVsPVwiTW9yZSBJbmZvXCJcbiAgICAgICAgICAgIGljb249ezxJbmZvcm1hdGlvbkljb24gLz59XG4gICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgb25DbGljaz17cHJvcHMub25JbmZvQnV0dG9uQ2xpY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvSW5saW5lPlxuXG4gICAgICB7cHJvcHMuaGludCAmJiAoXG4gICAgICAgIDxMYWJlbFJvd1dyYXBwZXI+XG4gICAgICAgICAgPElubGluZSBhbGlnbkl0ZW1zPXsnY2VudGVyJ30gc2NhbGU9XCJ4c1wiPlxuICAgICAgICAgICAge3Byb3BzLmhpbnRJY29uICYmIChcbiAgICAgICAgICAgICAgPElubGluZSBkYXRhLWtleT1cImZpZWxkLWxhYmVsLWhpbnQtd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgIHtjbG9uZUVsZW1lbnQocHJvcHMuaGludEljb24sIHtcbiAgICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBhZGQgcHJvcGVyIHRvbmUgd2hlbiB0b25lcyBhcmUgcmVmYWN0b3JlZFxuICAgICAgICAgICAgICAgICAgc2l6ZTogJ21lZGl1bScsXG4gICAgICAgICAgICAgICAgICBjb2xvcjogcHJvcHMuaGludEljb24ucHJvcHMuY29sb3IgfHwgJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICA8L0lubGluZT5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7cHJvcHMuaGludCAmJiAoXG4gICAgICAgICAgICAgIDxUZXh0LkRldGFpbCB0b25lPVwic2Vjb25kYXJ5XCIgZGF0YS1rZXk9XCJmaWVsZC1sYWJlbC1oaW50LXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICB7cHJvcHMuaGludH1cbiAgICAgICAgICAgICAgPC9UZXh0LkRldGFpbD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9JbmxpbmU+XG4gICAgICAgIDwvTGFiZWxSb3dXcmFwcGVyPlxuICAgICAgKX1cbiAgICAgIHtwcm9wcy5kZXNjcmlwdGlvbiAmJiAoXG4gICAgICAgIDxMYWJlbFJvd1dyYXBwZXI+XG4gICAgICAgICAgPFRleHQuV3JhcD5cbiAgICAgICAgICAgIDxUZXh0LkRldGFpbFxuICAgICAgICAgICAgICB0b25lPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgZGF0YS1rZXk9XCJmaWVsZC1sYWJlbC1kZXNjcmlwdGlvbi13cmFwcGVyXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3Byb3BzLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgPC9UZXh0LkRldGFpbD5cbiAgICAgICAgICA8L1RleHQuV3JhcD5cbiAgICAgICAgPC9MYWJlbFJvd1dyYXBwZXI+XG4gICAgICApfVxuXG4gICAgICB7cHJvcHMuYmFkZ2UgJiYgKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBgfVxuICAgICAgICA+XG4gICAgICAgICAge3Byb3BzLmJhZGdlfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9Db25zdHJhaW50cy5Ib3Jpem9udGFsPlxuICApO1xufTtcblxuRmllbGRMYWJlbC5kaXNwbGF5TmFtZSA9ICdGaWVsZExhYmVsJztcbkZpZWxkTGFiZWwuZGVmYXVsdFByb3BzID0ge1xuICBob3Jpem9udGFsQ29uc3RyYWludDogJ3NjYWxlJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZpZWxkTGFiZWw7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const FieldLabel = props => {
  if (props.hintIcon) {
    process.env.NODE_ENV !== "production" ? utils.warning(props.hintIcon.props.size === undefined, 'ui-kit/FieldLabel: setting `hintIcon` size is not supported.') : void 0;
    process.env.NODE_ENV !== "production" ? utils.warning(Boolean(props.hint), 'ui-kit/FieldLabel: `hint` is required when `hintIcon` is provided') : void 0;
  }
  return jsxRuntime.jsxs(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: [jsxRuntime.jsxs(Inline__default["default"], {
      alignItems: 'center',
      scale: "xs",
      children: [jsxRuntime.jsx(Text__default["default"].Wrap, {
        children: jsxRuntime.jsx(Label__default["default"], {
          isRequiredIndicatorVisible: props.hasRequiredIndicator,
          tone: props.tone,
          id: props.id,
          htmlFor: props.htmlFor,
          children: props.title
        })
      }), props.onInfoButtonClick && jsxRuntime.jsx(IconButton__default["default"], {
        label: "More Info",
        icon: jsxRuntime.jsx(icons.InformationIcon, {}),
        size: "small",
        onClick: props.onInfoButtonClick
      })]
    }), props.hint && jsxRuntime.jsx(LabelRowWrapper, {
      children: jsxRuntime.jsxs(Inline__default["default"], {
        alignItems: 'center',
        scale: "xs",
        children: [props.hintIcon && jsxRuntime.jsx(Inline__default["default"], {
          "data-key": "field-label-hint-wrapper",
          children: /*#__PURE__*/react.cloneElement(props.hintIcon, {
            // FIXME: add proper tone when tones are refactored
            size: 'medium',
            color: props.hintIcon.props.color || 'warning'
          })
        }), props.hint && jsxRuntime.jsx(Text__default["default"].Detail, {
          tone: "secondary",
          "data-key": "field-label-hint-wrapper",
          children: props.hint
        })]
      })
    }), props.description && jsxRuntime.jsx(LabelRowWrapper, {
      children: jsxRuntime.jsx(Text__default["default"].Wrap, {
        children: jsxRuntime.jsx(Text__default["default"].Detail, {
          tone: "secondary",
          "data-key": "field-label-description-wrapper",
          children: props.description
        })
      })
    }), props.badge && jsxRuntime.jsx("div", {
      css: _ref,
      children: props.badge
    })]
  });
};
FieldLabel.propTypes = process.env.NODE_ENV !== "production" ? {
  title: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].node]).isRequired,
  hint: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].node]),
  description: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].node]),
  onInfoButtonClick: _pt__default["default"].func,
  tone: _pt__default["default"].oneOf(['primary', 'inverted']),
  hintIcon: _pt__default["default"].element,
  badge: _pt__default["default"].node,
  hasRequiredIndicator: _pt__default["default"].bool,
  htmlFor: _pt__default["default"].string,
  id: _pt__default["default"].string,
  horizontalConstraint: _pt__default["default"].oneOf([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto'])
} : {};
FieldLabel.displayName = 'FieldLabel';
FieldLabel.defaultProps = {
  horizontalConstraint: 'scale'
};
var FieldLabel$1 = FieldLabel;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = FieldLabel$1;
exports.version = version;
