type TLocalizedString = {
    [locale: string]: string;
};
type TTouchedLocalizedString = {
    [locale: string]: boolean;
};
type TDataAttributes = 'data-track-component' | 'data-testid' | 'data-test';
type TLocalizedDataAttributes = Record<TDataAttributes | string, unknown>;
type TSplittedLanguageGroups = {
    related: string[];
    unrelated: string[];
};
export declare const getId: (idPrefix?: string, language?: string) => string | undefined;
export declare const getName: (namePrefix?: string, language?: string) => string | undefined;
export declare const getPrimaryLanguage: (language: string) => string;
export declare const splitLanguages: (selectedLanguage: string, languages: string[]) => TSplittedLanguageGroups;
export declare const sortLanguages: (selectedLanguage: string, allLanguages: string[]) => string[];
export declare const createLocalizedDataAttributes: <TProps extends {}>(props: TProps, language: string) => TLocalizedDataAttributes;
export declare const getHasErrorOnRemainingLanguages: <TErrors extends {}>(errors?: TErrors | undefined, selectedLanguage?: string) => boolean;
export declare const getHasWarningOnRemainingLanguages: <TWarnings extends {}>(warnings?: TWarnings | undefined, selectedLanguage?: string) => boolean;
export declare const createLocalizedString: (languages: string[], existingTranslations?: TLocalizedString) => TLocalizedString;
export declare const isEmpty: (localizedString?: TLocalizedString) => boolean;
export declare const omitEmptyTranslations: <TTranslations extends TLocalizedString>(localizedString: TTranslations) => TLocalizedString;
export declare const isTouched: (touched?: TTouchedLocalizedString) => boolean;
export {};
