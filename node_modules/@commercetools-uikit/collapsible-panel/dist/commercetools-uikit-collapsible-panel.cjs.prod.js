'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _styled = require('@emotion/styled/base');
require('prop-types');
var react$1 = require('react');
var isNil = require('lodash/isNil');
var utils = require('@commercetools-uikit/utils');
var AccessibleButton = require('@commercetools-uikit/accessible-button');
var hooks = require('@commercetools-uikit/hooks');
var Spacings = require('@commercetools-uikit/spacings');
var Text = require('@commercetools-uikit/text');
var CollapsibleMotion = require('@commercetools-uikit/collapsible-motion');
var Constraints = require('@commercetools-uikit/constraints');
var react = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var icons = require('@commercetools-uikit/icons');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var isNil__default = /*#__PURE__*/_interopDefault(isNil);
var AccessibleButton__default = /*#__PURE__*/_interopDefault(AccessibleButton);
var Spacings__default = /*#__PURE__*/_interopDefault(Spacings);
var Text__default = /*#__PURE__*/_interopDefault(Text);
var CollapsibleMotion__default = /*#__PURE__*/_interopDefault(CollapsibleMotion);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);

const getArrowColor = _ref2 => {
  let tone = _ref2.tone,
    isDisabled = _ref2.isDisabled;
  if (isDisabled) return 'neutral60';
  if (tone === 'urgent') return 'warning';
  return 'solid';
};
var _ref$1 = {
  name: "1wnowod",
  styles: "display:flex;align-items:center;justify-content:center"
} ;
const HeaderIcon = props => {
  return jsxRuntime.jsx("div", {
    css: [_ref$1, props.isDisabled && /*#__PURE__*/react.css("box-shadow:none;border:1px solid ", designSystem.designTokens.borderForCollapsiblePanelHeaderIconWhenDisabled, ";background-color:", designSystem.designTokens.backgroundColorForCollapsiblePanelHeaderIconWhenDisabled, ";" + ("" ), "" ), "" , "" ],
    children: props.isClosed ? jsxRuntime.jsx(icons.AngleRightIcon, {
      color: getArrowColor({
        tone: props.tone,
        isDisabled: props.isDisabled
      }),
      size: props.size
    }) : jsxRuntime.jsx(icons.AngleDownIcon, {
      color: getArrowColor({
        tone: props.tone,
        isDisabled: props.isDisabled
      }),
      size: props.size
    })
  });
};
HeaderIcon.displayName = 'HeaderIcon';
HeaderIcon.defaultProps = {
  tone: 'primary'
};
var HeaderIcon$1 = HeaderIcon;

function getThemeStyle(theme) {
  if (theme === 'light') {
    return /*#__PURE__*/react.css("background-color:", designSystem.designTokens.colorSurface, ";" + ("" ), "" );
  }
  return /*#__PURE__*/react.css("background-color:", designSystem.designTokens.colorNeutral95, ";" + ("" ), "" );
}
var _ref = {
  name: "1ll9bqd",
  styles: "cursor:default"
} ;
const getHeaderContainerStyles = (props, isOpen) => {
  const baseStyles = /*#__PURE__*/react.css("background-color:", designSystem.designTokens.colorSurface, ";border-bottom:", "1px solid ".concat(designSystem.designTokens.borderColorForCollapsiblePanelHeader), ";position:relative;border-top-left-radius:", designSystem.designTokens.borderRadius6, ";border-top-right-radius:", designSystem.designTokens.borderRadius6, ";display:flex;flex:1;align-items:center;list-style-type:none;justify-content:", props.headerControlsAlignment === 'left' ? 'flex-start' : 'space-between', ";padding:", props.condensed ? "".concat(designSystem.designTokens.paddingForCollapsiblePanelHeaderAsCondensed) : "".concat(designSystem.designTokens.paddingForCollapsiblePanelHeader), ";" + ("" ), "" );
  return [baseStyles, props.isDisabled && _ref, props.isSticky && isOpen && /*#__PURE__*/react.css("z-index:1;position:sticky;top:0;border-top-right-radius:", designSystem.designTokens.borderRadius6, ";border-top-left-radius:", designSystem.designTokens.borderRadius6, ";" + ("" ), "" ), !props.condensed &&
  /*#__PURE__*/
  // To understand why this min-height see: https://github.com/commercetools/ui-kit/pull/616
  react.css("min-height:", designSystem.designTokens.bigButtonHeight, ";box-sizing:content-box;" + ("" ), "" )];
};
const baseContainerStyles = /*#__PURE__*/react.css("position:relative;min-width:", designSystem.designTokens.constraint6, ";padding:0;display:flex;flex-direction:column;color:", designSystem.designTokens.colorSolid, ";font-family:inherit;font-size:", designSystem.designTokens.fontSizeDefault, ";" + ("" ), "" );
const HeaderControlsWrapper = /*#__PURE__*/_styled__default["default"]("div", {
  target: "em5v1nl2"
} )("margin-left:", designSystem.designTokens.spacing30, ";display:flex;align-items:center;cursor:auto;" + ("" ));
const SectionContent = /*#__PURE__*/_styled__default["default"]("div", {
  target: "em5v1nl1"
} )({
  name: "esy9f9",
  styles: "width:100%;display:flex;flex-wrap:wrap;align-items:flex-start"
} );
const SectionDescriptionWrapper = /*#__PURE__*/_styled__default["default"]("div", {
  target: "em5v1nl0"
} )("padding:", _ref2 => {
  let condensed = _ref2.condensed;
  return condensed ? designSystem.designTokens.paddingForCollapsiblePanelSectionDescriptionAsCondensed : designSystem.designTokens.paddingForCollapsiblePanelSectionDescription;
}, ";" + ("" ));
const SectionWrapper = /*#__PURE__*/react$1.forwardRef((props, ref) => {
  return jsxRuntime.jsx("div", {
    ref: ref,
    css: ["\n          padding: ".concat(props.condensed ? designSystem.designTokens.paddingForCollapsiblePanelSectionWrapperAsCondensed : designSystem.designTokens.paddingForCollapsiblePanelSectionWrapper, ";\n        "), props.isExpandControlHidden && 'padding-left: 0;', "" , "" ],
    children: props.children
  });
});
SectionWrapper.displayName = 'SectionWrapper';

const CollapsiblePanelHeader = props => props.isCondensed ? jsxRuntime.jsx(jsxRuntime.Fragment, {
  children: props.children
}) : jsxRuntime.jsx(Text__default["default"].Headline, {
  as: "h2",
  truncate: true,
  children: props.children
});
CollapsiblePanelHeader.propTypes = {};
CollapsiblePanelHeader.displayName = 'CollapsiblePanelHeader';
var CollapsiblePanelHeader$1 = CollapsiblePanelHeader;

const HeaderContainer = /*#__PURE__*/_styled__default["default"](AccessibleButton__default["default"], {
  target: "e1923bli0"
} )("" );
const panelButtonSequentialId = utils.createSequentialId('collapsible-panel-button-');
const panelContentSequentialId = utils.createSequentialId('collapsible-panel-content-');
const defaultProps = {
  theme: 'dark',
  condensed: false,
  isDisabled: false,
  headerControlsAlignment: 'right',
  horizontalConstraint: 'scale'
};
const HeadLineText = props => {
  if (!props.condensed) {
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
      children: props.header
    });
  }
  return jsxRuntime.jsx(Text__default["default"].Subheadline, {
    as: "h4",
    truncate: true,
    children: typeof props.header === 'string' ? props.header : /*#__PURE__*/react$1.cloneElement(props.header, {
      isCondensed: props.condensed
    })
  });
};

// When `isClosed` is provided the component behaves as a controlled component,
// otherwise it will behave like an uncontrolled component.
const CollapsiblePanel = props => {
  const panelButtonId = hooks.useFieldId(props.id, panelButtonSequentialId);
  const panelContentId = hooks.useFieldId(undefined, panelContentSequentialId);
  // Pass only `data-*` props
  const dataProps = utils.filterDataAttributes(props);
  const scale = props.condensed ? 's' : 'm';
  !isNil__default["default"](props.isClosed) && !isNil__default["default"](props.isDefaultClosed);
  !isNil__default["default"](props.onToggle);
  !isNil__default["default"](props.isClosed);
  return jsxRuntime.jsx(CollapsibleMotion__default["default"], {
    isClosed: props.isClosed,
    onToggle: props.onToggle,
    isDefaultClosed: props.isDefaultClosed,
    children: _ref => {
      let isOpen = _ref.isOpen,
        toggle = _ref.toggle,
        containerStyles = _ref.containerStyles,
        registerContentNode = _ref.registerContentNode;
      return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
        max: props.horizontalConstraint,
        children: jsxRuntime.jsxs("div", {
          css: [baseContainerStyles, getThemeStyle('light'), "" , "" ]
          // Allow to override the styles by passing a `className` prop.
          // Custom styles can also be passed using the `css` prop from emotion.
          // https://emotion.sh/docs/css-prop#style-precedence
          ,
          className: props.className,
          children: [jsxRuntime.jsxs(HeaderContainer, {
            as: "div",
            css: [getHeaderContainerStyles(props, isOpen), getThemeStyle('light'), "" , "" ],
            id: panelButtonId,
            label: "",
            onClick: props.isDisabled ? undefined : toggle,
            isDisabled: props.isDisabled,
            buttonAttributes: dataProps,
            "aria-controls": panelContentId,
            "aria-expanded": isOpen ? 'true' : 'false',
            children: [jsxRuntime.jsxs(Spacings__default["default"].Inline, {
              alignItems: "center",
              scale: "xs",
              children: [!props.hideExpansionControls && jsxRuntime.jsx(HeaderIcon$1, {
                isClosed: !isOpen,
                isDisabled: props.isDisabled || false,
                tone: props.tone,
                size: 'medium'
              }), jsxRuntime.jsxs(Spacings__default["default"].Inline, {
                alignItems: "baseline",
                scale: scale,
                children: [jsxRuntime.jsx(HeadLineText, {
                  header: props.header,
                  condensed: props.condensed
                }), props.secondaryHeader && jsxRuntime.jsx(Text__default["default"].Detail, {
                  tone: "secondary",
                  truncate: true,
                  children: props.secondaryHeader
                })]
              })]
            }), props.headerControls && jsxRuntime.jsx(HeaderControlsWrapper, {
              onClick: event => event.stopPropagation(),
              children: props.headerControls
            })]
          }), jsxRuntime.jsx("div", {
            style: containerStyles,
            children: jsxRuntime.jsxs(SectionWrapper
            // @ts-ignore
            , {
              ref: registerContentNode,
              condensed: props.condensed,
              isExpandControlHidden: props.hideExpansionControls,
              children: [props.description && jsxRuntime.jsx(SectionDescriptionWrapper, {
                condensed: props.condensed,
                children: jsxRuntime.jsx(Text__default["default"].Detail, {
                  tone: "secondary",
                  children: props.description
                })
              }), jsxRuntime.jsx(Spacings__default["default"].Stack, {
                scale: scale,
                children: jsxRuntime.jsx(SectionContent, {
                  id: panelContentId,
                  role: "region",
                  "aria-labelledby": panelButtonId,
                  hidden: !isOpen,
                  children: props.children
                })
              })]
            })
          })]
        })
      });
    }
  });
};

/**
 * @deprecated This function is no longer supported.
 */
CollapsiblePanel.propTypes = {};
CollapsiblePanel.getPanelContentId = () => '';
CollapsiblePanel.displayName = 'CollapsiblePanel';
CollapsiblePanel.defaultProps = defaultProps;
CollapsiblePanel.Header = CollapsiblePanelHeader$1;
var CollapsiblePanel$1 = CollapsiblePanel;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = CollapsiblePanel$1;
exports.version = version;
