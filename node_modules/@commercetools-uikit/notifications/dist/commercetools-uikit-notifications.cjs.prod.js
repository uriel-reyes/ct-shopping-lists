'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var react$1 = require('react');
var reactIntl = require('react-intl');
var react = require('@emotion/react');
var AccessibleButton = require('@commercetools-uikit/accessible-button');
var designSystem = require('@commercetools-uikit/design-system');
var icons = require('@commercetools-uikit/icons');
var utils = require('@commercetools-uikit/utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var AccessibleButton__default = /*#__PURE__*/_interopDefault(AccessibleButton);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const warnIfMissingContent = props => {
  Boolean(props.intlMessage) || Boolean(react$1.Children.count(props.children));
};
const getIconByType = props => {
  switch (props.type) {
    case 'error':
      return icons.ErrorIcon;
    case 'info':
      return icons.InformationIcon;
    case 'warning':
      return icons.WarningIcon;
    default:
      return icons.CheckBoldIcon;
  }
};
const getIconColor = props => {
  switch (props.type) {
    case 'error':
      return designSystem.designTokens.fontColorForContentNotificationIconWhenError;
    case 'info':
      return designSystem.designTokens.fontColorForContentNotificationIconWhenInfo;
    case 'warning':
      return designSystem.designTokens.fontColorForContentNotificationIconWhenWarning;
    case 'success':
      return designSystem.designTokens.fontColorForContentNotificationIconWhenSuccess;
    default:
      return '';
  }
};
const NotificationTypeIcon = props => {
  const Icon = getIconByType(props);
  return jsxRuntime.jsx("div", {
    css: /*#__PURE__*/react.css("display:flex;align-items:center;fill:", getIconColor(props), ";svg{margin:0 -3px;}" + ("" ), "" ),
    children: jsxRuntime.jsx(Icon, {})
  });
};
NotificationTypeIcon.propTypes = {};
NotificationTypeIcon.displayName = 'NotificationTypeIcon';
const NotificationCloseIcon = props => jsxRuntime.jsx(AccessibleButton__default["default"], {
  label: "Remove",
  onClick: props.onRemove,
  css: /*#__PURE__*/react.css("display:flex;align-items:center;fill:", designSystem.designTokens.colorSolid, ";&:hover{fill:", designSystem.designTokens.colorNeutral40, ";}" + ("" ), "" ),
  children: jsxRuntime.jsx(icons.CloseBoldIcon, {
    size: "medium"
  })
});
NotificationCloseIcon.displayName = 'NotificationCloseIcon';
const getContentBorderColor = props => {
  switch (props.type) {
    case 'error':
      return designSystem.designTokens.borderColorForContentNotificationWhenError;
    case 'info':
      return designSystem.designTokens.borderColorForContentNotificationWhenInfo;
    case 'warning':
      return designSystem.designTokens.borderColorForContentNotificationWhenWarning;
    case 'success':
      return designSystem.designTokens.borderColorForContentNotificationWhenSuccess;
    default:
      return '';
  }
};
const getContainerBackgroundColor = props => {
  switch (props.type) {
    case 'error':
      return designSystem.designTokens.backgroundColorForContentNotificationWhenError;
    case 'info':
      return designSystem.designTokens.backgroundColorForContentNotificationWhenInfo;
    case 'warning':
      return designSystem.designTokens.backgroundColorForContentNotificationWhenWarning;
    case 'success':
      return designSystem.designTokens.backgroundColorForContentNotificationWhenSuccess;
    default:
      return '';
  }
};
const ContentNotification = props => {
  warnIfMissingContent(props);
  return jsxRuntime.jsxs("div", _objectSpread(_objectSpread({}, utils.filterDataAttributes(props)), {}, {
    css: /*#__PURE__*/react.css("display:flex;align-items:stretch;text-align:left;word-break:break-word;hyphens:auto;font-size:", designSystem.designTokens.fontSizeForContentNotification, ";color:", designSystem.designTokens.fontColorForContentNotification, ";font-family:inherit;background-color:", getContainerBackgroundColor(props), ";border-radius:", designSystem.designTokens.borderRadiusForContentNotification, ";border-width:1px;border-style:solid;border-color:", getContentBorderColor(props), ";padding:", designSystem.designTokens.paddingForContentNotification, ";" + ("" ), "" ),
    children: [jsxRuntime.jsx(NotificationTypeIcon, {
      type: props.type
    }), jsxRuntime.jsx("div", {
      css: /*#__PURE__*/react.css("flex-grow:1;display:flex;align-items:center;padding:", designSystem.designTokens.paddingForContentNotificationMessage, ";" + ("" ), "" ),
      children: props.intlMessage ? jsxRuntime.jsx("div", {
        children: jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, props.intlMessage))
      }) : props.children
    }), props.onRemove && jsxRuntime.jsx(NotificationCloseIcon, {
      onRemove: props.onRemove
    })]
  }));
};
ContentNotification.propTypes = {};
ContentNotification.displayName = 'ContentNotification';
var ContentNotification$1 = ContentNotification;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports.ContentNotification = ContentNotification$1;
exports.version = version;
