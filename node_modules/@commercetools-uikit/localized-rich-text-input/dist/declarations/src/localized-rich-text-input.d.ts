import { type ReactNode, type ForwardRefExoticComponent, type RefAttributes, type FocusEventHandler } from 'react';
import { isTouched, getId, getName } from '@commercetools-uikit/localized-utils';
import { localized } from '@commercetools-uikit/rich-text-utils';
import RequiredValueErrorMessage from './required-value-error-message';
type TErrors = Record<string, string>;
type TWarnings = Record<string, ReactNode>;
type TCustomEvent = {
    target: {
        id?: string;
        name?: string;
        language?: string;
        value?: string;
    };
};
export type TLocalizedRichTextInputProps = {
    id?: string;
    name?: string;
    value: Record<string, string>;
    onChange?: (event: TCustomEvent) => void;
    selectedLanguage: string;
    onBlur?: FocusEventHandler<HTMLDivElement>;
    onFocus?: FocusEventHandler<HTMLDivElement>;
    defaultExpandMultilineText?: boolean;
    hideLanguageExpansionControls?: boolean;
    defaultExpandLanguages?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    placeholder?: Record<string, string>;
    horizontalConstraint?: 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    hasError?: boolean;
    hasWarning?: boolean;
    errors?: TErrors;
    warnings?: TWarnings;
    showExpandIcon: boolean;
    onClickExpand?: () => boolean;
};
type StaticProps = {
    RequiredValueErrorMessage: typeof RequiredValueErrorMessage;
    getId: typeof getId;
    getName: typeof getName;
    createLocalizedString: typeof localized.createLocalizedString;
    isEmpty: typeof localized.isEmpty;
    omitEmptyTranslations: typeof localized.omitEmptyTranslations;
    isTouched: typeof isTouched;
};
declare const LocalizedRichTextInput: ForwardRefExoticComponent<TLocalizedRichTextInputProps & RefAttributes<unknown>> & Partial<StaticProps>;
export default LocalizedRichTextInput;
