import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _reduceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _Map from '@babel/runtime-corejs3/core-js-stable/map';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import { forwardRef, useRef, useMemo, useState, useCallback, useEffect, useImperativeHandle, PureComponent, useReducer } from 'react';
import Stack from '@commercetools-uikit/spacings-stack';
import Constraints from '@commercetools-uikit/constraints';
import { useToggleState } from '@commercetools-uikit/hooks';
import { sortLanguages, getHasErrorOnRemainingLanguages, getHasWarningOnRemainingLanguages, createLocalizedDataAttributes, getId, getName, isTouched } from '@commercetools-uikit/localized-utils';
import { messagesMultilineInput, messagesLocalizedInput, LocalizedInputToggle } from '@commercetools-uikit/input-utils';
import { resetEditor, RichTextBody, focusEditor, toggleMark, HiddenInput, Element, Leaf, validSlateStateAdapter, html, localized } from '@commercetools-uikit/rich-text-utils';
import { warning, filterDataAttributes } from '@commercetools-uikit/utils';
import _Reflect$construct from '@babel/runtime-corejs3/core-js-stable/reflect/construct';
import _classCallCheck from '@babel/runtime-corejs3/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime-corejs3/helpers/esm/createClass';
import _inherits from '@babel/runtime-corejs3/helpers/esm/inherits';
import _possibleConstructorReturn from '@babel/runtime-corejs3/helpers/esm/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime-corejs3/helpers/esm/getPrototypeOf';
import _pt from 'prop-types';
import _styled from '@emotion/styled/base';
import { css, createElement } from '@emotion/react';
import { useIntl, FormattedMessage } from 'react-intl';
import { designTokens } from '@commercetools-uikit/design-system';
import CollapsibleMotion from '@commercetools-uikit/collapsible-motion';
import { AngleUpIcon, AngleDownIcon } from '@commercetools-uikit/icons';
import Text from '@commercetools-uikit/text';
import FlatButton from '@commercetools-uikit/flat-button';
import { withReact, Slate, Editable, ReactEditor } from 'slate-react';
import { createEditor } from 'slate';
import { withHistory } from 'slate-history';
import isHotkey from 'is-hotkey';
import pipe from 'lodash/fp/pipe';
import { jsx, jsxs } from '@emotion/react/jsx-runtime';
import { ErrorMessage } from '@commercetools-uikit/messages';

function _EMOTION_STRINGIFIED_CSS_ERROR__$1() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const getEditorLanguageLabelBorderColor = props => "1px solid ".concat(props.isReadOnly ? designTokens.borderColorForInputWhenReadonly : designTokens.borderColorForInputWhenDisabled);
const getBackgroundColor = props => {
  if (props.isDisabled) {
    return designTokens.backgroundColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designTokens.backgroundColorForInputWhenDisabled;
  }
  return designTokens.backgroundColorForInput;
};
const EditorLanguageLabel = /*#__PURE__*/_styled("label", process.env.NODE_ENV === "production" ? {
  target: "ew063c2"
} : {
  target: "ew063c2",
  label: "EditorLanguageLabel"
})("white-space:nowrap;flex:0;color:", designTokens.fontColorForInputWhenDisabled, ";line-height:calc(\n    ", designTokens.sizeHeightInput, " - 2 * ", designTokens.borderRadius1, "\n  );background-color:", props => getBackgroundColor(props), ";border-top-left-radius:", designTokens.borderRadiusForInput, ";border-bottom-left-radius:", designTokens.borderRadiusForInput, ";border:", props => getEditorLanguageLabelBorderColor(props), ";padding:", designTokens.paddingForLocalizedRichTextInputLabel, ";transition:border-color ", designTokens.transitionStandard, ",background-color ", designTokens.transitionStandard, ",color ", designTokens.transitionStandard, ";border-right:0;box-shadow:none;appearance:none;display:flex;align-items:center;cursor:inherit;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkaXRvci5zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0JtRSIsImZpbGUiOiJlZGl0b3Iuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgdHlwZSB7IFRFZGl0b3JQcm9wcyB9IGZyb20gJy4vZWRpdG9yJztcblxuY29uc3QgZ2V0RWRpdG9yTGFuZ3VhZ2VMYWJlbEJvcmRlckNvbG9yID0gKHByb3BzOiBURWRpdG9yTGFuZ3VhZ2VMYWJlbFByb3BzKSA9PlxuICBgMXB4IHNvbGlkICR7XG4gICAgcHJvcHMuaXNSZWFkT25seVxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5SZWFkb25seVxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZFxuICB9YDtcblxudHlwZSBUSW5wdXRQcm9wcyA9IHtcbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG4gIGlzUmVhZE9ubHk/OiBib29sZWFuO1xufTtcblxudHlwZSBURWRpdG9yTGFuZ3VhZ2VMYWJlbFByb3BzID0ge1xuICBpc1JlYWRPbmx5PzogYm9vbGVhbjtcbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG59O1xuXG5jb25zdCBnZXRCYWNrZ3JvdW5kQ29sb3IgPSAocHJvcHM6IFRJbnB1dFByb3BzKSA9PiB7XG4gIGlmIChwcm9wcy5pc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZDtcbiAgfVxuICBpZiAocHJvcHMuaXNSZWFkT25seSkge1xuICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9ySW5wdXRXaGVuRGlzYWJsZWQ7XG4gIH1cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JJbnB1dDtcbn07XG5cbmNvbnN0IEVkaXRvckxhbmd1YWdlTGFiZWwgPSBzdHlsZWQubGFiZWw8VEVkaXRvckxhbmd1YWdlTGFiZWxQcm9wcz5gXG4gIC8qIGF2b2lkIHdyYXBwaW5nIGxhYmVsIG9udG8gbmV3IGxpbmVzICovXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGZsZXg6IDA7XG4gIGNvbG9yOiAke2Rlc2lnblRva2Vucy5mb250Q29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZH07XG4gIGxpbmUtaGVpZ2h0OiBjYWxjKFxuICAgICR7ZGVzaWduVG9rZW5zLnNpemVIZWlnaHRJbnB1dH0gLSAyICogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMX1cbiAgKTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsocHJvcHMpID0+IGdldEJhY2tncm91bmRDb2xvcihwcm9wcyl9O1xuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JJbnB1dH07XG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvcklucHV0fTtcbiAgYm9yZGVyOiAkeyhwcm9wcykgPT4gZ2V0RWRpdG9yTGFuZ3VhZ2VMYWJlbEJvcmRlckNvbG9yKHByb3BzKX07XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnBhZGRpbmdGb3JMb2NhbGl6ZWRSaWNoVGV4dElucHV0TGFiZWx9O1xuICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfSxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yICR7ZGVzaWduVG9rZW5zLnRyYW5zaXRpb25TdGFuZGFyZH0sXG4gICAgY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfTtcbiAgYm9yZGVyLXJpZ2h0OiAwO1xuICBib3gtc2hhZG93OiBub25lO1xuICBhcHBlYXJhbmNlOiBub25lO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gIC8qIGN1cnNvciBzaG91bGQgYmUgaW5oZXJpdGVkIGZyb20gcGFyZW50LFxuICAgICogR0lWRU4gcGFyZW50IGhhcyAnbm90LWFsbG93ZWQnIGN1cnNvclxuICAgICogVEhFTiB0aGUgbGFuZ3VhZ2UgbGFiZWwgc2hvdWxkIGFsc28gaGF2ZSB0aGF0IChpbnN0ZWFkIG9mIGxhYmVsJ3MgZGVmYXVsdCBjdXJzb3IpXG4gICAgKi9cbiAgY3Vyc29yOiBpbmhlcml0O1xuYDtcblxuY29uc3QgRWRpdG9yV3JhcHBlciA9IHN0eWxlZC5kaXY8XG4gIFBpY2s8VEVkaXRvclByb3BzLCAnaXNEaXNhYmxlZCcgfCAnaXNSZWFkT25seSc+XG4+YFxuICB3aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBjdXJzb3I6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmlzRGlzYWJsZWQgfHwgcHJvcHMuaXNSZWFkT25seSA/ICdub3QtYWxsb3dlZCcgOiAnaW5oZXJpdCd9O1xuYDtcblxuY29uc3QgVG9nZ2xlQnV0dG9uV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG5gO1xuXG5leHBvcnQgeyBFZGl0b3JMYW5ndWFnZUxhYmVsLCBFZGl0b3JXcmFwcGVyLCBUb2dnbGVCdXR0b25XcmFwcGVyIH07XG4iXX0= */"));
const EditorWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "ew063c1"
} : {
  target: "ew063c1",
  label: "EditorWrapper"
})("width:100%;position:relative;display:flex;cursor:", props => props.isDisabled || props.isReadOnly ? 'not-allowed' : 'inherit', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkaXRvci5zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOERDIiwiZmlsZSI6ImVkaXRvci5zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB0eXBlIHsgVEVkaXRvclByb3BzIH0gZnJvbSAnLi9lZGl0b3InO1xuXG5jb25zdCBnZXRFZGl0b3JMYW5ndWFnZUxhYmVsQm9yZGVyQ29sb3IgPSAocHJvcHM6IFRFZGl0b3JMYW5ndWFnZUxhYmVsUHJvcHMpID0+XG4gIGAxcHggc29saWQgJHtcbiAgICBwcm9wcy5pc1JlYWRPbmx5XG4gICAgICA/IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvcklucHV0V2hlblJlYWRvbmx5XG4gICAgICA6IGRlc2lnblRva2Vucy5ib3JkZXJDb2xvckZvcklucHV0V2hlbkRpc2FibGVkXG4gIH1gO1xuXG50eXBlIFRJbnB1dFByb3BzID0ge1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgaXNSZWFkT25seT86IGJvb2xlYW47XG59O1xuXG50eXBlIFRFZGl0b3JMYW5ndWFnZUxhYmVsUHJvcHMgPSB7XG4gIGlzUmVhZE9ubHk/OiBib29sZWFuO1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGdldEJhY2tncm91bmRDb2xvciA9IChwcm9wczogVElucHV0UHJvcHMpID0+IHtcbiAgaWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcbiAgICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvcklucHV0V2hlbkRpc2FibGVkO1xuICB9XG4gIGlmIChwcm9wcy5pc1JlYWRPbmx5KSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZDtcbiAgfVxuICByZXR1cm4gZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvcklucHV0O1xufTtcblxuY29uc3QgRWRpdG9yTGFuZ3VhZ2VMYWJlbCA9IHN0eWxlZC5sYWJlbDxURWRpdG9yTGFuZ3VhZ2VMYWJlbFByb3BzPmBcbiAgLyogYXZvaWQgd3JhcHBpbmcgbGFiZWwgb250byBuZXcgbGluZXMgKi9cbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgZmxleDogMDtcbiAgY29sb3I6ICR7ZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvcklucHV0V2hlbkRpc2FibGVkfTtcbiAgbGluZS1oZWlnaHQ6IGNhbGMoXG4gICAgJHtkZXNpZ25Ub2tlbnMuc2l6ZUhlaWdodElucHV0fSAtIDIgKiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXMxfVxuICApO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyhwcm9wcykgPT4gZ2V0QmFja2dyb3VuZENvbG9yKHByb3BzKX07XG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvcklucHV0fTtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzRm9ySW5wdXR9O1xuICBib3JkZXI6ICR7KHByb3BzKSA9PiBnZXRFZGl0b3JMYW5ndWFnZUxhYmVsQm9yZGVyQ29sb3IocHJvcHMpfTtcbiAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMucGFkZGluZ0ZvckxvY2FsaXplZFJpY2hUZXh0SW5wdXRMYWJlbH07XG4gIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAke2Rlc2lnblRva2Vucy50cmFuc2l0aW9uU3RhbmRhcmR9LFxuICAgIGJhY2tncm91bmQtY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfSxcbiAgICBjb2xvciAke2Rlc2lnblRva2Vucy50cmFuc2l0aW9uU3RhbmRhcmR9O1xuICBib3JkZXItcmlnaHQ6IDA7XG4gIGJveC1zaGFkb3c6IG5vbmU7XG4gIGFwcGVhcmFuY2U6IG5vbmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLyogY3Vyc29yIHNob3VsZCBiZSBpbmhlcml0ZWQgZnJvbSBwYXJlbnQsXG4gICAgKiBHSVZFTiBwYXJlbnQgaGFzICdub3QtYWxsb3dlZCcgY3Vyc29yXG4gICAgKiBUSEVOIHRoZSBsYW5ndWFnZSBsYWJlbCBzaG91bGQgYWxzbyBoYXZlIHRoYXQgKGluc3RlYWQgb2YgbGFiZWwncyBkZWZhdWx0IGN1cnNvcilcbiAgICAqL1xuICBjdXJzb3I6IGluaGVyaXQ7XG5gO1xuXG5jb25zdCBFZGl0b3JXcmFwcGVyID0gc3R5bGVkLmRpdjxcbiAgUGljazxURWRpdG9yUHJvcHMsICdpc0Rpc2FibGVkJyB8ICdpc1JlYWRPbmx5Jz5cbj5gXG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGN1cnNvcjogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuaXNEaXNhYmxlZCB8fCBwcm9wcy5pc1JlYWRPbmx5ID8gJ25vdC1hbGxvd2VkJyA6ICdpbmhlcml0J307XG5gO1xuXG5jb25zdCBUb2dnbGVCdXR0b25XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgZmxleDogMDtcbiAgZGlzcGxheTogZmxleDtcbmA7XG5cbmV4cG9ydCB7IEVkaXRvckxhbmd1YWdlTGFiZWwsIEVkaXRvcldyYXBwZXIsIFRvZ2dsZUJ1dHRvbldyYXBwZXIgfTtcbiJdfQ== */"));
const ToggleButtonWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "ew063c0"
} : {
  target: "ew063c0",
  label: "ToggleButtonWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "ejz79s",
  styles: "flex:0;display:flex"
} : {
  name: "ejz79s",
  styles: "flex:0;display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkaXRvci5zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0VzQyIsImZpbGUiOiJlZGl0b3Iuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgdHlwZSB7IFRFZGl0b3JQcm9wcyB9IGZyb20gJy4vZWRpdG9yJztcblxuY29uc3QgZ2V0RWRpdG9yTGFuZ3VhZ2VMYWJlbEJvcmRlckNvbG9yID0gKHByb3BzOiBURWRpdG9yTGFuZ3VhZ2VMYWJlbFByb3BzKSA9PlxuICBgMXB4IHNvbGlkICR7XG4gICAgcHJvcHMuaXNSZWFkT25seVxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5SZWFkb25seVxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyQ29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZFxuICB9YDtcblxudHlwZSBUSW5wdXRQcm9wcyA9IHtcbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG4gIGlzUmVhZE9ubHk/OiBib29sZWFuO1xufTtcblxudHlwZSBURWRpdG9yTGFuZ3VhZ2VMYWJlbFByb3BzID0ge1xuICBpc1JlYWRPbmx5PzogYm9vbGVhbjtcbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG59O1xuXG5jb25zdCBnZXRCYWNrZ3JvdW5kQ29sb3IgPSAocHJvcHM6IFRJbnB1dFByb3BzKSA9PiB7XG4gIGlmIChwcm9wcy5pc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZDtcbiAgfVxuICBpZiAocHJvcHMuaXNSZWFkT25seSkge1xuICAgIHJldHVybiBkZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9ySW5wdXRXaGVuRGlzYWJsZWQ7XG4gIH1cbiAgcmV0dXJuIGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JJbnB1dDtcbn07XG5cbmNvbnN0IEVkaXRvckxhbmd1YWdlTGFiZWwgPSBzdHlsZWQubGFiZWw8VEVkaXRvckxhbmd1YWdlTGFiZWxQcm9wcz5gXG4gIC8qIGF2b2lkIHdyYXBwaW5nIGxhYmVsIG9udG8gbmV3IGxpbmVzICovXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGZsZXg6IDA7XG4gIGNvbG9yOiAke2Rlc2lnblRva2Vucy5mb250Q29sb3JGb3JJbnB1dFdoZW5EaXNhYmxlZH07XG4gIGxpbmUtaGVpZ2h0OiBjYWxjKFxuICAgICR7ZGVzaWduVG9rZW5zLnNpemVIZWlnaHRJbnB1dH0gLSAyICogJHtkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMX1cbiAgKTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsocHJvcHMpID0+IGdldEJhY2tncm91bmRDb2xvcihwcm9wcyl9O1xuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAke2Rlc2lnblRva2Vucy5ib3JkZXJSYWRpdXNGb3JJbnB1dH07XG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICR7ZGVzaWduVG9rZW5zLmJvcmRlclJhZGl1c0ZvcklucHV0fTtcbiAgYm9yZGVyOiAkeyhwcm9wcykgPT4gZ2V0RWRpdG9yTGFuZ3VhZ2VMYWJlbEJvcmRlckNvbG9yKHByb3BzKX07XG4gIHBhZGRpbmc6ICR7ZGVzaWduVG9rZW5zLnBhZGRpbmdGb3JMb2NhbGl6ZWRSaWNoVGV4dElucHV0TGFiZWx9O1xuICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfSxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yICR7ZGVzaWduVG9rZW5zLnRyYW5zaXRpb25TdGFuZGFyZH0sXG4gICAgY29sb3IgJHtkZXNpZ25Ub2tlbnMudHJhbnNpdGlvblN0YW5kYXJkfTtcbiAgYm9yZGVyLXJpZ2h0OiAwO1xuICBib3gtc2hhZG93OiBub25lO1xuICBhcHBlYXJhbmNlOiBub25lO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gIC8qIGN1cnNvciBzaG91bGQgYmUgaW5oZXJpdGVkIGZyb20gcGFyZW50LFxuICAgICogR0lWRU4gcGFyZW50IGhhcyAnbm90LWFsbG93ZWQnIGN1cnNvclxuICAgICogVEhFTiB0aGUgbGFuZ3VhZ2UgbGFiZWwgc2hvdWxkIGFsc28gaGF2ZSB0aGF0IChpbnN0ZWFkIG9mIGxhYmVsJ3MgZGVmYXVsdCBjdXJzb3IpXG4gICAgKi9cbiAgY3Vyc29yOiBpbmhlcml0O1xuYDtcblxuY29uc3QgRWRpdG9yV3JhcHBlciA9IHN0eWxlZC5kaXY8XG4gIFBpY2s8VEVkaXRvclByb3BzLCAnaXNEaXNhYmxlZCcgfCAnaXNSZWFkT25seSc+XG4+YFxuICB3aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBjdXJzb3I6ICR7KHByb3BzKSA9PlxuICAgIHByb3BzLmlzRGlzYWJsZWQgfHwgcHJvcHMuaXNSZWFkT25seSA/ICdub3QtYWxsb3dlZCcgOiAnaW5oZXJpdCd9O1xuYDtcblxuY29uc3QgVG9nZ2xlQnV0dG9uV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG5gO1xuXG5leHBvcnQgeyBFZGl0b3JMYW5ndWFnZUxhYmVsLCBFZGl0b3JXcmFwcGVyLCBUb2dnbGVCdXR0b25XcmFwcGVyIH07XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
});

function ownKeys$3(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys$3(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys$3(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const HOTKEYS = {
  'mod+b': 'bold',
  'mod+i': 'italic',
  'mod+u': 'underline',
  'mod+`': 'code'
};
const COLLAPSED_HEIGHT = 32;
const LeftColumn = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "el9zors2"
} : {
  target: "el9zors2",
  label: "LeftColumn"
})(process.env.NODE_ENV === "production" ? {
  name: "147rp59",
  styles: "flex:1;display:flex;align-items:flex-start"
} : {
  name: "147rp59",
  styles: "flex:1;display:flex;align-items:flex-start",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const RightColumn = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "el9zors1"
} : {
  target: "el9zors1",
  label: "RightColumn"
})(process.env.NODE_ENV === "production" ? {
  name: "1m04uhl",
  styles: "position:relative;flex:0;display:flex;align-items:flex-start"
} : {
  name: "1m04uhl",
  styles: "position:relative;flex:0;display:flex;align-items:flex-start",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Row = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "el9zors0"
} : {
  target: "el9zors0",
  label: "Row"
})(process.env.NODE_ENV === "production" ? {
  name: "skgbeu",
  styles: "display:flex;justify-content:flex-end"
} : {
  name: "skgbeu",
  styles: "display:flex;justify-content:flex-end",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkaXRvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEVzQiIsImZpbGUiOiJlZGl0b3IudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgdXNlUmVmLFxuICB1c2VTdGF0ZSxcbiAgdXNlQ2FsbGJhY2ssXG4gIHVzZUVmZmVjdCxcbiAgdXNlTWVtbyxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgZm9yd2FyZFJlZixcbiAgdHlwZSBSZWFjdE5vZGUsXG4gIHR5cGUgTGVnYWN5UmVmLFxuICB0eXBlIFJlZk9iamVjdCxcbiAgdHlwZSBSZWYsXG4gIHR5cGUgRm9jdXNFdmVudEhhbmRsZXIsXG59IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgd2FybmluZywgZmlsdGVyRGF0YUF0dHJpYnV0ZXMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5pbXBvcnQgQ29sbGFwc2libGVNb3Rpb24gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvY29sbGFwc2libGUtbW90aW9uJztcbmltcG9ydCBTdGFjayBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1zdGFjayc7XG5pbXBvcnQgeyBBbmdsZVVwSWNvbiwgQW5nbGVEb3duSWNvbiB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2ljb25zJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IEZsYXRCdXR0b24gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZmxhdC1idXR0b24nO1xuaW1wb3J0IHsgbWVzc2FnZXNNdWx0aWxpbmVJbnB1dCB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2lucHV0LXV0aWxzJztcbmltcG9ydCB7XG4gIFJpY2hUZXh0Qm9keSxcbiAgSGlkZGVuSW5wdXQsXG4gIEVsZW1lbnQsXG4gIExlYWYsXG4gIHRvZ2dsZU1hcmssXG4gIHJlc2V0RWRpdG9yLFxuICBmb2N1c0VkaXRvcixcbn0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvcmljaC10ZXh0LXV0aWxzJztcbmltcG9ydCB7XG4gIEVkaXRhYmxlLFxuICB3aXRoUmVhY3QsXG4gIFNsYXRlLFxuICBSZWFjdEVkaXRvcixcbiAgdHlwZSBSZW5kZXJFbGVtZW50UHJvcHMsXG4gIHR5cGUgUmVuZGVyTGVhZlByb3BzLFxufSBmcm9tICdzbGF0ZS1yZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVFZGl0b3IsIHR5cGUgRGVzY2VuZGFudCB9IGZyb20gJ3NsYXRlJztcbmltcG9ydCB7IHdpdGhIaXN0b3J5IH0gZnJvbSAnc2xhdGUtaGlzdG9yeSc7XG5pbXBvcnQgaXNIb3RrZXkgZnJvbSAnaXMtaG90a2V5JztcbmltcG9ydCBwaXBlIGZyb20gJ2xvZGFzaC9mcC9waXBlJztcbmltcG9ydCB7XG4gIEVkaXRvcldyYXBwZXIsXG4gIEVkaXRvckxhbmd1YWdlTGFiZWwsXG4gIFRvZ2dsZUJ1dHRvbldyYXBwZXIsXG59IGZyb20gJy4vZWRpdG9yLnN0eWxlcyc7XG5cbmNvbnN0IEhPVEtFWVMgPSB7XG4gICdtb2QrYic6ICdib2xkJyxcbiAgJ21vZCtpJzogJ2l0YWxpYycsXG4gICdtb2QrdSc6ICd1bmRlcmxpbmUnLFxuICAnbW9kK2AnOiAnY29kZScsXG59O1xuXG5jb25zdCBDT0xMQVBTRURfSEVJR0hUID0gMzI7XG5cbmNvbnN0IExlZnRDb2x1bW4gPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbmA7XG5cbmNvbnN0IFJpZ2h0Q29sdW1uID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmbGV4OiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbmA7XG5cbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuXG5leHBvcnQgdHlwZSBURWRpdG9yUHJvcHMgPSB7XG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xuICBuYW1lPzogc3RyaW5nO1xuICBpZD86IHN0cmluZztcbiAgaXNPcGVuOiBib29sZWFuO1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgaXNSZWFkT25seT86IGJvb2xlYW47XG4gIGhhc1dhcm5pbmc/OiBib29sZWFuO1xuICBoYXNFcnJvcj86IGJvb2xlYW47XG4gIGVycm9yPzogUmVhY3ROb2RlO1xuICB3YXJuaW5nPzogUmVhY3ROb2RlO1xuICBkZWZhdWx0RXhwYW5kTXVsdGlsaW5lVGV4dDogYm9vbGVhbjtcbiAgdG9nZ2xlTGFuZ3VhZ2U6IChsYW5ndWFnZTogc3RyaW5nKSA9PiB2b2lkO1xuICBsYW5ndWFnZTogc3RyaW5nO1xuICBzaG93RXhwYW5kSWNvbjogYm9vbGVhbjtcbiAgb25DbGlja0V4cGFuZD86ICgpID0+IGJvb2xlYW47XG4gIGhhc0xhbmd1YWdlc0NvbnRyb2w/OiBib29sZWFuO1xuICB2YWx1ZTogRGVzY2VuZGFudFtdO1xuICBvbkNoYW5nZTogKHN0YXRlOiBEZXNjZW5kYW50W10pID0+IHZvaWQ7XG4gIG9uRm9jdXM/OiBGb2N1c0V2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD47XG4gIG9uQmx1cj86IEZvY3VzRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50PjtcbiAgaXNBdXRvZm9jdXNlZD86IGJvb2xlYW47XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICByZWY/OiBSZWY8dW5rbm93bj47XG59O1xuXG50eXBlIFROb2RlUmVmT2JqZWN0ID0ge1xuICBjbGllbnRIZWlnaHQ6IG51bWJlcjtcbn0gJiBMZWdhY3lSZWY8SFRNTERpdkVsZW1lbnQ+O1xuXG50eXBlIFRSaWNoVGV4dEVkaXRvckJvZHlSZWYgPSB7XG4gIHJlZ2lzdGVyQ29udGVudE5vZGU6IFROb2RlUmVmT2JqZWN0O1xuICBjb250YWluZXJSZWY6IFJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD47XG59O1xuXG5jb25zdCByZW5kZXJFbGVtZW50ID0gKHByb3BzOiBSZW5kZXJFbGVtZW50UHJvcHMpID0+IDxFbGVtZW50IHsuLi5wcm9wc30gLz47XG5jb25zdCByZW5kZXJMZWFmID0gKHByb3BzOiBSZW5kZXJMZWFmUHJvcHMpID0+IDxMZWFmIHsuLi5wcm9wc30gLz47XG5cbmNvbnN0IEVkaXRvciA9IGZvcndhcmRSZWYoKHByb3BzOiBURWRpdG9yUHJvcHMsIGZvcndhcmRlZFJlZikgPT4ge1xuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG5cbiAgY29uc3QgY3JlYXRlRWRpdG9yV2l0aFBsdWdpbnMgPSBwaXBlKHdpdGhSZWFjdCwgd2l0aEhpc3RvcnkpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIGNvbnN0IGVkaXRvciA9IHVzZU1lbW8oKCkgPT4gY3JlYXRlRWRpdG9yV2l0aFBsdWdpbnMoY3JlYXRlRWRpdG9yKCkpLCBbXSk7XG5cbiAgaWYgKHByb3BzLnNob3dFeHBhbmRJY29uKSB7XG4gICAgd2FybmluZyhcbiAgICAgIHR5cGVvZiBwcm9wcy5vbkNsaWNrRXhwYW5kID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ0VkaXRvcjogXCJvbkNsaWNrRXhwYW5kXCIgaXMgcmVxdWlyZWQgd2hlbiBzaG93RXhwYW5kSWNvbiBpcyB0cnVlJ1xuICAgICk7XG4gIH1cblxuICBjb25zdCBbcmVuZGVyVG9nZ2xlQnV0dG9uLCBzZXRSZW5kZXJUb2dnbGVCdXR0b25dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHsgdG9nZ2xlTGFuZ3VhZ2UgfSA9IHByb3BzO1xuICBjb25zdCBvblRvZ2dsZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB0b2dnbGVMYW5ndWFnZShwcm9wcy5sYW5ndWFnZSk7XG4gIH0sIFt0b2dnbGVMYW5ndWFnZSwgcHJvcHMubGFuZ3VhZ2VdKTtcblxuICBjb25zdCB1cGRhdGVSZW5kZXJUb2dnbGVCdXR0b24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgZG9lc0V4Y2VlZENvbGxhcHNlZEhlaWdodExpbWl0ID1cbiAgICAgIE51bWJlcihyZWYuY3VycmVudD8uY2xpZW50SGVpZ2h0KSA+IENPTExBUFNFRF9IRUlHSFQ7XG5cbiAgICBpZiAoZG9lc0V4Y2VlZENvbGxhcHNlZEhlaWdodExpbWl0ICYmICFyZW5kZXJUb2dnbGVCdXR0b24pIHtcbiAgICAgIHNldFJlbmRlclRvZ2dsZUJ1dHRvbih0cnVlKTtcbiAgICB9XG4gICAgaWYgKCFkb2VzRXhjZWVkQ29sbGFwc2VkSGVpZ2h0TGltaXQgJiYgcmVuZGVyVG9nZ2xlQnV0dG9uKSB7XG4gICAgICBzZXRSZW5kZXJUb2dnbGVCdXR0b24oZmFsc2UpO1xuICAgIH1cbiAgfSwgW3NldFJlbmRlclRvZ2dsZUJ1dHRvbiwgcmVuZGVyVG9nZ2xlQnV0dG9uXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB1cGRhdGVSZW5kZXJUb2dnbGVCdXR0b24oKTtcbiAgfSwgW2VkaXRvciwgdXBkYXRlUmVuZGVyVG9nZ2xlQnV0dG9uXSk7XG5cbiAgLy8gcmVzZXR0aW5nXG4gIGNvbnN0IHJlc2V0VmFsdWUgPSB1c2VDYWxsYmFjayhcbiAgICAobmV3VmFsdWU6IHN0cmluZyB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+IHtcbiAgICAgIGNvbnN0IG5ld1N0cmluZ1ZhbHVlID1cbiAgICAgICAgdHlwZW9mIG5ld1ZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICAgID8gbmV3VmFsdWVcbiAgICAgICAgICA6IG5ld1ZhbHVlPy5bcHJvcHMubGFuZ3VhZ2VdID8/ICcnO1xuXG4gICAgICByZXNldEVkaXRvcihlZGl0b3IsIG5ld1N0cmluZ1ZhbHVlKTtcbiAgICB9LFxuICAgIFtlZGl0b3IsIHByb3BzLmxhbmd1YWdlXVxuICApO1xuICAvKlxuICBSZXNldHRpbmcgdGhlIGVkaXRvciByZXF1aXJlcyBhY2Nlc3MgdG8gYGVkaXRvcmAgb2JqZWN0IHJldHVybmVkIGZyb20gYHVzZVNsYXRlYCBob29rLlxuICBUaGVyZWZvcmUsIGByZXNldGAgZnVuY3Rpb24gaXMgYXR0YWNoZWQgdG8gdGhlIHBhc3NlZCBgcmVmYCBvYmplY3QgdmlhIGB1c2VJbXBlcmF0aXZlSGFuZGxlYFxuICB0byBiZSBjYWxsZWQgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgZS5nLiA8YnV0dG9uIG9uTW91c2VEb3duPXsoKSA9PiByZWYuY3VycmVudD8ucmVzZXRWYWx1ZShcIjxwPjxzdHJvbmc+VmFsdWUgYWZ0ZXIgcmVzZXQ8L3N0cm9uZz48L3A+XCIpfT5SZXNldDwvYnV0dG9uPlxuICAqL1xuICB1c2VJbXBlcmF0aXZlSGFuZGxlKGZvcndhcmRlZFJlZiwgKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICByZXNldFZhbHVlLFxuICAgIH07XG4gIH0pO1xuXG4gIGNvbnN0IHNob3VsZFRvZ2dsZUJ1dHRvblRha2VTcGFjZSA9XG4gICAgLypcbiAgICAgIC0gaWYgaGFzTGFuZ3VhZ2VzQ29udHJvbCBhbmQgdGhlcmUgYXJlIG5vIGVycm9ycy93YXJuaW5ncyB0byBkaXNwbGF5XG4gICAgICAtIHRoZW4gdGhlIHRvZ2dsZUJ1dHRvbiBpcyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWRcbiAgICAgIFRoaXMgaXMgYmVjYXVzZSB0aGUgdG9nZ2xlIGJ1dHRvbiBpcyBwbGFjZWQgbmV4dCB0byB0aGUgTG9jYWxpemVkSW5wdXRUb2dnbGUgd2l0aG91dCBiZWluZyBzaWJsaW5ncyBpbiB0aGUgRE9NLlxuICAgICAgSWYgdGhlcmUgaXMgYSBlcnJvciBvciB3YXJuaW5nIHNob3dpbmcsXG4gICAgICB0aGVuIGl0IGNhbiBiZSBwbGFjZWQgc3RhdGljYWxseSBiZWNhdXNlIGl0IHdpbGwgdGhlbiBiZSBhIHNpYmxpbmcgdG8gdGhlIGVycm9yL3dhcm5pbmcgbWVzc2FnZVxuICAgICAgYW5kIExvY2FsaXplZElucHV0VG9nZ2xlIGlzIHBsYWNlZCBiZWxvdyB0aGUgZXJyb3JzL3dhcm5pbmdzLlxuICAgICovXG5cbiAgICAocmVuZGVyVG9nZ2xlQnV0dG9uICYmICFwcm9wcy5oYXNMYW5ndWFnZXNDb250cm9sKSB8fFxuICAgIHByb3BzLmVycm9yIHx8XG4gICAgcHJvcHMud2FybmluZztcblxuICByZXR1cm4gKFxuICAgIDxDb2xsYXBzaWJsZU1vdGlvblxuICAgICAgbWluSGVpZ2h0PXtDT0xMQVBTRURfSEVJR0hUfVxuICAgICAgaXNDbG9zZWQ9eyFwcm9wcy5pc09wZW59XG4gICAgICBvblRvZ2dsZT17b25Ub2dnbGV9XG4gICAgICBpc0RlZmF1bHRDbG9zZWQ9eyFwcm9wcy5kZWZhdWx0RXhwYW5kTXVsdGlsaW5lVGV4dH1cbiAgICA+XG4gICAgICB7KHsgaXNPcGVuLCB0b2dnbGUsIGNvbnRhaW5lclN0eWxlcywgcmVnaXN0ZXJDb250ZW50Tm9kZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZk9iaiA9IHtcbiAgICAgICAgICBjb250YWluZXJSZWY6IHJlZixcbiAgICAgICAgICByZWdpc3RlckNvbnRlbnROb2RlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFN0YWNrIHNjYWxlPVwieHNcIj5cbiAgICAgICAgICAgIDxFZGl0b3JXcmFwcGVyXG4gICAgICAgICAgICAgIGtleT17cHJvcHMubGFuZ3VhZ2V9XG4gICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e3Byb3BzLmlzRGlzYWJsZWR9XG4gICAgICAgICAgICAgIGlzUmVhZE9ubHk9e3Byb3BzLmlzUmVhZE9ubHl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxTbGF0ZVxuICAgICAgICAgICAgICAgIGVkaXRvcj17ZWRpdG9yfVxuICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy52YWx1ZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RWRpdG9yTGFuZ3VhZ2VMYWJlbFxuICAgICAgICAgICAgICAgICAgaHRtbEZvcj17cHJvcHMuaWR9XG4gICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkPXtwcm9wcy5pc0Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgaXNSZWFkT25seT17cHJvcHMuaXNSZWFkT25seX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7LyogRklYTUU6IGFkZCBwcm9wZXIgdG9uZSBmb3IgZGlzYWJsZWQgd2hlbiB0b25lcyBhcmUgcmVmYWN0b3JlZCAqL31cbiAgICAgICAgICAgICAgICAgIDxUZXh0LkRldGFpbCB0b25lPVwic2Vjb25kYXJ5XCI+XG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy5sYW5ndWFnZS50b1VwcGVyQ2FzZSgpfVxuICAgICAgICAgICAgICAgICAgPC9UZXh0LkRldGFpbD5cbiAgICAgICAgICAgICAgICA8L0VkaXRvckxhbmd1YWdlTGFiZWw+XG4gICAgICAgICAgICAgICAgPFJpY2hUZXh0Qm9keVxuICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgcmVmPXtyZWZPYmogYXMgdW5rbm93biBhcyBSZWY8VFJpY2hUZXh0RWRpdG9yQm9keVJlZj59XG4gICAgICAgICAgICAgICAgICBzdHlsZXM9e3tcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBjc3NgXG4gICAgICAgICAgICAgICAgICAgICAgZmxleDogYXV0bztcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xuICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XG4gICAgICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgaGFzRXJyb3I9e3Byb3BzLmhhc0Vycm9yfVxuICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgIGhhc1dhcm5pbmc9e3Byb3BzLmhhc1dhcm5pbmd9XG4gICAgICAgICAgICAgICAgICBpc1JlYWRPbmx5PXtCb29sZWFuKHByb3BzLmlzUmVhZE9ubHkpfVxuICAgICAgICAgICAgICAgICAgc2hvd0V4cGFuZEljb249e0Jvb2xlYW4ocHJvcHMuc2hvd0V4cGFuZEljb24pfVxuICAgICAgICAgICAgICAgICAgb25DbGlja0V4cGFuZD17cHJvcHMub25DbGlja0V4cGFuZH1cbiAgICAgICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlcz17Y29udGFpbmVyU3R5bGVzfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxFZGl0YWJsZVxuICAgICAgICAgICAgICAgICAgICB7Li4uZmlsdGVyRGF0YUF0dHJpYnV0ZXMocHJvcHMpfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPXtwcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJFbGVtZW50PXtyZW5kZXJFbGVtZW50fVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMZWFmPXtyZW5kZXJMZWFmfVxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17cHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17cHJvcHMuaXNBdXRvZm9jdXNlZH1cbiAgICAgICAgICAgICAgICAgICAgb25CbHVyPXtwcm9wcy5vbkJsdXJ9XG4gICAgICAgICAgICAgICAgICAgIG9uRm9jdXM9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHByb3BzLm9uRm9jdXM/LihldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gb3BlbnMgdGhlIGlucHV0IGlmIGl0IHJlZ2FpbnMgZm9jdXMgYW5kIGl0J3MgY2xvc2VkXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNFZGl0b3IoZWRpdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5PXtwcm9wcy5pc1JlYWRPbmx5fVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvdGtleSBpbiBIT1RLRVlTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNIb3RrZXkoaG90a2V5LCBldmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFyayA9IEhPVEtFWVNbaG90a2V5IGFzIGtleW9mIHR5cGVvZiBIT1RLRVlTXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlTWFyayhlZGl0b3IsIG1hcmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgPEhpZGRlbklucHV0XG4gICAgICAgICAgICAgICAgICAgIGlzRm9jdXNlZD17UmVhY3RFZGl0b3IuaXNGb2N1c2VkKGVkaXRvcil9XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUZvY3VzPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9jdXNFZGl0b3IoZWRpdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgaWQ9e3Byb3BzLmlkfVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk9e3Byb3BzLmlzUmVhZE9ubHl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvUmljaFRleHRCb2R5PlxuICAgICAgICAgICAgICA8L1NsYXRlPlxuICAgICAgICAgICAgPC9FZGl0b3JXcmFwcGVyPlxuICAgICAgICAgICAgPFJvd1xuICAgICAgICAgICAgICAvLyBOT1RFOiBhcHBseWluZyB0aGlzIHN0eWxlIHdpdGhpbmcgdGhlIGBzdHlsZWRgIGNvbXBvbmVudCByZXN1bHRzIGluIHRoZSBwcm9kdWN0aW9uXG4gICAgICAgICAgICAgIC8vIGJ1bmRsZSB0byBhcHBseSB0aGUgc3R5bGUgaW4gdGhlIHdyb25nIG9yZGVyLlxuICAgICAgICAgICAgICAvLyBGb3IgaW5zdGFuY2UsIHdlIG5lZWQgdG8gb3ZlcnJpZGUgdGhlIG1hcmdpbmcgb2YgdGhlIHNwYWNpbmcgY29tcG9uZW50LCB3aGljaCBhbHNvXG4gICAgICAgICAgICAgIC8vIHVzZXMgYCFpbXBvcnRhbnRgLlxuICAgICAgICAgICAgICAvLyBBbnl3YXksIGFwcGFyZW50bHkgYnkgcGFzc2luZyB0aGUgc3R5bGUgYXMgYSBgY3NzYCBwcm9wIHRvIHRoZSBgc3R5bGVkYCBjb21wb25lbnRcbiAgICAgICAgICAgICAgLy8gZG9lcyB0aGUgdHJpY2suXG4gICAgICAgICAgICAgIC8vIFRPRE86IHJldmlzaXQgdGhlIGxvZ2ljIGFuZCB0aGUgaW1wbGVtZW50YXRpb24gdG8gbWF5YmUgYXZvaWQgaGF2aW5nIHRvIGFwcGx5IHRoaXMgc3R5bGUuXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6ICR7c2hvdWxkVG9nZ2xlQnV0dG9uVGFrZVNwYWNlXG4gICAgICAgICAgICAgICAgICA/ICdpbmhlcml0J1xuICAgICAgICAgICAgICAgICAgOiAnMHB4ICFpbXBvcnRhbnQnfTtcbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgeygoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmVycm9yKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPExlZnRDb2x1bW4+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdj57cHJvcHMuZXJyb3J9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvTGVmdENvbHVtbj5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLndhcm5pbmcpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8TGVmdENvbHVtbj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pntwcm9wcy53YXJuaW5nfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L0xlZnRDb2x1bW4+XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9KSgpfVxuICAgICAgICAgICAgICB7cmVuZGVyVG9nZ2xlQnV0dG9uICYmIChcbiAgICAgICAgICAgICAgICA8UmlnaHRDb2x1bW4+XG4gICAgICAgICAgICAgICAgICA8VG9nZ2xlQnV0dG9uV3JhcHBlclxuICAgICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgICAhc2hvdWxkVG9nZ2xlQnV0dG9uVGFrZVNwYWNlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxGbGF0QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dG9nZ2xlfVxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICBpc09wZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBtZXNzYWdlc011bHRpbGluZUlucHV0LmNvbGxhcHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbWVzc2FnZXNNdWx0aWxpbmVJbnB1dC5leHBhbmRcbiAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgIGljb249e1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNPcGVuID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QW5nbGVVcEljb24gc2l6ZT1cInNtYWxsXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxBbmdsZURvd25JY29uIHNpemU9XCJzbWFsbFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9Ub2dnbGVCdXR0b25XcmFwcGVyPlxuICAgICAgICAgICAgICAgIDwvUmlnaHRDb2x1bW4+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICApO1xuICAgICAgfX1cbiAgICA8L0NvbGxhcHNpYmxlTW90aW9uPlxuICApO1xufSk7XG5FZGl0b3IuZGlzcGxheU5hbWUgPSAnRWRpdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgRWRpdG9yO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const renderElement = props => jsx(Element, _objectSpread$3({}, props));
const renderLeaf = props => jsx(Leaf, _objectSpread$3({}, props));
var _ref = process.env.NODE_ENV === "production" ? {
  name: "bcltzc",
  styles: "flex:auto;width:0;border-top-left-radius:0;border-bottom-left-radius:0"
} : {
  name: "16ohn6x-container",
  styles: "flex:auto;width:0;border-top-left-radius:0;border-bottom-left-radius:0;label:container;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const Editor = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  const intl = useIntl();
  const ref = useRef();
  const createEditorWithPlugins = pipe(withReact, withHistory);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const editor = useMemo(() => createEditorWithPlugins(createEditor()), []);
  if (props.showExpandIcon) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.onClickExpand === 'function', 'Editor: "onClickExpand" is required when showExpandIcon is true') : void 0;
  }
  const _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    renderToggleButton = _useState2[0],
    setRenderToggleButton = _useState2[1];
  const toggleLanguage = props.toggleLanguage;
  const onToggle = useCallback(() => {
    toggleLanguage(props.language);
  }, [toggleLanguage, props.language]);
  const updateRenderToggleButton = useCallback(() => {
    var _ref$current;
    const doesExceedCollapsedHeightLimit = Number((_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.clientHeight) > COLLAPSED_HEIGHT;
    if (doesExceedCollapsedHeightLimit && !renderToggleButton) {
      setRenderToggleButton(true);
    }
    if (!doesExceedCollapsedHeightLimit && renderToggleButton) {
      setRenderToggleButton(false);
    }
  }, [setRenderToggleButton, renderToggleButton]);
  useEffect(() => {
    updateRenderToggleButton();
  }, [editor, updateRenderToggleButton]);

  // resetting
  const resetValue = useCallback(newValue => {
    var _newValue$props$langu;
    const newStringValue = typeof newValue === 'string' ? newValue : (_newValue$props$langu = newValue === null || newValue === void 0 ? void 0 : newValue[props.language]) !== null && _newValue$props$langu !== void 0 ? _newValue$props$langu : '';
    resetEditor(editor, newStringValue);
  }, [editor, props.language]);
  /*
  Resetting the editor requires access to `editor` object returned from `useSlate` hook.
  Therefore, `reset` function is attached to the passed `ref` object via `useImperativeHandle`
  to be called from the parent component.
  e.g. <button onMouseDown={() => ref.current?.resetValue("<p><strong>Value after reset</strong></p>")}>Reset</button>
  */
  useImperativeHandle(forwardedRef, () => {
    return {
      resetValue
    };
  });
  const shouldToggleButtonTakeSpace =
  /*
    - if hasLanguagesControl and there are no errors/warnings to display
    - then the toggleButton is absolutely positioned
    This is because the toggle button is placed next to the LocalizedInputToggle without being siblings in the DOM.
    If there is a error or warning showing,
    then it can be placed statically because it will then be a sibling to the error/warning message
    and LocalizedInputToggle is placed below the errors/warnings.
  */

  renderToggleButton && !props.hasLanguagesControl || props.error || props.warning;
  return jsx(CollapsibleMotion, {
    minHeight: COLLAPSED_HEIGHT,
    isClosed: !props.isOpen,
    onToggle: onToggle,
    isDefaultClosed: !props.defaultExpandMultilineText,
    children: _ref2 => {
      let isOpen = _ref2.isOpen,
        toggle = _ref2.toggle,
        containerStyles = _ref2.containerStyles,
        registerContentNode = _ref2.registerContentNode;
      const refObj = {
        containerRef: ref,
        registerContentNode
      };
      return jsxs(Stack, {
        scale: "xs",
        children: [jsx(EditorWrapper, {
          isDisabled: props.isDisabled,
          isReadOnly: props.isReadOnly,
          children: jsxs(Slate, {
            editor: editor,
            value: props.value,
            onChange: props.onChange,
            children: [jsx(EditorLanguageLabel, {
              htmlFor: props.id,
              isDisabled: props.isDisabled,
              isReadOnly: props.isReadOnly,
              children: jsx(Text.Detail, {
                tone: "secondary",
                children: props.language.toUpperCase()
              })
            }), jsxs(RichTextBody
            // @ts-ignore
            , {
              ref: refObj,
              styles: {
                container: _ref
              },
              hasError: props.hasError,
              isDisabled: props.isDisabled,
              hasWarning: props.hasWarning,
              isReadOnly: Boolean(props.isReadOnly),
              showExpandIcon: Boolean(props.showExpandIcon),
              onClickExpand: props.onClickExpand,
              containerStyles: containerStyles,
              children: [jsx(Editable, _objectSpread$3(_objectSpread$3({}, filterDataAttributes(props)), {}, {
                name: props.name,
                renderElement: renderElement,
                renderLeaf: renderLeaf,
                placeholder: props.placeholder,
                autoFocus: props.isAutofocused,
                onBlur: props.onBlur,
                onFocus: event => {
                  var _props$onFocus;
                  (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, event);
                  // opens the input if it regains focus and it's closed
                  if (!isOpen) {
                    toggle();
                    focusEditor(editor);
                  }
                },
                readOnly: props.isReadOnly,
                disabled: props.isDisabled,
                onKeyDown: event => {
                  for (const hotkey in HOTKEYS) {
                    if (isHotkey(hotkey, event)) {
                      event.preventDefault();
                      const mark = HOTKEYS[hotkey];
                      toggleMark(editor, mark);
                      break;
                    }
                  }
                }
              })), props.children, jsx(HiddenInput, {
                isFocused: ReactEditor.isFocused(editor),
                handleFocus: () => {
                  focusEditor(editor);
                },
                id: props.id,
                disabled: props.isDisabled,
                readOnly: props.isReadOnly
              })]
            })]
          })
        }, props.language), jsxs(Row
        // NOTE: applying this style withing the `styled` component results in the production
        // bundle to apply the style in the wrong order.
        // For instance, we need to override the marging of the spacing component, which also
        // uses `!important`.
        // Anyway, apparently by passing the style as a `css` prop to the `styled` component
        // does the trick.
        // TODO: revisit the logic and the implementation to maybe avoid having to apply this style.
        , {
          css: /*#__PURE__*/css("margin-top:", shouldToggleButtonTakeSpace ? 'inherit' : '0px !important', ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Editor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkaXRvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeVNzQiIsImZpbGUiOiJlZGl0b3IudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgdXNlUmVmLFxuICB1c2VTdGF0ZSxcbiAgdXNlQ2FsbGJhY2ssXG4gIHVzZUVmZmVjdCxcbiAgdXNlTWVtbyxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgZm9yd2FyZFJlZixcbiAgdHlwZSBSZWFjdE5vZGUsXG4gIHR5cGUgTGVnYWN5UmVmLFxuICB0eXBlIFJlZk9iamVjdCxcbiAgdHlwZSBSZWYsXG4gIHR5cGUgRm9jdXNFdmVudEhhbmRsZXIsXG59IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IGRlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgd2FybmluZywgZmlsdGVyRGF0YUF0dHJpYnV0ZXMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC91dGlscyc7XG5pbXBvcnQgQ29sbGFwc2libGVNb3Rpb24gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvY29sbGFwc2libGUtbW90aW9uJztcbmltcG9ydCBTdGFjayBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1zdGFjayc7XG5pbXBvcnQgeyBBbmdsZVVwSWNvbiwgQW5nbGVEb3duSWNvbiB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2ljb25zJztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3RleHQnO1xuaW1wb3J0IEZsYXRCdXR0b24gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZmxhdC1idXR0b24nO1xuaW1wb3J0IHsgbWVzc2FnZXNNdWx0aWxpbmVJbnB1dCB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2lucHV0LXV0aWxzJztcbmltcG9ydCB7XG4gIFJpY2hUZXh0Qm9keSxcbiAgSGlkZGVuSW5wdXQsXG4gIEVsZW1lbnQsXG4gIExlYWYsXG4gIHRvZ2dsZU1hcmssXG4gIHJlc2V0RWRpdG9yLFxuICBmb2N1c0VkaXRvcixcbn0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvcmljaC10ZXh0LXV0aWxzJztcbmltcG9ydCB7XG4gIEVkaXRhYmxlLFxuICB3aXRoUmVhY3QsXG4gIFNsYXRlLFxuICBSZWFjdEVkaXRvcixcbiAgdHlwZSBSZW5kZXJFbGVtZW50UHJvcHMsXG4gIHR5cGUgUmVuZGVyTGVhZlByb3BzLFxufSBmcm9tICdzbGF0ZS1yZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVFZGl0b3IsIHR5cGUgRGVzY2VuZGFudCB9IGZyb20gJ3NsYXRlJztcbmltcG9ydCB7IHdpdGhIaXN0b3J5IH0gZnJvbSAnc2xhdGUtaGlzdG9yeSc7XG5pbXBvcnQgaXNIb3RrZXkgZnJvbSAnaXMtaG90a2V5JztcbmltcG9ydCBwaXBlIGZyb20gJ2xvZGFzaC9mcC9waXBlJztcbmltcG9ydCB7XG4gIEVkaXRvcldyYXBwZXIsXG4gIEVkaXRvckxhbmd1YWdlTGFiZWwsXG4gIFRvZ2dsZUJ1dHRvbldyYXBwZXIsXG59IGZyb20gJy4vZWRpdG9yLnN0eWxlcyc7XG5cbmNvbnN0IEhPVEtFWVMgPSB7XG4gICdtb2QrYic6ICdib2xkJyxcbiAgJ21vZCtpJzogJ2l0YWxpYycsXG4gICdtb2QrdSc6ICd1bmRlcmxpbmUnLFxuICAnbW9kK2AnOiAnY29kZScsXG59O1xuXG5jb25zdCBDT0xMQVBTRURfSEVJR0hUID0gMzI7XG5cbmNvbnN0IExlZnRDb2x1bW4gPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbmA7XG5cbmNvbnN0IFJpZ2h0Q29sdW1uID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmbGV4OiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbmA7XG5cbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuXG5leHBvcnQgdHlwZSBURWRpdG9yUHJvcHMgPSB7XG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xuICBuYW1lPzogc3RyaW5nO1xuICBpZD86IHN0cmluZztcbiAgaXNPcGVuOiBib29sZWFuO1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgaXNSZWFkT25seT86IGJvb2xlYW47XG4gIGhhc1dhcm5pbmc/OiBib29sZWFuO1xuICBoYXNFcnJvcj86IGJvb2xlYW47XG4gIGVycm9yPzogUmVhY3ROb2RlO1xuICB3YXJuaW5nPzogUmVhY3ROb2RlO1xuICBkZWZhdWx0RXhwYW5kTXVsdGlsaW5lVGV4dDogYm9vbGVhbjtcbiAgdG9nZ2xlTGFuZ3VhZ2U6IChsYW5ndWFnZTogc3RyaW5nKSA9PiB2b2lkO1xuICBsYW5ndWFnZTogc3RyaW5nO1xuICBzaG93RXhwYW5kSWNvbjogYm9vbGVhbjtcbiAgb25DbGlja0V4cGFuZD86ICgpID0+IGJvb2xlYW47XG4gIGhhc0xhbmd1YWdlc0NvbnRyb2w/OiBib29sZWFuO1xuICB2YWx1ZTogRGVzY2VuZGFudFtdO1xuICBvbkNoYW5nZTogKHN0YXRlOiBEZXNjZW5kYW50W10pID0+IHZvaWQ7XG4gIG9uRm9jdXM/OiBGb2N1c0V2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD47XG4gIG9uQmx1cj86IEZvY3VzRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50PjtcbiAgaXNBdXRvZm9jdXNlZD86IGJvb2xlYW47XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICByZWY/OiBSZWY8dW5rbm93bj47XG59O1xuXG50eXBlIFROb2RlUmVmT2JqZWN0ID0ge1xuICBjbGllbnRIZWlnaHQ6IG51bWJlcjtcbn0gJiBMZWdhY3lSZWY8SFRNTERpdkVsZW1lbnQ+O1xuXG50eXBlIFRSaWNoVGV4dEVkaXRvckJvZHlSZWYgPSB7XG4gIHJlZ2lzdGVyQ29udGVudE5vZGU6IFROb2RlUmVmT2JqZWN0O1xuICBjb250YWluZXJSZWY6IFJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD47XG59O1xuXG5jb25zdCByZW5kZXJFbGVtZW50ID0gKHByb3BzOiBSZW5kZXJFbGVtZW50UHJvcHMpID0+IDxFbGVtZW50IHsuLi5wcm9wc30gLz47XG5jb25zdCByZW5kZXJMZWFmID0gKHByb3BzOiBSZW5kZXJMZWFmUHJvcHMpID0+IDxMZWFmIHsuLi5wcm9wc30gLz47XG5cbmNvbnN0IEVkaXRvciA9IGZvcndhcmRSZWYoKHByb3BzOiBURWRpdG9yUHJvcHMsIGZvcndhcmRlZFJlZikgPT4ge1xuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG5cbiAgY29uc3QgY3JlYXRlRWRpdG9yV2l0aFBsdWdpbnMgPSBwaXBlKHdpdGhSZWFjdCwgd2l0aEhpc3RvcnkpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIGNvbnN0IGVkaXRvciA9IHVzZU1lbW8oKCkgPT4gY3JlYXRlRWRpdG9yV2l0aFBsdWdpbnMoY3JlYXRlRWRpdG9yKCkpLCBbXSk7XG5cbiAgaWYgKHByb3BzLnNob3dFeHBhbmRJY29uKSB7XG4gICAgd2FybmluZyhcbiAgICAgIHR5cGVvZiBwcm9wcy5vbkNsaWNrRXhwYW5kID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ0VkaXRvcjogXCJvbkNsaWNrRXhwYW5kXCIgaXMgcmVxdWlyZWQgd2hlbiBzaG93RXhwYW5kSWNvbiBpcyB0cnVlJ1xuICAgICk7XG4gIH1cblxuICBjb25zdCBbcmVuZGVyVG9nZ2xlQnV0dG9uLCBzZXRSZW5kZXJUb2dnbGVCdXR0b25dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHsgdG9nZ2xlTGFuZ3VhZ2UgfSA9IHByb3BzO1xuICBjb25zdCBvblRvZ2dsZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB0b2dnbGVMYW5ndWFnZShwcm9wcy5sYW5ndWFnZSk7XG4gIH0sIFt0b2dnbGVMYW5ndWFnZSwgcHJvcHMubGFuZ3VhZ2VdKTtcblxuICBjb25zdCB1cGRhdGVSZW5kZXJUb2dnbGVCdXR0b24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgZG9lc0V4Y2VlZENvbGxhcHNlZEhlaWdodExpbWl0ID1cbiAgICAgIE51bWJlcihyZWYuY3VycmVudD8uY2xpZW50SGVpZ2h0KSA+IENPTExBUFNFRF9IRUlHSFQ7XG5cbiAgICBpZiAoZG9lc0V4Y2VlZENvbGxhcHNlZEhlaWdodExpbWl0ICYmICFyZW5kZXJUb2dnbGVCdXR0b24pIHtcbiAgICAgIHNldFJlbmRlclRvZ2dsZUJ1dHRvbih0cnVlKTtcbiAgICB9XG4gICAgaWYgKCFkb2VzRXhjZWVkQ29sbGFwc2VkSGVpZ2h0TGltaXQgJiYgcmVuZGVyVG9nZ2xlQnV0dG9uKSB7XG4gICAgICBzZXRSZW5kZXJUb2dnbGVCdXR0b24oZmFsc2UpO1xuICAgIH1cbiAgfSwgW3NldFJlbmRlclRvZ2dsZUJ1dHRvbiwgcmVuZGVyVG9nZ2xlQnV0dG9uXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB1cGRhdGVSZW5kZXJUb2dnbGVCdXR0b24oKTtcbiAgfSwgW2VkaXRvciwgdXBkYXRlUmVuZGVyVG9nZ2xlQnV0dG9uXSk7XG5cbiAgLy8gcmVzZXR0aW5nXG4gIGNvbnN0IHJlc2V0VmFsdWUgPSB1c2VDYWxsYmFjayhcbiAgICAobmV3VmFsdWU6IHN0cmluZyB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+IHtcbiAgICAgIGNvbnN0IG5ld1N0cmluZ1ZhbHVlID1cbiAgICAgICAgdHlwZW9mIG5ld1ZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICAgID8gbmV3VmFsdWVcbiAgICAgICAgICA6IG5ld1ZhbHVlPy5bcHJvcHMubGFuZ3VhZ2VdID8/ICcnO1xuXG4gICAgICByZXNldEVkaXRvcihlZGl0b3IsIG5ld1N0cmluZ1ZhbHVlKTtcbiAgICB9LFxuICAgIFtlZGl0b3IsIHByb3BzLmxhbmd1YWdlXVxuICApO1xuICAvKlxuICBSZXNldHRpbmcgdGhlIGVkaXRvciByZXF1aXJlcyBhY2Nlc3MgdG8gYGVkaXRvcmAgb2JqZWN0IHJldHVybmVkIGZyb20gYHVzZVNsYXRlYCBob29rLlxuICBUaGVyZWZvcmUsIGByZXNldGAgZnVuY3Rpb24gaXMgYXR0YWNoZWQgdG8gdGhlIHBhc3NlZCBgcmVmYCBvYmplY3QgdmlhIGB1c2VJbXBlcmF0aXZlSGFuZGxlYFxuICB0byBiZSBjYWxsZWQgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgZS5nLiA8YnV0dG9uIG9uTW91c2VEb3duPXsoKSA9PiByZWYuY3VycmVudD8ucmVzZXRWYWx1ZShcIjxwPjxzdHJvbmc+VmFsdWUgYWZ0ZXIgcmVzZXQ8L3N0cm9uZz48L3A+XCIpfT5SZXNldDwvYnV0dG9uPlxuICAqL1xuICB1c2VJbXBlcmF0aXZlSGFuZGxlKGZvcndhcmRlZFJlZiwgKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICByZXNldFZhbHVlLFxuICAgIH07XG4gIH0pO1xuXG4gIGNvbnN0IHNob3VsZFRvZ2dsZUJ1dHRvblRha2VTcGFjZSA9XG4gICAgLypcbiAgICAgIC0gaWYgaGFzTGFuZ3VhZ2VzQ29udHJvbCBhbmQgdGhlcmUgYXJlIG5vIGVycm9ycy93YXJuaW5ncyB0byBkaXNwbGF5XG4gICAgICAtIHRoZW4gdGhlIHRvZ2dsZUJ1dHRvbiBpcyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWRcbiAgICAgIFRoaXMgaXMgYmVjYXVzZSB0aGUgdG9nZ2xlIGJ1dHRvbiBpcyBwbGFjZWQgbmV4dCB0byB0aGUgTG9jYWxpemVkSW5wdXRUb2dnbGUgd2l0aG91dCBiZWluZyBzaWJsaW5ncyBpbiB0aGUgRE9NLlxuICAgICAgSWYgdGhlcmUgaXMgYSBlcnJvciBvciB3YXJuaW5nIHNob3dpbmcsXG4gICAgICB0aGVuIGl0IGNhbiBiZSBwbGFjZWQgc3RhdGljYWxseSBiZWNhdXNlIGl0IHdpbGwgdGhlbiBiZSBhIHNpYmxpbmcgdG8gdGhlIGVycm9yL3dhcm5pbmcgbWVzc2FnZVxuICAgICAgYW5kIExvY2FsaXplZElucHV0VG9nZ2xlIGlzIHBsYWNlZCBiZWxvdyB0aGUgZXJyb3JzL3dhcm5pbmdzLlxuICAgICovXG5cbiAgICAocmVuZGVyVG9nZ2xlQnV0dG9uICYmICFwcm9wcy5oYXNMYW5ndWFnZXNDb250cm9sKSB8fFxuICAgIHByb3BzLmVycm9yIHx8XG4gICAgcHJvcHMud2FybmluZztcblxuICByZXR1cm4gKFxuICAgIDxDb2xsYXBzaWJsZU1vdGlvblxuICAgICAgbWluSGVpZ2h0PXtDT0xMQVBTRURfSEVJR0hUfVxuICAgICAgaXNDbG9zZWQ9eyFwcm9wcy5pc09wZW59XG4gICAgICBvblRvZ2dsZT17b25Ub2dnbGV9XG4gICAgICBpc0RlZmF1bHRDbG9zZWQ9eyFwcm9wcy5kZWZhdWx0RXhwYW5kTXVsdGlsaW5lVGV4dH1cbiAgICA+XG4gICAgICB7KHsgaXNPcGVuLCB0b2dnbGUsIGNvbnRhaW5lclN0eWxlcywgcmVnaXN0ZXJDb250ZW50Tm9kZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZk9iaiA9IHtcbiAgICAgICAgICBjb250YWluZXJSZWY6IHJlZixcbiAgICAgICAgICByZWdpc3RlckNvbnRlbnROb2RlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFN0YWNrIHNjYWxlPVwieHNcIj5cbiAgICAgICAgICAgIDxFZGl0b3JXcmFwcGVyXG4gICAgICAgICAgICAgIGtleT17cHJvcHMubGFuZ3VhZ2V9XG4gICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e3Byb3BzLmlzRGlzYWJsZWR9XG4gICAgICAgICAgICAgIGlzUmVhZE9ubHk9e3Byb3BzLmlzUmVhZE9ubHl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxTbGF0ZVxuICAgICAgICAgICAgICAgIGVkaXRvcj17ZWRpdG9yfVxuICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy52YWx1ZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RWRpdG9yTGFuZ3VhZ2VMYWJlbFxuICAgICAgICAgICAgICAgICAgaHRtbEZvcj17cHJvcHMuaWR9XG4gICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkPXtwcm9wcy5pc0Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgaXNSZWFkT25seT17cHJvcHMuaXNSZWFkT25seX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7LyogRklYTUU6IGFkZCBwcm9wZXIgdG9uZSBmb3IgZGlzYWJsZWQgd2hlbiB0b25lcyBhcmUgcmVmYWN0b3JlZCAqL31cbiAgICAgICAgICAgICAgICAgIDxUZXh0LkRldGFpbCB0b25lPVwic2Vjb25kYXJ5XCI+XG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy5sYW5ndWFnZS50b1VwcGVyQ2FzZSgpfVxuICAgICAgICAgICAgICAgICAgPC9UZXh0LkRldGFpbD5cbiAgICAgICAgICAgICAgICA8L0VkaXRvckxhbmd1YWdlTGFiZWw+XG4gICAgICAgICAgICAgICAgPFJpY2hUZXh0Qm9keVxuICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgcmVmPXtyZWZPYmogYXMgdW5rbm93biBhcyBSZWY8VFJpY2hUZXh0RWRpdG9yQm9keVJlZj59XG4gICAgICAgICAgICAgICAgICBzdHlsZXM9e3tcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBjc3NgXG4gICAgICAgICAgICAgICAgICAgICAgZmxleDogYXV0bztcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xuICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XG4gICAgICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgaGFzRXJyb3I9e3Byb3BzLmhhc0Vycm9yfVxuICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgIGhhc1dhcm5pbmc9e3Byb3BzLmhhc1dhcm5pbmd9XG4gICAgICAgICAgICAgICAgICBpc1JlYWRPbmx5PXtCb29sZWFuKHByb3BzLmlzUmVhZE9ubHkpfVxuICAgICAgICAgICAgICAgICAgc2hvd0V4cGFuZEljb249e0Jvb2xlYW4ocHJvcHMuc2hvd0V4cGFuZEljb24pfVxuICAgICAgICAgICAgICAgICAgb25DbGlja0V4cGFuZD17cHJvcHMub25DbGlja0V4cGFuZH1cbiAgICAgICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlcz17Y29udGFpbmVyU3R5bGVzfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxFZGl0YWJsZVxuICAgICAgICAgICAgICAgICAgICB7Li4uZmlsdGVyRGF0YUF0dHJpYnV0ZXMocHJvcHMpfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPXtwcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJFbGVtZW50PXtyZW5kZXJFbGVtZW50fVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMZWFmPXtyZW5kZXJMZWFmfVxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17cHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17cHJvcHMuaXNBdXRvZm9jdXNlZH1cbiAgICAgICAgICAgICAgICAgICAgb25CbHVyPXtwcm9wcy5vbkJsdXJ9XG4gICAgICAgICAgICAgICAgICAgIG9uRm9jdXM9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHByb3BzLm9uRm9jdXM/LihldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gb3BlbnMgdGhlIGlucHV0IGlmIGl0IHJlZ2FpbnMgZm9jdXMgYW5kIGl0J3MgY2xvc2VkXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNFZGl0b3IoZWRpdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5PXtwcm9wcy5pc1JlYWRPbmx5fVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvdGtleSBpbiBIT1RLRVlTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNIb3RrZXkoaG90a2V5LCBldmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFyayA9IEhPVEtFWVNbaG90a2V5IGFzIGtleW9mIHR5cGVvZiBIT1RLRVlTXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlTWFyayhlZGl0b3IsIG1hcmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgPEhpZGRlbklucHV0XG4gICAgICAgICAgICAgICAgICAgIGlzRm9jdXNlZD17UmVhY3RFZGl0b3IuaXNGb2N1c2VkKGVkaXRvcil9XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUZvY3VzPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9jdXNFZGl0b3IoZWRpdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgaWQ9e3Byb3BzLmlkfVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuaXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk9e3Byb3BzLmlzUmVhZE9ubHl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvUmljaFRleHRCb2R5PlxuICAgICAgICAgICAgICA8L1NsYXRlPlxuICAgICAgICAgICAgPC9FZGl0b3JXcmFwcGVyPlxuICAgICAgICAgICAgPFJvd1xuICAgICAgICAgICAgICAvLyBOT1RFOiBhcHBseWluZyB0aGlzIHN0eWxlIHdpdGhpbmcgdGhlIGBzdHlsZWRgIGNvbXBvbmVudCByZXN1bHRzIGluIHRoZSBwcm9kdWN0aW9uXG4gICAgICAgICAgICAgIC8vIGJ1bmRsZSB0byBhcHBseSB0aGUgc3R5bGUgaW4gdGhlIHdyb25nIG9yZGVyLlxuICAgICAgICAgICAgICAvLyBGb3IgaW5zdGFuY2UsIHdlIG5lZWQgdG8gb3ZlcnJpZGUgdGhlIG1hcmdpbmcgb2YgdGhlIHNwYWNpbmcgY29tcG9uZW50LCB3aGljaCBhbHNvXG4gICAgICAgICAgICAgIC8vIHVzZXMgYCFpbXBvcnRhbnRgLlxuICAgICAgICAgICAgICAvLyBBbnl3YXksIGFwcGFyZW50bHkgYnkgcGFzc2luZyB0aGUgc3R5bGUgYXMgYSBgY3NzYCBwcm9wIHRvIHRoZSBgc3R5bGVkYCBjb21wb25lbnRcbiAgICAgICAgICAgICAgLy8gZG9lcyB0aGUgdHJpY2suXG4gICAgICAgICAgICAgIC8vIFRPRE86IHJldmlzaXQgdGhlIGxvZ2ljIGFuZCB0aGUgaW1wbGVtZW50YXRpb24gdG8gbWF5YmUgYXZvaWQgaGF2aW5nIHRvIGFwcGx5IHRoaXMgc3R5bGUuXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6ICR7c2hvdWxkVG9nZ2xlQnV0dG9uVGFrZVNwYWNlXG4gICAgICAgICAgICAgICAgICA/ICdpbmhlcml0J1xuICAgICAgICAgICAgICAgICAgOiAnMHB4ICFpbXBvcnRhbnQnfTtcbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgeygoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmVycm9yKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPExlZnRDb2x1bW4+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdj57cHJvcHMuZXJyb3J9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvTGVmdENvbHVtbj5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLndhcm5pbmcpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8TGVmdENvbHVtbj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pntwcm9wcy53YXJuaW5nfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L0xlZnRDb2x1bW4+XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9KSgpfVxuICAgICAgICAgICAgICB7cmVuZGVyVG9nZ2xlQnV0dG9uICYmIChcbiAgICAgICAgICAgICAgICA8UmlnaHRDb2x1bW4+XG4gICAgICAgICAgICAgICAgICA8VG9nZ2xlQnV0dG9uV3JhcHBlclxuICAgICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgICAhc2hvdWxkVG9nZ2xlQnV0dG9uVGFrZVNwYWNlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxGbGF0QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dG9nZ2xlfVxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICBpc09wZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBtZXNzYWdlc011bHRpbGluZUlucHV0LmNvbGxhcHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbWVzc2FnZXNNdWx0aWxpbmVJbnB1dC5leHBhbmRcbiAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgIGljb249e1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNPcGVuID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QW5nbGVVcEljb24gc2l6ZT1cInNtYWxsXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxBbmdsZURvd25JY29uIHNpemU9XCJzbWFsbFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9Ub2dnbGVCdXR0b25XcmFwcGVyPlxuICAgICAgICAgICAgICAgIDwvUmlnaHRDb2x1bW4+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICApO1xuICAgICAgfX1cbiAgICA8L0NvbGxhcHNpYmxlTW90aW9uPlxuICApO1xufSk7XG5FZGl0b3IuZGlzcGxheU5hbWUgPSAnRWRpdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgRWRpdG9yO1xuIl19 */"),
          children: [(() => {
            if (props.error) return jsx(LeftColumn, {
              children: jsx("div", {
                children: props.error
              })
            });
            if (props.warning) return jsx(LeftColumn, {
              children: jsx("div", {
                children: props.warning
              })
            });
            return null;
          })(), renderToggleButton && jsx(RightColumn, {
            children: jsx(ToggleButtonWrapper, {
              css: [!shouldToggleButtonTakeSpace && /*#__PURE__*/css("position:absolute;top:0;right:0;margin-top:", designTokens.spacing10, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:Editor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), process.env.NODE_ENV === "production" ? "" : ";label:Editor;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"],
              children: jsx(FlatButton, {
                onClick: toggle,
                label: intl.formatMessage(isOpen ? messagesMultilineInput.collapse : messagesMultilineInput.expand),
                icon: isOpen ? jsx(AngleUpIcon, {
                  size: "small"
                }) : jsx(AngleDownIcon, {
                  size: "small"
                })
              })
            })
          })]
        })]
      });
    }
  });
});
Editor.displayName = 'Editor';
var Editor$1 = Editor;

function ownKeys$2(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys$2(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys$2(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
let RichTextInput = /*#__PURE__*/function (_PureComponent) {
  _inherits(RichTextInput, _PureComponent);
  var _super = _createSuper(RichTextInput);
  function RichTextInput() {
    var _this;
    _classCallCheck(this, RichTextInput);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call(this, ...args);
    _this.serializedValue = _this.props.value || '';
    _this.internalSlateValue = validSlateStateAdapter(html.deserialize(_this.props.value || ''));
    _this.onValueChange = state => {
      const serializedValue = html.serialize(state);

      // because we are not using setState, we need to make sure that
      // we perform an update when the slate value changes
      // as this can contain things like cursor location
      // in this case, the internalSlateValue would change
      // but the serializedValue would NOT change.
      const hasInternalSlateValueChanged = _this.internalSlateValue !== state;
      const hasSerializedValueChanged = serializedValue !== _this.serializedValue;
      _this.internalSlateValue = validSlateStateAdapter(state);
      _this.serializedValue = serializedValue;

      // the consumer only cares about the serializedValue, so it doesn't make sense to call
      // onChange unless this value changes.
      if (hasSerializedValueChanged) {
        var _this$props$onChange, _this$props;
        (_this$props$onChange = (_this$props = _this.props).onChange) === null || _this$props$onChange === void 0 ? void 0 : _this$props$onChange.call(_this$props, html.serialize(state));
      }
      if (hasInternalSlateValueChanged && !hasSerializedValueChanged) {
        // this way we force update if cursor or selection changes
        _this.forceUpdate();
      }
    };
    return _this;
  }
  _createClass(RichTextInput, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.props.value !== this.serializedValue) {
        this.internalSlateValue = validSlateStateAdapter(html.deserialize(this.props.value));
        this.serializedValue = this.props.value;
        this.forceUpdate();
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.props.isReadOnly) {
        process.env.NODE_ENV !== "production" ? warning(typeof this.props.onChange === 'function', 'RichTextInput: `onChange` is required when input is not read only.') : void 0;
      }
      if (this.props.showExpandIcon) {
        process.env.NODE_ENV !== "production" ? warning(typeof this.props.onClickExpand === 'function', 'RichTextInput: "onClickExpand" is required when showExpandIcon is true') : void 0;
      }
      return jsx(Editor$1, _objectSpread$2(_objectSpread$2({}, filterDataAttributes(this.props)), {}, {
        name: this.props.name,
        isReadOnly: this.props.isReadOnly,
        onChange: this.onValueChange,
        id: this.props.id,
        value: this.internalSlateValue,
        onFocus: this.props.onFocus,
        onBlur: this.props.onBlur,
        isDisabled: this.props.isDisabled,
        defaultExpandMultilineText: this.props.defaultExpandMultilineText,
        hasWarning: this.props.hasWarning,
        hasError: this.props.hasError,
        placeholder: this.props.placeholder,
        showExpandIcon: this.props.showExpandIcon,
        onClickExpand: this.props.onClickExpand,
        language: this.props.language,
        toggleLanguage: this.props.toggleLanguage,
        isOpen: this.props.isOpen,
        warning: this.props.warning,
        error: this.props.error,
        hasLanguagesControl: this.props.hasLanguagesControl,
        ref: this.props.parentRef
      }));
    }
  }]);
  return RichTextInput;
}(PureComponent);
RichTextInput.defaultProps = {
  defaultExpandMultilineText: false,
  placeholder: ''
};
RichTextInput.displayName = 'RichTextInput';
RichTextInput.propTypes = process.env.NODE_ENV !== "production" ? {
  name: _pt.string,
  onChange: _pt.func,
  value: _pt.string.isRequired,
  parentRef: _pt.any,
  language: _pt.string.isRequired,
  isOpen: _pt.bool.isRequired,
  toggleLanguage: _pt.func.isRequired,
  warning: _pt.node,
  error: _pt.string
} : {};
const RichTextInputWithRef = /*#__PURE__*/forwardRef((props, ref) => jsx(RichTextInput, _objectSpread$2({
  parentRef: ref
}, props)));
RichTextInputWithRef.displayName = 'RichTextInputWithRef';
var RichTextInput$1 = RichTextInputWithRef;

function ownKeys$1(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys$1(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys$1(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const RequiredValueErrorMessage = () => jsx(ErrorMessage, {
  children: jsx(FormattedMessage, _objectSpread$1({}, messagesLocalizedInput.missingRequiredField))
});
RequiredValueErrorMessage.displayName = 'RequiredValueErrorMessage';
var RequiredValueErrorMessage$1 = RequiredValueErrorMessage;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context6, _context7; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context6 = ownKeys(Object(source), !0)).call(_context6, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context7 = ownKeys(Object(source))).call(_context7, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
const defaultProps = {
  horizontalConstraint: 'scale',
  showExpandIcon: false
};
const expandedTranslationsReducer = (state, action) => {
  switch (action.type) {
    case 'toggle':
      return _objectSpread(_objectSpread({}, state), {}, {
        [action.payload]: !state[action.payload]
      });
    case 'toggleAll':
      {
        var _context;
        const newState = _reduceInstanceProperty(_context = _Object$keys(state)).call(_context, (translations, locale) => {
          return _objectSpread({
            [locale]: true
          }, translations);
        }, {});
        return newState;
      }
    default:
      return state;
  }
};

// This component supports expanding/collapsing rich text inputs, but it also
// supports showing/hiding the remaining languages.
// These two features are both about opening/closing something, and so the code
// can get quite confusing. We try to stick to expand/collapse for the
// multiline inputs, while we use show/hide/open/close for the remaining
// languages.
const LocalizedRichTextInput = /*#__PURE__*/forwardRef((props, ref) => {
  var _context2;
  if (!props.isReadOnly) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.onChange === 'function', 'LocalizedRichTextInput: `onChange` is required when input is not read only.') : void 0;
  }
  if (props.showExpandIcon) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.onClickExpand === 'function', 'LocalizedRichTextInput: "onClickExpand" is required when showExpandIcon is true') : void 0;
  }
  if (props.hideLanguageExpansionControls) {
    process.env.NODE_ENV !== "production" ? warning(typeof props.defaultExpandLanguages !== 'boolean', 'LocalizedRichTextInput: "defaultExpandLanguages" does not have any effect when "hideLanguageExpansionControls" is set.') : void 0;
  }
  const initialExpandedTranslationsState = _reduceInstanceProperty(_context2 = _Object$keys(props.value)).call(_context2, (translations, locale) => _objectSpread(_objectSpread({}, translations), {}, {
    [locale]: Boolean(props.defaultExpandMultilineText)
  }), {});
  const _useReducer = useReducer(expandedTranslationsReducer, initialExpandedTranslationsState),
    _useReducer2 = _slicedToArray(_useReducer, 2),
    expandedTranslationsState = _useReducer2[0],
    expandedTranslationsDispatch = _useReducer2[1];
  const defaultExpansionState = Boolean(props.hideLanguageExpansionControls || props.defaultExpandLanguages);
  const _useToggleState = useToggleState(defaultExpansionState),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    areLanguagesOpened = _useToggleState2[0],
    toggleLanguages = _useToggleState2[1];
  const toggleLanguage = useCallback(language => {
    expandedTranslationsDispatch({
      type: 'toggle',
      payload: language
    });
  }, [expandedTranslationsDispatch]);
  const createChangeHandler = useCallback(language => state => {
    var _props$onChange, _context3, _context4;
    (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
      target: {
        id: props !== null && props !== void 0 && props.id ? _concatInstanceProperty(_context3 = "".concat(props.id, ".")).call(_context3, language) : '',
        name: props !== null && props !== void 0 && props.name ? _concatInstanceProperty(_context4 = "".concat(props.name, ".")).call(_context4, language) : '',
        language,
        value: state
      }
    });
  },
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [props.id, props.name, props.onChange]);
  const languages = sortLanguages(props.selectedLanguage, _Object$keys(props.value));
  const hasErrorInRemainingLanguages = props.hasError || getHasErrorOnRemainingLanguages(props.errors, props.selectedLanguage);
  const hasWarningInRemainingLanguages = props.hasWarning || getHasWarningOnRemainingLanguages(props.warnings, props.selectedLanguage);
  if (hasErrorInRemainingLanguages || hasWarningInRemainingLanguages) {
    if (!areLanguagesOpened) {
      // this update within render replaces the old `getDerivedStateFromProps` functionality
      // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops
      toggleLanguages();
    }
  }
  const langRefs = useRef(new _Map());
  const resetValue = useCallback(newValue => {
    var _context5;
    _forEachInstanceProperty(_context5 = langRefs.current).call(_context5, langRef => {
      langRef === null || langRef === void 0 ? void 0 : langRef.resetValue(newValue);
    });
  }, []);
  useImperativeHandle(ref, () => {
    return {
      resetValue
    };
  });
  const shouldRenderLanguagesControl = languages.length > 1 && !props.hideLanguageExpansionControls;
  return jsx(Constraints.Horizontal, {
    max: props.horizontalConstraint,
    children: jsxs(Stack, {
      scale: "xs",
      children: [jsx(Stack, {
        children: _mapInstanceProperty(languages).call(languages, (language, index) => {
          const isFirstLanguage = index === 0;
          if (!isFirstLanguage && !areLanguagesOpened) return null;
          const isLastLanguage = index === languages.length - 1;
          const hasLanguagesControl = isFirstLanguage && !areLanguagesOpened || isLastLanguage;
          return createElement(RichTextInput$1, _objectSpread(_objectSpread({}, filterDataAttributes(props)), {}, {
            key: language,
            id: getId(props.id, language),
            name: getName(props.name, language),
            value: props.value[language],
            onChange: createChangeHandler(language),
            language: language,
            isOpen: expandedTranslationsState[language],
            toggleLanguage: toggleLanguage,
            placeholder: props.placeholder ? props.placeholder[language] : undefined,
            onBlur: props.onBlur,
            onFocus: props.onFocus,
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            hasError: Boolean(props.hasError || props.errors && props.errors[language]),
            hasWarning: Boolean(props.hasWarning || props.warnings && props.warnings[language]),
            warning: props.warnings && props.warnings[language],
            error: props.errors && props.errors[language],
            showExpandIcon: props.showExpandIcon,
            onClickExpand: props.onClickExpand,
            hasLanguagesControl: hasLanguagesControl,
            defaultExpandMultilineText: Boolean(props.defaultExpandMultilineText),
            ref: el => langRefs.current.set(language, el)
          }, createLocalizedDataAttributes(props, language)));
        })
      }), shouldRenderLanguagesControl && jsx(LocalizedInputToggle, {
        isOpen: areLanguagesOpened,
        onClick: toggleLanguages,
        isDisabled: areLanguagesOpened && Boolean(hasErrorInRemainingLanguages || hasWarningInRemainingLanguages),
        remainingLocalizations: languages.length - 1
      })]
    })
  });
});
LocalizedRichTextInput.displayName = 'LocalizedRichTextInput';
LocalizedRichTextInput.RequiredValueErrorMessage = RequiredValueErrorMessage$1;
LocalizedRichTextInput.getId = getId;
LocalizedRichTextInput.getName = getName;
LocalizedRichTextInput.defaultProps = defaultProps;
LocalizedRichTextInput.createLocalizedString = localized.createLocalizedString;
LocalizedRichTextInput.isEmpty = localized.isEmpty;
LocalizedRichTextInput.omitEmptyTranslations = localized.omitEmptyTranslations;
LocalizedRichTextInput.isTouched = isTouched;
var LocalizedRichTextInput$1 = LocalizedRichTextInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { LocalizedRichTextInput$1 as default, version };
