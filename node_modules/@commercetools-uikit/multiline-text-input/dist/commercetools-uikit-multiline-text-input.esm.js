import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _pt from 'prop-types';
import _trimInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/trim';
import { useState, useCallback } from 'react';
import { useIntl } from 'react-intl';
import '@emotion/react';
import { AngleUpIcon, AngleDownIcon } from '@commercetools-uikit/icons';
import FlatButton from '@commercetools-uikit/flat-button';
import { useToggleState } from '@commercetools-uikit/hooks';
import { filterDataAttributes } from '@commercetools-uikit/utils';
import Stack from '@commercetools-uikit/spacings-stack';
import Constraints from '@commercetools-uikit/constraints';
import { MultilineInput, messagesMultilineInput } from '@commercetools-uikit/input-utils';
import { jsx, jsxs } from '@emotion/react/jsx-runtime';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const defaultProps = {
  defaultExpandMultilineText: false
};
var _ref = process.env.NODE_ENV === "production" ? {
  name: "skgbeu",
  styles: "display:flex;justify-content:flex-end"
} : {
  name: "7hlegj-MultilineTextInput",
  styles: "display:flex;justify-content:flex-end;label:MultilineTextInput;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm11bHRpbGluZS10ZXh0LWlucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtS29CIiwiZmlsZSI6Im11bHRpbGluZS10ZXh0LWlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHVzZVN0YXRlLFxuICB1c2VDYWxsYmFjayxcbiAgdHlwZSBDaGFuZ2VFdmVudEhhbmRsZXIsXG4gIHR5cGUgRm9jdXNFdmVudEhhbmRsZXIsXG59IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IEFuZ2xlVXBJY29uLCBBbmdsZURvd25JY29uIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvaWNvbnMnO1xuaW1wb3J0IEZsYXRCdXR0b24gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZmxhdC1idXR0b24nO1xuaW1wb3J0IHsgdXNlVG9nZ2xlU3RhdGUgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9ob29rcyc7XG5pbXBvcnQgeyBmaWx0ZXJEYXRhQXR0cmlidXRlcyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L3V0aWxzJztcbmltcG9ydCBTdGFjayBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1zdGFjayc7XG5pbXBvcnQgQ29uc3RyYWludHMgZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvY29uc3RyYWludHMnO1xuaW1wb3J0IHtcbiAgTXVsdGlsaW5lSW5wdXQsXG4gIG1lc3NhZ2VzTXVsdGlsaW5lSW5wdXQsXG59IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2lucHV0LXV0aWxzJztcblxuZXhwb3J0IHR5cGUgVE11bHRpbGluZVRleHRJbnB1dFByb3BzID0ge1xuICAvKipcbiAgICogVXNlZCBhcyBIVE1MIG5hbWUgb2YgdGhlIGlucHV0IGNvbXBvbmVudC4gcHJvcGVydHlcbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpbiB0aGUgaW5wdXQgaXMgaW52YWxpZC5cbiAgICovXG4gICdhcmlhLWludmFsaWQnPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEhUTUwgSUQgb2YgYW4gZWxlbWVudCBjb250YWluaW5nIGFuIGVycm9yIG1lc3NhZ2UgcmVsYXRlZCB0byB0aGUgaW5wdXQuXG4gICAqL1xuICAnYXJpYS1lcnJvcm1lc3NhZ2UnPzogc3RyaW5nO1xuICAvKipcbiAgICogVXNlZCBhcyBIVE1MIGBhdXRvY29tcGxldGVgIHByb3BlcnR5XG4gICAqL1xuICBhdXRvQ29tcGxldGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBVc2VkIGFzIEhUTUwgaWQgcHJvcGVydHkuIEFuIGlkIGlzIGF1dG8tZ2VuZXJhdGVkIHdoZW4gaXQgaXMgbm90IHNwZWNpZmllZC5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIGlucHV0IGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDYWxsZWQgd2l0aCBhbiBldmVudCBjb250YWluaW5nIHRoZSBuZXcgdmFsdWUuIFJlcXVpcmVkIHdoZW4gaW5wdXQgaXMgbm90IHJlYWQgb25seS4gUGFyZW50IHNob3VsZCBwYXNzIGl0IGJhY2sgYXMgdmFsdWUuXG4gICAqL1xuICBvbkNoYW5nZT86IENoYW5nZUV2ZW50SGFuZGxlcjxIVE1MVGV4dEFyZWFFbGVtZW50PjtcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGlucHV0IGlzIGJsdXJyZWRcbiAgICovXG4gIG9uQmx1cj86IEZvY3VzRXZlbnRIYW5kbGVyPEhUTUxUZXh0QXJlYUVsZW1lbnQ+O1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gaW5wdXQgaXMgZm9jdXNlZFxuICAgKi9cbiAgb25Gb2N1cz86IEZvY3VzRXZlbnRIYW5kbGVyPEhUTUxUZXh0QXJlYUVsZW1lbnQ+O1xuICAvKipcbiAgICogRm9jdXMgdGhlIGlucHV0IG9uIGluaXRpYWwgcmVuZGVyXG4gICAqL1xuICBpc0F1dG9mb2N1c3NlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBFeHBhbmRzIG11bHRpbGluZSB0ZXh0IGlucHV0IGluaXRpYWxseVxuICAgKi9cbiAgZGVmYXVsdEV4cGFuZE11bHRpbGluZVRleHQ/OiBib29sZWFuO1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgdGhlIGlucHV0IGNhbm5vdCBiZSBtb2RpZmllZCAoZS5nIG5vdCBhdXRob3JpemVkLCBvciBjaGFuZ2VzIGN1cnJlbnRseSBzYXZpbmcpLlxuICAgKi9cbiAgaXNEaXNhYmxlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgZmllbGQgaXMgZGlzcGxheWluZyByZWFkLW9ubHkgY29udGVudFxuICAgKi9cbiAgaXNSZWFkT25seT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBQbGFjZWhvbGRlciB0ZXh0IGZvciB0aGUgaW5wdXRcbiAgICovXG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgaW5wdXQgaGFzIGVycm9yc1xuICAgKi9cbiAgaGFzRXJyb3I/OiBib29sZWFuO1xuICAvKipcbiAgICogQ29udHJvbCB0byBpbmRpY2F0ZSBvbiB0aGUgaW5wdXQgaWYgdGhlcmUgYXJlIHNlbGVjdGVkIHZhbHVlcyB0aGF0IGFyZSBwb3RlbnRpYWxseSBpbnZhbGlkXG4gICAqL1xuICBoYXNXYXJuaW5nPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEhvcml6b250YWwgc2l6ZSBsaW1pdCBvZiB0aGUgaW5wdXQgZmllbGRzLlxuICAgKi9cbiAgaG9yaXpvbnRhbENvbnN0cmFpbnQ/OlxuICAgIHwgNlxuICAgIHwgN1xuICAgIHwgOFxuICAgIHwgOVxuICAgIHwgMTBcbiAgICB8IDExXG4gICAgfCAxMlxuICAgIHwgMTNcbiAgICB8IDE0XG4gICAgfCAxNVxuICAgIHwgMTZcbiAgICB8ICdzY2FsZSdcbiAgICB8ICdhdXRvJztcbn07XG5cbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxcbiAgVE11bHRpbGluZVRleHRJbnB1dFByb3BzLFxuICAnZGVmYXVsdEV4cGFuZE11bHRpbGluZVRleHQnXG4+ID0ge1xuICBkZWZhdWx0RXhwYW5kTXVsdGlsaW5lVGV4dDogZmFsc2UsXG59O1xuXG5jb25zdCBNdWx0aWxpbmVUZXh0SW5wdXQgPSAocHJvcHM6IFRNdWx0aWxpbmVUZXh0SW5wdXRQcm9wcykgPT4ge1xuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuICBjb25zdCBbc2hvdWxkUmVuZGVyVG9nZ2xlQnV0dG9uLCBzZXRTaG91bGRSZW5kZXJUb2dnbGVCdXR0b25dID1cbiAgICB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgW2lzT3BlbiwgdG9nZ2xlXSA9IHVzZVRvZ2dsZVN0YXRlKHByb3BzLmRlZmF1bHRFeHBhbmRNdWx0aWxpbmVUZXh0KTtcblxuICBjb25zdCB7IG9uRm9jdXMgfSA9IHByb3BzO1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IHVzZUNhbGxiYWNrPEZvY3VzRXZlbnRIYW5kbGVyPEhUTUxUZXh0QXJlYUVsZW1lbnQ+PihcbiAgICAoZXZlbnQpID0+IHtcbiAgICAgIGlmICghaXNPcGVuKSB0b2dnbGUodHJ1ZSk7XG4gICAgICBpZiAob25Gb2N1cykgb25Gb2N1cyhldmVudCk7XG4gICAgfSxcbiAgICBbaXNPcGVuLCBvbkZvY3VzLCB0b2dnbGVdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlSGVpZ2h0Q2hhbmdlID0gdXNlQ2FsbGJhY2s8XG4gICAgKGhlaWdodDogbnVtYmVyLCByb3dDb3VudDogbnVtYmVyKSA9PiB2b2lkXG4gID4oXG4gICAgKF8sIHJvd0NvdW50KSA9PiB7XG4gICAgICAvLyBUaGlzIGNoZWNrcyBpZiB0aGUgY29udGVudCBpbiB0aGUgdGV4dGFyZWEgaXMgZ3JlYXRlciB0aGFuIG9uZSByb3cuIElmIGl0IGlzLCB0aGVuIHRoZSB0b2dnbGUgYnV0dG9uIHdpbGwgYmUgc2hvd24uXG4gICAgICAvLyBUaGlzIGlzIHRvIHByZXZlbnQgdGhlIHRvZ2dsZSBidXR0b24gZnJvbSBzaG93aW5nIHdoZW4gdGhlcmUgaXMgbm90IGVub3VnaCBjb250ZW50IHRvIGV4cGFuZC9jb2xsYXBzZS5cbiAgICAgIHNldFNob3VsZFJlbmRlclRvZ2dsZUJ1dHRvbihyb3dDb3VudCA+IDEpO1xuICAgIH0sXG4gICAgW3NldFNob3VsZFJlbmRlclRvZ2dsZUJ1dHRvbl1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxDb25zdHJhaW50cy5Ib3Jpem9udGFsIG1heD17cHJvcHMuaG9yaXpvbnRhbENvbnN0cmFpbnR9PlxuICAgICAgPFN0YWNrIHNjYWxlPVwieHNcIj5cbiAgICAgICAgPE11bHRpbGluZUlucHV0XG4gICAgICAgICAgbmFtZT17cHJvcHMubmFtZX1cbiAgICAgICAgICBhdXRvQ29tcGxldGU9e3Byb3BzLmF1dG9Db21wbGV0ZX1cbiAgICAgICAgICB2YWx1ZT17cHJvcHMudmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9e3Byb3BzLm9uQ2hhbmdlfVxuICAgICAgICAgIG9uSGVpZ2h0Q2hhbmdlPXtoYW5kbGVIZWlnaHRDaGFuZ2V9XG4gICAgICAgICAgaWQ9e3Byb3BzLmlkfVxuICAgICAgICAgIG9uQmx1cj17cHJvcHMub25CbHVyfVxuICAgICAgICAgIG9uRm9jdXM9e2hhbmRsZUZvY3VzfVxuICAgICAgICAgIGlzRGlzYWJsZWQ9e3Byb3BzLmlzRGlzYWJsZWR9XG4gICAgICAgICAgaGFzRXJyb3I9e3Byb3BzLmhhc0Vycm9yfVxuICAgICAgICAgIGhhc1dhcm5pbmc9e3Byb3BzLmhhc1dhcm5pbmd9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9e3Byb3BzLnBsYWNlaG9sZGVyfVxuICAgICAgICAgIGlzUmVhZE9ubHk9e3Byb3BzLmlzUmVhZE9ubHl9XG4gICAgICAgICAgaXNBdXRvZm9jdXNzZWQ9e3Byb3BzLmlzQXV0b2ZvY3Vzc2VkfVxuICAgICAgICAgIGlzT3Blbj17aXNPcGVufVxuICAgICAgICAgIHsuLi5maWx0ZXJEYXRhQXR0cmlidXRlcyhwcm9wcyl9XG4gICAgICAgICAgLyogQVJJQSAqL1xuICAgICAgICAgIGFyaWEtaW52YWxpZD17cHJvcHNbJ2FyaWEtaW52YWxpZCddfVxuICAgICAgICAgIGFyaWEtZXJyb3JtZXNzYWdlPXtwcm9wc1snYXJpYS1lcnJvcm1lc3NhZ2UnXX1cbiAgICAgICAgLz5cbiAgICAgICAge3Nob3VsZFJlbmRlclRvZ2dsZUJ1dHRvbiAmJiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgICAgICBgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxGbGF0QnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZSgpfVxuICAgICAgICAgICAgICBpc0Rpc2FibGVkPXtwcm9wcy5pc0Rpc2FibGVkfVxuICAgICAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKFxuICAgICAgICAgICAgICAgIGlzT3BlblxuICAgICAgICAgICAgICAgICAgPyBtZXNzYWdlc011bHRpbGluZUlucHV0LmNvbGxhcHNlXG4gICAgICAgICAgICAgICAgICA6IG1lc3NhZ2VzTXVsdGlsaW5lSW5wdXQuZXhwYW5kXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIGljb249e1xuICAgICAgICAgICAgICAgIGlzT3BlbiA/IChcbiAgICAgICAgICAgICAgICAgIDxBbmdsZVVwSWNvbiBzaXplPVwic21hbGxcIiAvPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICA8QW5nbGVEb3duSWNvbiBzaXplPVwic21hbGxcIiAvPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvU3RhY2s+XG4gICAgPC9Db25zdHJhaW50cy5Ib3Jpem9udGFsPlxuICApO1xufTtcblxuTXVsdGlsaW5lVGV4dElucHV0LmRpc3BsYXlOYW1lID0gJ011bHRpbGluZVRleHRJbnB1dCc7XG5cbk11bHRpbGluZVRleHRJbnB1dC5pc0VtcHR5ID0gKHZhbHVlOiBUTXVsdGlsaW5lVGV4dElucHV0UHJvcHNbJ3ZhbHVlJ10pID0+XG4gICF2YWx1ZSB8fCB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwO1xuTXVsdGlsaW5lVGV4dElucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgTXVsdGlsaW5lVGV4dElucHV0O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const MultilineTextInput = props => {
  const intl = useIntl();
  const _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    shouldRenderToggleButton = _useState2[0],
    setShouldRenderToggleButton = _useState2[1];
  const _useToggleState = useToggleState(props.defaultExpandMultilineText),
    _useToggleState2 = _slicedToArray(_useToggleState, 2),
    isOpen = _useToggleState2[0],
    toggle = _useToggleState2[1];
  const onFocus = props.onFocus;
  const handleFocus = useCallback(event => {
    if (!isOpen) toggle(true);
    if (onFocus) onFocus(event);
  }, [isOpen, onFocus, toggle]);
  const handleHeightChange = useCallback((_, rowCount) => {
    // This checks if the content in the textarea is greater than one row. If it is, then the toggle button will be shown.
    // This is to prevent the toggle button from showing when there is not enough content to expand/collapse.
    setShouldRenderToggleButton(rowCount > 1);
  }, [setShouldRenderToggleButton]);
  return jsx(Constraints.Horizontal, {
    max: props.horizontalConstraint,
    children: jsxs(Stack, {
      scale: "xs",
      children: [jsx(MultilineInput, _objectSpread(_objectSpread({
        name: props.name,
        autoComplete: props.autoComplete,
        value: props.value,
        onChange: props.onChange,
        onHeightChange: handleHeightChange,
        id: props.id,
        onBlur: props.onBlur,
        onFocus: handleFocus,
        isDisabled: props.isDisabled,
        hasError: props.hasError,
        hasWarning: props.hasWarning,
        placeholder: props.placeholder,
        isReadOnly: props.isReadOnly,
        isAutofocussed: props.isAutofocussed,
        isOpen: isOpen
      }, filterDataAttributes(props)), {}, {
        /* ARIA */
        "aria-invalid": props['aria-invalid'],
        "aria-errormessage": props['aria-errormessage']
      })), shouldRenderToggleButton && jsx("div", {
        css: _ref,
        children: jsx(FlatButton, {
          onClick: () => toggle(),
          isDisabled: props.isDisabled,
          label: intl.formatMessage(isOpen ? messagesMultilineInput.collapse : messagesMultilineInput.expand),
          icon: isOpen ? jsx(AngleUpIcon, {
            size: "small"
          }) : jsx(AngleDownIcon, {
            size: "small"
          })
        })
      })]
    })
  });
};
MultilineTextInput.propTypes = process.env.NODE_ENV !== "production" ? {
  name: _pt.string,
  'aria-invalid': _pt.bool,
  'aria-errormessage': _pt.string,
  autoComplete: _pt.string,
  id: _pt.string,
  value: _pt.string.isRequired,
  onChange: _pt.func,
  onBlur: _pt.func,
  onFocus: _pt.func,
  isAutofocussed: _pt.bool,
  defaultExpandMultilineText: _pt.bool,
  isDisabled: _pt.bool,
  isReadOnly: _pt.bool,
  placeholder: _pt.string,
  hasError: _pt.bool,
  hasWarning: _pt.bool,
  horizontalConstraint: _pt.oneOf([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto'])
} : {};
MultilineTextInput.displayName = 'MultilineTextInput';
MultilineTextInput.isEmpty = value => !value || _trimInstanceProperty(value).call(value).length === 0;
MultilineTextInput.defaultProps = defaultProps;
var MultilineTextInput$1 = MultilineTextInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

export { MultilineTextInput$1 as default, version };
