'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _styled = require('@emotion/styled/base');
require('prop-types');
var react$1 = require('react');
var reactRouterDom = require('react-router-dom');
var react = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var utils = require('@commercetools-uikit/utils');
var Inline = require('@commercetools-uikit/spacings-inline');
var Text = require('@commercetools-uikit/text');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _styled__default = /*#__PURE__*/_interopDefault(_styled);
var Inline__default = /*#__PURE__*/_interopDefault(Inline);
var Text__default = /*#__PURE__*/_interopDefault(Text);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const defaultProps = {
  isDisabled: false,
  isExternal: false
};
const hoverStyles = /*#__PURE__*/react.css("&:hover,&:focus,&:active{span{color:", designSystem.designTokens.colorPrimary25, ";}svg *{fill:", designSystem.designTokens.colorPrimary25, ";}}" + ("" ), "" );
const StyledExternalLink = /*#__PURE__*/_styled__default["default"]("a", {
  target: "e8da6550"
} )("display:inline-flex;align-items:center;font-size:1rem;border:none;background:none;padding:0;min-height:initial;text-decoration:none;span{color:", props => props.disabled ? designSystem.designTokens.colorNeutral : designSystem.designTokens.colorPrimary, ";}cursor:", props => props.disabled ? 'not-allowed' : 'pointer', ";", props => !props.disabled && hoverStyles, ";" + ("" ));
const LinkBody = props => jsxRuntime.jsxs(Inline__default["default"], {
  scale: "xs",
  alignItems: "center",
  children: [props.iconLeft ? /*#__PURE__*/react$1.cloneElement(props.iconLeft, {
    size: 'medium',
    color: props.disabled ? 'neutral60' : 'primary'
  }) : null, jsxRuntime.jsx(Text__default["default"].Body, {
    as: "span",
    children: props.label
  })]
});
LinkBody.displayName = 'LinkBody';
const LinkButton = props => {
  utils.useWarnDeprecatedComponent('LinkButton');
  const remainingProps = utils.filterInvalidAttributes(props);
  if (props.isExternal) {
    if (typeof props.to !== 'string') {
      throw new Error('`to` must be a `string` when `isExternal` is provided.');
    }
    return (
      // @ts-ignore: the `to` prop in this case is not required
      // to be provided, instead the `href` is.
      jsxRuntime.jsx(StyledExternalLink, _objectSpread(_objectSpread({
        href: props.to,
        onClick: props.isDisabled ? event => event.preventDefault() : undefined,
        disabled: props.isDisabled,
        "data-track-component": "LinkButton",
        "aria-label": props.label
      }, remainingProps), {}, {
        children: jsxRuntime.jsx(LinkBody, {
          iconLeft: props.iconLeft,
          disabled: props.isDisabled,
          label: props.label
        })
      }))
    );
  }
  return jsxRuntime.jsx(StyledExternalLink, _objectSpread(_objectSpread({
    as: reactRouterDom.Link,
    to: props.to,
    disabled: props.isDisabled,
    onClick: props.isDisabled ? event => event.preventDefault() : undefined,
    "data-track-component": "LinkButton",
    "aria-label": props.label
  }, remainingProps), {}, {
    children: jsxRuntime.jsx(LinkBody, {
      iconLeft: props.iconLeft,
      disabled: props.isDisabled,
      label: props.label
    })
  }));
};
LinkButton.propTypes = {};
LinkButton.displayName = 'LinkButton';
LinkButton.defaultProps = defaultProps;
var LinkButton$1 = LinkButton;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = LinkButton$1;
exports.version = version;
