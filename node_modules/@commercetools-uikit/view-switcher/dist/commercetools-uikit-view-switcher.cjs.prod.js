'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
require('prop-types');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var react$1 = require('react');
var isNil = require('lodash/isNil');
var react = require('@emotion/react');
var AccessibleButton = require('@commercetools-uikit/accessible-button');
var designSystem = require('@commercetools-uikit/design-system');
require('@commercetools-uikit/utils');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var isNil__default = /*#__PURE__*/_interopDefault(isNil);
var AccessibleButton__default = /*#__PURE__*/_interopDefault(AccessibleButton);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);

const getSizeStyles = isCondensed => {
  if (isCondensed) {
    return /*#__PURE__*/react.css("padding:", designSystem.designTokens.paddingForViewSwitcherWhenCondensed, ";height:", designSystem.designTokens.heightForViewSwitcherWhenCondensed, ";" + ("" ), "" );
  }
  return /*#__PURE__*/react.css("padding:", designSystem.designTokens.paddingForViewSwitcher, ";height:", designSystem.designTokens.heightForViewSwitcher, ";" + ("" ), "" );
};
const getFontColor = (isDisabled, isActive) => {
  if (isDisabled) return designSystem.designTokens.fontColorForViewSwitcherWhenDisabled;
  if (isActive) return designSystem.designTokens.fontColorForViewSwitcherWhenSelected;
  return designSystem.designTokens.fontColorForViewSwitcher;
};
const getButtonStyles = (isDisabled, isActive, isCondensed, isFirstButton, isLastButton) => {
  var _context, _context2, _context3;
  const borderRadius = _concatInstanceProperty__default["default"](_context = _concatInstanceProperty__default["default"](_context2 = "".concat(isFirstButton ? designSystem.designTokens.borderRadiusForViewSwitcher : '0', " ")).call(_context2, isLastButton ? _concatInstanceProperty__default["default"](_context3 = "".concat(designSystem.designTokens.borderRadiusForViewSwitcher, " ")).call(_context3, designSystem.designTokens.borderRadiusForViewSwitcher) : '0 0', " ")).call(_context, isFirstButton ? designSystem.designTokens.borderRadiusForViewSwitcher : '0');
  const fontColor = getFontColor(isDisabled, isActive);
  return [/*#__PURE__*/react.css("align-items:center;color:", fontColor, ";fill:", fontColor, ";transition:background-color ", designSystem.designTokens.transitionLinear80Ms, ";font-size:", designSystem.designTokens.fontSizeDefault, ";border:", designSystem.designTokens.borderForViewSwitcher, ";border-left:", isFirstButton ? designSystem.designTokens.borderForViewSwitcher : '0', ";border-radius:", borderRadius, ";box-shadow:", designSystem.designTokens.boxShadowForViewSwitcher, ";background-color:", designSystem.designTokens.backgroundColorForViewSwitcher, ";&:hover{background-color:", designSystem.designTokens.backgroundColorForViewSwitcherWhenHovered, ";}&:active{background-color:", designSystem.designTokens.backgroundColorForViewSwitcherWhenSelected, ";}", getSizeStyles(isCondensed), ";" + ("" ), "" ), isDisabled && /*#__PURE__*/react.css("background-color:", designSystem.designTokens.backgroundColorForViewSwitcherWhenDisabled, ";color:", designSystem.designTokens.fontColorForViewSwitcherWhenDisabled, ";&:hover{background-color:", designSystem.designTokens.backgroundColorForViewSwitcherWhenDisabled, ";}" + ("" ), "" ), isActive && /*#__PURE__*/react.css("background-color:", designSystem.designTokens.backgroundColorForViewSwitcherWhenSelected, ";box-shadow:", designSystem.designTokens.boxShadowForViewSwitcherWhenSelected, ";" + ("" ), "" )];
};

const ViewSwitcherButton = props => {
  var _ref, _props$label;
  return jsxRuntime.jsxs(AccessibleButton__default["default"], {
    label: (_ref = (_props$label = props.label) !== null && _props$label !== void 0 ? _props$label : props.children) !== null && _ref !== void 0 ? _ref : '',
    css: getButtonStyles(props.isDisabled, props.isActive, props.isCondensed, props.isFirstButton, props.isLastButton),
    onClick: props.onClick,
    isDisabled: props.isDisabled,
    children: [props.icon && jsxRuntime.jsx("span", {
      css: /*#__PURE__*/react.css("margin:", props.children ? designSystem.designTokens.marginForViewSwitcherIcon : '0', ";display:flex;align-items:center;justify-content:center;" + ("" ), "" ),
      children: /*#__PURE__*/react$1.cloneElement(props.icon, {
        size: props.isCondensed ? 'medium' : 'big'
      })
    }), props.children && jsxRuntime.jsx("span", {
      children: props.children
    })]
  });
};
ViewSwitcherButton.propTypes = {};
ViewSwitcherButton.displayName = 'ViewSwitcherButton';
var Button = ViewSwitcherButton;

var _ref = {
  name: "zjik7",
  styles: "display:flex"
} ;
const ViewSwitcher$1 = props => {
  const isControlledComponent = !isNil__default["default"](props.selectedValue);
  !isNil__default["default"](props.onChange);
  /**
   * This internal state is only used when the component is uncontrolled ("defaultSelected" is passed).
   * When controlled ("selectedValue") the state will not be updated or used.
   */
  const _useState = react$1.useState(props.defaultSelected),
    _useState2 = _slicedToArray(_useState, 2),
    selectedButton = _useState2[0],
    setSelectedButton = _useState2[1];
  const viewSwitcherElements = _mapInstanceProperty__default["default"](react$1.Children).call(react$1.Children, props.children, (child, index) => {
    if (child && /*#__PURE__*/react$1.isValidElement(child) && child.type.displayName === Button.displayName) {
      var _length;
      const isButtonActive = (isControlledComponent ? props.selectedValue : selectedButton) === child.props.value;
      const clonedChild = /*#__PURE__*/react$1.cloneElement(child, {
        onClick: () => {
          if (!isControlledComponent) {
            setSelectedButton(child.props.value);
          }
          if (!isButtonActive) {
            var _child$props$onClick, _child$props, _props$onChange;
            (_child$props$onClick = (_child$props = child.props).onClick) === null || _child$props$onClick === void 0 ? void 0 : _child$props$onClick.call(_child$props, child.props.value);
            (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, child.props.value);
          }
        },
        isCondensed: props.isCondensed,
        isActive: isButtonActive,
        isFirstButton: index === 0,
        isLastButton: index === ((_length = props.children.length) !== null && _length !== void 0 ? _length : 1) - 1
      });
      return clonedChild;
    }
    return child;
  });
  return jsxRuntime.jsx("div", {
    css: _ref,
    children: viewSwitcherElements
  });
};
ViewSwitcher$1.propTypes = {};
var Group = ViewSwitcher$1;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

const ViewSwitcher = {
  Group,
  Button
};

exports["default"] = ViewSwitcher;
exports.version = version;
