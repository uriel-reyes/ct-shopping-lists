/// <reference types="react" />
import type { TDataCell } from './cell';
type TCellInner = {
    shouldClipContent?: boolean;
} & Pick<TDataCell, 'verticalCellAlignment' | 'horizontalCellAlignment' | 'isTruncated' | 'isCondensed'>;
declare const getPaddingStyle: (props: TCellInner) => import("@emotion/utils").SerializedStyles;
declare const getHorizontalAlignmentStyle: (props: TCellInner) => import("@emotion/utils").SerializedStyles;
declare const getVerticalAlignmentStyle: (props: TCellInner) => import("@emotion/utils").SerializedStyles;
declare const getCellInnerStyles: (props: TCellInner) => (string | import("@emotion/utils").SerializedStyles)[];
declare const CellInner: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & {
    shouldClipContent?: boolean | undefined;
} & Pick<TDataCell, "isCondensed" | "horizontalCellAlignment" | "verticalCellAlignment" | "isTruncated">, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
declare const BaseCell: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & {
    shouldClipContent?: boolean | undefined;
} & Pick<TDataCell, "shouldIgnoreRowClick" | "shouldRenderBottomBorder">, import("react").DetailedHTMLProps<import("react").TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, {}>;
type TBaseFooterCell = {
    disableFooterStickiness?: boolean;
    numberOfColumns?: number;
};
declare const BaseFooterCell: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & TBaseFooterCell, import("react").DetailedHTMLProps<import("react").TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, {}>;
declare const RowExpandCollapseButton: import("@emotion/styled").StyledComponent<import("@commercetools-uikit/accessible-button").TAccessibleButtonProps & import("react").RefAttributes<HTMLButtonElement> & {
    theme?: import("@emotion/react").Theme | undefined;
} & Pick<TDataCell, "isRowCollapsed">, {}, {}>;
export { getPaddingStyle, getVerticalAlignmentStyle, getHorizontalAlignmentStyle, getCellInnerStyles, BaseCell, CellInner, BaseFooterCell, RowExpandCollapseButton, };
