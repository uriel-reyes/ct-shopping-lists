'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var _flatMapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/flat-map');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _findInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/find');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var reactIntl = require('react-intl');
var isEmpty = require('lodash/isEmpty');
var has = require('lodash/has');
var Select = require('react-select');
var Constraints = require('@commercetools-uikit/constraints');
var selectUtils = require('@commercetools-uikit/select-utils');
var utils = require('@commercetools-uikit/utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _flatMapInstanceProperty__default = /*#__PURE__*/_interopDefault(_flatMapInstanceProperty);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _findInstanceProperty__default = /*#__PURE__*/_interopDefault(_findInstanceProperty);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var isEmpty__default = /*#__PURE__*/_interopDefault(isEmpty);
var has__default = /*#__PURE__*/_interopDefault(has);
var Select__default = /*#__PURE__*/_interopDefault(Select);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context5, _context6; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context5 = ownKeys(Object(source), !0)).call(_context5, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context6 = ownKeys(Object(source))).call(_context6, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const customizedComponents = {
  DropdownIndicator: selectUtils.DropdownIndicator,
  ClearIndicator: selectUtils.ClearIndicator,
  MultiValueRemove: selectUtils.TagRemove
};
const defaultProps = {
  appearance: 'default',
  maxMenuHeight: 220,
  menuPortalZIndex: 1,
  options: []
};
const isOptionObject = option => option.options !== undefined;
const SelectInput = props => {
  var _context, _context2, _context3;
  const intl = reactIntl.useIntl();
  selectUtils.warnIfMenuPortalPropsAreMissing({
    menuPortalZIndex: props.menuPortalZIndex,
    menuPortalTarget: props.menuPortalTarget,
    componentName: 'SelectInput'
  });
  const placeholder = props.placeholder || intl.formatMessage(selectUtils.messages.placeholder);
  // Options can be grouped as
  //   const colourOptions = [{ value: 'green', label: 'Green' }];
  //   const flavourOptions = [{ value: 'vanilla', label: 'Vanilla' }];
  //   const groupedOptions = [
  //     { label: 'Colours', options: colourOptions },
  //     { label: 'Flavours', options: flavourOptions },
  //   ];
  // So we "ungroup" the options by merging them all into one list first.
  const optionsWithoutGroups = _flatMapInstanceProperty__default["default"](_context = props.options).call(_context, option => {
    if (isOptionObject(option)) {
      return option.options;
    }
    return option;
  });
  const selectedOptions = props.isMulti ? _filterInstanceProperty__default["default"](_context2 = _mapInstanceProperty__default["default"](_context3 = props.value || []
  // Pass the options in the order selected by the use, so that the
  // sorting is not lost
  ).call(_context3, value => _findInstanceProperty__default["default"](optionsWithoutGroups).call(optionsWithoutGroups, option => option.value === value))).call(_context2, Boolean) : _findInstanceProperty__default["default"](optionsWithoutGroups).call(optionsWithoutGroups, option => has__default["default"](option, 'value') && option.value === props.value) || null;
  return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
    max: props.horizontalConstraint,
    children: jsxRuntime.jsx("div", _objectSpread(_objectSpread({}, utils.filterDataAttributes(props)), {}, {
      children: jsxRuntime.jsx(Select__default["default"], {
        "aria-label": props['aria-label'],
        "aria-labelledby": props['aria-labelledby'],
        "aria-invalid": props['aria-invalid'],
        "aria-errormessage": props['aria-errormessage'],
        autoFocus: props.isAutofocussed,
        backspaceRemovesValue: props.isReadOnly ? false : props.backspaceRemovesValue,
        components: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, customizedComponents), props.iconLeft && !props.isMulti ? selectUtils.customComponentsWithIcons : {}), props.isReadOnly ? {
          Input: ownProps => jsxRuntime.jsx(Select.components.Input, _objectSpread(_objectSpread({}, ownProps), {}, {
            readOnly: true
          }))
        } : {}), props.components),
        menuIsOpen: props.isReadOnly ? false : props.menuIsOpen,
        styles: selectUtils.createSelectStyles({
          hasWarning: props.hasWarning,
          hasError: props.hasError,
          showOptionGroupDivider: props.showOptionGroupDivider,
          menuPortalZIndex: props.menuPortalZIndex,
          appearance: props.appearance,
          isDisabled: props.isDisabled,
          isReadOnly: props.isReadOnly,
          iconLeft: props.iconLeft,
          isMulti: props.isMulti,
          hasValue: !isEmpty__default["default"](selectedOptions),
          controlShouldRenderValue: props.controlShouldRenderValue,
          horizontalConstraint: props.horizontalConstraint
        }),
        filterOption: props.filterOption
        // react-select uses "id" (for the container) and "inputId" (for the input),
        // but we use "id" (for the input) and "containerId" (for the container)
        // instead.
        // This makes it easier to less confusing to use with <label />s.
        ,
        id: props.containerId,
        inputId: props.id,
        inputValue: props.inputValue,
        isClearable: props.isReadOnly ? false : props.isClearable,
        isDisabled: props.isDisabled,
        isOptionDisabled: props.isOptionDisabled
        // @ts-ignore
        ,
        isReadOnly: props.isReadOnly,
        isMulti: props.isMulti,
        isSearchable: props.isSearchable,
        maxMenuHeight: props.maxMenuHeight,
        menuPortalTarget: props.menuPortalTarget,
        menuShouldBlockScroll: props.menuShouldBlockScroll,
        closeMenuOnSelect: props.closeMenuOnSelect,
        name: props.name,
        noOptionsMessage: props.noOptionsMessage || (_ref => {
          let inputValue = _ref.inputValue;
          return !inputValue || inputValue === '' ? intl.formatMessage(selectUtils.messages.noOptionsMessageWithoutInputValue) : intl.formatMessage(selectUtils.messages.noOptionsMessageWithInputValue, {
            inputValue
          });
        }),
        onBlur: typeof props.onBlur === 'function' ? () => {
          const event = {
            target: {
              id: props.id,
              name: (() => {
                if (!props.isMulti) return props.name;
                // We append the ".0" to make Formik set the touched
                // state as an array instead of a boolean only.
                // Otherwise the shapes would clash on submission, as
                // Formik will create an array on submission anyways.
                return props.name ? "".concat(props.name, ".0") : undefined;
              })()
            },
            persist: () => {}
          };
          props.onBlur && props.onBlur(event);
        } : undefined,
        onChange: nextSelectedOptions => {
          // nextSelectedOptions is either an array, or a single option, or null
          // depending on whether we're in multi-mode or not (isMulti)
          let value = null;
          if (props.isMulti) {
            if (nextSelectedOptions) {
              var _context4;
              value = _mapInstanceProperty__default["default"](_context4 = nextSelectedOptions).call(_context4, option => option.value);
            } else {
              value = [];
            }
          } else if (nextSelectedOptions) {
            value = nextSelectedOptions.value;
          }
          props.onChange && props.onChange({
            target: {
              id: props.id,
              name: props.name,
              value
            },
            persist: () => {}
          });
        },
        onFocus: props.onFocus,
        onInputChange: props.onInputChange,
        options: props.options,
        placeholder: placeholder,
        tabIndex: props.tabIndex,
        tabSelectsValue: props.tabSelectsValue,
        value: selectedOptions,
        iconLeft: props.iconLeft,
        controlShouldRenderValue: props.controlShouldRenderValue,
        menuPlacement: "auto"
      })
    }))
  });
};
SelectInput.propTypes = {};
SelectInput.displayName = 'SelectInput';
SelectInput.defaultProps = defaultProps;

/**
 * Expose static helper methods.
 */

// Both "true" and an empty array [] represent a touched state.
SelectInput.isTouched = touched => Boolean(touched);

/**
 * Expose react-select components for customization purposes.
 */

SelectInput.ClearIndicator = customizedComponents.ClearIndicator;
SelectInput.Control = Select.components.Control;
SelectInput.CrossIcon = Select.components.CrossIcon;
SelectInput.DownChevron = Select.components.DownChevron;
SelectInput.DropdownIndicator = customizedComponents.DropdownIndicator;
SelectInput.Group = Select.components.Group;
SelectInput.GroupHeading = Select.components.GroupHeading;
SelectInput.IndicatorSeparator = Select.components.IndicatorSeparator;
SelectInput.IndicatorsContainer = Select.components.IndicatorsContainer;
SelectInput.Input = Select.components.Input;
SelectInput.LoadingIndicator = Select.components.LoadingIndicator;
SelectInput.LoadingMessage = Select.components.LoadingMessage;
SelectInput.Menu = Select.components.Menu;
SelectInput.MenuList = Select.components.MenuList;
SelectInput.MenuPortal = Select.components.MenuPortal;
SelectInput.MultiValue = Select.components.MultiValue;
SelectInput.MultiValueContainer = Select.components.MultiValueContainer;
SelectInput.MultiValueLabel = Select.components.MultiValueLabel;
SelectInput.MultiValueRemove = customizedComponents.MultiValueRemove;
SelectInput.NoOptionsMessage = Select.components.NoOptionsMessage;
SelectInput.Option = Select.components.Option;
SelectInput.Placeholder = Select.components.Placeholder;
SelectInput.SelectContainer = Select.components.SelectContainer;
SelectInput.SingleValue = Select.components.SingleValue;
SelectInput.ValueContainer = Select.components.ValueContainer;
var SelectInput$1 = SelectInput;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = SelectInput$1;
exports.version = version;
