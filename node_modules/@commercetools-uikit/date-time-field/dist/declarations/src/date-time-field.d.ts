import { Component, type FocusEventHandler, type ReactNode, type MouseEvent, type KeyboardEvent, type ReactElement } from 'react';
type TErrorRenderer = (key: string, error?: boolean) => ReactNode;
type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
type TCustomEvent = {
    target: {
        id?: string;
        name?: string;
        value?: string;
    };
};
export type TDateTimeFieldProps = {
    id?: string;
    horizontalConstraint?: 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    errors?: TFieldErrors;
    renderError?: TErrorRenderer;
    isRequired?: boolean;
    touched?: boolean;
    name?: string;
    value: string;
    onChange?: (event: TCustomEvent) => void;
    onBlur?: (event: TCustomEvent) => void;
    onFocus?: FocusEventHandler;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    placeholder?: string;
    timeZone: string;
    title: ReactNode;
    hint?: ReactNode;
    description?: ReactNode;
    onInfoButtonClick?: (event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>) => void;
    hintIcon?: ReactElement;
    badge?: ReactNode;
};
type TDateTimeFieldState = Pick<TDateTimeFieldProps, 'id'>;
declare class DateTimeField extends Component<TDateTimeFieldProps, TDateTimeFieldState> {
    static displayName: string;
    static defaultProps: Pick<TDateTimeFieldProps, 'horizontalConstraint'>;
    state: {
        id: string | undefined;
    };
    static getDerivedStateFromProps: (props: TDateTimeFieldProps, state: TDateTimeFieldState) => {
        id: string;
    };
    static toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export default DateTimeField;
