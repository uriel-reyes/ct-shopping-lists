'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactIntl = require('react-intl');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var designSystem = require('@commercetools-uikit/design-system');
require('@commercetools-uikit/utils');
var _objectWithoutProperties = require('@babel/runtime-corejs3/helpers/objectWithoutProperties');
var react = require('@emotion/react');
var icons = require('@commercetools-uikit/icons');
var jsxRuntime = require('@emotion/react/jsx-runtime');
var omit = require('lodash/omit');
var AccessibleButton = require('@commercetools-uikit/accessible-button');
var reactSelect = require('react-select');
var react$1 = require('react');
var Spacings = require('@commercetools-uikit/spacings');
var Text = require('@commercetools-uikit/text');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var omit__default = /*#__PURE__*/_interopDefault(omit);
var AccessibleButton__default = /*#__PURE__*/_interopDefault(AccessibleButton);
var Spacings__default = /*#__PURE__*/_interopDefault(Spacings);
var Text__default = /*#__PURE__*/_interopDefault(Text);

var messages$1 = reactIntl.defineMessages({
  clearButtonLabel: {
    id: 'UIKit.ClearButton.clearButtonLabel',
    description: 'Label for the clear button',
    defaultMessage: 'Clear'
  }
});

const _excluded = ["ref", "onMouseDown"];
function ownKeys$6(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$6(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$6(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const ClearIndicator = props => {
  const intl = reactIntl.useIntl();
  const getStyles = props.getStyles,
    _props$innerProps = props.innerProps,
    ref = _props$innerProps.ref,
    onMouseDown = _props$innerProps.onMouseDown,
    restInnerProps = _objectWithoutProperties(_props$innerProps, _excluded);
  return jsxRuntime.jsx("button", _objectSpread$6(_objectSpread$6({}, restInnerProps), {}, {
    ref: ref,
    css: /*#__PURE__*/react.css("border:none;cursor:pointer;background:none;box-sizing:border-box;text-decoration:none;fill:", designSystem.designTokens.fontColorForClearInputIcon, ";:hover svg *{fill:", designSystem.designTokens.fontColorForClearInputIconWhenHovered, ";}" + ("" ), "" ),
    style: getStyles('clearIndicator', props),
    title: intl.formatMessage(messages$1.clearButtonLabel),
    "aria-label": intl.formatMessage(messages$1.clearButtonLabel)
    // overriding the default `aria-hidden` prop value to make the component accessible by keyboard - https://github.com/JedWatson/react-select/issues/4793
    ,
    "aria-hidden": false
    // only onMouseDown and onTouchEnd event handlers are passed by `react-select` to the component by default, which makes it not accessible by keyboard
    ,
    onClick: onMouseDown,
    children: jsxRuntime.jsx(icons.CloseIcon, {
      size: "medium"
    })
  }));
};
ClearIndicator.displayName = 'ClearIndicator';
var ClearIndicator$1 = ClearIndicator;

function ownKeys$5(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$5(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$5(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
// see https://github.com/JedWatson/react-select/blob/44e9fb29b230e49a754a2f0d6f30c2250aa45009/src/components/MultiValue.js
const removeProps = ['onClick', 'onTouchEnd', 'onMouseDown'];
const TagRemove = props => {
  const isDisabled = Boolean(props.selectProps.isDisabled || props.selectProps.isReadOnly);
  // when the select input is disabled,
  // we don't want to spread the removeProp event handlers
  const innerProps = isDisabled ? omit__default["default"](props.innerProps, removeProps) : props.innerProps;
  return jsxRuntime.jsx(AccessibleButton__default["default"], _objectSpread$5(_objectSpread$5({
    label: "Remove"
  }, innerProps), {}, {
    children: jsxRuntime.jsx(icons.CloseBoldIcon, {
      color: isDisabled ? 'neutral60' : 'solid',
      size: "medium"
    })
  }));
};
TagRemove.displayName = 'TagRemove';
var TagRemove$1 = TagRemove;

function ownKeys$4(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$4(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$4(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const DropdownIndicator = props => jsxRuntime.jsx(reactSelect.components.DropdownIndicator, _objectSpread$4(_objectSpread$4({}, props), {}, {
  children: jsxRuntime.jsx(icons.CaretDownIcon, {
    color: props.isDisabled ? 'neutral60' : undefined,
    size: "small"
  })
}));
DropdownIndicator.displayName = 'DropdownIndicator';
var DropdownIndicator$1 = DropdownIndicator;

function ownKeys$3(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$3(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$3(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const SearchIconDropdownIndicator = props => {
  return jsxRuntime.jsx(reactSelect.components.DropdownIndicator, _objectSpread$3(_objectSpread$3({}, props), {}, {
    children: jsxRuntime.jsx(icons.SearchIcon, {
      color: 'neutral60',
      size: "big"
    })
  }));
};
SearchIconDropdownIndicator.displayName = 'SearchIconDropdownIndicator';
var SearchIconDropdownIndicator$1 = SearchIconDropdownIndicator;

function ownKeys$2(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$2(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$2(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const getDefaultComponent = type => {
  if (type === 'singleValue') return reactSelect.components.SingleValue;
  if (type === 'placeholder') return reactSelect.components.Placeholder;
  return null;
};
const WrapperWithIcon = props => {
  const DefaultComponent = getDefaultComponent(props.type);
  if (!DefaultComponent) {
    return null;
  }
  return jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [props.selectProps.iconLeft && /*#__PURE__*/react$1.cloneElement(props.selectProps.iconLeft, {
      size: 'big'
    }), jsxRuntime.jsx("span", {
      // react-select uses absolute positioning for the SingleValue/Placeholder
      // the icon has a fixed size of 24px (== SpacingsXl), therefore we can use a fixed margin
      // spacingsXs is the margin between the icon and value
      css: /*#__PURE__*/react.css("margin-left:", designSystem.designTokens.marginLeftForSelectInputIcon, ";" + ("" ), "" ),
      children: jsxRuntime.jsx(DefaultComponent, _objectSpread$2({}, props))
    })]
  });
};
WrapperWithIcon.displayName = 'WrapperWithIcon';
var WrapperWithIcon$1 = WrapperWithIcon;
const customComponents = {
  SingleValue: props => jsxRuntime.jsx(WrapperWithIcon, _objectSpread$2(_objectSpread$2({}, props), {}, {
    type: "singleValue"
  })),
  Placeholder: props => jsxRuntime.jsx(WrapperWithIcon, _objectSpread$2(_objectSpread$2({}, props), {}, {
    type: "placeholder"
  }))
};

const NO_VALUE_FALLBACK = '- - - -';
const SELECT_DROPDOWN_OPTION_TYPES = {
  SINGLE_PROPERTY: 'single-property',
  DOUBLE_PROPERTY: 'double-property',
  MULTIPLE_PROPERTIES: 'multiple-properties'
};

function ownKeys$1(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var _context, _context2; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$1(Object(source), !0)).call(_context, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$1(Object(source))).call(_context2, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const MultiplePropertiesSelectInputOption = props => {
  const data = props.data;
  const noValueFallback = props.noValueFallback || NO_VALUE_FALLBACK;
  return jsxRuntime.jsx(reactSelect.components.Option, _objectSpread$1(_objectSpread$1({}, props), {}, {
    children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
      scale: "xs",
      children: [jsxRuntime.jsx(Text__default["default"].Detail, {
        fontWeight: "bold",
        children: (data === null || data === void 0 ? void 0 : data.label) || noValueFallback
      }), jsxRuntime.jsxs(Text__default["default"].Detail, {
        children: ["Key: ", (data === null || data === void 0 ? void 0 : data.key) || noValueFallback]
      }), jsxRuntime.jsxs(Text__default["default"].Detail, {
        children: ["ID: ", (data === null || data === void 0 ? void 0 : data.id) || noValueFallback]
      })]
    })
  }));
};
MultiplePropertiesSelectInputOption.displayName = 'MultiplePropertiesSelectInputOption';
const DoublePropertySelectInputOption = props => {
  const data = props.data;
  const noValueFallback = props.noValueFallback || NO_VALUE_FALLBACK;
  return jsxRuntime.jsx(reactSelect.components.Option, _objectSpread$1(_objectSpread$1({}, props), {}, {
    children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
      scale: "xs",
      children: [jsxRuntime.jsx(Text__default["default"].Detail, {
        fontWeight: "bold",
        children: (data === null || data === void 0 ? void 0 : data.label) || noValueFallback
      }), jsxRuntime.jsxs(Text__default["default"].Detail, {
        children: ["Key: ", (data === null || data === void 0 ? void 0 : data.key) || noValueFallback]
      })]
    })
  }));
};
DoublePropertySelectInputOption.displayName = 'DoublePropertySelectInputOption';
const CustomSelectInputOption = props => {
  var _props$optionInnerPro;
  const noValueFallback = props.noValueFallback || NO_VALUE_FALLBACK;
  switch (props.optionType) {
    case SELECT_DROPDOWN_OPTION_TYPES.MULTIPLE_PROPERTIES:
      return jsxRuntime.jsx(MultiplePropertiesSelectInputOption, _objectSpread$1(_objectSpread$1({}, props.optionInnerProps), {}, {
        noValueFallback: noValueFallback
      }));
    case SELECT_DROPDOWN_OPTION_TYPES.DOUBLE_PROPERTY:
      return jsxRuntime.jsx(DoublePropertySelectInputOption, _objectSpread$1(_objectSpread$1({}, props.optionInnerProps), {}, {
        noValueFallback: noValueFallback
      }));
    default:
      return jsxRuntime.jsx(reactSelect.components.Option, _objectSpread$1(_objectSpread$1({}, props.optionInnerProps), {}, {
        children: jsxRuntime.jsx(Text__default["default"].Detail, {
          children: ((_props$optionInnerPro = props.optionInnerProps.data) === null || _props$optionInnerPro === void 0 ? void 0 : _props$optionInnerPro.label) || noValueFallback
        })
      }));
  }
};
CustomSelectInputOption.displayName = 'CustomSelectInputOption';

var messages = reactIntl.defineMessages({
  createLabel: {
    id: 'UIKit.CreatableSelectInput.createLabel',
    description: 'Text of dropdown when creating option',
    defaultMessage: 'Create "{inputValue}"'
  },
  noOptionsMessageWithInputValue: {
    id: 'UIKit.SelectInput.noOptionsMessageWithInputValue',
    description: 'Text of dropdown when no options match search text',
    defaultMessage: 'No options'
  },
  noOptionsMessageWithoutInputValue: {
    id: 'UIKit.SelectInput.noOptionsMessageWithoutInputValue',
    description: 'Text of dropdown when no options exist',
    defaultMessage: 'No options'
  },
  placeholder: {
    id: 'UIKit.SelectInput.placeholder',
    description: 'Default input placeholder text',
    defaultMessage: 'Select...'
  },
  loadingOptions: {
    id: 'UIKit.SelectInput.loadingOptions',
    description: 'Default input loading text',
    defaultMessage: 'Loading...'
  }
});

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context8, _context9; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context8 = ownKeys(Object(source), !0)).call(_context8, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context9 = ownKeys(Object(source))).call(_context9, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const getInputBackgroundColor = props => {
  if (props.appearance === 'quiet') {
    return designSystem.designTokens.backgroundColorForInputAsQuiet;
  }
  if (props.isDisabled) {
    return designSystem.designTokens.backgroundColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.backgroundColorForInputWhenReadonly;
  }
  return designSystem.designTokens.backgroundColorForInput;
};
const getInputBorderColor = (props, state) => {
  if (props.appearance === 'quiet') {
    return designSystem.designTokens.borderColorForInputAsQuiet;
  }
  if (props.isDisabled) {
    return designSystem.designTokens.borderColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.borderColorForSelectInputWhenReadonly;
  }
  if (state.isFocused) {
    return designSystem.designTokens.borderColorForInputWhenFocused;
  }
  if (props.hasError) {
    return designSystem.designTokens.borderColorForInputWhenError;
  }
  if (props.hasWarning) {
    return designSystem.designTokens.borderColorForInputWhenWarning;
  }
  return designSystem.designTokens.borderColorForInput;
};
const getHoverInputBorderColor = props => {
  if (props.appearance === 'quiet') {
    return designSystem.designTokens.borderColorForInputAsQuiet;
  }
  if (props.isDisabled) {
    return designSystem.designTokens.borderColorForInputWhenDisabled;
  }
  if (props.isReadOnly) {
    return designSystem.designTokens.borderColorForSelectInputWhenReadonly;
  }
  if (props.hasError) {
    return designSystem.designTokens.borderColorForInputWhenError;
  }
  if (props.hasWarning) {
    return designSystem.designTokens.borderColorForInputWhenWarning;
  }
  return designSystem.designTokens.borderColorForInputWhenHovered;
};
const controlStyles = props => (base, state) => {
  var _context;
  return _objectSpread(_objectSpread(_objectSpread({}, base), {}, {
    fontSize: designSystem.designTokens.fontSizeForInput,
    backgroundColor: getInputBackgroundColor(props),
    borderColor: getInputBorderColor(props, state),
    borderWidth: (() => {
      if (props.hasWarning || props.hasError || state.isFocused || props.appearance === 'quiet') {
        return designSystem.designTokens.borderWidthForSelectInput;
      }
      return designSystem.designTokens.borderWidth1;
    })(),
    borderRadius: designSystem.designTokens.borderRadiusForInput,
    minHeight: designSystem.designTokens.heightForInput,
    cursor: (() => {
      if (props.isDisabled) return 'not-allowed';
      if (props.isReadOnly) return 'default';
      return 'pointer';
    })(),
    padding: "0 ".concat(designSystem.designTokens.paddingForInput),
    transition: _concatInstanceProperty__default["default"](_context = "border-color ".concat(designSystem.designTokens.transitionStandard, ",\n    box-shadow ")).call(_context, designSystem.designTokens.transitionStandard),
    outline: 0,
    boxShadow: 'none'
  }, props.horizontalConstraint === 'auto' ? {
    display: 'inline-flex'
  } : {}), {}, {
    '&:focus-within': {
      borderColor: (() => {
        if (!props.isDisabled && !props.isReadOnly) return designSystem.designTokens.borderColorForInputWhenFocused;
        return null;
      })()
    },
    '&:hover': {
      borderColor: getHoverInputBorderColor(props),
      backgroundColor: (() => {
        if (!props.isDisabled && !props.isReadOnly) {
          if (props.appearance === 'quiet') {
            return designSystem.designTokens.backgroundColorForInputAsQuietWhenHovered;
          } else {
            return designSystem.designTokens.backgroundColorForInputWhenHovered;
          }
        }
        return null;
      })()
    },
    pointerEvents: 'auto',
    color: props.isDisabled || props.isReadOnly ? designSystem.designTokens.fontColorForInputWhenDisabled : base.fontColorForInput
  });
};
const menuStyles = props => base => {
  return _objectSpread(_objectSpread({}, base), {}, {
    border: "1px solid ".concat(designSystem.designTokens.borderColorForSelectInputMenu),
    borderRadius: designSystem.designTokens.borderRadiusForInput,
    backgroundColor: designSystem.designTokens.backgroundColorForInput,
    boxShadow: designSystem.designTokens.shadowForSelectInputMenu,
    fontSize: designSystem.designTokens.fontSizeForInput,
    fontFamily: 'inherit',
    margin: "".concat(designSystem.designTokens.spacing10, " 0 0 0"),
    borderColor: (() => {
      if (props.hasError) return designSystem.designTokens.borderColorForSelectInputMenuWhenError;
      if (props.hasWarning) return designSystem.designTokens.borderColorForSelectInputMenuWhenWarning;
      return base.borderColorForInput;
    })(),
    width: props.horizontalConstraint === 'auto' ? 'auto' : '100%'
  });
};
const indicatorSeparatorStyles = () => base => {
  return _objectSpread(_objectSpread({}, base), {}, {
    display: 'none',
    margin: '0',
    padding: '0',
    marginLeft: designSystem.designTokens.spacing10
  });
};
const dropdownIndicatorStyles = props => base => {
  return _objectSpread(_objectSpread({}, base), {}, {
    color: designSystem.designTokens.fontColorForInput,
    margin: '0',
    padding: '0',
    marginLeft: designSystem.designTokens.marginForSelectInputIcon,
    fill: (() => {
      if (props.isDisabled || props.isReadOnly) return designSystem.designTokens.fontColorForInputWhenDisabled;
      if (props.hasError) return designSystem.designTokens.fontColorForSelectInputIconWhenError;
      if (props.hasWarning) return designSystem.designTokens.fontColorForSelectInputIconWhenWarning;
      return designSystem.designTokens.fontColorForSelectInputIcon;
    })()
  });
};
const clearIndicatorStyles = () => base => _objectSpread(_objectSpread({}, base), {}, {
  display: 'flex',
  padding: 0,
  marginLeft: designSystem.designTokens.marginForSelectInputIcon
});
const menuListStyles = () => base => {
  return _objectSpread(_objectSpread({}, base), {}, {
    padding: designSystem.designTokens.paddingForSelectInputMenu,
    borderRadius: designSystem.designTokens.borderRadiusForInput,
    backgroundColor: designSystem.designTokens.backgroundColorForInput
  });
};
const optionStyles = () => (base, state) => {
  var _context2, _context3;
  return _objectSpread(_objectSpread({}, base), {}, {
    transition: _concatInstanceProperty__default["default"](_context2 = _concatInstanceProperty__default["default"](_context3 = "border-color ".concat(designSystem.designTokens.transitionStandard, ",\n      background-color ")).call(_context3, designSystem.designTokens.transitionStandard, ",\n      color ")).call(_context2, designSystem.designTokens.transitionStandard),
    paddingLeft: designSystem.designTokens.paddingLeftForSelectInputOptions,
    paddingRight: designSystem.designTokens.paddingRightForSelectInputOptions,
    paddingTop: designSystem.designTokens.paddingTopForSelectInputOptions,
    paddingBottom: designSystem.designTokens.paddingBottomForSelectInputOptions,
    lineHeight: designSystem.designTokens.lineHeightForSelectInputOptions,
    color: (() => {
      if (!state.isDisabled) return designSystem.designTokens.fontColorForInput;
      if (state.isSelected) return designSystem.designTokens.fontColorForInput;
      return base.color;
    })(),
    backgroundColor: (() => {
      if (state.isSelected) return designSystem.designTokens.backgroundColorForInputWhenSelected;
      if (state.isFocused) return designSystem.designTokens.backgroundColorForSelectInputOptionWhenHovered;
      return base.backgroundColor;
    })(),
    '&:active': {
      color: (() => {
        if (!state.isDisabled) return designSystem.designTokens.fontColorForInput;
        return base.color;
      })(),
      backgroundColor: designSystem.designTokens.backgroundColorForInputWhenActive
    }
  });
};
const placeholderStyles = props => base => {
  return _objectSpread(_objectSpread({}, base), {}, {
    color: (() => {
      if (props.appearance === 'quiet' && !props.isReadOnly && !props.isDisabled) {
        if (props.hasError) {
          return designSystem.designTokens.fontColorForSelectInputWhenError;
        }
        if (props.hasWarning) {
          return designSystem.designTokens.fontColorForSelectInputWhenWarning;
        }
      }
      return designSystem.designTokens.placeholderFontColorForInput;
    })(),
    width: '100%',
    overflow: 'hidden',
    whiteSpace: 'nowrap',
    textOverflow: 'ellipsis',
    fill: props.isDisabled || props.isReadOnly ? designSystem.designTokens.fontColorForInputWhenDisabled : base.fontColorForInput
  });
};
const valueContainerStyles = props => base => {
  var _props$controlShouldR;
  return _objectSpread(_objectSpread({}, base), {}, {
    padding: '0',
    backgroundColor: 'none',
    overflow: 'hidden',
    // Display property should be grid when isMulti and has no value so the Placeholder component is positioned correctly with the Input
    // Display property should be Flex when there is an iconLeft, also when the input has some values when isMulti.
    // See PR from react select for more insight https://github.com/JedWatson/react-select/pull/4833
    display: props.iconLeft && !props.isMulti || props.isMulti && props.hasValue && ((_props$controlShouldR = props.controlShouldRenderValue) !== null && _props$controlShouldR !== void 0 ? _props$controlShouldR : true) ? 'flex' : 'grid',
    fill: props.isDisabled || props.isReadOnly ? designSystem.designTokens.fontColorForInputWhenDisabled : designSystem.designTokens.fontColorForSelectInputIcon
  });
};
const singleValueStyles = props => base => {
  return _objectSpread(_objectSpread({}, base), {}, {
    color: (() => {
      if (props.isDisabled) {
        return designSystem.designTokens.fontColorForInputWhenDisabled;
      }
      if (props.isReadOnly) {
        return designSystem.designTokens.fontColorForInputWhenReadonly;
      }
      if (props.hasError) return designSystem.designTokens.fontColorForSelectInputWhenError;
      if (props.hasWarning) return designSystem.designTokens.fontColorForSelectInputWhenWarning;
      return designSystem.designTokens.fontColorForInput;
    })()
  });
};
const groupStyles = props => base => {
  return _objectSpread(_objectSpread({}, base), {}, {
    padding: 0,
    '&:not(:first-of-type)': {
      borderTop: props.showOptionGroupDivider ? "1px solid ".concat(designSystem.designTokens.borderColorForGroupHeadingSelectInputOptions) : base.borderTop
    }
  });
};
const groupHeadingStyles = () => base => {
  var _context4;
  return _objectSpread(_objectSpread({}, base), {}, {
    color: designSystem.designTokens.fontColorForInputWhenReadonly,
    fontSize: designSystem.designTokens.fontSizeSmall,
    textTransform: 'none',
    fontWeight: 'bold',
    padding: _concatInstanceProperty__default["default"](_context4 = "".concat(designSystem.designTokens.spacing20, " ")).call(_context4, designSystem.designTokens.paddingForGroupHeadingSelectInputOptions),
    '&:empty': {
      padding: 0
    }
  });
};
const containerStyles = () => (base, state) => {
  return _objectSpread(_objectSpread({}, base), {}, {
    fontFamily: 'inherit',
    minHeight: designSystem.designTokens.sizeHeightInput,
    borderRadius: designSystem.designTokens.borderRadiusForInput,
    borderColor: state.isFocused ? designSystem.designTokens.borderColorForInputWhenFocused : base.borderColor,
    boxShadow: state.isFocused ? 'none' : base.boxShadow
  });
};
const indicatorsContainerStyles = () => () => ({
  background: 'none',
  display: 'flex',
  alignItems: 'center'
});
const menuPortalStyles = props => base => _objectSpread(_objectSpread({}, base), {}, {
  zIndex: props.menuPortalZIndex
});
const multiValueStyles = () => base => {
  return _objectSpread(_objectSpread({}, base), {}, {
    display: 'flex',
    alignItems: designSystem.designTokens.alignItemsForSelectInputTag,
    height: designSystem.designTokens.heightForSelectInputTag,
    backgroundColor: designSystem.designTokens.backgroundColorForTag,
    padding: '0',
    border: designSystem.designTokens.borderForSelectInputTag
  });
};
const multiValueLabelStyles = props => base => {
  var _context5, _context6;
  return _objectSpread(_objectSpread({}, base), {}, {
    fontSize: designSystem.designTokens.fontSizeForSelectInputTag,
    color: (() => {
      if (props.isDisabled) return designSystem.designTokens.fontColorForInputWhenDisabled;
      if (props.isReadOnly) return designSystem.designTokens.fontColorForInputWhenReadonly;
      return base.color;
    })(),
    padding: _concatInstanceProperty__default["default"](_context5 = "".concat(designSystem.designTokens.spacing10, " ")).call(_context5, designSystem.designTokens.spacing20),
    borderRadius: _concatInstanceProperty__default["default"](_context6 = "".concat(designSystem.designTokens.borderRadiusForTag, " 0 0 ")).call(_context6, designSystem.designTokens.borderRadiusForTag),
    border: 'none',
    borderWidth: '1px 0 1px 1px',
    '&:last-child': {
      borderRadius: designSystem.designTokens.borderRadiusForTag,
      borderWidth: designSystem.designTokens.borderWidth1
    }
  });
};
const multiValueRemoveStyles = props => (base, state) => {
  var _context7;
  return _objectSpread(_objectSpread({}, base), {}, {
    borderColor: designSystem.designTokens.borderColorForTag,
    padding: "0 ".concat(designSystem.designTokens.spacing10),
    borderRadius: _concatInstanceProperty__default["default"](_context7 = "0 ".concat(designSystem.designTokens.borderRadiusForTag, " ")).call(_context7, designSystem.designTokens.borderRadiusForTag, " 0"),
    borderStyle: 'none',
    borderWidth: '0',
    pointerEvents: state.isDisabled || props.isReadOnly ? 'none' : base.pointerEvents,
    backgroundColor: designSystem.designTokens.backgroundColorForTag,
    'svg *': {
      fill: props.isReadOnly ? designSystem.designTokens.fontColorForInputWhenReadonly : ''
    },
    '&:hover, &:focus': {
      borderColor: designSystem.designTokens.borderColorForTagWarning,
      backgroundColor: designSystem.designTokens.backgroundColorForTag,
      'svg *': {
        fill: designSystem.designTokens.fontColorForClearInputIconWhenHovered
      }
    }
  });
};
function createSelectStyles(props) {
  return {
    control: controlStyles(props),
    menu: menuStyles(props),
    indicatorSeparator: indicatorSeparatorStyles(),
    dropdownIndicator: dropdownIndicatorStyles(props),
    clearIndicator: clearIndicatorStyles(),
    menuList: menuListStyles(),
    menuPortal: menuPortalStyles(props),
    multiValue: multiValueStyles(),
    multiValueLabel: multiValueLabelStyles(props),
    multiValueRemove: multiValueRemoveStyles(props),
    indicatorsContainer: indicatorsContainerStyles(),
    option: optionStyles(),
    placeholder: placeholderStyles(props),
    valueContainer: valueContainerStyles(props),
    singleValue: singleValueStyles(props),
    group: groupStyles(props),
    groupHeading: groupHeadingStyles(),
    container: containerStyles()
  };
}

const warnIfMenuPortalPropsAreMissing = props => {
  if (typeof props.menuPortalZIndex !== 'undefined' && props.menuPortalZIndex !== 1 // 1 is the value passed in default props
  ) ;
};

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports.ClearIndicator = ClearIndicator$1;
exports.CustomSelectInputOption = CustomSelectInputOption;
exports.DoublePropertySelectInputOption = DoublePropertySelectInputOption;
exports.DropdownIndicator = DropdownIndicator$1;
exports.MultiplePropertiesSelectInputOption = MultiplePropertiesSelectInputOption;
exports.SELECT_DROPDOWN_OPTION_TYPES = SELECT_DROPDOWN_OPTION_TYPES;
exports.SearchIconDropdownIndicator = SearchIconDropdownIndicator$1;
exports.TagRemove = TagRemove$1;
exports.ValueWrapperWithIcon = WrapperWithIcon$1;
exports.createSelectStyles = createSelectStyles;
exports.customComponentsWithIcons = customComponents;
exports.messages = messages;
exports.version = version;
exports.warnIfMenuPortalPropsAreMissing = warnIfMenuPortalPropsAreMissing;
