import { Component, type ReactElement, type ReactNode } from 'react';
import type { GroupBase, ActionMeta } from 'react-select';
import type { CreatableProps } from 'react-select/creatable';
type ReactSelectCreatableProps = CreatableProps<unknown, boolean, GroupBase<unknown>>;
type TErrorRenderer = (key: string, error?: boolean) => ReactNode;
type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
type TValue = {
    value: string;
    label?: ReactNode;
};
type TOptions = TValue[] | {
    options: TValue[];
}[];
type TCustomEvent = {
    target: {
        id?: string;
        name?: string;
        value?: unknown;
    };
    persist?: () => void;
};
export type TCreatableSelectFieldProps = {
    id?: ReactSelectCreatableProps['inputId'];
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    errors?: TFieldErrors;
    renderError?: TErrorRenderer;
    isRequired?: boolean;
    touched?: boolean[] | boolean;
    'aria-label'?: ReactSelectCreatableProps['aria-label'];
    'aria-labelledby'?: ReactSelectCreatableProps['aria-label'];
    isAutofocussed?: boolean;
    backspaceRemovesValue?: ReactSelectCreatableProps['backspaceRemovesValue'];
    components?: ReactSelectCreatableProps['components'];
    filterOption?: ReactSelectCreatableProps['filterOption'];
    containerId?: ReactSelectCreatableProps['id'];
    isClearable?: ReactSelectCreatableProps['isClearable'];
    isDisabled?: ReactSelectCreatableProps['isDisabled'];
    isReadOnly?: ConstrainBooleanParameters;
    isOptionDisabled?: ReactSelectCreatableProps['isOptionDisabled'];
    isMulti?: ReactSelectCreatableProps['isMulti'];
    isSearchable?: ReactSelectCreatableProps['isSearchable'];
    hasWarning?: boolean;
    maxMenuHeight?: ReactSelectCreatableProps['maxMenuHeight'];
    menuPortalTarget?: ReactSelectCreatableProps['menuPortalTarget'];
    menuPortalZIndex?: number;
    menuShouldBlockScroll?: ReactSelectCreatableProps['menuShouldBlockScroll'];
    name?: ReactSelectCreatableProps['name'];
    noOptionsMessage?: ReactSelectCreatableProps['noOptionsMessage'];
    onBlur?: (event: TCustomEvent) => void;
    onChange?: (event: TCustomEvent, info: ActionMeta<unknown>) => void;
    onFocus?: ReactSelectCreatableProps['onFocus'];
    onInputChange?: ReactSelectCreatableProps['onInputChange'];
    options?: TOptions;
    placeholder?: ReactSelectCreatableProps['placeholder'];
    tabIndex?: ReactSelectCreatableProps['tabIndex'];
    tabSelectsValue?: ReactSelectCreatableProps['tabSelectsValue'];
    value?: ReactSelectCreatableProps['value'];
    showOptionGroupDivider?: boolean;
    allowCreateWhileLoading?: ReactSelectCreatableProps['allowCreateWhileLoading'];
    formatCreateLabel?: ReactSelectCreatableProps['formatCreateLabel'];
    isValidNewOption?: ReactSelectCreatableProps['isValidNewOption'];
    getNewOptionData?: ReactSelectCreatableProps['getNewOptionData'];
    onCreateOption?: ReactSelectCreatableProps['onCreateOption'];
    createOptionPosition?: ReactSelectCreatableProps['createOptionPosition'];
    title: string | ReactNode;
    hint?: string | ReactNode;
    description?: string | ReactNode;
    onInfoButtonClick?: () => void;
    hintIcon?: ReactElement;
    badge?: ReactNode;
    iconLeft?: ReactNode;
};
type TCreatableSelectFieldState = Pick<TCreatableSelectFieldProps, 'id'>;
export default class CreatableSelectField extends Component<TCreatableSelectFieldProps, TCreatableSelectFieldState> {
    static displayName: string;
    static defaultProps: {
        horizontalConstraint: string;
    };
    state: {
        id: string | undefined;
    };
    static getDerivedStateFromProps: (props: TCreatableSelectFieldProps, state: TCreatableSelectFieldState) => {
        id: string;
    };
    static toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export {};
