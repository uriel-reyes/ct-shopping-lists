import { type ChangeEventHandler, type FocusEventHandler, type ReactElement, type ReactNode, Component } from 'react';
export type TFieldErrors = Record<string, boolean>;
type TCustomFormErrors<Values> = {
    [K in keyof Values]?: TFieldErrors;
};
export type TMultiTextFieldProps = {
    id?: string;
    horizontalConstraint?: 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    renderError?: TErrorRenderer;
    isRequired?: boolean;
    touched?: boolean;
    autoComplete?: string;
    name?: string;
    value: string;
    onChange?: ChangeEventHandler<HTMLTextAreaElement>;
    onBlur?: FocusEventHandler<HTMLTextAreaElement>;
    onFocus?: FocusEventHandler<HTMLTextAreaElement>;
    isAutofocussed?: boolean;
    defaultExpandMultilineText?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    placeholder?: string;
    errors?: TFieldErrors;
    title?: string | ReactNode;
    hint?: string | ReactNode;
    description?: string | ReactNode;
    onInfoButtonClick?: () => void;
    hintIcon?: ReactElement;
    badge?: string;
};
type TState = {
    id?: string;
};
type TErrorRenderer = (key: string, error?: boolean) => ReactNode;
declare class MultilineTextField extends Component<TMultiTextFieldProps, TState> {
    static displayName: string;
    static defaultProps: Pick<TMultiTextFieldProps, 'horizontalConstraint'>;
    state: {
        id: string | undefined;
    };
    static getDerivedStateFromProps: (props: TMultiTextFieldProps, state: TState) => {
        id: string;
    };
    static toFieldErrors<FormValues>(errors: unknown): TCustomFormErrors<FormValues>;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export default MultilineTextField;
