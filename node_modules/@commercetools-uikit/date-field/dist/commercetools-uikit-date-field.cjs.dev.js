'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _classCallCheck = require('@babel/runtime-corejs3/helpers/classCallCheck');
var _createClass = require('@babel/runtime-corejs3/helpers/createClass');
var _inherits = require('@babel/runtime-corejs3/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime-corejs3/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime-corejs3/helpers/getPrototypeOf');
var _pt = require('prop-types');
var _someInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/some');
var _Object$values = require('@babel/runtime-corejs3/core-js-stable/object/values');
var _Reflect$construct = require('@babel/runtime-corejs3/core-js-stable/reflect/construct');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var react = require('react');
var utils = require('@commercetools-uikit/utils');
var Constraints = require('@commercetools-uikit/constraints');
var Spacings = require('@commercetools-uikit/spacings');
var FieldLabel = require('@commercetools-uikit/field-label');
var DateInput = require('@commercetools-uikit/date-input');
var FieldErrors = require('@commercetools-uikit/field-errors');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var _someInstanceProperty__default = /*#__PURE__*/_interopDefault(_someInstanceProperty);
var _Object$values__default = /*#__PURE__*/_interopDefault(_Object$values);
var _Reflect$construct__default = /*#__PURE__*/_interopDefault(_Reflect$construct);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);
var Spacings__default = /*#__PURE__*/_interopDefault(Spacings);
var FieldLabel__default = /*#__PURE__*/_interopDefault(FieldLabel);
var DateInput__default = /*#__PURE__*/_interopDefault(DateInput);
var FieldErrors__default = /*#__PURE__*/_interopDefault(FieldErrors);

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context2, _context3; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct__default["default"](Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct__default["default"]) return false; if (_Reflect$construct__default["default"].sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct__default["default"](Boolean, [], function () {})); return true; } catch (e) { return false; } }
const sequentialId = utils.createSequentialId('date-field-');
const sequentialErrorsId = utils.createSequentialId('date-field-error-')();

// Similar shape of `FormikErrors` but values are `TFieldErrors` objects.

const hasErrors = errors => {
  var _context;
  return errors && _someInstanceProperty__default["default"](_context = _Object$values__default["default"](errors)).call(_context, Boolean);
};
let DateField = /*#__PURE__*/function (_Component) {
  _inherits(DateField, _Component);
  var _super = _createSuper(DateField);
  function DateField() {
    var _this;
    _classCallCheck(this, DateField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call(this, ...args);
    _this.state = {
      // We generate an id in case no id is provided by the parent to attach the
      // label to the input component.
      id: _this.props.id
    };
    return _this;
  }
  _createClass(DateField, [{
    key: "render",
    value: function render() {
      const hasError = this.props.touched && hasErrors(this.props.errors);
      if (!this.props.isReadOnly) {
        process.env.NODE_ENV !== "production" ? utils.warning(typeof this.props.onChange === 'function', 'DateField: `onChange` is required when field is not read only.') : void 0;
      }
      if (this.props.hintIcon) {
        process.env.NODE_ENV !== "production" ? utils.warning(typeof this.props.hint === 'string' || /*#__PURE__*/react.isValidElement(this.props.hint), 'DateField: `hint` is required to be string or ReactNode if hintIcon is present') : void 0;
      }
      return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
        max: this.props.horizontalConstraint,
        children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
          scale: "xs",
          children: [jsxRuntime.jsx(FieldLabel__default["default"], {
            title: this.props.title,
            hint: this.props.hint,
            description: this.props.description,
            onInfoButtonClick: this.props.onInfoButtonClick,
            hintIcon: this.props.hintIcon,
            badge: this.props.badge,
            hasRequiredIndicator: this.props.isRequired,
            htmlFor: this.state.id
          }), jsxRuntime.jsx(DateInput__default["default"], _objectSpread(_objectSpread({
            id: this.state.id,
            name: this.props.name,
            value: this.props.value,
            onBlur: this.props.onBlur,
            onFocus: this.props.onFocus,
            minValue: this.props.minValue,
            maxValue: this.props.maxValue,
            onChange: this.props.onChange,
            isDisabled: this.props.isDisabled,
            isReadOnly: this.props.isReadOnly,
            hasError: hasError,
            placeholder: this.props.placeholder,
            horizontalConstraint: "scale"
          }, utils.filterDataAttributes(this.props)), {}, {
            /* ARIA */
            "aria-invalid": hasError,
            "aria-errormessage": sequentialErrorsId
          })), jsxRuntime.jsx(FieldErrors__default["default"], {
            id: sequentialErrorsId,
            errors: this.props.errors,
            isVisible: hasError,
            renderError: this.props.renderError
          })]
        })
      });
    }
  }], [{
    key: "toFieldErrors",
    value:
    /**
     * Use this function to convert the Formik `errors` object type to
     * our custom field errors type.
     * This is primarly useful when using TypeScript.
     */
    function toFieldErrors(errors) {
      return errors;
    }
  }]);
  return DateField;
}(react.Component);
DateField.displayName = 'DateField';
DateField.defaultProps = {
  horizontalConstraint: 'scale'
};
DateField.getDerivedStateFromProps = (props, state) => ({
  id: utils.getFieldId(props, state, sequentialId)
});
DateField.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt__default["default"].string,
  horizontalConstraint: _pt__default["default"].oneOf([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'scale', 'auto']),
  errors: _pt__default["default"].objectOf(_pt__default["default"].bool),
  renderError: _pt__default["default"].func,
  isRequired: _pt__default["default"].bool,
  touched: _pt__default["default"].bool,
  name: _pt__default["default"].string,
  value: _pt__default["default"].string.isRequired,
  onChange: _pt__default["default"].func,
  onBlur: _pt__default["default"].func,
  onFocus: _pt__default["default"].func,
  isDisabled: _pt__default["default"].bool,
  isReadOnly: _pt__default["default"].bool,
  placeholder: _pt__default["default"].string,
  minValue: _pt__default["default"].string,
  maxValue: _pt__default["default"].string,
  title: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].node]).isRequired,
  hint: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].node]),
  description: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].node]),
  onInfoButtonClick: _pt__default["default"].func,
  hintIcon: _pt__default["default"].element,
  badge: _pt__default["default"].node
} : {};
var DateField$1 = DateField;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = DateField$1;
exports.version = version;
