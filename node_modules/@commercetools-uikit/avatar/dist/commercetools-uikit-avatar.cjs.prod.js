'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var _sliceInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/slice');
var _trimInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/trim');
var _concatInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/concat');
var _parseInt = require('@babel/runtime-corejs3/core-js-stable/parse-int');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var react$1 = require('react');
var react = require('@emotion/react');
var utils = require('@commercetools-uikit/utils');
var designSystem = require('@commercetools-uikit/design-system');
var startCase = require('lodash/startCase');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _sliceInstanceProperty__default = /*#__PURE__*/_interopDefault(_sliceInstanceProperty);
var _trimInstanceProperty__default = /*#__PURE__*/_interopDefault(_trimInstanceProperty);
var _concatInstanceProperty__default = /*#__PURE__*/_interopDefault(_concatInstanceProperty);
var _parseInt__default = /*#__PURE__*/_interopDefault(_parseInt);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var startCase__default = /*#__PURE__*/_interopDefault(startCase);

const fontSizeMap = {
  s: {
    narrow: designSystem.designTokens.fontSize30,
    wide: designSystem.designTokens.fontSize10
  },
  m: {
    narrow: designSystem.designTokens.fontSize50,
    wide: designSystem.designTokens.fontSize30
  },
  l: {
    narrow: designSystem.designTokens.fontSize90,
    wide: designSystem.designTokens.fontSize80
  }
};
const widthSizeMap = {
  s: '32px',
  m: '40px',
  l: '100px'
};
const colorsMap = {
  accent: {
    normal: designSystem.designTokens.colorAccent90,
    highlighted: designSystem.designTokens.colorAccent95
  },
  purple: {
    normal: designSystem.designTokens.colorPurple90,
    highlighted: designSystem.designTokens.colorPurple95
  },
  turquoise: {
    normal: designSystem.designTokens.colorTurquoise90,
    highlighted: designSystem.designTokens.colorTurquoise95
  },
  brown: {
    normal: designSystem.designTokens.colorBrown90,
    highlighted: designSystem.designTokens.colorBrown95
  }
};
const getFontSize = (avatarInitials, avatarSize) => {
  const widthCode = avatarInitials.length > 1 ? 'wide' : 'narrow';
  return fontSizeMap[avatarSize][widthCode];
};
const getWidthSize = avatarSize => widthSizeMap[avatarSize];
const getBackgroundColor = function () {
  let avatarColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'accent';
  let isHighlighted = arguments.length > 1 ? arguments[1] : undefined;
  return colorsMap[avatarColor][isHighlighted ? 'highlighted' : 'normal'];
};
const getForegroundColor = avatarColor => {
  return avatarColor === 'accent' ? designSystem.designTokens.colorAccent40 : designSystem.designTokens["color".concat(startCase__default["default"](avatarColor), "50")];
};
const getAvatarStyles = avatarProps => {
  const avatarSize = getWidthSize(avatarProps.size);
  const backgroundColor = getBackgroundColor(avatarProps.color, avatarProps.isHighlighted);
  const foregroundColor = getForegroundColor(avatarProps.color);
  return /*#__PURE__*/react.css("align-items:center;background-color:", backgroundColor, ";border-radius:100%;font-size:", designSystem.designTokens.fontSizeDefault, ";font-weight:", designSystem.designTokens.fontWeight600, ";color:", foregroundColor, ";display:flex;justify-content:center;overflow:hidden;position:relative;fill:", foregroundColor, ";height:", avatarSize, ";width:", avatarSize, ";" + ("" ), "" );
};

function ownKeys(object, enumerableOnly) { var keys = _Object$keys__default["default"](object); if (_Object$getOwnPropertySymbols__default["default"]) { var symbols = _Object$getOwnPropertySymbols__default["default"](object); enumerableOnly && (symbols = _filterInstanceProperty__default["default"](symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor__default["default"](object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context4, _context5; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty__default["default"](_context4 = ownKeys(Object(source), !0)).call(_context4, function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](target, _Object$getOwnPropertyDescriptors__default["default"](source)) : _forEachInstanceProperty__default["default"](_context5 = ownKeys(Object(source))).call(_context5, function (key) { _Object$defineProperty__default["default"](target, key, _Object$getOwnPropertyDescriptor__default["default"](source, key)); }); } return target; }
const defaultProps = {
  firstName: '',
  lastName: '',
  isHighlighted: false,
  size: 's',
  color: 'accent'
};
const getFirstChar = str => {
  var _context;
  return typeof str === 'string' ? _sliceInstanceProperty__default["default"](_context = _trimInstanceProperty__default["default"](str).call(str)).call(_context, 0, 1).toUpperCase() : '';
};
const getInitialsFromName = _ref => {
  var _context2;
  let _ref$firstName = _ref.firstName,
    firstName = _ref$firstName === void 0 ? '' : _ref$firstName,
    _ref$lastName = _ref.lastName,
    lastName = _ref$lastName === void 0 ? '' : _ref$lastName;
  return _concatInstanceProperty__default["default"](_context2 = "".concat(getFirstChar(firstName))).call(_context2, getFirstChar(lastName));
};
/**
 * `s` - defines the size. We want a bigger one if the user is on a retina-display
 * `d` - defines the default if the user is not known to Gravatar. It returns a blank image,
 *        which let the initials underneath shine through
 *
 * @see: https://de.gravatar.com/site/implement/images/
 */
const createGravatarImgUrl = function (md5Hash, size) {
  var _context3;
  let multiplyBy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  const imageSize = getWidthSize(size);
  const sizeAsInt = _parseInt__default["default"](imageSize.replace(/px$/, ''), 10);
  const gravatarSize = sizeAsInt * multiplyBy;
  return _concatInstanceProperty__default["default"](_context3 = "https://www.gravatar.com/avatar/".concat(md5Hash, "?s=")).call(_context3, gravatarSize, "&d=blank");
};
const GravatarImg = props => jsxRuntime.jsx("img", {
  css: /*#__PURE__*/react.css("background-position:center center;background-size:contain;position:relative;z-index:10;", props.isHighlighted ? 'opacity: 0.7;' : '', ";" + ("" ), "" ),
  src: createGravatarImgUrl(props.gravatarHash, props.size),
  srcSet: ["".concat(createGravatarImgUrl(props.gravatarHash, props.size), " 1x"), "".concat(createGravatarImgUrl(props.gravatarHash, props.size, 2), " 2x")].join(',')
  /**
   * Based on https://www.w3.org/WAI/tutorials/images/decision-tree/:
   * image contributes meaning to the current page or context and it shows content that is redundant to real text nearby
   */,
  alt: ""
});
GravatarImg.displayName = 'GravatarImg';
const Initials = props => {
  const initialsFromName = getInitialsFromName({
    firstName: props.firstName,
    lastName: props.lastName
  });
  return jsxRuntime.jsx("div", {
    css: /*#__PURE__*/react.css("position:absolute;font-size:", getFontSize(initialsFromName, props.size), ";" + ("" ), "" ),
    children: initialsFromName
  });
};
Initials.displayName = 'Initials';
const Avatar = props => {
  const avatarSize = getWidthSize(props.size);
  const foregroundColor = getForegroundColor(props.color);
  return jsxRuntime.jsx("div", _objectSpread(_objectSpread({
    css: getAvatarStyles(props)
  }, utils.filterDataAttributes(props)), {}, {
    children: props !== null && props !== void 0 && props.icon ? jsxRuntime.jsx("div", {
      css: /*#__PURE__*/react.css("height:calc(", avatarSize, " - 45%);width:calc(", avatarSize, " - 45%);" + ("" ), "" ),
      children: /*#__PURE__*/react$1.cloneElement(props === null || props === void 0 ? void 0 : props.icon, {
        size: 'scale',
        color: foregroundColor,
        backgroundcolor: foregroundColor
      })
    }) : jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [jsxRuntime.jsx(GravatarImg, {
        gravatarHash: props.gravatarHash,
        size: props.size,
        isHighlighted: props.isHighlighted
      }), jsxRuntime.jsx(Initials, {
        size: props.size,
        firstName: props.firstName,
        lastName: props.lastName
      })]
    })
  }));
};
Avatar.propTypes = {};
Avatar.displayName = 'Avatar';
Avatar.defaultProps = defaultProps;
var Avatar$1 = Avatar;

// NOTE: This string will be replaced on build time with the package version.
var version = "16.11.0";

exports["default"] = Avatar$1;
exports.version = version;
